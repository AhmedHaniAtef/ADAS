
ADAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08010b78  08010b78  00011b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010fa0  08010fa0  00012680  2**0
                  CONTENTS
  4 .ARM          00000008  08010fa0  08010fa0  00011fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010fa8  08010fa8  00012680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010fa8  08010fa8  00011fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010fac  08010fac  00011fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000680  20000000  08010fb0  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008d3c  20000680  08011630  00012680  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200093bc  08011630  000133bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012680  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003364c  00000000  00000000  000126b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000074a8  00000000  00000000  00045cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021b8  00000000  00000000  0004d1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019ac  00000000  00000000  0004f360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214f8  00000000  00000000  00050d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036069  00000000  00000000  00072204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1cf5  00000000  00000000  000a826d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149f62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e00  00000000  00000000  00149fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00152da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000680 	.word	0x20000680
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010b5c 	.word	0x08010b5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000684 	.word	0x20000684
 80001dc:	08010b5c 	.word	0x08010b5c

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <ACC_relative_task>:
 * 
 * @param p_ACC pointer to the object used
 * @return app_status_t status of operation
 */
app_status_t ACC_relative_task(ACC_t *p_ACC)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	75fb      	strb	r3, [r7, #23]
    if (NULL == p_ACC)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d102      	bne.n	8000e60 <ACC_relative_task+0x18>
    {
        l_AppStatus = APP_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	75fb      	strb	r3, [r7, #23]
 8000e5e:	e069      	b.n	8000f34 <ACC_relative_task+0xec>
    }
    else
    {
        float_t l_Vx = 0.0f;
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]

        float_t l_SetPointDistance = 50.0f * min(Car_Wanted_Speed, Car_Max_Forced_Speed) + PID_MIN_SP;
 8000e66:	4b36      	ldr	r3, [pc, #216]	@ (8000f40 <ACC_relative_task+0xf8>)
 8000e68:	edd3 7a00 	vldr	s15, [r3]
 8000e6c:	4b35      	ldr	r3, [pc, #212]	@ (8000f44 <ACC_relative_task+0xfc>)
 8000e6e:	ed93 7a00 	vldr	s14, [r3]
 8000e72:	eef0 0a47 	vmov.f32	s1, s14
 8000e76:	eeb0 0a67 	vmov.f32	s0, s15
 8000e7a:	f00f f827 	bl	800fecc <min>
 8000e7e:	eef0 7a40 	vmov.f32	s15, s0
 8000e82:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8000f48 <ACC_relative_task+0x100>
 8000e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e8a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000e8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e92:	edc7 7a04 	vstr	s15, [r7, #16]

        l_AppStatus |= ACC_action_task_x(p_ACC, &l_Vx, l_SetPointDistance);
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	ed97 0a04 	vldr	s0, [r7, #16]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 f907 	bl	80010b4 <ACC_action_task_x>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	7dfb      	ldrb	r3, [r7, #23]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	75fb      	strb	r3, [r7, #23]

        if ((value_in_range(Car_Wanted_direction, 0, 45) || value_in_range(Car_Wanted_direction, 315, 360))
 8000eb0:	4b26      	ldr	r3, [pc, #152]	@ (8000f4c <ACC_relative_task+0x104>)
 8000eb2:	edd3 7a00 	vldr	s15, [r3]
 8000eb6:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 8000f50 <ACC_relative_task+0x108>
 8000eba:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8000f54 <ACC_relative_task+0x10c>
 8000ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec2:	f00e ffdf 	bl	800fe84 <value_in_range>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10d      	bne.n	8000ee8 <ACC_relative_task+0xa0>
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <ACC_relative_task+0x104>)
 8000ece:	edd3 7a00 	vldr	s15, [r3]
 8000ed2:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 8000f58 <ACC_relative_task+0x110>
 8000ed6:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8000f5c <ACC_relative_task+0x114>
 8000eda:	eeb0 0a67 	vmov.f32	s0, s15
 8000ede:	f00e ffd1 	bl	800fe84 <value_in_range>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d022      	beq.n	8000f2e <ACC_relative_task+0xe6>
            && (Car_Wanted_Speed != 0))
 8000ee8:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <ACC_relative_task+0xf8>)
 8000eea:	edd3 7a00 	vldr	s15, [r3]
 8000eee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef6:	d01a      	beq.n	8000f2e <ACC_relative_task+0xe6>
        {
            Car_Max_Forced_Speed = Max_speed_responsible(Car_Max_Forced_Speed - l_Vx, ACC);
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <ACC_relative_task+0xfc>)
 8000efa:	ed93 7a00 	vldr	s14, [r3]
 8000efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f06:	2000      	movs	r0, #0
 8000f08:	eeb0 0a67 	vmov.f32	s0, s15
 8000f0c:	f000 f878 	bl	8001000 <Max_speed_responsible>
 8000f10:	eef0 7a40 	vmov.f32	s15, s0
 8000f14:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <ACC_relative_task+0xfc>)
 8000f16:	edc3 7a00 	vstr	s15, [r3]
            l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_strafe);
 8000f1a:	4911      	ldr	r1, [pc, #68]	@ (8000f60 <ACC_relative_task+0x118>)
 8000f1c:	4811      	ldr	r0, [pc, #68]	@ (8000f64 <ACC_relative_task+0x11c>)
 8000f1e:	f001 f85f 	bl	8001fe0 <CAN_send_message>
 8000f22:	4603      	mov	r3, r0
 8000f24:	461a      	mov	r2, r3
 8000f26:	7dfb      	ldrb	r3, [r7, #23]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	75fb      	strb	r3, [r7, #23]
 8000f2c:	e002      	b.n	8000f34 <ACC_relative_task+0xec>
        }
        else
        {
            Car_Max_Forced_Speed = DEFUALT_ROBOT_MAX_SPEED;
 8000f2e:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <ACC_relative_task+0xfc>)
 8000f30:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <ACC_relative_task+0x120>)
 8000f32:	601a      	str	r2, [r3, #0]
        }
    }
    return l_AppStatus;
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200006dc 	.word	0x200006dc
 8000f44:	20000014 	.word	0x20000014
 8000f48:	42480000 	.word	0x42480000
 8000f4c:	200006e0 	.word	0x200006e0
 8000f50:	42340000 	.word	0x42340000
 8000f54:	00000000 	.word	0x00000000
 8000f58:	43b40000 	.word	0x43b40000
 8000f5c:	439d8000 	.word	0x439d8000
 8000f60:	200001cc 	.word	0x200001cc
 8000f64:	20000018 	.word	0x20000018
 8000f68:	3ee66666 	.word	0x3ee66666

08000f6c <ACC_task_init>:
 * 
 * @param p_ACC pointer to the object used
 * @return app_status_t status of operation
 */
app_status_t ACC_task_init(ACC_t *p_ACC)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]
    if ((NULL == p_ACC))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d102      	bne.n	8000f84 <ACC_task_init+0x18>
    {
        l_AppStatus = APP_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	e02b      	b.n	8000fdc <ACC_task_init+0x70>
    }
    else
    {
        PID_Init(&p_ACC->PID_Vx, Vx_Kp, Vx_Ki, Vx_Kd, Vx_N, p_ACC->dt, Vx_MIN_OUT, Vx_MAX_OUT);
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8000f8c:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 8000f90:	eeff 2a00 	vmov.f32	s5, #240	@ 0xbf800000 -1.0
 8000f94:	eeb0 2a67 	vmov.f32	s4, s15
 8000f98:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8000fe8 <ACC_task_init+0x7c>
 8000f9c:	eeb3 1a05 	vmov.f32	s2, #53	@ 0x41a80000  21.0
 8000fa0:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8000fec <ACC_task_init+0x80>
 8000fa4:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000fa8:	4610      	mov	r0, r2
 8000faa:	f00e fe59 	bl	800fc60 <PID_Init>
        PID_Init(&p_ACC->PID_Vy, Vy_Kp, Vy_Ki, Vy_Kd, Vy_N, p_ACC->dt, Vy_MIN_OUT, Vy_MAX_OUT);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8000fba:	ed9f 3a0d 	vldr	s6, [pc, #52]	@ 8000ff0 <ACC_task_init+0x84>
 8000fbe:	eddf 2a0d 	vldr	s5, [pc, #52]	@ 8000ff4 <ACC_task_init+0x88>
 8000fc2:	eeb0 2a67 	vmov.f32	s4, s15
 8000fc6:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8000ff8 <ACC_task_init+0x8c>
 8000fca:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8000ffc <ACC_task_init+0x90>
 8000fce:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8000fd2:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8000ff8 <ACC_task_init+0x8c>
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	f00e fe42 	bl	800fc60 <PID_Init>
    }
    return l_AppStatus;
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	41b66666 	.word	0x41b66666
 8000fec:	00000000 	.word	0x00000000
 8000ff0:	3f19999a 	.word	0x3f19999a
 8000ff4:	bf19999a 	.word	0xbf19999a
 8000ff8:	42c80000 	.word	0x42c80000
 8000ffc:	3f4ccccd 	.word	0x3f4ccccd

08001000 <Max_speed_responsible>:
 * @param p_MaxSpeed the limited max speed 
 * @param p_ID the id of request
 * @return the maximum speed should the car move with
 */
float_t Max_speed_responsible(float_t p_MaxSpeed, Max_Speed_ID_t p_ID)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	ed87 0a01 	vstr	s0, [r7, #4]
 800100a:	4603      	mov	r3, r0
 800100c:	70fb      	strb	r3, [r7, #3]
    float_t l_MaxSpeed = DEFUALT_ROBOT_MAX_SPEED;
 800100e:	4b26      	ldr	r3, [pc, #152]	@ (80010a8 <Max_speed_responsible+0xa8>)
 8001010:	60fb      	str	r3, [r7, #12]
    if (p_MaxSpeed < 0)
 8001012:	edd7 7a01 	vldr	s15, [r7, #4]
 8001016:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800101a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101e:	d507      	bpl.n	8001030 <Max_speed_responsible+0x30>
    	FeatureMaxSpeed[p_ID] = 0.0f;
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	4a22      	ldr	r2, [pc, #136]	@ (80010ac <Max_speed_responsible+0xac>)
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	e015      	b.n	800105c <Max_speed_responsible+0x5c>
    else if (p_MaxSpeed > DEFUALT_ROBOT_MAX_SPEED)
 8001030:	edd7 7a01 	vldr	s15, [r7, #4]
 8001034:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80010b0 <Max_speed_responsible+0xb0>
 8001038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800103c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001040:	dd06      	ble.n	8001050 <Max_speed_responsible+0x50>
    	FeatureMaxSpeed[p_ID] = DEFUALT_ROBOT_MAX_SPEED;
 8001042:	78fb      	ldrb	r3, [r7, #3]
 8001044:	4a19      	ldr	r2, [pc, #100]	@ (80010ac <Max_speed_responsible+0xac>)
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	4a17      	ldr	r2, [pc, #92]	@ (80010a8 <Max_speed_responsible+0xa8>)
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e005      	b.n	800105c <Max_speed_responsible+0x5c>
    else
    	FeatureMaxSpeed[p_ID] = p_MaxSpeed;
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	4a16      	ldr	r2, [pc, #88]	@ (80010ac <Max_speed_responsible+0xac>)
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	601a      	str	r2, [r3, #0]

    for (uint8_t i = 0; i < 5; i++)
 800105c:	2300      	movs	r3, #0
 800105e:	72fb      	strb	r3, [r7, #11]
 8001060:	e015      	b.n	800108e <Max_speed_responsible+0x8e>
    {
        if (l_MaxSpeed >= FeatureMaxSpeed[i])
 8001062:	7afb      	ldrb	r3, [r7, #11]
 8001064:	4a11      	ldr	r2, [pc, #68]	@ (80010ac <Max_speed_responsible+0xac>)
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	edd3 7a00 	vldr	s15, [r3]
 800106e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107a:	db05      	blt.n	8001088 <Max_speed_responsible+0x88>
            l_MaxSpeed = FeatureMaxSpeed[i];
 800107c:	7afb      	ldrb	r3, [r7, #11]
 800107e:	4a0b      	ldr	r2, [pc, #44]	@ (80010ac <Max_speed_responsible+0xac>)
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < 5; i++)
 8001088:	7afb      	ldrb	r3, [r7, #11]
 800108a:	3301      	adds	r3, #1
 800108c:	72fb      	strb	r3, [r7, #11]
 800108e:	7afb      	ldrb	r3, [r7, #11]
 8001090:	2b04      	cmp	r3, #4
 8001092:	d9e6      	bls.n	8001062 <Max_speed_responsible+0x62>
    }
    return l_MaxSpeed;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	ee07 3a90 	vmov	s15, r3
}
 800109a:	eeb0 0a67 	vmov.f32	s0, s15
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	3ee66666 	.word	0x3ee66666
 80010ac:	20000000 	.word	0x20000000
 80010b0:	3ee66666 	.word	0x3ee66666

080010b4 <ACC_action_task_x>:
 * 
 * @param p_ACC pointer to the object used
 * @return app_status_t status of operation
 */
static app_status_t ACC_action_task_x(ACC_t *p_ACC, float_t *p_RetVelocity, float_t p_DisSetPoint)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	ed87 0a01 	vstr	s0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	75fb      	strb	r3, [r7, #23]
    if (NULL == p_ACC)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <ACC_action_task_x+0x1e>
    {
        l_AppStatus = APP_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	75fb      	strb	r3, [r7, #23]
 80010d0:	e01d      	b.n	800110e <ACC_action_task_x+0x5a>
    }
    else
    {
        float_t l_Vx = PID_Compute(&p_ACC->PID_Vx, p_DisSetPoint/100, *p_ACC->Front_UL/100);
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d8:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001118 <ACC_action_task_x+0x64>
 80010dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8001118 <ACC_action_task_x+0x64>
 80010ec:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80010f0:	eef0 0a66 	vmov.f32	s1, s13
 80010f4:	eeb0 0a47 	vmov.f32	s0, s14
 80010f8:	4610      	mov	r0, r2
 80010fa:	f00e fdea 	bl	800fcd2 <PID_Compute>
 80010fe:	ed87 0a04 	vstr	s0, [r7, #16]
        // p_ACC->PID_Vx_Output = l_Vx * 0.1;
        // *p_RetVelocity = l_Vx * 0.1;
        p_ACC->PID_Vx_Output = l_Vx;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	66da      	str	r2, [r3, #108]	@ 0x6c
        *p_RetVelocity = l_Vx;
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	601a      	str	r2, [r3, #0]
    }
    return l_AppStatus;
 800110e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	42c80000 	.word	0x42c80000

0800111c <ALC_handle>:
 * @param p_AvailableLane represents the available lanes which car can change to
 * @param p_CurrentPosition represents the position of the can in the lane
 * @return app_status_t status of operation
 */
app_status_t ALC_handle(Lane_Received_t p_AvailableLane, Lane_Received_t p_CurrentPosition)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	460a      	mov	r2, r1
 8001126:	71fb      	strb	r3, [r7, #7]
 8001128:	4613      	mov	r3, r2
 800112a:	71bb      	strb	r3, [r7, #6]
    app_status_t l_AppStatus = APP_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]
    CurrentPosition = p_CurrentPosition;
 8001130:	4a17      	ldr	r2, [pc, #92]	@ (8001190 <ALC_handle+0x74>)
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	7013      	strb	r3, [r2, #0]
    switch (p_CurrentPosition)
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	3b05      	subs	r3, #5
 800113a:	2b04      	cmp	r3, #4
 800113c:	d820      	bhi.n	8001180 <ALC_handle+0x64>
 800113e:	a201      	add	r2, pc, #4	@ (adr r2, 8001144 <ALC_handle+0x28>)
 8001140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001144:	08001159 	.word	0x08001159
 8001148:	08001161 	.word	0x08001161
 800114c:	08001179 	.word	0x08001179
 8001150:	08001169 	.word	0x08001169
 8001154:	08001171 	.word	0x08001171
    {
    case DRIFT_LEFT:
        AvailableLanes = LANE_ERROR;
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <ALC_handle+0x78>)
 800115a:	2204      	movs	r2, #4
 800115c:	701a      	strb	r2, [r3, #0]
        break;
 800115e:	e010      	b.n	8001182 <ALC_handle+0x66>

    case DRIFT_RIGHT:
        AvailableLanes = LANE_ERROR;
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <ALC_handle+0x78>)
 8001162:	2204      	movs	r2, #4
 8001164:	701a      	strb	r2, [r3, #0]
        break;
 8001166:	e00c      	b.n	8001182 <ALC_handle+0x66>

    case LEFT_CENTERALIZED:
        AvailableLanes = p_AvailableLane;
 8001168:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <ALC_handle+0x78>)
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	7013      	strb	r3, [r2, #0]
        break;
 800116e:	e008      	b.n	8001182 <ALC_handle+0x66>

    case RIGHT_CENTERALIZED:
        AvailableLanes = p_AvailableLane;
 8001170:	4a08      	ldr	r2, [pc, #32]	@ (8001194 <ALC_handle+0x78>)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	7013      	strb	r3, [r2, #0]
        break;
 8001176:	e004      	b.n	8001182 <ALC_handle+0x66>

    case CENTERALIZED:
        AvailableLanes = p_AvailableLane;
 8001178:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <ALC_handle+0x78>)
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	7013      	strb	r3, [r2, #0]
        break;
 800117e:	e000      	b.n	8001182 <ALC_handle+0x66>
    
    default:
        break;
 8001180:	bf00      	nop
    }

}
 8001182:	bf00      	nop
 8001184:	4618      	mov	r0, r3
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	2000069d 	.word	0x2000069d
 8001194:	2000069c 	.word	0x2000069c

08001198 <ALC_Task>:
 * @brief the task of the Auto Lane Change
 * 
 * @return app_status_t 
 */
app_status_t ALC_Task(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
    app_status_t l_AppStatus = APP_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	71fb      	strb	r3, [r7, #7]

    if (!FlagtoChange)
 80011a2:	4b3a      	ldr	r3, [pc, #232]	@ (800128c <ALC_Task+0xf4>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d148      	bne.n	800123c <ALC_Task+0xa4>
    {
        TempPosition = CENTERALIZED;
 80011aa:	4b39      	ldr	r3, [pc, #228]	@ (8001290 <ALC_Task+0xf8>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	701a      	strb	r2, [r3, #0]
        if (CurrentPosition == DRIFT_LEFT)
 80011b0:	4b38      	ldr	r3, [pc, #224]	@ (8001294 <ALC_Task+0xfc>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b05      	cmp	r3, #5
 80011b6:	d10b      	bne.n	80011d0 <ALC_Task+0x38>
        {
            /* go right */
            l_AppStatus |= LaneChange(D_RIGHT);
 80011b8:	2002      	movs	r0, #2
 80011ba:	f000 f8a5 	bl	8001308 <LaneChange>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	71fb      	strb	r3, [r7, #7]
            FlagtoChange = D_RIGHT;
 80011c8:	4b30      	ldr	r3, [pc, #192]	@ (800128c <ALC_Task+0xf4>)
 80011ca:	2202      	movs	r2, #2
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	e057      	b.n	8001280 <ALC_Task+0xe8>
        }
        else if (CurrentPosition == DRIFT_RIGHT)
 80011d0:	4b30      	ldr	r3, [pc, #192]	@ (8001294 <ALC_Task+0xfc>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b06      	cmp	r3, #6
 80011d6:	d10b      	bne.n	80011f0 <ALC_Task+0x58>
        {
            /* go left */
            l_AppStatus |= LaneChange(D_LEFT);
 80011d8:	2001      	movs	r0, #1
 80011da:	f000 f895 	bl	8001308 <LaneChange>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	71fb      	strb	r3, [r7, #7]
            FlagtoChange = D_LEFT;
 80011e8:	4b28      	ldr	r3, [pc, #160]	@ (800128c <ALC_Task+0xf4>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	e047      	b.n	8001280 <ALC_Task+0xe8>
        }
        else if (WantedLaneToChange == D_LEFT)
 80011f0:	4b29      	ldr	r3, [pc, #164]	@ (8001298 <ALC_Task+0x100>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d10e      	bne.n	8001216 <ALC_Task+0x7e>
        {
            /* go left */
            l_AppStatus |= LaneChange(D_LEFT);
 80011f8:	2001      	movs	r0, #1
 80011fa:	f000 f885 	bl	8001308 <LaneChange>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4313      	orrs	r3, r2
 8001206:	71fb      	strb	r3, [r7, #7]
            TempPosition = DRIFT_RIGHT;
 8001208:	4b21      	ldr	r3, [pc, #132]	@ (8001290 <ALC_Task+0xf8>)
 800120a:	2206      	movs	r2, #6
 800120c:	701a      	strb	r2, [r3, #0]
            FlagtoChange = D_LEFT;
 800120e:	4b1f      	ldr	r3, [pc, #124]	@ (800128c <ALC_Task+0xf4>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
 8001214:	e034      	b.n	8001280 <ALC_Task+0xe8>
            
        }
        else if (WantedLaneToChange == D_RIGHT)
 8001216:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <ALC_Task+0x100>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d130      	bne.n	8001280 <ALC_Task+0xe8>
        {
            /* go right */
            l_AppStatus |= LaneChange(D_RIGHT);
 800121e:	2002      	movs	r0, #2
 8001220:	f000 f872 	bl	8001308 <LaneChange>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4313      	orrs	r3, r2
 800122c:	71fb      	strb	r3, [r7, #7]
            TempPosition = DRIFT_LEFT;
 800122e:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <ALC_Task+0xf8>)
 8001230:	2205      	movs	r2, #5
 8001232:	701a      	strb	r2, [r3, #0]
            FlagtoChange = D_RIGHT;
 8001234:	4b15      	ldr	r3, [pc, #84]	@ (800128c <ALC_Task+0xf4>)
 8001236:	2202      	movs	r2, #2
 8001238:	701a      	strb	r2, [r3, #0]
 800123a:	e021      	b.n	8001280 <ALC_Task+0xe8>
        }
    }
    else
    {
        if (CurrentPosition == TempPosition)
 800123c:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <ALC_Task+0xfc>)
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <ALC_Task+0xf8>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d111      	bne.n	800126c <ALC_Task+0xd4>
        {
            /* stay at this lane */
            l_AppStatus |= LaneChange(CENTER);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 f85d 	bl	8001308 <LaneChange>
 800124e:	4603      	mov	r3, r0
 8001250:	461a      	mov	r2, r3
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4313      	orrs	r3, r2
 8001256:	71fb      	strb	r3, [r7, #7]
            WantedLaneToChange = CENTER;
 8001258:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <ALC_Task+0x100>)
 800125a:	2203      	movs	r2, #3
 800125c:	701a      	strb	r2, [r3, #0]
            FlagtoChange = 0;
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <ALC_Task+0xf4>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
            TempPosition = CENTERALIZED;
 8001264:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <ALC_Task+0xf8>)
 8001266:	2207      	movs	r2, #7
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	e009      	b.n	8001280 <ALC_Task+0xe8>
        }
        else
        {
            l_AppStatus |= LaneChange(FlagtoChange);
 800126c:	4b07      	ldr	r3, [pc, #28]	@ (800128c <ALC_Task+0xf4>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f849 	bl	8001308 <LaneChange>
 8001276:	4603      	mov	r3, r0
 8001278:	461a      	mov	r2, r3
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4313      	orrs	r3, r2
 800127e:	71fb      	strb	r3, [r7, #7]
        }
    }
}
 8001280:	bf00      	nop
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200006a0 	.word	0x200006a0
 8001290:	2000069e 	.word	0x2000069e
 8001294:	2000069d 	.word	0x2000069d
 8001298:	2000069f 	.word	0x2000069f

0800129c <ALC_Change_Lane>:
 * 
 * @param p_WantedLane direction of the lane the user wants
 * @return app_status_t 
 */
app_status_t ALC_Change_Lane(Lane_Direction_t p_WantedLane)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
    app_status_t l_AppStatus = APP_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]
    if (((AvailableLanes == LEFT_ONLY) || (AvailableLanes == LEFT_AND_RIGHT)) && (p_WantedLane == D_LEFT))
 80012aa:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <ALC_Change_Lane+0x64>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d003      	beq.n	80012ba <ALC_Change_Lane+0x1e>
 80012b2:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <ALC_Change_Lane+0x64>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d106      	bne.n	80012c8 <ALC_Change_Lane+0x2c>
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d103      	bne.n	80012c8 <ALC_Change_Lane+0x2c>
    {
        WantedLaneToChange = D_LEFT;
 80012c0:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <ALC_Change_Lane+0x68>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	e013      	b.n	80012f0 <ALC_Change_Lane+0x54>
    }
    else if (((AvailableLanes == RIGHT_ONLY) || (AvailableLanes == LEFT_AND_RIGHT)) && (p_WantedLane == D_RIGHT))
 80012c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <ALC_Change_Lane+0x64>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d003      	beq.n	80012d8 <ALC_Change_Lane+0x3c>
 80012d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <ALC_Change_Lane+0x64>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d106      	bne.n	80012e6 <ALC_Change_Lane+0x4a>
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d103      	bne.n	80012e6 <ALC_Change_Lane+0x4a>
    {
        WantedLaneToChange = D_RIGHT;
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <ALC_Change_Lane+0x68>)
 80012e0:	2202      	movs	r2, #2
 80012e2:	701a      	strb	r2, [r3, #0]
 80012e4:	e004      	b.n	80012f0 <ALC_Change_Lane+0x54>
    }
    else
    {
        WantedLaneToChange = DIRECTION_ERROR;
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <ALC_Change_Lane+0x68>)
 80012e8:	2204      	movs	r2, #4
 80012ea:	701a      	strb	r2, [r3, #0]
        l_AppStatus = APP_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
    }
    return l_AppStatus;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2000069c 	.word	0x2000069c
 8001304:	2000069f 	.word	0x2000069f

08001308 <LaneChange>:
 * 
 * @param p_Direction direction to move
 * @return app_status_t status of operation
 */
static app_status_t LaneChange (Lane_Direction_t p_Direction)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
    app_status_t l_AppStatus = APP_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]
    float_t l_DirectionOfChange = 0.0f;
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
    switch (p_Direction)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	2b03      	cmp	r3, #3
 8001320:	d048      	beq.n	80013b4 <LaneChange+0xac>
 8001322:	2b03      	cmp	r3, #3
 8001324:	dc54      	bgt.n	80013d0 <LaneChange+0xc8>
 8001326:	2b01      	cmp	r3, #1
 8001328:	d002      	beq.n	8001330 <LaneChange+0x28>
 800132a:	2b02      	cmp	r3, #2
 800132c:	d01e      	beq.n	800136c <LaneChange+0x64>
 800132e:	e04f      	b.n	80013d0 <LaneChange+0xc8>
    {
    case D_LEFT:
        l_DirectionOfChange = (Car_Wanted_Speed * 
 8001330:	4b2b      	ldr	r3, [pc, #172]	@ (80013e0 <LaneChange+0xd8>)
 8001332:	edd3 7a00 	vldr	s15, [r3]
 8001336:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80013e4 <LaneChange+0xdc>
 800133a:	ee27 7a87 	vmul.f32	s14, s15, s14
                            (MIN_ANGLE_LANE_CHANGE - MAX_ANGLE_LANE_CHANGE) / 
 800133e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80013e8 <LaneChange+0xe0>
 8001342:	eec7 7a26 	vdiv.f32	s15, s14, s13
        l_DirectionOfChange = (Car_Wanted_Speed * 
 8001346:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80013ec <LaneChange+0xe4>
 800134a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800134e:	edc7 7a02 	vstr	s15, [r7, #8]
                            DEFUALT_ROBOT_MAX_SPEED ) + MAX_ANGLE_LANE_CHANGE;
        
        Car_Wanted_direction = l_DirectionOfChange;
 8001352:	4a27      	ldr	r2, [pc, #156]	@ (80013f0 <LaneChange+0xe8>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	6013      	str	r3, [r2, #0]
        l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_strafe);
 8001358:	4926      	ldr	r1, [pc, #152]	@ (80013f4 <LaneChange+0xec>)
 800135a:	4827      	ldr	r0, [pc, #156]	@ (80013f8 <LaneChange+0xf0>)
 800135c:	f000 fe40 	bl	8001fe0 <CAN_send_message>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	4313      	orrs	r3, r2
 8001368:	73fb      	strb	r3, [r7, #15]
        break;
 800136a:	e034      	b.n	80013d6 <LaneChange+0xce>

    case D_RIGHT:
        l_DirectionOfChange = (Car_Wanted_Speed * 
 800136c:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <LaneChange+0xd8>)
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80013e4 <LaneChange+0xdc>
 8001376:	ee27 7a87 	vmul.f32	s14, s15, s14
                               (MIN_ANGLE_LANE_CHANGE - MAX_ANGLE_LANE_CHANGE) / 
 800137a:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80013e8 <LaneChange+0xe0>
 800137e:	eec7 7a26 	vdiv.f32	s15, s14, s13
        l_DirectionOfChange = (Car_Wanted_Speed * 
 8001382:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80013ec <LaneChange+0xe4>
 8001386:	ee77 7a87 	vadd.f32	s15, s15, s14
 800138a:	edc7 7a02 	vstr	s15, [r7, #8]
                               DEFUALT_ROBOT_MAX_SPEED ) + MAX_ANGLE_LANE_CHANGE;
        
        Car_Wanted_direction = 360 - l_DirectionOfChange;
 800138e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80013fc <LaneChange+0xf4>
 8001392:	edd7 7a02 	vldr	s15, [r7, #8]
 8001396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <LaneChange+0xe8>)
 800139c:	edc3 7a00 	vstr	s15, [r3]
        l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_strafe);
 80013a0:	4914      	ldr	r1, [pc, #80]	@ (80013f4 <LaneChange+0xec>)
 80013a2:	4815      	ldr	r0, [pc, #84]	@ (80013f8 <LaneChange+0xf0>)
 80013a4:	f000 fe1c 	bl	8001fe0 <CAN_send_message>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	73fb      	strb	r3, [r7, #15]
        break;
 80013b2:	e010      	b.n	80013d6 <LaneChange+0xce>

    case CENTER:
        Car_Wanted_direction = 0;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <LaneChange+0xe8>)
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
        l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_strafe);
 80013bc:	490d      	ldr	r1, [pc, #52]	@ (80013f4 <LaneChange+0xec>)
 80013be:	480e      	ldr	r0, [pc, #56]	@ (80013f8 <LaneChange+0xf0>)
 80013c0:	f000 fe0e 	bl	8001fe0 <CAN_send_message>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	73fb      	strb	r3, [r7, #15]
        break;
 80013ce:	e002      	b.n	80013d6 <LaneChange+0xce>
    
    default:
        l_AppStatus = APP_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
        break;
 80013d4:	bf00      	nop
    }
}
 80013d6:	bf00      	nop
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200006dc 	.word	0x200006dc
 80013e4:	c2200000 	.word	0xc2200000
 80013e8:	3ee66666 	.word	0x3ee66666
 80013ec:	42340000 	.word	0x42340000
 80013f0:	200006e0 	.word	0x200006e0
 80013f4:	200001cc 	.word	0x200001cc
 80013f8:	20000018 	.word	0x20000018
 80013fc:	43b40000 	.word	0x43b40000

08001400 <APK_Check_Side>:
 * @brief 
 * 
 * @return app_status_t 
 */
app_status_t APK_Check_Side(APK_t *p_APK)
{
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	75fb      	strb	r3, [r7, #23]
    if(p_APK == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d102      	bne.n	8001418 <APK_Check_Side+0x18>
    {
        l_AppStatus = APP_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	75fb      	strb	r3, [r7, #23]
 8001416:	e02f      	b.n	8001478 <APK_Check_Side+0x78>
    }
    else
    {
        float_t l_Distance_ul90  = *(Main_Ultrasonics.UL_90->Distance);
 8001418:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <APK_Check_Side+0x88>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	613b      	str	r3, [r7, #16]
        float_t l_Distance_ul270 = *(Main_Ultrasonics.UL_270->Distance);
 8001422:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <APK_Check_Side+0x88>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	60fb      	str	r3, [r7, #12]

        if(l_Distance_ul90 > MIN_DISTANCE_PARKING_Y_AXIS)
 800142c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001430:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143c:	dd05      	ble.n	800144a <APK_Check_Side+0x4a>
        {
            p_APK->Side = RIGHT_PARKING_SIDE;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	705a      	strb	r2, [r3, #1]
            l_AppStatus = APP_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	75fb      	strb	r3, [r7, #23]
 8001448:	e016      	b.n	8001478 <APK_Check_Side+0x78>
        }

        else if(l_Distance_ul270 > MIN_DISTANCE_PARKING_Y_AXIS)
 800144a:	edd7 7a03 	vldr	s15, [r7, #12]
 800144e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145a:	dd05      	ble.n	8001468 <APK_Check_Side+0x68>
        {
            p_APK->Side = LEFT_PARKING_SIDE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	705a      	strb	r2, [r3, #1]
            l_AppStatus = APP_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	75fb      	strb	r3, [r7, #23]
 8001466:	e007      	b.n	8001478 <APK_Check_Side+0x78>
        }
        else
        {
            p_APK->Side = NO_PARKING_SIDE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2202      	movs	r2, #2
 800146c:	705a      	strb	r2, [r3, #1]
            p_APK->Mode_Parking = MODE_PARKING_SEARCH;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	709a      	strb	r2, [r3, #2]
            l_AppStatus = APP_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	75fb      	strb	r3, [r7, #23]
        }
    }
    return l_AppStatus;
 8001478:	7dfb      	ldrb	r3, [r7, #23]
}
 800147a:	4618      	mov	r0, r3
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000020 	.word	0x20000020

0800148c <APK_Check_Axis>:
 * @brief 
 * 
 * @return app_status_t 
 */
app_status_t APK_Check_Axis(APK_t *p_APK)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	75fb      	strb	r3, [r7, #23]
    if(p_APK == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <APK_Check_Axis+0x18>
    {
        l_AppStatus = APP_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
 80014a2:	e057      	b.n	8001554 <APK_Check_Axis+0xc8>
    }
    else
    {
        float_t l_Distance_ul90  = *(Main_Ultrasonics.UL_90->Distance);
 80014a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001560 <APK_Check_Axis+0xd4>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	613b      	str	r3, [r7, #16]
        float_t l_Distance_ul270 = *(Main_Ultrasonics.UL_270->Distance);
 80014ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001560 <APK_Check_Axis+0xd4>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	60fb      	str	r3, [r7, #12]
        l_AppStatus |= APK_Check_Side(p_APK);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ffa1 	bl	8001400 <APK_Check_Side>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	75fb      	strb	r3, [r7, #23]
        if(p_APK->Side == RIGHT_PARKING_SIDE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	785b      	ldrb	r3, [r3, #1]
 80014cc:	ee07 3a90 	vmov	s15, r3
 80014d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	d112      	bne.n	8001504 <APK_Check_Axis+0x78>
        {
            if(l_Distance_ul90 > MIN_DISTANCE_PARKING_X_AXIS)
 80014de:	edd7 7a04 	vldr	s15, [r7, #16]
 80014e2:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001564 <APK_Check_Axis+0xd8>
 80014e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	dd03      	ble.n	80014f8 <APK_Check_Axis+0x6c>
                p_APK->Axis = AUTOPARKING_ROTATE_AXIS;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	e002      	b.n	80014fe <APK_Check_Axis+0x72>
            else
                p_APK->Axis = AUTOPARKING_SAME_AXIS;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
            l_AppStatus = APP_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	75fb      	strb	r3, [r7, #23]
 8001502:	e027      	b.n	8001554 <APK_Check_Axis+0xc8>
        }

        else if(p_APK->Side == LEFT_PARKING_SIDE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	785b      	ldrb	r3, [r3, #1]
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001510:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001514:	eef4 7a47 	vcmp.f32	s15, s14
 8001518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151c:	d112      	bne.n	8001544 <APK_Check_Axis+0xb8>
        {
            if(l_Distance_ul270 > MIN_DISTANCE_PARKING_X_AXIS)
 800151e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001522:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001564 <APK_Check_Axis+0xd8>
 8001526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152e:	dd03      	ble.n	8001538 <APK_Check_Axis+0xac>
                p_APK->Axis = AUTOPARKING_ROTATE_AXIS;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]
 8001536:	e002      	b.n	800153e <APK_Check_Axis+0xb2>
            else
                p_APK->Axis = AUTOPARKING_SAME_AXIS;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
            l_AppStatus = APP_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	75fb      	strb	r3, [r7, #23]
 8001542:	e007      	b.n	8001554 <APK_Check_Axis+0xc8>
        }
        else
        {
            p_APK->Axis = NO_PARKING_SIDE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2202      	movs	r2, #2
 8001548:	701a      	strb	r2, [r3, #0]
            l_AppStatus = APP_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	75fb      	strb	r3, [r7, #23]
            p_APK->Mode_Parking = MODE_PARKING_SEARCH;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	709a      	strb	r2, [r3, #2]
        }
    }
    return l_AppStatus;
 8001554:	7dfb      	ldrb	r3, [r7, #23]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000020 	.word	0x20000020
 8001564:	42480000 	.word	0x42480000

08001568 <APK_Task>:
 * @brief 
 * 
 * @return app_status_t 
 */
app_status_t APK_Task(APK_t *p_APK)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]
    if(p_APK == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <APK_Task+0x18>
    {
        l_AppStatus = APP_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	73fb      	strb	r3, [r7, #15]
 800157e:	e342      	b.n	8001c06 <APK_Task+0x69e>
    }
    else
    {
        Car_Wanted_Speed = 0.15f;
 8001580:	4bb2      	ldr	r3, [pc, #712]	@ (800184c <APK_Task+0x2e4>)
 8001582:	4ab3      	ldr	r2, [pc, #716]	@ (8001850 <APK_Task+0x2e8>)
 8001584:	601a      	str	r2, [r3, #0]
        Car_Wanted_direction = 0.0f;  
 8001586:	4bb3      	ldr	r3, [pc, #716]	@ (8001854 <APK_Task+0x2ec>)
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
        if(Reset_Flag == 1)
 800158e:	4bb2      	ldr	r3, [pc, #712]	@ (8001858 <APK_Task+0x2f0>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d13f      	bne.n	8001616 <APK_Task+0xae>
        {
            p_APK->Mode_Parking = MODE_PARKING_SEARCH;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	709a      	strb	r2, [r3, #2]
            FR_Encoder_pos_initial = 0.0f;
 800159c:	4baf      	ldr	r3, [pc, #700]	@ (800185c <APK_Task+0x2f4>)
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
            FL_Encoder_pos_initial = 0.0f;
 80015a4:	4bae      	ldr	r3, [pc, #696]	@ (8001860 <APK_Task+0x2f8>)
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
            FR_Encoder_pos_wanted = 0.0f;
 80015ac:	4bad      	ldr	r3, [pc, #692]	@ (8001864 <APK_Task+0x2fc>)
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
            FL_Encoder_pos_wanted = 0.0f;
 80015b4:	4bac      	ldr	r3, [pc, #688]	@ (8001868 <APK_Task+0x300>)
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
            FR_Encoder_pos_wanted_back_ward = 0.0f;
 80015bc:	4bab      	ldr	r3, [pc, #684]	@ (800186c <APK_Task+0x304>)
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
            FL_Encoder_pos_wanted_back_ward = 0.0f;
 80015c4:	4baa      	ldr	r3, [pc, #680]	@ (8001870 <APK_Task+0x308>)
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
            FR_Encoder_pos_bci = 0.0f;
 80015cc:	4ba9      	ldr	r3, [pc, #676]	@ (8001874 <APK_Task+0x30c>)
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
            FL_Encoder_pos_bci = 0.0f;
 80015d4:	4ba8      	ldr	r3, [pc, #672]	@ (8001878 <APK_Task+0x310>)
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

            Angle_Wanted = 0 ;
 80015dc:	4ba7      	ldr	r3, [pc, #668]	@ (800187c <APK_Task+0x314>)
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
            Min_Distance_Flag = 0 ;
 80015e4:	4ba6      	ldr	r3, [pc, #664]	@ (8001880 <APK_Task+0x318>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
            Parking_Flag = 0 ;
 80015ea:	4ba6      	ldr	r3, [pc, #664]	@ (8001884 <APK_Task+0x31c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
            Reset_Flag = 0 ;
 80015f0:	4b99      	ldr	r3, [pc, #612]	@ (8001858 <APK_Task+0x2f0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
            stopbeforerotate = 0 ;
 80015f6:	4ba4      	ldr	r3, [pc, #656]	@ (8001888 <APK_Task+0x320>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
            stopafterrotate = 0 ;
 80015fc:	4ba3      	ldr	r3, [pc, #652]	@ (800188c <APK_Task+0x324>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
            RotateFlag = 0 ;
 8001602:	4ba3      	ldr	r3, [pc, #652]	@ (8001890 <APK_Task+0x328>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]

            Car_Angle_initial = 0.0f;
 8001608:	4ba2      	ldr	r3, [pc, #648]	@ (8001894 <APK_Task+0x32c>)
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
            bmlor = 0 ; 
 8001610:	4ba1      	ldr	r3, [pc, #644]	@ (8001898 <APK_Task+0x330>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
        }
         
        if(Parking_Flag == 0)  
 8001616:	4b9b      	ldr	r3, [pc, #620]	@ (8001884 <APK_Task+0x31c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d107      	bne.n	800162e <APK_Task+0xc6>
            l_AppStatus |= APK_Check_Axis(p_APK);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ff34 	bl	800148c <APK_Check_Axis>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	4313      	orrs	r3, r2
 800162c:	73fb      	strb	r3, [r7, #15]
        if(p_APK->Axis == AUTOPARKING_ROTATE_AXIS)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	ee07 3a90 	vmov	s15, r3
 8001636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800163e:	eef4 7a47 	vcmp.f32	s15, s14
 8001642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001646:	f040 81aa 	bne.w	800199e <APK_Task+0x436>
        {
            p_APK->Mode_Parking = MODE_PARKING_SEARCH;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	709a      	strb	r2, [r3, #2]
            if(Min_Distance_Flag == 0)
 8001650:	4b8b      	ldr	r3, [pc, #556]	@ (8001880 <APK_Task+0x318>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d11b      	bne.n	8001690 <APK_Task+0x128>
            {
                FR_Encoder_pos_wanted = FR_Encoder_pos_initial + (MIN_DISTANCE_PARKING_Y_AXIS);
 8001658:	4b80      	ldr	r3, [pc, #512]	@ (800185c <APK_Task+0x2f4>)
 800165a:	edd3 7a00 	vldr	s15, [r3]
 800165e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001662:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001666:	4b7f      	ldr	r3, [pc, #508]	@ (8001864 <APK_Task+0x2fc>)
 8001668:	edc3 7a00 	vstr	s15, [r3]
                FL_Encoder_pos_wanted = FL_Encoder_pos_initial + (MIN_DISTANCE_PARKING_Y_AXIS);
 800166c:	4b7c      	ldr	r3, [pc, #496]	@ (8001860 <APK_Task+0x2f8>)
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001676:	ee77 7a87 	vadd.f32	s15, s15, s14
 800167a:	4b7b      	ldr	r3, [pc, #492]	@ (8001868 <APK_Task+0x300>)
 800167c:	edc3 7a00 	vstr	s15, [r3]
                FL_Encoder_pos_bci = FL_Encoder_pos;
 8001680:	4b86      	ldr	r3, [pc, #536]	@ (800189c <APK_Task+0x334>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a7c      	ldr	r2, [pc, #496]	@ (8001878 <APK_Task+0x310>)
 8001686:	6013      	str	r3, [r2, #0]
                FR_Encoder_pos_bci = FR_Encoder_pos;
 8001688:	4b85      	ldr	r3, [pc, #532]	@ (80018a0 <APK_Task+0x338>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a79      	ldr	r2, [pc, #484]	@ (8001874 <APK_Task+0x30c>)
 800168e:	6013      	str	r3, [r2, #0]
            }       
            if((FL_Encoder_pos > FL_Encoder_pos_wanted) || (FR_Encoder_pos > FR_Encoder_pos_wanted) || (Min_Distance_Flag == 1))
 8001690:	4b82      	ldr	r3, [pc, #520]	@ (800189c <APK_Task+0x334>)
 8001692:	ed93 7a00 	vldr	s14, [r3]
 8001696:	4b74      	ldr	r3, [pc, #464]	@ (8001868 <APK_Task+0x300>)
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a4:	dc0f      	bgt.n	80016c6 <APK_Task+0x15e>
 80016a6:	4b7e      	ldr	r3, [pc, #504]	@ (80018a0 <APK_Task+0x338>)
 80016a8:	ed93 7a00 	vldr	s14, [r3]
 80016ac:	4b6d      	ldr	r3, [pc, #436]	@ (8001864 <APK_Task+0x2fc>)
 80016ae:	edd3 7a00 	vldr	s15, [r3]
 80016b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ba:	dc04      	bgt.n	80016c6 <APK_Task+0x15e>
 80016bc:	4b70      	ldr	r3, [pc, #448]	@ (8001880 <APK_Task+0x318>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	f040 82a0 	bne.w	8001c06 <APK_Task+0x69e>
            {
                Min_Distance_Flag = 1 ;
 80016c6:	4b6e      	ldr	r3, [pc, #440]	@ (8001880 <APK_Task+0x318>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]
                p_APK->Mode_Parking = MODE_PARKING_UNPARK;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	709a      	strb	r2, [r3, #2]
                
                Car_Wanted_direction = 180.0f;
 80016d2:	4b60      	ldr	r3, [pc, #384]	@ (8001854 <APK_Task+0x2ec>)
 80016d4:	4a73      	ldr	r2, [pc, #460]	@ (80018a4 <APK_Task+0x33c>)
 80016d6:	601a      	str	r2, [r3, #0]
                FR_Encoder_pos_wanted_back_ward = FR_Encoder_pos_bci - (HALF_MIN_DISTANCE_PARKING_Y_AXIS);
 80016d8:	4b66      	ldr	r3, [pc, #408]	@ (8001874 <APK_Task+0x30c>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80016e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016e6:	4b61      	ldr	r3, [pc, #388]	@ (800186c <APK_Task+0x304>)
 80016e8:	edc3 7a00 	vstr	s15, [r3]
                FL_Encoder_pos_wanted_back_ward = FL_Encoder_pos_bci - (HALF_MIN_DISTANCE_PARKING_Y_AXIS);               
 80016ec:	4b62      	ldr	r3, [pc, #392]	@ (8001878 <APK_Task+0x310>)
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80016f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001870 <APK_Task+0x308>)
 80016fc:	edc3 7a00 	vstr	s15, [r3]
                if((FL_Encoder_pos < FL_Encoder_pos_wanted_back_ward) || (FR_Encoder_pos < FR_Encoder_pos_wanted_back_ward) || (bmlor == 1))
 8001700:	4b66      	ldr	r3, [pc, #408]	@ (800189c <APK_Task+0x334>)
 8001702:	ed93 7a00 	vldr	s14, [r3]
 8001706:	4b5a      	ldr	r3, [pc, #360]	@ (8001870 <APK_Task+0x308>)
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001714:	d40f      	bmi.n	8001736 <APK_Task+0x1ce>
 8001716:	4b62      	ldr	r3, [pc, #392]	@ (80018a0 <APK_Task+0x338>)
 8001718:	ed93 7a00 	vldr	s14, [r3]
 800171c:	4b53      	ldr	r3, [pc, #332]	@ (800186c <APK_Task+0x304>)
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172a:	d404      	bmi.n	8001736 <APK_Task+0x1ce>
 800172c:	4b5a      	ldr	r3, [pc, #360]	@ (8001898 <APK_Task+0x330>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	f040 8268 	bne.w	8001c06 <APK_Task+0x69e>
                {
                    bmlor = 1 ;
 8001736:	4b58      	ldr	r3, [pc, #352]	@ (8001898 <APK_Task+0x330>)
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
                    Parking_Flag = 1;
 800173c:	4b51      	ldr	r3, [pc, #324]	@ (8001884 <APK_Task+0x31c>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
                    if(stopbeforerotate == 0)
 8001742:	4b51      	ldr	r3, [pc, #324]	@ (8001888 <APK_Task+0x320>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10f      	bne.n	800176a <APK_Task+0x202>
                    {
                        l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_stop);
 800174a:	4957      	ldr	r1, [pc, #348]	@ (80018a8 <APK_Task+0x340>)
 800174c:	4857      	ldr	r0, [pc, #348]	@ (80018ac <APK_Task+0x344>)
 800174e:	f000 fc47 	bl	8001fe0 <CAN_send_message>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	4313      	orrs	r3, r2
 800175a:	73fb      	strb	r3, [r7, #15]
                        stopbeforerotate = 1;
 800175c:	4b4a      	ldr	r3, [pc, #296]	@ (8001888 <APK_Task+0x320>)
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
                        HAL_Delay(1000);
 8001762:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001766:	f003 fbdb 	bl	8004f20 <HAL_Delay>
                    }
                    /* rotate 90 degree clockwise or anti-clockwise */
                    if(p_APK->Side == LEFT_PARKING_SIDE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	785b      	ldrb	r3, [r3, #1]
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001776:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800177a:	eef4 7a47 	vcmp.f32	s15, s14
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	f040 809d 	bne.w	80018c0 <APK_Task+0x358>
                    {                       
                        Car_Wanted_Angle = Car_Angle_initial + DEFAULT_PARKING_ROTATE_ANGLE_LEFT;
 8001786:	4b43      	ldr	r3, [pc, #268]	@ (8001894 <APK_Task+0x32c>)
 8001788:	edd3 7a00 	vldr	s15, [r3]
 800178c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80018b0 <APK_Task+0x348>
 8001790:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001794:	4b47      	ldr	r3, [pc, #284]	@ (80018b4 <APK_Task+0x34c>)
 8001796:	edc3 7a00 	vstr	s15, [r3]
                        Car_Wanted_Speed=0;
 800179a:	4b2c      	ldr	r3, [pc, #176]	@ (800184c <APK_Task+0x2e4>)
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
                        RotateFlag = 1;
 80017a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001890 <APK_Task+0x328>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
                        //if((Main_Orientation.FilteredYAW) < Car_Wanted_Angle)
                        if(value_in_range((Main_Orientation.FilteredYAW) , Car_Wanted_Angle-2 , Car_Wanted_Angle+2) || (stopafterrotate == 1))
 80017a8:	4b43      	ldr	r3, [pc, #268]	@ (80018b8 <APK_Task+0x350>)
 80017aa:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80017ae:	4b41      	ldr	r3, [pc, #260]	@ (80018b4 <APK_Task+0x34c>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80017b8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80017bc:	4b3d      	ldr	r3, [pc, #244]	@ (80018b4 <APK_Task+0x34c>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80017c6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80017ca:	eeb0 1a67 	vmov.f32	s2, s15
 80017ce:	eef0 0a66 	vmov.f32	s1, s13
 80017d2:	eeb0 0a47 	vmov.f32	s0, s14
 80017d6:	f00e fb55 	bl	800fe84 <value_in_range>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d104      	bne.n	80017ea <APK_Task+0x282>
 80017e0:	4b2a      	ldr	r3, [pc, #168]	@ (800188c <APK_Task+0x324>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	f040 820e 	bne.w	8001c06 <APK_Task+0x69e>
                        {       
                            stopafterrotate = 1;
 80017ea:	4b28      	ldr	r3, [pc, #160]	@ (800188c <APK_Task+0x324>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
                            RotateFlag = 0;                     
 80017f0:	4b27      	ldr	r3, [pc, #156]	@ (8001890 <APK_Task+0x328>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
                            Car_Wanted_Speed = 0.15f;
 80017f6:	4b15      	ldr	r3, [pc, #84]	@ (800184c <APK_Task+0x2e4>)
 80017f8:	4a15      	ldr	r2, [pc, #84]	@ (8001850 <APK_Task+0x2e8>)
 80017fa:	601a      	str	r2, [r3, #0]
                            Car_Wanted_direction = 180.0f;
 80017fc:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <APK_Task+0x2ec>)
 80017fe:	4a29      	ldr	r2, [pc, #164]	@ (80018a4 <APK_Task+0x33c>)
 8001800:	601a      	str	r2, [r3, #0]
                            if(*(Main_Ultrasonics.UL_180->Distance) < MIN_DISTANCE_CAR_Y_AXIS)
 8001802:	4b2e      	ldr	r3, [pc, #184]	@ (80018bc <APK_Task+0x354>)
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	f140 81f5 	bpl.w	8001c06 <APK_Task+0x69e>
                            {
                                /* stop */
                                Car_Wanted_Speed = 0.0f;
 800181c:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <APK_Task+0x2e4>)
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
                                Car_Wanted_direction = 0.0f;
 8001824:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <APK_Task+0x2ec>)
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
                                Reset_Flag = 1;
 800182c:	4b0a      	ldr	r3, [pc, #40]	@ (8001858 <APK_Task+0x2f0>)
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
                                p_APK->Mode_Parking = MODE_PARKING_PARK;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2202      	movs	r2, #2
 8001836:	709a      	strb	r2, [r3, #2]
                                l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_stop);  
 8001838:	491b      	ldr	r1, [pc, #108]	@ (80018a8 <APK_Task+0x340>)
 800183a:	481c      	ldr	r0, [pc, #112]	@ (80018ac <APK_Task+0x344>)
 800183c:	f000 fbd0 	bl	8001fe0 <CAN_send_message>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	4313      	orrs	r3, r2
 8001848:	73fb      	strb	r3, [r7, #15]
 800184a:	e1dc      	b.n	8001c06 <APK_Task+0x69e>
 800184c:	200006dc 	.word	0x200006dc
 8001850:	3e19999a 	.word	0x3e19999a
 8001854:	200006e0 	.word	0x200006e0
 8001858:	200006ca 	.word	0x200006ca
 800185c:	200006a4 	.word	0x200006a4
 8001860:	200006a8 	.word	0x200006a8
 8001864:	200006ac 	.word	0x200006ac
 8001868:	200006b0 	.word	0x200006b0
 800186c:	200006b4 	.word	0x200006b4
 8001870:	200006b8 	.word	0x200006b8
 8001874:	200006bc 	.word	0x200006bc
 8001878:	200006c0 	.word	0x200006c0
 800187c:	200006c4 	.word	0x200006c4
 8001880:	200006c8 	.word	0x200006c8
 8001884:	200006c9 	.word	0x200006c9
 8001888:	200006cb 	.word	0x200006cb
 800188c:	200006cc 	.word	0x200006cc
 8001890:	200006cd 	.word	0x200006cd
 8001894:	200006d0 	.word	0x200006d0
 8001898:	200006d4 	.word	0x200006d4
 800189c:	200006f8 	.word	0x200006f8
 80018a0:	200006fc 	.word	0x200006fc
 80018a4:	43340000 	.word	0x43340000
 80018a8:	20000204 	.word	0x20000204
 80018ac:	20000018 	.word	0x20000018
 80018b0:	42b40000 	.word	0x42b40000
 80018b4:	200006d8 	.word	0x200006d8
 80018b8:	200000f0 	.word	0x200000f0
 80018bc:	20000020 	.word	0x20000020
                                /* continue */
                            }
                        }
                    }
                        
                    else if(p_APK->Side == RIGHT_PARKING_SIDE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	785b      	ldrb	r3, [r3, #1]
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d4:	f040 8197 	bne.w	8001c06 <APK_Task+0x69e>
                    {
                        Car_Wanted_Angle = Car_Angle_initial + DEFAULT_PARKING_ROTATE_ANGLE_RIGHT; 
 80018d8:	4bab      	ldr	r3, [pc, #684]	@ (8001b88 <APK_Task+0x620>)
 80018da:	edd3 7a00 	vldr	s15, [r3]
 80018de:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 8001b8c <APK_Task+0x624>
 80018e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018e6:	4baa      	ldr	r3, [pc, #680]	@ (8001b90 <APK_Task+0x628>)
 80018e8:	edc3 7a00 	vstr	s15, [r3]
                        Car_Wanted_Speed=0;  
 80018ec:	4ba9      	ldr	r3, [pc, #676]	@ (8001b94 <APK_Task+0x62c>)
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
                        RotateFlag = 1;
 80018f4:	4ba8      	ldr	r3, [pc, #672]	@ (8001b98 <APK_Task+0x630>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
                        //if((Main_Orientation.FilteredYAW) > Car_Wanted_Angle)
                        if(value_in_range((Main_Orientation.FilteredYAW) , Car_Wanted_Angle-2 , Car_Wanted_Angle+2) || (stopafterrotate == 1))
 80018fa:	4ba8      	ldr	r3, [pc, #672]	@ (8001b9c <APK_Task+0x634>)
 80018fc:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8001900:	4ba3      	ldr	r3, [pc, #652]	@ (8001b90 <APK_Task+0x628>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800190a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800190e:	4ba0      	ldr	r3, [pc, #640]	@ (8001b90 <APK_Task+0x628>)
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001918:	ee77 7a86 	vadd.f32	s15, s15, s12
 800191c:	eeb0 1a67 	vmov.f32	s2, s15
 8001920:	eef0 0a66 	vmov.f32	s1, s13
 8001924:	eeb0 0a47 	vmov.f32	s0, s14
 8001928:	f00e faac 	bl	800fe84 <value_in_range>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d104      	bne.n	800193c <APK_Task+0x3d4>
 8001932:	4b9b      	ldr	r3, [pc, #620]	@ (8001ba0 <APK_Task+0x638>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b01      	cmp	r3, #1
 8001938:	f040 8165 	bne.w	8001c06 <APK_Task+0x69e>
                        {       
                            stopafterrotate = 1;
 800193c:	4b98      	ldr	r3, [pc, #608]	@ (8001ba0 <APK_Task+0x638>)
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
                            RotateFlag = 0;
 8001942:	4b95      	ldr	r3, [pc, #596]	@ (8001b98 <APK_Task+0x630>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
                            
                            Car_Wanted_direction = 180.0f;
 8001948:	4b96      	ldr	r3, [pc, #600]	@ (8001ba4 <APK_Task+0x63c>)
 800194a:	4a97      	ldr	r2, [pc, #604]	@ (8001ba8 <APK_Task+0x640>)
 800194c:	601a      	str	r2, [r3, #0]
                            Car_Wanted_Speed = 0.15f;
 800194e:	4b91      	ldr	r3, [pc, #580]	@ (8001b94 <APK_Task+0x62c>)
 8001950:	4a96      	ldr	r2, [pc, #600]	@ (8001bac <APK_Task+0x644>)
 8001952:	601a      	str	r2, [r3, #0]
                            if(*(Main_Ultrasonics.UL_180->Distance) < MIN_DISTANCE_CAR_Y_AXIS)
 8001954:	4b96      	ldr	r3, [pc, #600]	@ (8001bb0 <APK_Task+0x648>)
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196a:	f140 814c 	bpl.w	8001c06 <APK_Task+0x69e>
                            {
                                /* stop */
                               
                                Car_Wanted_Speed = 0.0f;
 800196e:	4b89      	ldr	r3, [pc, #548]	@ (8001b94 <APK_Task+0x62c>)
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
                                Car_Wanted_direction = 0.0f;
 8001976:	4b8b      	ldr	r3, [pc, #556]	@ (8001ba4 <APK_Task+0x63c>)
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
                                Reset_Flag = 1;
 800197e:	4b8d      	ldr	r3, [pc, #564]	@ (8001bb4 <APK_Task+0x64c>)
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
                                p_APK->Mode_Parking = MODE_PARKING_PARK;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2202      	movs	r2, #2
 8001988:	709a      	strb	r2, [r3, #2]
                                l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_stop);  
 800198a:	498b      	ldr	r1, [pc, #556]	@ (8001bb8 <APK_Task+0x650>)
 800198c:	488b      	ldr	r0, [pc, #556]	@ (8001bbc <APK_Task+0x654>)
 800198e:	f000 fb27 	bl	8001fe0 <CAN_send_message>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	4313      	orrs	r3, r2
 800199a:	73fb      	strb	r3, [r7, #15]
 800199c:	e133      	b.n	8001c06 <APK_Task+0x69e>
                {
                    /* continue */
                }
            }
        }
        else if(p_APK->Axis == AUTOPARKING_SAME_AXIS)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b2:	f040 80d3 	bne.w	8001b5c <APK_Task+0x5f4>
        {
            p_APK->Mode_Parking = MODE_PARKING_UNPARK;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	709a      	strb	r2, [r3, #2]
            if(Min_Distance_Flag == 0)
 80019bc:	4b80      	ldr	r3, [pc, #512]	@ (8001bc0 <APK_Task+0x658>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d11b      	bne.n	80019fc <APK_Task+0x494>
            {
                FR_Encoder_pos_wanted = FR_Encoder_pos_initial + (MIN_DISTANCE_PARKING_X_AXIS);
 80019c4:	4b7f      	ldr	r3, [pc, #508]	@ (8001bc4 <APK_Task+0x65c>)
 80019c6:	edd3 7a00 	vldr	s15, [r3]
 80019ca:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8001bc8 <APK_Task+0x660>
 80019ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019d2:	4b7e      	ldr	r3, [pc, #504]	@ (8001bcc <APK_Task+0x664>)
 80019d4:	edc3 7a00 	vstr	s15, [r3]
                FL_Encoder_pos_wanted = FL_Encoder_pos_initial + (MIN_DISTANCE_PARKING_X_AXIS);
 80019d8:	4b7d      	ldr	r3, [pc, #500]	@ (8001bd0 <APK_Task+0x668>)
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001bc8 <APK_Task+0x660>
 80019e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019e6:	4b7b      	ldr	r3, [pc, #492]	@ (8001bd4 <APK_Task+0x66c>)
 80019e8:	edc3 7a00 	vstr	s15, [r3]
                FL_Encoder_pos_bci = FL_Encoder_pos;
 80019ec:	4b7a      	ldr	r3, [pc, #488]	@ (8001bd8 <APK_Task+0x670>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a7a      	ldr	r2, [pc, #488]	@ (8001bdc <APK_Task+0x674>)
 80019f2:	6013      	str	r3, [r2, #0]
                FR_Encoder_pos_bci = FR_Encoder_pos;
 80019f4:	4b7a      	ldr	r3, [pc, #488]	@ (8001be0 <APK_Task+0x678>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a7a      	ldr	r2, [pc, #488]	@ (8001be4 <APK_Task+0x67c>)
 80019fa:	6013      	str	r3, [r2, #0]
            }
            if((FR_Encoder_pos > FR_Encoder_pos_wanted) || (FL_Encoder_pos > FL_Encoder_pos_wanted) || (Min_Distance_Flag == 1))
 80019fc:	4b78      	ldr	r3, [pc, #480]	@ (8001be0 <APK_Task+0x678>)
 80019fe:	ed93 7a00 	vldr	s14, [r3]
 8001a02:	4b72      	ldr	r3, [pc, #456]	@ (8001bcc <APK_Task+0x664>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	dc0f      	bgt.n	8001a32 <APK_Task+0x4ca>
 8001a12:	4b71      	ldr	r3, [pc, #452]	@ (8001bd8 <APK_Task+0x670>)
 8001a14:	ed93 7a00 	vldr	s14, [r3]
 8001a18:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd4 <APK_Task+0x66c>)
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
 8001a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	dc04      	bgt.n	8001a32 <APK_Task+0x4ca>
 8001a28:	4b65      	ldr	r3, [pc, #404]	@ (8001bc0 <APK_Task+0x658>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	f040 8091 	bne.w	8001b54 <APK_Task+0x5ec>
            {
                Min_Distance_Flag = 1;
 8001a32:	4b63      	ldr	r3, [pc, #396]	@ (8001bc0 <APK_Task+0x658>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]

                Car_Wanted_direction = 180.0f; 
 8001a38:	4b5a      	ldr	r3, [pc, #360]	@ (8001ba4 <APK_Task+0x63c>)
 8001a3a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ba8 <APK_Task+0x640>)
 8001a3c:	601a      	str	r2, [r3, #0]
                FR_Encoder_pos_wanted_back_ward = FR_Encoder_pos_bci - (HALF_MIN_DISTANCE_PARKING_X_AXIS);
 8001a3e:	4b69      	ldr	r3, [pc, #420]	@ (8001be4 <APK_Task+0x67c>)
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001a48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a4c:	4b66      	ldr	r3, [pc, #408]	@ (8001be8 <APK_Task+0x680>)
 8001a4e:	edc3 7a00 	vstr	s15, [r3]
                FL_Encoder_pos_wanted_back_ward = FL_Encoder_pos_bci - (HALF_MIN_DISTANCE_PARKING_X_AXIS);
 8001a52:	4b62      	ldr	r3, [pc, #392]	@ (8001bdc <APK_Task+0x674>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001a5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a60:	4b62      	ldr	r3, [pc, #392]	@ (8001bec <APK_Task+0x684>)
 8001a62:	edc3 7a00 	vstr	s15, [r3]
                if((FR_Encoder_pos < FR_Encoder_pos_wanted_back_ward) || (FL_Encoder_pos < FL_Encoder_pos_wanted_back_ward) || (bmlor == 1))
 8001a66:	4b5e      	ldr	r3, [pc, #376]	@ (8001be0 <APK_Task+0x678>)
 8001a68:	ed93 7a00 	vldr	s14, [r3]
 8001a6c:	4b5e      	ldr	r3, [pc, #376]	@ (8001be8 <APK_Task+0x680>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7a:	d40f      	bmi.n	8001a9c <APK_Task+0x534>
 8001a7c:	4b56      	ldr	r3, [pc, #344]	@ (8001bd8 <APK_Task+0x670>)
 8001a7e:	ed93 7a00 	vldr	s14, [r3]
 8001a82:	4b5a      	ldr	r3, [pc, #360]	@ (8001bec <APK_Task+0x684>)
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a90:	d404      	bmi.n	8001a9c <APK_Task+0x534>
 8001a92:	4b57      	ldr	r3, [pc, #348]	@ (8001bf0 <APK_Task+0x688>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	f040 80b4 	bne.w	8001c04 <APK_Task+0x69c>
                {
                    bmlor = 1 ;
 8001a9c:	4b54      	ldr	r3, [pc, #336]	@ (8001bf0 <APK_Task+0x688>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
                    Parking_Flag = 1;
 8001aa2:	4b54      	ldr	r3, [pc, #336]	@ (8001bf4 <APK_Task+0x68c>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
                    /* move in the same axis left or right */
                    if(p_APK->Side == LEFT_PARKING_SIDE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	785b      	ldrb	r3, [r3, #1]
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ab8:	eef4 7a47 	vcmp.f32	s15, s14
 8001abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac0:	d11e      	bne.n	8001b00 <APK_Task+0x598>
                    {
                        Car_Wanted_direction = 90.0f;
 8001ac2:	4b38      	ldr	r3, [pc, #224]	@ (8001ba4 <APK_Task+0x63c>)
 8001ac4:	4a4c      	ldr	r2, [pc, #304]	@ (8001bf8 <APK_Task+0x690>)
 8001ac6:	601a      	str	r2, [r3, #0]
                        if(*(Main_Ultrasonics.UL_270->Distance) < MIN_DISTANCE_CAR_X_AXIS)
 8001ac8:	4b39      	ldr	r3, [pc, #228]	@ (8001bb0 <APK_Task+0x648>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ade:	d400      	bmi.n	8001ae2 <APK_Task+0x57a>
                if((FR_Encoder_pos < FR_Encoder_pos_wanted_back_ward) || (FL_Encoder_pos < FL_Encoder_pos_wanted_back_ward) || (bmlor == 1))
 8001ae0:	e090      	b.n	8001c04 <APK_Task+0x69c>
                        {
                            /* stop */
                            Car_Wanted_Speed = 0.0f;
 8001ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b94 <APK_Task+0x62c>)
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
                            Car_Wanted_direction = 0.0f;
 8001aea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba4 <APK_Task+0x63c>)
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
                            Reset_Flag = 1;
 8001af2:	4b30      	ldr	r3, [pc, #192]	@ (8001bb4 <APK_Task+0x64c>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
                            p_APK->Mode_Parking = MODE_PARKING_PARK;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	709a      	strb	r2, [r3, #2]
                if((FR_Encoder_pos < FR_Encoder_pos_wanted_back_ward) || (FL_Encoder_pos < FL_Encoder_pos_wanted_back_ward) || (bmlor == 1))
 8001afe:	e081      	b.n	8001c04 <APK_Task+0x69c>
                        {
                            /* continue */
                        }
                    }
                        
                    else if(p_APK->Side == RIGHT_PARKING_SIDE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	785b      	ldrb	r3, [r3, #1]
 8001b04:	ee07 3a90 	vmov	s15, r3
 8001b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b14:	d176      	bne.n	8001c04 <APK_Task+0x69c>
                    {
                        Car_Wanted_direction = 270.0f;
 8001b16:	4b23      	ldr	r3, [pc, #140]	@ (8001ba4 <APK_Task+0x63c>)
 8001b18:	4a38      	ldr	r2, [pc, #224]	@ (8001bfc <APK_Task+0x694>)
 8001b1a:	601a      	str	r2, [r3, #0]
                        if(*(Main_Ultrasonics.UL_90->Distance) < MIN_DISTANCE_CAR_X_AXIS)
 8001b1c:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <APK_Task+0x648>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b32:	d400      	bmi.n	8001b36 <APK_Task+0x5ce>
                if((FR_Encoder_pos < FR_Encoder_pos_wanted_back_ward) || (FL_Encoder_pos < FL_Encoder_pos_wanted_back_ward) || (bmlor == 1))
 8001b34:	e066      	b.n	8001c04 <APK_Task+0x69c>
                        {
                            /* stop */
                            Car_Wanted_Speed = 0.0f;
 8001b36:	4b17      	ldr	r3, [pc, #92]	@ (8001b94 <APK_Task+0x62c>)
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
                            Car_Wanted_direction = 0.0f;
 8001b3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ba4 <APK_Task+0x63c>)
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
                            Reset_Flag = 1;
 8001b46:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <APK_Task+0x64c>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
                            p_APK->Mode_Parking = MODE_PARKING_PARK;   
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	709a      	strb	r2, [r3, #2]
                if((FR_Encoder_pos < FR_Encoder_pos_wanted_back_ward) || (FL_Encoder_pos < FL_Encoder_pos_wanted_back_ward) || (bmlor == 1))
 8001b52:	e057      	b.n	8001c04 <APK_Task+0x69c>
                    }
                } 
            }
            else
            {
                p_APK->Mode_Parking = MODE_PARKING_SEARCH;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	709a      	strb	r2, [r3, #2]
 8001b5a:	e054      	b.n	8001c06 <APK_Task+0x69e>
                /* continue */
            }
        }
        else // 
        {
            p_APK->Mode_Parking    = MODE_PARKING_SEARCH;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	709a      	strb	r2, [r3, #2]
            FR_Encoder_pos_initial = FR_Encoder_pos;
 8001b62:	4b1f      	ldr	r3, [pc, #124]	@ (8001be0 <APK_Task+0x678>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a17      	ldr	r2, [pc, #92]	@ (8001bc4 <APK_Task+0x65c>)
 8001b68:	6013      	str	r3, [r2, #0]
            FL_Encoder_pos_initial = FL_Encoder_pos;
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <APK_Task+0x670>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a18      	ldr	r2, [pc, #96]	@ (8001bd0 <APK_Task+0x668>)
 8001b70:	6013      	str	r3, [r2, #0]
            Angle_Wanted = 0 ;
 8001b72:	4b23      	ldr	r3, [pc, #140]	@ (8001c00 <APK_Task+0x698>)
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
            Car_Angle_initial = (Main_Orientation.FilteredYAW);
 8001b7a:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <APK_Task+0x634>)
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b7e:	4a02      	ldr	r2, [pc, #8]	@ (8001b88 <APK_Task+0x620>)
 8001b80:	6013      	str	r3, [r2, #0]
            l_AppStatus = APP_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	73fb      	strb	r3, [r7, #15]
 8001b86:	e03e      	b.n	8001c06 <APK_Task+0x69e>
 8001b88:	200006d0 	.word	0x200006d0
 8001b8c:	42b40000 	.word	0x42b40000
 8001b90:	200006d8 	.word	0x200006d8
 8001b94:	200006dc 	.word	0x200006dc
 8001b98:	200006cd 	.word	0x200006cd
 8001b9c:	200000f0 	.word	0x200000f0
 8001ba0:	200006cc 	.word	0x200006cc
 8001ba4:	200006e0 	.word	0x200006e0
 8001ba8:	43340000 	.word	0x43340000
 8001bac:	3e19999a 	.word	0x3e19999a
 8001bb0:	20000020 	.word	0x20000020
 8001bb4:	200006ca 	.word	0x200006ca
 8001bb8:	20000204 	.word	0x20000204
 8001bbc:	20000018 	.word	0x20000018
 8001bc0:	200006c8 	.word	0x200006c8
 8001bc4:	200006a4 	.word	0x200006a4
 8001bc8:	42480000 	.word	0x42480000
 8001bcc:	200006ac 	.word	0x200006ac
 8001bd0:	200006a8 	.word	0x200006a8
 8001bd4:	200006b0 	.word	0x200006b0
 8001bd8:	200006f8 	.word	0x200006f8
 8001bdc:	200006c0 	.word	0x200006c0
 8001be0:	200006fc 	.word	0x200006fc
 8001be4:	200006bc 	.word	0x200006bc
 8001be8:	200006b4 	.word	0x200006b4
 8001bec:	200006b8 	.word	0x200006b8
 8001bf0:	200006d4 	.word	0x200006d4
 8001bf4:	200006c9 	.word	0x200006c9
 8001bf8:	42b40000 	.word	0x42b40000
 8001bfc:	43870000 	.word	0x43870000
 8001c00:	200006c4 	.word	0x200006c4
                if((FR_Encoder_pos < FR_Encoder_pos_wanted_back_ward) || (FL_Encoder_pos < FL_Encoder_pos_wanted_back_ward) || (bmlor == 1))
 8001c04:	bf00      	nop
        }        
    }
    if(RotateFlag == 0)
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <APK_Task+0x6c4>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d108      	bne.n	8001c20 <APK_Task+0x6b8>
        l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_strafe);
 8001c0e:	4908      	ldr	r1, [pc, #32]	@ (8001c30 <APK_Task+0x6c8>)
 8001c10:	4808      	ldr	r0, [pc, #32]	@ (8001c34 <APK_Task+0x6cc>)
 8001c12:	f000 f9e5 	bl	8001fe0 <CAN_send_message>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	73fb      	strb	r3, [r7, #15]
    return l_AppStatus;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200006cd 	.word	0x200006cd
 8001c30:	200001cc 	.word	0x200001cc
 8001c34:	20000018 	.word	0x20000018

08001c38 <BSD_init>:
/***********************************************************************************************************************
*                                                  FUNCTION DECLARATION                                                *
***********************************************************************************************************************/

app_status_t BSD_init(BSD_t *p_bls , void (*p_delay)(uint32_t) , void (*p_suspend)(void) , void (*p_resume)(void))
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
	app_status_t l_AppStatus = APP_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	75fb      	strb	r3, [r7, #23]
	if (NULL == p_bls)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <BSD_init+0x1e>
	{
		l_AppStatus = APP_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	75fb      	strb	r3, [r7, #23]
 8001c54:	e008      	b.n	8001c68 <BSD_init+0x30>
	}
	else
	{
		delay_call_back = p_delay;
 8001c56:	4a08      	ldr	r2, [pc, #32]	@ (8001c78 <BSD_init+0x40>)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	6013      	str	r3, [r2, #0]
		buzzer_resume = p_resume;
 8001c5c:	4a07      	ldr	r2, [pc, #28]	@ (8001c7c <BSD_init+0x44>)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	6013      	str	r3, [r2, #0]
		buzzer_suspend = p_suspend;
 8001c62:	4a07      	ldr	r2, [pc, #28]	@ (8001c80 <BSD_init+0x48>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6013      	str	r3, [r2, #0]
	}
	return l_AppStatus;
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000710 	.word	0x20000710
 8001c7c:	20000714 	.word	0x20000714
 8001c80:	20000718 	.word	0x20000718

08001c84 <BSD_task>:

app_status_t BSD_task(BSD_t *p_bls)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	app_status_t l_AppStatus = APP_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]
	ecu_status_t l_EcuStatus = ECU_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73bb      	strb	r3, [r7, #14]
	if (NULL == p_bls)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d102      	bne.n	8001ca0 <BSD_task+0x1c>
	{
		l_AppStatus = APP_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	e08b      	b.n	8001db8 <BSD_task+0x134>
	}
	else
	{
		if  ((*Main_Ultrasonics.UL_90->Distance <= MIN_DISTANCE) || (*Main_Ultrasonics.UL_135->Distance <= MIN_DISTANCE)
 8001ca0:	4b48      	ldr	r3, [pc, #288]	@ (8001dc4 <BSD_task+0x140>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	edd3 7a00 	vldr	s15, [r3]
 8001caa:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	d923      	bls.n	8001d00 <BSD_task+0x7c>
 8001cb8:	4b42      	ldr	r3, [pc, #264]	@ (8001dc4 <BSD_task+0x140>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	edd3 7a00 	vldr	s15, [r3]
 8001cc2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cce:	d917      	bls.n	8001d00 <BSD_task+0x7c>
		 || (*Main_Ultrasonics.UL_270->Distance <= MIN_DISTANCE) || (*Main_Ultrasonics.UL_225->Distance <= MIN_DISTANCE))
 8001cd0:	4b3c      	ldr	r3, [pc, #240]	@ (8001dc4 <BSD_task+0x140>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce6:	d90b      	bls.n	8001d00 <BSD_task+0x7c>
 8001ce8:	4b36      	ldr	r3, [pc, #216]	@ (8001dc4 <BSD_task+0x140>)
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfe:	d849      	bhi.n	8001d94 <BSD_task+0x110>
		{
            // right of car
			if((*Main_Ultrasonics.UL_90->Distance <= MIN_DISTANCE) || (*Main_Ultrasonics.UL_135->Distance <= MIN_DISTANCE))  
 8001d00:	4b30      	ldr	r3, [pc, #192]	@ (8001dc4 <BSD_task+0x140>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	edd3 7a00 	vldr	s15, [r3]
 8001d0a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d16:	d90b      	bls.n	8001d30 <BSD_task+0xac>
 8001d18:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc4 <BSD_task+0x140>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2e:	d805      	bhi.n	8001d3c <BSD_task+0xb8>
			{
			    l_EcuStatus = right_led_turn_on(p_bls);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f875 	bl	8001e20 <right_led_turn_on>
 8001d36:	4603      	mov	r3, r0
 8001d38:	73bb      	strb	r3, [r7, #14]
 8001d3a:	e004      	b.n	8001d46 <BSD_task+0xc2>
		    }
			else
		    {
			    l_EcuStatus = right_led_turn_off(p_bls);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f87d 	bl	8001e3c <right_led_turn_off>
 8001d42:	4603      	mov	r3, r0
 8001d44:	73bb      	strb	r3, [r7, #14]
		    }
            // left of car
			if((*Main_Ultrasonics.UL_270->Distance <= MIN_DISTANCE) || (*Main_Ultrasonics.UL_225->Distance <= MIN_DISTANCE)) 
 8001d46:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc4 <BSD_task+0x140>)
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001d54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5c:	d90b      	bls.n	8001d76 <BSD_task+0xf2>
 8001d5e:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <BSD_task+0x140>)
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	edd3 7a00 	vldr	s15, [r3]
 8001d68:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d74:	d805      	bhi.n	8001d82 <BSD_task+0xfe>
			{
			    l_EcuStatus = left_led_turn_on(p_bls);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f86e 	bl	8001e58 <left_led_turn_on>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	73bb      	strb	r3, [r7, #14]
 8001d80:	e004      	b.n	8001d8c <BSD_task+0x108>
	 	    }
			else
		    {
			    l_EcuStatus = left_led_turn_off(p_bls);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f876 	bl	8001e74 <left_led_turn_off>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73bb      	strb	r3, [r7, #14]
		    }

			buzzer_resume();
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <BSD_task+0x144>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4798      	blx	r3
 8001d92:	e011      	b.n	8001db8 <BSD_task+0x134>
		}
		else
		{
			l_EcuStatus = right_led_turn_off(p_bls);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f851 	bl	8001e3c <right_led_turn_off>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	73bb      	strb	r3, [r7, #14]
			l_EcuStatus = buzzer_off(p_bls);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f884 	bl	8001eac <buzzer_off>
 8001da4:	4603      	mov	r3, r0
 8001da6:	73bb      	strb	r3, [r7, #14]
			l_EcuStatus = left_led_turn_off(p_bls);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f863 	bl	8001e74 <left_led_turn_off>
 8001dae:	4603      	mov	r3, r0
 8001db0:	73bb      	strb	r3, [r7, #14]
			buzzer_suspend();
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <BSD_task+0x148>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4798      	blx	r3
		}

	}
	return l_AppStatus;
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000020 	.word	0x20000020
 8001dc8:	20000714 	.word	0x20000714
 8001dcc:	20000718 	.word	0x20000718

08001dd0 <BSD_buzzer_task>:

app_status_t BSD_buzzer_task(BSD_t *p_bls)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	app_status_t l_AppStatus = APP_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73fb      	strb	r3, [r7, #15]
	ecu_status_t l_EcuStatus = ECU_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73bb      	strb	r3, [r7, #14]
	if (NULL == p_bls)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d102      	bne.n	8001dec <BSD_buzzer_task+0x1c>
	{
		l_AppStatus = APP_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]
 8001dea:	e012      	b.n	8001e12 <BSD_buzzer_task+0x42>
	}
	else
	{
		l_EcuStatus = buzzer_on(p_bls);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f84f 	bl	8001e90 <buzzer_on>
 8001df2:	4603      	mov	r3, r0
 8001df4:	73bb      	strb	r3, [r7, #14]
		delay_call_back(500);
 8001df6:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <BSD_buzzer_task+0x4c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001dfe:	4798      	blx	r3
		l_EcuStatus = buzzer_off(p_bls);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f853 	bl	8001eac <buzzer_off>
 8001e06:	4603      	mov	r3, r0
 8001e08:	73bb      	strb	r3, [r7, #14]
		delay_call_back(250);
 8001e0a:	4b04      	ldr	r3, [pc, #16]	@ (8001e1c <BSD_buzzer_task+0x4c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	20fa      	movs	r0, #250	@ 0xfa
 8001e10:	4798      	blx	r3
	}
	return l_AppStatus;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000710 	.word	0x20000710

08001e20 <right_led_turn_on>:
/***********************************************************************************************************************
*                                               STATIC FUNCTION DECLARATION                                            *
***********************************************************************************************************************/

static inline ecu_status_t right_led_turn_on(BSD_t *p_bls)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	return (logic_set(p_bls->RightLed));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f008 ffe5 	bl	800adfc <logic_set>
 8001e32:	4603      	mov	r3, r0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <right_led_turn_off>:

static inline ecu_status_t right_led_turn_off(BSD_t *p_bls)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	return (logic_reset(p_bls->RightLed));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f008 fff0 	bl	800ae2e <logic_reset>
 8001e4e:	4603      	mov	r3, r0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <left_led_turn_on>:

static inline ecu_status_t left_led_turn_on(BSD_t *p_bls)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	return (logic_set(p_bls->LeftLed));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f008 ffc9 	bl	800adfc <logic_set>
 8001e6a:	4603      	mov	r3, r0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <left_led_turn_off>:

static inline ecu_status_t left_led_turn_off(BSD_t *p_bls)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	return (logic_reset(p_bls->LeftLed));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f008 ffd4 	bl	800ae2e <logic_reset>
 8001e86:	4603      	mov	r3, r0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <buzzer_on>:

static inline ecu_status_t buzzer_on(BSD_t *p_bls)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	return (logic_set(p_bls->Buzzer));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f008 ffad 	bl	800adfc <logic_set>
 8001ea2:	4603      	mov	r3, r0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <buzzer_off>:

static inline ecu_status_t buzzer_off(BSD_t *p_bls)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	return (logic_reset(p_bls->Buzzer));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f008 ffb8 	bl	800ae2e <logic_reset>
 8001ebe:	4603      	mov	r3, r0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <CAN_task_init>:
 * 
 * @param p_CanBus pointer to the bus of CAN
 * @return app_status_t status of the operation 
 */
app_status_t CAN_task_init (CAN_bus_t *p_CanBus)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]
    ecu_status_t l_EcuStatus = ECU_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73bb      	strb	r3, [r7, #14]
    if (NULL == p_CanBus)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d102      	bne.n	8001ee4 <CAN_task_init+0x1c>
    {
        l_AppStatus = APP_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
 8001ee2:	e017      	b.n	8001f14 <CAN_task_init+0x4c>
    }
    else
    {
        l_EcuStatus |= CANSPI_Initialize(p_CanBus->UsedCAN);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f007 ffb1 	bl	8009e50 <CANSPI_Initialize>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	7bbb      	ldrb	r3, [r7, #14]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	73bb      	strb	r3, [r7, #14]
        p_CanBus->ExpectedMSG = list_create();
 8001ef8:	f00e f804 	bl	800ff04 <list_create>
 8001efc:	4602      	mov	r2, r0
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	605a      	str	r2, [r3, #4]
        if ((l_EcuStatus != ECU_OK) || (NULL == p_CanBus->ExpectedMSG))
 8001f02:	7bbb      	ldrb	r3, [r7, #14]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d103      	bne.n	8001f10 <CAN_task_init+0x48>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <CAN_task_init+0x4c>
        {
            l_AppStatus = APP_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_AppStatus;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <CAN_add_msg_rx>:
 * @param p_CanBus pointer to the CAN bus which could receive the message
 * @param p_Message pointer to the message could be received
 * @return app_status_t status of the operation 
 */
app_status_t CAN_add_msg_rx (CAN_bus_t *p_CanBus, can_msg_t *p_Message)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]
    app_status_t l_AppStatus = APP_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	73fb      	strb	r3, [r7, #15]
    if ((NULL == p_CanBus) || (NULL == p_Message))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <CAN_add_msg_rx+0x1a>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <CAN_add_msg_rx+0x20>
    {
        l_AppStatus = APP_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
 8001f3c:	e005      	b.n	8001f4a <CAN_add_msg_rx+0x2c>
    }
    else
    {
        list_append(p_CanBus->ExpectedMSG, p_Message);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	6839      	ldr	r1, [r7, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f00d fff9 	bl	800ff3c <list_append>
    }
    return l_AppStatus;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <CAN_rx_task>:
 * @param p_CanBus pointer to the CAN bus
 * @return app_status_t status of the operation 
 * @note this task should be blocked waiting for interrupt to unblock it
 */
app_status_t CAN_rx_task (CAN_bus_t *p_CanBus)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	@ 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    ecu_status_t l_EcuStatus = ECU_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (NULL == p_CanBus)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <CAN_rx_task+0x22>
    {
        l_AppStatus = APP_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001f74:	e02c      	b.n	8001fd0 <CAN_rx_task+0x7c>
    }
    else
    {
        uCAN_MSG l_TempMessage;
        can_msg_t *l_RxMessage = NULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
        l_EcuStatus |= CANSPI_Receive(p_CanBus->UsedCAN, &l_TempMessage);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f107 020c 	add.w	r2, r7, #12
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f008 f9db 	bl	800a340 <CANSPI_Receive>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        if (l_EcuStatus == ECU_OK)
 8001f98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d117      	bne.n	8001fd0 <CAN_rx_task+0x7c>
        {
            l_RxMessage = (can_msg_t *)list_find(p_CanBus->ExpectedMSG, &(l_TempMessage), find_msg_with_id);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f107 010c 	add.w	r1, r7, #12
 8001fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8001fdc <CAN_rx_task+0x88>)
 8001faa:	4618      	mov	r0, r3
 8001fac:	f00d fffe 	bl	800ffac <list_find>
 8001fb0:	6238      	str	r0, [r7, #32]
            if (l_RxMessage != NULL)
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00b      	beq.n	8001fd0 <CAN_rx_task+0x7c>
            {
                memcpy(&l_RxMessage->Message, &l_TempMessage, sizeof(uCAN_MSG));
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	f107 010c 	add.w	r1, r7, #12
 8001fbe:	2214      	movs	r2, #20
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f00e f917 	bl	80101f4 <memcpy>
                l_RxMessage->CallBack(&l_RxMessage->Message);
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	6a3a      	ldr	r2, [r7, #32]
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4798      	blx	r3
            }
        }
    }
    return l_AppStatus;
 8001fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3728      	adds	r7, #40	@ 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	08002097 	.word	0x08002097

08001fe0 <CAN_send_message>:
 * @param p_Message pointer to the transsmitted message
 * @return app_status_t status of the operation 
 * @note this function calls callback to update the message frame
 */
app_status_t CAN_send_message (CAN_bus_t *p_CanBus, can_msg_t *p_Message)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
    app_status_t l_AppStatus = APP_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
    ecu_status_t l_EcuStatus = ECU_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73bb      	strb	r3, [r7, #14]
    if ((NULL == p_CanBus) || (NULL == p_Message))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <CAN_send_message+0x1e>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d102      	bne.n	8002004 <CAN_send_message+0x24>
    {
        l_AppStatus = APP_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
 8002002:	e043      	b.n	800208c <CAN_send_message+0xac>
    }
    else
    {
        p_Message->CallBack(&p_Message->Message);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	4610      	mov	r0, r2
 800200c:	4798      	blx	r3
        p_Message->Message.frame.id = p_Message->ID;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	605a      	str	r2, [r3, #4]
        l_EcuStatus = CANSPI_isBussOff(p_CanBus->UsedCAN);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f008 fa4e 	bl	800a4bc <CANSPI_isBussOff>
 8002020:	4603      	mov	r3, r0
 8002022:	73bb      	strb	r3, [r7, #14]
        if (l_EcuStatus == ECU_OK)
 8002024:	7bbb      	ldrb	r3, [r7, #14]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d11d      	bne.n	8002066 <CAN_send_message+0x86>
        {
            l_EcuStatus |= CANSPI_Transmit(p_CanBus->UsedCAN, &p_Message->Message);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f008 f8be 	bl	800a1b4 <CANSPI_Transmit>
 8002038:	4603      	mov	r3, r0
 800203a:	461a      	mov	r2, r3
 800203c:	7bbb      	ldrb	r3, [r7, #14]
 800203e:	4313      	orrs	r3, r2
 8002040:	73bb      	strb	r3, [r7, #14]
            if ((l_EcuStatus != ECU_OK))
 8002042:	7bbb      	ldrb	r3, [r7, #14]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d021      	beq.n	800208c <CAN_send_message+0xac>
            {
                l_AppStatus = APP_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
                if (l_EcuStatus == ECU_ERROR)
 800204c:	7bbb      	ldrb	r3, [r7, #14]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d11c      	bne.n	800208c <CAN_send_message+0xac>
                {
                	l_EcuStatus = CANSPI_Initialize(p_CanBus->UsedCAN);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f007 fefa 	bl	8009e50 <CANSPI_Initialize>
 800205c:	4603      	mov	r3, r0
 800205e:	73bb      	strb	r3, [r7, #14]
                	l_AppStatus = APP_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
 8002064:	e012      	b.n	800208c <CAN_send_message+0xac>
                }
            }
        }
        else
        {
            l_EcuStatus = CANSPI_isTxErrorPassive(p_CanBus->UsedCAN);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f008 fa4e 	bl	800a50c <CANSPI_isTxErrorPassive>
 8002070:	4603      	mov	r3, r0
 8002072:	73bb      	strb	r3, [r7, #14]
            if (l_EcuStatus == ECU_ERROR)
 8002074:	7bbb      	ldrb	r3, [r7, #14]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d108      	bne.n	800208c <CAN_send_message+0xac>
            {
                l_EcuStatus = CANSPI_Initialize(p_CanBus->UsedCAN);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f007 fee6 	bl	8009e50 <CANSPI_Initialize>
 8002084:	4603      	mov	r3, r0
 8002086:	73bb      	strb	r3, [r7, #14]
                l_AppStatus = APP_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }
    return l_AppStatus;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <find_msg_with_id>:
 * @param p_MsgExpected pointer to the messages which can expected to receive and handle
 * @param p_MsgReceived pointer to the received message
 * @return int 1 if yes 0 if no
 */
static int find_msg_with_id(void *p_MsgExpected, const void *p_MsgReceived)
{
 8002096:	b480      	push	{r7}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
    int l_RetVal = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
    if (((can_msg_t *)p_MsgExpected)->ID == ((uCAN_MSG *)p_MsgReceived)->frame.id)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d101      	bne.n	80020b4 <find_msg_with_id+0x1e>
    {
        l_RetVal = 1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
    }
    return l_RetVal;
 80020b4:	68fb      	ldr	r3, [r7, #12]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <controller_add_callback>:
 * @return app_status_t 
 */
app_status_t controller_add_callback(controller_t *p_UsedController, 
                                     pressed_button_t p_Button, 
                                     void (* p_Callback) (void *))
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	460b      	mov	r3, r1
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	72fb      	strb	r3, [r7, #11]
    app_status_t l_AppStatus = APP_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	75fb      	strb	r3, [r7, #23]
    if ((NULL == p_UsedController) || (NULL == p_Callback))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <controller_add_callback+0x1e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <controller_add_callback+0x24>
    {
        l_AppStatus = APP_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	75fb      	strb	r3, [r7, #23]
 80020e6:	e038      	b.n	800215a <controller_add_callback+0x96>
    }
    else
    {
        switch (p_Button)
 80020e8:	7afb      	ldrb	r3, [r7, #11]
 80020ea:	2b07      	cmp	r3, #7
 80020ec:	d832      	bhi.n	8002154 <controller_add_callback+0x90>
 80020ee:	a201      	add	r2, pc, #4	@ (adr r2, 80020f4 <controller_add_callback+0x30>)
 80020f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f4:	08002115 	.word	0x08002115
 80020f8:	0800211d 	.word	0x0800211d
 80020fc:	08002125 	.word	0x08002125
 8002100:	0800212d 	.word	0x0800212d
 8002104:	08002135 	.word	0x08002135
 8002108:	0800213d 	.word	0x0800213d
 800210c:	08002145 	.word	0x08002145
 8002110:	0800214d 	.word	0x0800214d
        {
        case UP:
            p_UsedController->UP_button_clb = p_Callback;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	605a      	str	r2, [r3, #4]
            break;
 800211a:	e01e      	b.n	800215a <controller_add_callback+0x96>

        case DOWN:
            p_UsedController->DOWN_button_clb = p_Callback;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	609a      	str	r2, [r3, #8]
            break;
 8002122:	e01a      	b.n	800215a <controller_add_callback+0x96>
            
        case LEFT:
            p_UsedController->LEFT_button_clb = p_Callback;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	60da      	str	r2, [r3, #12]
            break;
 800212a:	e016      	b.n	800215a <controller_add_callback+0x96>

        case RIGHT:
            p_UsedController->RIGHT_button_clb = p_Callback;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	611a      	str	r2, [r3, #16]
            break;
 8002132:	e012      	b.n	800215a <controller_add_callback+0x96>

        case SELECT:
            p_UsedController->SELECT_button_clb = p_Callback;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	615a      	str	r2, [r3, #20]
            break;
 800213a:	e00e      	b.n	800215a <controller_add_callback+0x96>

        case START:
            p_UsedController->START_button_clb = p_Callback;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	619a      	str	r2, [r3, #24]
            break;
 8002142:	e00a      	b.n	800215a <controller_add_callback+0x96>

        case LEFT_STICK:
            p_UsedController->LEFT_STICK_button_clb = p_Callback;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	61da      	str	r2, [r3, #28]
            break;
 800214a:	e006      	b.n	800215a <controller_add_callback+0x96>

        case RITHT_STICK:
            p_UsedController->RITHT_STICK_button_clb = p_Callback;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	621a      	str	r2, [r3, #32]
            break;
 8002152:	e002      	b.n	800215a <controller_add_callback+0x96>
        
        default:
            l_AppStatus = APP_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	75fb      	strb	r3, [r7, #23]
            break;
 8002158:	bf00      	nop
        }
    }
    return l_AppStatus;
 800215a:	7dfb      	ldrb	r3, [r7, #23]
}
 800215c:	4618      	mov	r0, r3
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <controller_wait_receive>:
 * @brief this function request to receive commands from controller
 * @param p_UsedController pointer to the controller
 * @return app_status_t status of operation
 */
app_status_t controller_wait_receive(controller_t *p_UsedController)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedController)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <controller_wait_receive+0x18>
    {
        l_AppStatus = APP_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
 800217e:	e00b      	b.n	8002198 <controller_wait_receive+0x30>
    }
    else
    {
        ecu_status_t l_EcuStatus= control_receive_data(p_UsedController->UsedController);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f008 fa9e 	bl	800a6c6 <control_receive_data>
 800218a:	4603      	mov	r3, r0
 800218c:	73bb      	strb	r3, [r7, #14]
        if (l_EcuStatus != ECU_OK)
 800218e:	7bbb      	ldrb	r3, [r7, #14]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <controller_wait_receive+0x30>
        {
            l_AppStatus = APP_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_AppStatus;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <controller_task>:
 * @brief this function take an action depending on the command received
 * @param p_UsedController pointer to the controller
 * @return app_status_t status of operation
 */
app_status_t controller_task(controller_t *p_UsedController)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	77fb      	strb	r3, [r7, #31]
    if (NULL == p_UsedController)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d102      	bne.n	80021bc <controller_task+0x18>
    {
        l_AppStatus = APP_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	77fb      	strb	r3, [r7, #31]
 80021ba:	e0eb      	b.n	8002394 <controller_task+0x1f0>
    else
    {
        Push_Button_Joy_Stick_Data l_PushButton;
        two_float_conv temp;
        one_float_conv temp_angle;
        switch (p_UsedController->UsedController->Data[0])
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	791b      	ldrb	r3, [r3, #4]
 80021c2:	3baa      	subs	r3, #170	@ 0xaa
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	f200 80e1 	bhi.w	800238c <controller_task+0x1e8>
 80021ca:	a201      	add	r2, pc, #4	@ (adr r2, 80021d0 <controller_task+0x2c>)
 80021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d0:	080021e1 	.word	0x080021e1
 80021d4:	08002225 	.word	0x08002225
 80021d8:	080022b3 	.word	0x080022b3
 80021dc:	08002379 	.word	0x08002379
		{
			case (LEFT_JOY_STICK):
                memcpy(temp.data, &p_UsedController->UsedController->Data[1], 8);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	1d5a      	adds	r2, r3, #5
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	6810      	ldr	r0, [r2, #0]
 80021ec:	6851      	ldr	r1, [r2, #4]
 80021ee:	c303      	stmia	r3!, {r0, r1}
				Car_Wanted_Speed = ((temp.value[0]) * DEFUALT_ROBOT_MAX_SPEED) / 100.0;
 80021f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021f4:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80023a0 <controller_task+0x1fc>
 80021f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021fc:	eddf 6a69 	vldr	s13, [pc, #420]	@ 80023a4 <controller_task+0x200>
 8002200:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002204:	4b68      	ldr	r3, [pc, #416]	@ (80023a8 <controller_task+0x204>)
 8002206:	edc3 7a00 	vstr	s15, [r3]
                Car_Wanted_direction = temp.value[1];
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4a67      	ldr	r2, [pc, #412]	@ (80023ac <controller_task+0x208>)
 800220e:	6013      	str	r3, [r2, #0]
                /* send CAN Message of strafe */
                l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_strafe);
 8002210:	4967      	ldr	r1, [pc, #412]	@ (80023b0 <controller_task+0x20c>)
 8002212:	4868      	ldr	r0, [pc, #416]	@ (80023b4 <controller_task+0x210>)
 8002214:	f7ff fee4 	bl	8001fe0 <CAN_send_message>
 8002218:	4603      	mov	r3, r0
 800221a:	461a      	mov	r2, r3
 800221c:	7ffb      	ldrb	r3, [r7, #31]
 800221e:	4313      	orrs	r3, r2
 8002220:	77fb      	strb	r3, [r7, #31]
				break;
 8002222:	e0b7      	b.n	8002394 <controller_task+0x1f0>

			case(RIGHT_JOY_STICK):
                memcpy(temp.data, &p_UsedController->UsedController->Data[1], 8);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	1d5a      	adds	r2, r3, #5
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	6810      	ldr	r0, [r2, #0]
 8002230:	6851      	ldr	r1, [r2, #4]
 8002232:	c303      	stmia	r3!, {r0, r1}
                Car_Wanted_Angular_Speed = ((temp.value[0]) * DEFUALT_ROBOT_MAX_ANGULAR_SPEED) / 100.0;
 8002234:	edd7 7a03 	vldr	s15, [r7, #12]
 8002238:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800223c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002240:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80023a4 <controller_task+0x200>
 8002244:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002248:	4b5b      	ldr	r3, [pc, #364]	@ (80023b8 <controller_task+0x214>)
 800224a:	edc3 7a00 	vstr	s15, [r3]
                Car_Wanted_Rotate_Radius = ((temp.value[1]) * DEFUALT_ROBOT_MAX_RADIUS) / 100.0;
 800224e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002252:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002256:	ee27 7a87 	vmul.f32	s14, s15, s14
 800225a:	eddf 6a52 	vldr	s13, [pc, #328]	@ 80023a4 <controller_task+0x200>
 800225e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002262:	4b56      	ldr	r3, [pc, #344]	@ (80023bc <controller_task+0x218>)
 8002264:	edc3 7a00 	vstr	s15, [r3]
                Car_Wanted_Angle = Main_Orientation.FilteredYAW;
 8002268:	4b55      	ldr	r3, [pc, #340]	@ (80023c0 <controller_task+0x21c>)
 800226a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226c:	4a55      	ldr	r2, [pc, #340]	@ (80023c4 <controller_task+0x220>)
 800226e:	6013      	str	r3, [r2, #0]
                /* send CAN Message of rotate */
                l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_rotate);
 8002270:	4955      	ldr	r1, [pc, #340]	@ (80023c8 <controller_task+0x224>)
 8002272:	4850      	ldr	r0, [pc, #320]	@ (80023b4 <controller_task+0x210>)
 8002274:	f7ff feb4 	bl	8001fe0 <CAN_send_message>
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	7ffb      	ldrb	r3, [r7, #31]
 800227e:	4313      	orrs	r3, r2
 8002280:	77fb      	strb	r3, [r7, #31]
                if ((Car_Wanted_Angular_Speed == 0) && (Car_Wanted_Rotate_Radius == 0))
 8002282:	4b4d      	ldr	r3, [pc, #308]	@ (80023b8 <controller_task+0x214>)
 8002284:	edd3 7a00 	vldr	s15, [r3]
 8002288:	eef5 7a40 	vcmp.f32	s15, #0.0
 800228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002290:	d10b      	bne.n	80022aa <controller_task+0x106>
 8002292:	4b4a      	ldr	r3, [pc, #296]	@ (80023bc <controller_task+0x218>)
 8002294:	edd3 7a00 	vldr	s15, [r3]
 8002298:	eef5 7a40 	vcmp.f32	s15, #0.0
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	d103      	bne.n	80022aa <controller_task+0x106>
                {
                    auto_control_yaw();
 80022a2:	4b4a      	ldr	r3, [pc, #296]	@ (80023cc <controller_task+0x228>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4798      	blx	r3
                }
                else
                {
                    manual_control_yaw();
                }
				break;
 80022a8:	e074      	b.n	8002394 <controller_task+0x1f0>
                    manual_control_yaw();
 80022aa:	4b49      	ldr	r3, [pc, #292]	@ (80023d0 <controller_task+0x22c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4798      	blx	r3
				break;
 80022b0:	e070      	b.n	8002394 <controller_task+0x1f0>

			case(PUSH_BUTTON):
                memcpy(l_PushButton.uart_data, p_UsedController->UsedController->Data, 9);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	1d1a      	adds	r2, r3, #4
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	6810      	ldr	r0, [r2, #0]
 80022be:	6851      	ldr	r1, [r2, #4]
 80022c0:	c303      	stmia	r3!, {r0, r1}
 80022c2:	7a12      	ldrb	r2, [r2, #8]
 80022c4:	701a      	strb	r2, [r3, #0]
				if ((l_PushButton.frame.up == 0x01) && (NULL != p_UsedController->UP_button_clb))
 80022c6:	7d7b      	ldrb	r3, [r7, #21]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d107      	bne.n	80022dc <controller_task+0x138>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <controller_task+0x138>
                {
                    p_UsedController->UP_button_clb(NULL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2000      	movs	r0, #0
 80022da:	4798      	blx	r3
                }

                if ((l_PushButton.frame.down == 0x01) && (NULL != p_UsedController->DOWN_button_clb))
 80022dc:	7dbb      	ldrb	r3, [r7, #22]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d107      	bne.n	80022f2 <controller_task+0x14e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <controller_task+0x14e>
                {
                    p_UsedController->DOWN_button_clb(NULL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2000      	movs	r0, #0
 80022f0:	4798      	blx	r3
                }

                if ((l_PushButton.frame.left == 0x01) && (NULL != p_UsedController->LEFT_button_clb))
 80022f2:	7dfb      	ldrb	r3, [r7, #23]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d107      	bne.n	8002308 <controller_task+0x164>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <controller_task+0x164>
                {
                    p_UsedController->LEFT_button_clb(NULL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2000      	movs	r0, #0
 8002306:	4798      	blx	r3
                }

                if ((l_PushButton.frame.right == 0x01) && (NULL != p_UsedController->RIGHT_button_clb))
 8002308:	7e3b      	ldrb	r3, [r7, #24]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d107      	bne.n	800231e <controller_task+0x17a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <controller_task+0x17a>
                {
                    p_UsedController->RIGHT_button_clb(NULL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2000      	movs	r0, #0
 800231c:	4798      	blx	r3
                }

                if ((l_PushButton.frame.select == 0x01) && (NULL != p_UsedController->SELECT_button_clb))
 800231e:	7e7b      	ldrb	r3, [r7, #25]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d107      	bne.n	8002334 <controller_task+0x190>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <controller_task+0x190>
                {
                    p_UsedController->SELECT_button_clb(NULL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	2000      	movs	r0, #0
 8002332:	4798      	blx	r3
                }

                if ((l_PushButton.frame.start == 0x01) && (NULL != p_UsedController->START_button_clb))
 8002334:	7ebb      	ldrb	r3, [r7, #26]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d107      	bne.n	800234a <controller_task+0x1a6>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <controller_task+0x1a6>
                {
                    p_UsedController->START_button_clb(NULL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2000      	movs	r0, #0
 8002348:	4798      	blx	r3
                }

                if ((l_PushButton.frame.left_stick == 0x01) && (NULL != p_UsedController->LEFT_STICK_button_clb))
 800234a:	7efb      	ldrb	r3, [r7, #27]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d107      	bne.n	8002360 <controller_task+0x1bc>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <controller_task+0x1bc>
                {
                    p_UsedController->LEFT_STICK_button_clb(NULL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	2000      	movs	r0, #0
 800235e:	4798      	blx	r3
                }

                if ((l_PushButton.frame.right_stick == 0x01) && (NULL != p_UsedController->RITHT_STICK_button_clb))
 8002360:	7f3b      	ldrb	r3, [r7, #28]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d115      	bne.n	8002392 <controller_task+0x1ee>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d011      	beq.n	8002392 <controller_task+0x1ee>
                {
                    p_UsedController->RITHT_STICK_button_clb(NULL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	2000      	movs	r0, #0
 8002374:	4798      	blx	r3
                }
				break;
 8002376:	e00c      	b.n	8002392 <controller_task+0x1ee>
            
            case (COMPASS_ANGLE):
                memcpy(temp_angle.data, &p_UsedController->UsedController->Data[1], 4);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3305      	adds	r3, #5
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60bb      	str	r3, [r7, #8]
                *p_UsedController->CompassAnglePTR = temp_angle.value; 
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	601a      	str	r2, [r3, #0]
                break;
 800238a:	e003      	b.n	8002394 <controller_task+0x1f0>

			default:
				l_AppStatus = APP_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	77fb      	strb	r3, [r7, #31]
			break;
 8002390:	e000      	b.n	8002394 <controller_task+0x1f0>
				break;
 8002392:	bf00      	nop
		}
    }
    return l_AppStatus;
 8002394:	7ffb      	ldrb	r3, [r7, #31]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3720      	adds	r7, #32
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	3ee66666 	.word	0x3ee66666
 80023a4:	42c80000 	.word	0x42c80000
 80023a8:	200006dc 	.word	0x200006dc
 80023ac:	200006e0 	.word	0x200006e0
 80023b0:	200001cc 	.word	0x200001cc
 80023b4:	20000018 	.word	0x20000018
 80023b8:	200006e4 	.word	0x200006e4
 80023bc:	200006e8 	.word	0x200006e8
 80023c0:	200000f0 	.word	0x200000f0
 80023c4:	200006d8 	.word	0x200006d8
 80023c8:	200001e8 	.word	0x200001e8
 80023cc:	20000720 	.word	0x20000720
 80023d0:	2000071c 	.word	0x2000071c

080023d4 <controller_get_yaw_control_init>:
 * @param p_UsedController pointer to the controller 
 * @param get_yaw_control_yaw pointer to the callback function which get the control of the yaw angle
 * @return app_status_t status of operation
 */
app_status_t controller_get_yaw_control_init(controller_t *p_UsedController, void (* get_yaw_control_yaw)(void))
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
    app_status_t l_AppStatus = APP_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
    if ((NULL == p_UsedController) || (NULL == get_yaw_control_yaw))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <controller_get_yaw_control_init+0x1a>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d102      	bne.n	80023f4 <controller_get_yaw_control_init+0x20>
    {
        l_AppStatus = APP_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
 80023f2:	e002      	b.n	80023fa <controller_get_yaw_control_init+0x26>
    }
    else
    {
        manual_control_yaw = get_yaw_control_yaw;
 80023f4:	4a04      	ldr	r2, [pc, #16]	@ (8002408 <controller_get_yaw_control_init+0x34>)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6013      	str	r3, [r2, #0]
    }
    return l_AppStatus;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	2000071c 	.word	0x2000071c

0800240c <controller_give_yaw_control_init>:
 * @param p_UsedController pointer to the controller 
 * @param get_yaw_control_yaw pointer to the callback function which give the control of the yaw angle
 * @return app_status_t status of operation
 */
app_status_t controller_give_yaw_control_init(controller_t *p_UsedController, void (* give_yaw_control_yaw)(void))
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
    app_status_t l_AppStatus = APP_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]
    if ((NULL == p_UsedController) || (NULL == give_yaw_control_yaw))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <controller_give_yaw_control_init+0x1a>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d102      	bne.n	800242c <controller_give_yaw_control_init+0x20>
    {
        l_AppStatus = APP_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	73fb      	strb	r3, [r7, #15]
 800242a:	e002      	b.n	8002432 <controller_give_yaw_control_init+0x26>
    }
    else
    {
        auto_control_yaw = give_yaw_control_yaw;
 800242c:	4a04      	ldr	r2, [pc, #16]	@ (8002440 <controller_give_yaw_control_init+0x34>)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6013      	str	r3, [r2, #0]
    }
    return l_AppStatus;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	20000720 	.word	0x20000720

08002444 <MPU_task_init>:
 * @brief initialize the task of MPU
 * @param p_UsedMPU pointer to the used MPU
 * @return app_status_t status of operation
 */
app_status_t MPU_task_init(mpu_t *p_UsedMPU)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedMPU)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d102      	bne.n	800245c <MPU_task_init+0x18>
    {
        l_AppStatus = APP_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
 800245a:	e00e      	b.n	800247a <MPU_task_init+0x36>
    }
    else
    {
        ecu_status_t l_EcuStatus = MPU6050_Init(p_UsedMPU->UsedI2C, p_UsedMPU->mpu);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4619      	mov	r1, r3
 8002466:	4610      	mov	r0, r2
 8002468:	f008 fd26 	bl	800aeb8 <MPU6050_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	73bb      	strb	r3, [r7, #14]
        if (l_EcuStatus != ECU_OK)
 8002470:	7bbb      	ldrb	r3, [r7, #14]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MPU_task_init+0x36>
        {
            l_AppStatus = APP_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_AppStatus;
 800247a:	7bfb      	ldrb	r3, [r7, #15]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <MPU_update_task>:
 * @brief  task of MPU which update the values (specially YAW)
 * @param p_UsedMPU pointer to the used MPU
 * @return app_status_t status of operation
 */
app_status_t MPU_update_task(mpu_t *p_UsedMPU)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedMPU)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d102      	bne.n	800249c <MPU_update_task+0x18>
    {
        l_AppStatus = APP_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	e014      	b.n	80024c6 <MPU_update_task+0x42>
    }
    else
    {
        ecu_status_t l_EcuStatus = MPU6050_Read_All(p_UsedMPU->UsedI2C, p_UsedMPU->mpu);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4619      	mov	r1, r3
 80024a6:	4610      	mov	r0, r2
 80024a8:	f008 fdaa 	bl	800b000 <MPU6050_Read_All>
 80024ac:	4603      	mov	r3, r0
 80024ae:	73bb      	strb	r3, [r7, #14]
        if (l_EcuStatus != ECU_OK)
 80024b0:	7bbb      	ldrb	r3, [r7, #14]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <MPU_update_task+0x38>
        {
            l_AppStatus = APP_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	e004      	b.n	80024c6 <MPU_update_task+0x42>
        }
        else
        {
            p_UsedMPU->YAW = p_UsedMPU->mpu->Yaw;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	609a      	str	r2, [r3, #8]
        }
    }
    return l_AppStatus;
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <messages_init>:
/**
 * @brief responsible for adding messages to the list of expected messages to receive via CAN bus
 * @return app_status_t status of operation
 */
app_status_t messages_init(void (*p_SusCB)(void), void (*p_ResCB)(void))
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
    app_status_t l_AppStatus = APP_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
    l_AppStatus |= CAN_add_msg_rx(&Main_CAN, &msg_sign_detected);   
 80024de:	4913      	ldr	r1, [pc, #76]	@ (800252c <messages_init+0x5c>)
 80024e0:	4813      	ldr	r0, [pc, #76]	@ (8002530 <messages_init+0x60>)
 80024e2:	f7ff fd1c 	bl	8001f1e <CAN_add_msg_rx>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	73fb      	strb	r3, [r7, #15]
    l_AppStatus |= CAN_add_msg_rx(&Main_CAN, &msg_lane_update);   
 80024f0:	4910      	ldr	r1, [pc, #64]	@ (8002534 <messages_init+0x64>)
 80024f2:	480f      	ldr	r0, [pc, #60]	@ (8002530 <messages_init+0x60>)
 80024f4:	f7ff fd13 	bl	8001f1e <CAN_add_msg_rx>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	4313      	orrs	r3, r2
 8002500:	73fb      	strb	r3, [r7, #15]
    l_AppStatus |= CAN_add_msg_rx(&Main_CAN, &msg_update_encoder);   
 8002502:	490d      	ldr	r1, [pc, #52]	@ (8002538 <messages_init+0x68>)
 8002504:	480a      	ldr	r0, [pc, #40]	@ (8002530 <messages_init+0x60>)
 8002506:	f7ff fd0a 	bl	8001f1e <CAN_add_msg_rx>
 800250a:	4603      	mov	r3, r0
 800250c:	461a      	mov	r2, r3
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	4313      	orrs	r3, r2
 8002512:	73fb      	strb	r3, [r7, #15]
    YawSusCB = p_SusCB,
 8002514:	4a09      	ldr	r2, [pc, #36]	@ (800253c <messages_init+0x6c>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6013      	str	r3, [r2, #0]
    YawResCB = p_ResCB;
 800251a:	4a09      	ldr	r2, [pc, #36]	@ (8002540 <messages_init+0x70>)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6013      	str	r3, [r2, #0]
    return l_AppStatus;
 8002520:	7bfb      	ldrb	r3, [r7, #15]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	2000023c 	.word	0x2000023c
 8002530:	20000018 	.word	0x20000018
 8002534:	20000258 	.word	0x20000258
 8002538:	20000274 	.word	0x20000274
 800253c:	20000724 	.word	0x20000724
 8002540:	20000728 	.word	0x20000728

08002544 <msg_robot_strafe_clb>:
*                                               STATIC FUNCTION DECLARATION                                            *
***********************************************************************************************************************/

/* Message for robot strafe callback */
static void msg_robot_strafe_clb(uCAN_MSG *p_Message)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
    p_Message->frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
    p_Message->frame.dlc = 8;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2208      	movs	r2, #8
 8002556:	721a      	strb	r2, [r3, #8]
  
    if(Car_Wanted_Speed != 0)
 8002558:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <msg_robot_strafe_clb+0x7c>)
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002566:	d003      	beq.n	8002570 <msg_robot_strafe_clb+0x2c>
    {
        YawSusCB();
 8002568:	4b16      	ldr	r3, [pc, #88]	@ (80025c4 <msg_robot_strafe_clb+0x80>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4798      	blx	r3
 800256e:	e006      	b.n	800257e <msg_robot_strafe_clb+0x3a>
    }
    else
    {
        Car_Wanted_Angle = Main_Orientation.FilteredYAW;
 8002570:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <msg_robot_strafe_clb+0x84>)
 8002572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002574:	4a15      	ldr	r2, [pc, #84]	@ (80025cc <msg_robot_strafe_clb+0x88>)
 8002576:	6013      	str	r3, [r2, #0]
        YawResCB();
 8002578:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <msg_robot_strafe_clb+0x8c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4798      	blx	r3
    }

    two_float_conv temp;
    if (Car_Wanted_Speed > Car_Max_Forced_Speed)
 800257e:	4b10      	ldr	r3, [pc, #64]	@ (80025c0 <msg_robot_strafe_clb+0x7c>)
 8002580:	ed93 7a00 	vldr	s14, [r3]
 8002584:	4b13      	ldr	r3, [pc, #76]	@ (80025d4 <msg_robot_strafe_clb+0x90>)
 8002586:	edd3 7a00 	vldr	s15, [r3]
 800258a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800258e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002592:	dd03      	ble.n	800259c <msg_robot_strafe_clb+0x58>
    {
        temp.value[0] = Car_Max_Forced_Speed;
 8002594:	4b0f      	ldr	r3, [pc, #60]	@ (80025d4 <msg_robot_strafe_clb+0x90>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	e002      	b.n	80025a2 <msg_robot_strafe_clb+0x5e>
    }
    else
    {
        temp.value[0] = Car_Wanted_Speed;
 800259c:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <msg_robot_strafe_clb+0x7c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60bb      	str	r3, [r7, #8]
    }
    temp.value[1] = Car_Wanted_direction;
 80025a2:	4b0d      	ldr	r3, [pc, #52]	@ (80025d8 <msg_robot_strafe_clb+0x94>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60fb      	str	r3, [r7, #12]

    memcpy(p_Message->frame.data, temp.data, 8);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3309      	adds	r3, #9
 80025ac:	461a      	mov	r2, r3
 80025ae:	f107 0308 	add.w	r3, r7, #8
 80025b2:	cb03      	ldmia	r3!, {r0, r1}
 80025b4:	6010      	str	r0, [r2, #0]
 80025b6:	6051      	str	r1, [r2, #4]
}
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	200006dc 	.word	0x200006dc
 80025c4:	20000724 	.word	0x20000724
 80025c8:	200000f0 	.word	0x200000f0
 80025cc:	200006d8 	.word	0x200006d8
 80025d0:	20000728 	.word	0x20000728
 80025d4:	20000014 	.word	0x20000014
 80025d8:	200006e0 	.word	0x200006e0

080025dc <msg_robot_rotate_clb>:

/* Message for robot rotate callback */
static void msg_robot_rotate_clb(uCAN_MSG *p_Message)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
    p_Message->frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
    p_Message->frame.dlc = 8;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2208      	movs	r2, #8
 80025ee:	721a      	strb	r2, [r3, #8]
  
    two_float_conv temp;
    temp.value[0] = Car_Wanted_Angular_Speed;
 80025f0:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <msg_robot_rotate_clb+0x3c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60bb      	str	r3, [r7, #8]
    temp.value[1] = Car_Wanted_Rotate_Radius;
 80025f6:	4b09      	ldr	r3, [pc, #36]	@ (800261c <msg_robot_rotate_clb+0x40>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60fb      	str	r3, [r7, #12]
    memcpy(p_Message->frame.data, temp.data, 8);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3309      	adds	r3, #9
 8002600:	461a      	mov	r2, r3
 8002602:	f107 0308 	add.w	r3, r7, #8
 8002606:	cb03      	ldmia	r3!, {r0, r1}
 8002608:	6010      	str	r0, [r2, #0]
 800260a:	6051      	str	r1, [r2, #4]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	200006e4 	.word	0x200006e4
 800261c:	200006e8 	.word	0x200006e8

08002620 <msg_robot_stop_clb>:

/* Message for robot stop callback */
static void msg_robot_stop_clb(uCAN_MSG *p_Message)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
    p_Message->frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
    p_Message->frame.dlc = 1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	721a      	strb	r2, [r3, #8]

    Car_Wanted_Angle = Main_Orientation.FilteredYAW;
 8002634:	4b08      	ldr	r3, [pc, #32]	@ (8002658 <msg_robot_stop_clb+0x38>)
 8002636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002638:	4a08      	ldr	r2, [pc, #32]	@ (800265c <msg_robot_stop_clb+0x3c>)
 800263a:	6013      	str	r3, [r2, #0]
    YawResCB();
 800263c:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <msg_robot_stop_clb+0x40>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4798      	blx	r3
  
    uint8_t temp = ROBOT_STOP_FLAG;
 8002642:	23ff      	movs	r3, #255	@ 0xff
 8002644:	73fb      	strb	r3, [r7, #15]
    memcpy(p_Message->frame.data, &temp, 1);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3309      	adds	r3, #9
 800264a:	7bfa      	ldrb	r2, [r7, #15]
 800264c:	701a      	strb	r2, [r3, #0]
}
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200000f0 	.word	0x200000f0
 800265c:	200006d8 	.word	0x200006d8
 8002660:	20000728 	.word	0x20000728

08002664 <msg_robot_Wz_clb>:

/* Message for robot updating the value of omega z callback */
static void msg_robot_Wz_clb(uCAN_MSG *p_Message)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
    p_Message->frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
    p_Message->frame.dlc = 4;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2204      	movs	r2, #4
 8002676:	721a      	strb	r2, [r3, #8]
  
    one_float_conv temp;
    temp.value = Omega_z;
 8002678:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <msg_robot_Wz_clb+0x30>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60fb      	str	r3, [r7, #12]
    memcpy(p_Message->frame.data, temp.data, 4);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3309      	adds	r3, #9
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	601a      	str	r2, [r3, #0]
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	200006f4 	.word	0x200006f4

08002698 <msg_sign_detected_clb>:

/* Message for Traffic Sign Recognition Feature detects a Sign callback */
static void msg_sign_detected_clb(uCAN_MSG *p_Message)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
    uint8_t temp[2] = {0};
 80026a0:	2300      	movs	r3, #0
 80026a2:	81bb      	strh	r3, [r7, #12]
    memcpy(temp, p_Message->frame.data, 2);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3309      	adds	r3, #9
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	81bb      	strh	r3, [r7, #12]

    traffic_sign_t l_Speed = temp[0];
 80026ae:	7b3b      	ldrb	r3, [r7, #12]
 80026b0:	73fb      	strb	r3, [r7, #15]
    traffic_sign_t l_Sign = temp[1];
 80026b2:	7b7b      	ldrb	r3, [r7, #13]
 80026b4:	73bb      	strb	r3, [r7, #14]

    Traffic_Speed = l_Speed;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	4a07      	ldr	r2, [pc, #28]	@ (80026d8 <msg_sign_detected_clb+0x40>)
 80026ba:	6013      	str	r3, [r2, #0]
    Traffic_Sign = l_Sign;
 80026bc:	7bbb      	ldrb	r3, [r7, #14]
 80026be:	4a07      	ldr	r2, [pc, #28]	@ (80026dc <msg_sign_detected_clb+0x44>)
 80026c0:	6013      	str	r3, [r2, #0]

    TSR_handle(l_Speed, l_Sign);
 80026c2:	7bba      	ldrb	r2, [r7, #14]
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 fc5b 	bl	8002f84 <TSR_handle>
}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000708 	.word	0x20000708
 80026dc:	2000070c 	.word	0x2000070c

080026e0 <msg_lane_update_clb>:

/* Message for Auto Lane Change callback (Not Completed)*/
static void msg_lane_update_clb(uCAN_MSG *p_Message)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
    uint8_t temp[2] = {0};
 80026e8:	2300      	movs	r3, #0
 80026ea:	81bb      	strh	r3, [r7, #12]
    memcpy(temp, p_Message->frame.data, 2);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3309      	adds	r3, #9
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	81bb      	strh	r3, [r7, #12]

    Lane_Received_t l_AvailableLane = temp[0];
 80026f6:	7b3b      	ldrb	r3, [r7, #12]
 80026f8:	73fb      	strb	r3, [r7, #15]
    Lane_Received_t l_CurrentPosition = temp[1];
 80026fa:	7b7b      	ldrb	r3, [r7, #13]
 80026fc:	73bb      	strb	r3, [r7, #14]

    ALC_handle(l_AvailableLane, l_CurrentPosition);
 80026fe:	7bba      	ldrb	r2, [r7, #14]
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fd09 	bl	800111c <ALC_handle>
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <msg_update_encoder_clb>:

/* Message for update encoder position callback */
static void msg_update_encoder_clb(uCAN_MSG *p_Message)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
    two_float_conv temp = {0};
 800271c:	f107 0308 	add.w	r3, r7, #8
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
    memcpy(&temp.data, p_Message->frame.data, 8);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f103 0209 	add.w	r2, r3, #9
 800272c:	f107 0308 	add.w	r3, r7, #8
 8002730:	6810      	ldr	r0, [r2, #0]
 8002732:	6851      	ldr	r1, [r2, #4]
 8002734:	c303      	stmia	r3!, {r0, r1}
    float l_fl_encoder = temp.value[0];
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	617b      	str	r3, [r7, #20]
    float l_fr_encoder = temp.value[1];
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	613b      	str	r3, [r7, #16]
    
    FL_Encoder_pos = l_fl_encoder;
 800273e:	4a06      	ldr	r2, [pc, #24]	@ (8002758 <msg_update_encoder_clb+0x44>)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	6013      	str	r3, [r2, #0]
    FR_Encoder_pos = l_fr_encoder;
 8002744:	4a05      	ldr	r2, [pc, #20]	@ (800275c <msg_update_encoder_clb+0x48>)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	6013      	str	r3, [r2, #0]
}
 800274a:	bf00      	nop
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	200006f8 	.word	0x200006f8
 800275c:	200006fc 	.word	0x200006fc

08002760 <monitor_task_init>:
 * @brief initialize the monitor update task 
 * @param p_AllMonitoredValues pointer to the all monitored values
 * @return app_status_t 
 */
app_status_t monitor_task_init(monitor_values_t *p_AllMonitoredValues)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_AllMonitoredValues)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d102      	bne.n	8002778 <monitor_task_init+0x18>
    {
        l_AppStatus = APP_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
 8002776:	e10b      	b.n	8002990 <monitor_task_init+0x230>
    }
    else
    {
        p_AllMonitoredValues->M_sync->Size          = 4;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2204      	movs	r2, #4
 800277e:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_crc->Size           = 4;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2204      	movs	r2, #4
 8002786:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->all->Size             = 40;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2228      	movs	r2, #40	@ 0x28
 800278e:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_mpu->Size           = 4;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2204      	movs	r2, #4
 8002796:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_ul0->Size           = 4;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2204      	movs	r2, #4
 800279e:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_ul45->Size          = 4;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	2204      	movs	r2, #4
 80027a6:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_ul90->Size          = 4;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2204      	movs	r2, #4
 80027ae:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_ul135->Size         = 4;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	2204      	movs	r2, #4
 80027b6:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_ul180->Size         = 4;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	2204      	movs	r2, #4
 80027be:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_ul225->Size         = 4;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	2204      	movs	r2, #4
 80027c6:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_ul270->Size         = 4;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027cc:	2204      	movs	r2, #4
 80027ce:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_ul315->Size         = 4;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d4:	2204      	movs	r2, #4
 80027d6:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_Wz->Size            = 4;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027dc:	2204      	movs	r2, #4
 80027de:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_mpu_kp->Size        = 4;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e4:	2204      	movs	r2, #4
 80027e6:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_mpu_ki->Size        = 4;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ec:	2204      	movs	r2, #4
 80027ee:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_mpu_kd->Size        = 4;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f4:	2204      	movs	r2, #4
 80027f6:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_mpu_n->Size         = 4;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fc:	2204      	movs	r2, #4
 80027fe:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_mpu_sp->Size        = 4;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002804:	2204      	movs	r2, #4
 8002806:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_Kf_Yaw->Size        = 4;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800280c:	2204      	movs	r2, #4
 800280e:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_Kf_qBias->Size      = 4;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002814:	2204      	movs	r2, #4
 8002816:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_Kf_qAngle->Size     = 4;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281c:	2204      	movs	r2, #4
 800281e:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_Kf_rMeasure->Size   = 4;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002824:	2204      	movs	r2, #4
 8002826:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_vx_kp->Size         = 4;       
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282c:	2204      	movs	r2, #4
 800282e:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_vx_ki->Size         = 4;       
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002834:	2204      	movs	r2, #4
 8002836:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_vx_kd->Size         = 4;           
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800283c:	2204      	movs	r2, #4
 800283e:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_vx_n->Size          = 4;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002844:	2204      	movs	r2, #4
 8002846:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_wanted_speed->Size  = 4;           
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800284c:	2204      	movs	r2, #4
 800284e:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->M_max_speed->Size     = 4;   
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002854:	2204      	movs	r2, #4
 8002856:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->Emergency_Parking->Size = 4;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285c:	2204      	movs	r2, #4
 800285e:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->Traffic_Sign->Size    = 4;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002864:	2204      	movs	r2, #4
 8002866:	731a      	strb	r2, [r3, #12]
        p_AllMonitoredValues->Traffic_Speed->Size   = 4;      
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800286c:	2204      	movs	r2, #4
 800286e:	731a      	strb	r2, [r3, #12]
        


        p_AllMonitoredValues->M_sync->Data.OriginalData             = &sync_bytes;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4a4a      	ldr	r2, [pc, #296]	@ (80029a0 <monitor_task_init+0x240>)
 8002876:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_crc->Data.OriginalData              = &CRC_Value;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a49      	ldr	r2, [pc, #292]	@ (80029a4 <monitor_task_init+0x244>)
 800287e:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->all->Data.OriginalData                = &temp_monitor_buffer;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	4a48      	ldr	r2, [pc, #288]	@ (80029a8 <monitor_task_init+0x248>)
 8002886:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_mpu->Data.OriginalData              = &Main_MPU.YAW;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4a47      	ldr	r2, [pc, #284]	@ (80029ac <monitor_task_init+0x24c>)
 800288e:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_ul0->Data.OriginalData              = Main_Ultrasonics.UL_0->Distance;
 8002890:	4b47      	ldr	r3, [pc, #284]	@ (80029b0 <monitor_task_init+0x250>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	6912      	ldr	r2, [r2, #16]
 800289a:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_ul45->Data.OriginalData             = Main_Ultrasonics.UL_45->Distance;
 800289c:	4b44      	ldr	r3, [pc, #272]	@ (80029b0 <monitor_task_init+0x250>)
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	6912      	ldr	r2, [r2, #16]
 80028a6:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_ul90->Data.OriginalData             = Main_Ultrasonics.UL_90->Distance;
 80028a8:	4b41      	ldr	r3, [pc, #260]	@ (80029b0 <monitor_task_init+0x250>)
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	6912      	ldr	r2, [r2, #16]
 80028b2:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_ul135->Data.OriginalData            = Main_Ultrasonics.UL_135->Distance;
 80028b4:	4b3e      	ldr	r3, [pc, #248]	@ (80029b0 <monitor_task_init+0x250>)
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	6912      	ldr	r2, [r2, #16]
 80028be:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_ul180->Data.OriginalData            = Main_Ultrasonics.UL_180->Distance;
 80028c0:	4b3b      	ldr	r3, [pc, #236]	@ (80029b0 <monitor_task_init+0x250>)
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	6912      	ldr	r2, [r2, #16]
 80028ca:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_ul225->Data.OriginalData            = Main_Ultrasonics.UL_225->Distance;
 80028cc:	4b38      	ldr	r3, [pc, #224]	@ (80029b0 <monitor_task_init+0x250>)
 80028ce:	695a      	ldr	r2, [r3, #20]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	6912      	ldr	r2, [r2, #16]
 80028d6:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_ul270->Data.OriginalData            = Main_Ultrasonics.UL_270->Distance;
 80028d8:	4b35      	ldr	r3, [pc, #212]	@ (80029b0 <monitor_task_init+0x250>)
 80028da:	699a      	ldr	r2, [r3, #24]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e0:	6912      	ldr	r2, [r2, #16]
 80028e2:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_ul315->Data.OriginalData            = Main_Ultrasonics.UL_315->Distance;
 80028e4:	4b32      	ldr	r3, [pc, #200]	@ (80029b0 <monitor_task_init+0x250>)
 80028e6:	69da      	ldr	r2, [r3, #28]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ec:	6912      	ldr	r2, [r2, #16]
 80028ee:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_Wz->Data.OriginalData               = &Omega_z;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f4:	4a2f      	ldr	r2, [pc, #188]	@ (80029b4 <monitor_task_init+0x254>)
 80028f6:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_mpu_kp->Data.OriginalData           = &Main_Orientation.PID.Kp;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fc:	4a2e      	ldr	r2, [pc, #184]	@ (80029b8 <monitor_task_init+0x258>)
 80028fe:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_mpu_ki->Data.OriginalData           = &Main_Orientation.PID.Ki;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002904:	4a2d      	ldr	r2, [pc, #180]	@ (80029bc <monitor_task_init+0x25c>)
 8002906:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_mpu_kd->Data.OriginalData           = &Main_Orientation.PID.Kd;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290c:	4a2c      	ldr	r2, [pc, #176]	@ (80029c0 <monitor_task_init+0x260>)
 800290e:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_mpu_n->Data.OriginalData            = &Main_Orientation.PID.N;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	4a2b      	ldr	r2, [pc, #172]	@ (80029c4 <monitor_task_init+0x264>)
 8002916:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_mpu_sp->Data.OriginalData           = &Car_Wanted_Angle;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291c:	4a2a      	ldr	r2, [pc, #168]	@ (80029c8 <monitor_task_init+0x268>)
 800291e:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_Kf_Yaw->Data.OriginalData           = &Main_Orientation.FilteredYAW;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002924:	4a29      	ldr	r2, [pc, #164]	@ (80029cc <monitor_task_init+0x26c>)
 8002926:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_Kf_qBias->Data.OriginalData         = &Main_Orientation.Kf_YAW.Q_angle;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292c:	4a28      	ldr	r2, [pc, #160]	@ (80029d0 <monitor_task_init+0x270>)
 800292e:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_Kf_qAngle->Data.OriginalData        = &Main_Orientation.Kf_YAW.Q_bias;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002934:	4a27      	ldr	r2, [pc, #156]	@ (80029d4 <monitor_task_init+0x274>)
 8002936:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_Kf_rMeasure->Data.OriginalData      = &Main_Orientation.Kf_YAW.R_measure;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293c:	4a26      	ldr	r2, [pc, #152]	@ (80029d8 <monitor_task_init+0x278>)
 800293e:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_vx_kp->Data.OriginalData            = &Main_Orientation.PID.Kp;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002944:	4a1c      	ldr	r2, [pc, #112]	@ (80029b8 <monitor_task_init+0x258>)
 8002946:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_vx_ki->Data.OriginalData            = &Main_Orientation.PID.Ki;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294c:	4a1b      	ldr	r2, [pc, #108]	@ (80029bc <monitor_task_init+0x25c>)
 800294e:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_vx_kd->Data.OriginalData            = &Main_Orientation.PID.Kd;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002954:	4a1a      	ldr	r2, [pc, #104]	@ (80029c0 <monitor_task_init+0x260>)
 8002956:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_vx_n->Data.OriginalData             = &Main_Orientation.PID.N;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800295c:	4a19      	ldr	r2, [pc, #100]	@ (80029c4 <monitor_task_init+0x264>)
 800295e:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_wanted_speed->Data.OriginalData     = &Car_Wanted_Speed;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002964:	4a1d      	ldr	r2, [pc, #116]	@ (80029dc <monitor_task_init+0x27c>)
 8002966:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->M_max_speed->Data.OriginalData        = &Car_Max_Forced_Speed;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800296c:	4a1c      	ldr	r2, [pc, #112]	@ (80029e0 <monitor_task_init+0x280>)
 800296e:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->Emergency_Parking->Data.OriginalData  = &Emergency_Parking_Flag;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002974:	4a1b      	ldr	r2, [pc, #108]	@ (80029e4 <monitor_task_init+0x284>)
 8002976:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->Traffic_Sign->Data.OriginalData       = &Traffic_Sign;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800297c:	4a1a      	ldr	r2, [pc, #104]	@ (80029e8 <monitor_task_init+0x288>)
 800297e:	609a      	str	r2, [r3, #8]
        p_AllMonitoredValues->Traffic_Speed->Data.OriginalData      = &Traffic_Speed;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002984:	4a19      	ldr	r2, [pc, #100]	@ (80029ec <monitor_task_init+0x28c>)
 8002986:	609a      	str	r2, [r3, #8]

        p_AllMonitoredValues->all->MonitorUpdateData_CALLBACK = update;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	4a18      	ldr	r2, [pc, #96]	@ (80029f0 <monitor_task_init+0x290>)
 800298e:	605a      	str	r2, [r3, #4]
    }
    return l_AppStatus;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000290 	.word	0x20000290
 80029a4:	20000790 	.word	0x20000790
 80029a8:	2000072c 	.word	0x2000072c
 80029ac:	20000048 	.word	0x20000048
 80029b0:	20000020 	.word	0x20000020
 80029b4:	200006f4 	.word	0x200006f4
 80029b8:	20000114 	.word	0x20000114
 80029bc:	20000118 	.word	0x20000118
 80029c0:	2000011c 	.word	0x2000011c
 80029c4:	20000120 	.word	0x20000120
 80029c8:	200006d8 	.word	0x200006d8
 80029cc:	20000144 	.word	0x20000144
 80029d0:	20000108 	.word	0x20000108
 80029d4:	2000010c 	.word	0x2000010c
 80029d8:	20000110 	.word	0x20000110
 80029dc:	200006dc 	.word	0x200006dc
 80029e0:	20000014 	.word	0x20000014
 80029e4:	20000704 	.word	0x20000704
 80029e8:	2000070c 	.word	0x2000070c
 80029ec:	20000708 	.word	0x20000708
 80029f0:	08002cb1 	.word	0x08002cb1

080029f4 <monitor_update_task>:
 * @brief monitor update task 
 * @param p_AllMonitoredValues pointer to the all monitored values
 * @return app_status_t 
 */
app_status_t monitor_update_task(monitor_values_t *p_AllMonitoredValues)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_AllMonitoredValues)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d102      	bne.n	8002a0c <monitor_update_task+0x18>
    {
        l_AppStatus = APP_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
 8002a0a:	e145      	b.n	8002c98 <monitor_update_task+0x2a4>
    }   
    else
    {
        memcpy(&temp_monitor_buffer[0],  p_AllMonitoredValues->M_mpu->Data.SendData,    4);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	4ba3      	ldr	r3, [pc, #652]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002a18:	601a      	str	r2, [r3, #0]
        memcpy(&temp_monitor_buffer[1],  p_AllMonitoredValues->M_Kf_Yaw->Data.SendData, 4);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b9f      	ldr	r3, [pc, #636]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002a26:	605a      	str	r2, [r3, #4]
        memcpy(&temp_monitor_buffer[2],  p_AllMonitoredValues->M_mpu_sp->Data.SendData, 4);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b9c      	ldr	r3, [pc, #624]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002a34:	609a      	str	r2, [r3, #8]
        memcpy(&temp_monitor_buffer[3],  p_AllMonitoredValues->M_ul0->Data.SendData,    4);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4b98      	ldr	r3, [pc, #608]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002a42:	60da      	str	r2, [r3, #12]
        memcpy(&temp_monitor_buffer[4],  p_AllMonitoredValues->M_ul45->Data.SendData,   4);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4b95      	ldr	r3, [pc, #596]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002a50:	611a      	str	r2, [r3, #16]
        memcpy(&temp_monitor_buffer[5],  p_AllMonitoredValues->M_ul90->Data.SendData,   4);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4b91      	ldr	r3, [pc, #580]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002a5e:	615a      	str	r2, [r3, #20]
        memcpy(&temp_monitor_buffer[6],  p_AllMonitoredValues->M_ul135->Data.SendData,  4);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b8e      	ldr	r3, [pc, #568]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002a6c:	619a      	str	r2, [r3, #24]
        memcpy(&temp_monitor_buffer[7],  p_AllMonitoredValues->M_ul180->Data.SendData,  4);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	4b8a      	ldr	r3, [pc, #552]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002a7a:	61da      	str	r2, [r3, #28]
        memcpy(&temp_monitor_buffer[8],  p_AllMonitoredValues->M_ul225->Data.SendData,  4);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b87      	ldr	r3, [pc, #540]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002a88:	621a      	str	r2, [r3, #32]
        memcpy(&temp_monitor_buffer[9],  p_AllMonitoredValues->M_ul270->Data.SendData,  4);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	4b83      	ldr	r3, [pc, #524]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002a96:	625a      	str	r2, [r3, #36]	@ 0x24
        memcpy(&temp_monitor_buffer[10], p_AllMonitoredValues->M_ul315->Data.SendData,  4);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b80      	ldr	r3, [pc, #512]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002aa4:	629a      	str	r2, [r3, #40]	@ 0x28
        memcpy(&temp_monitor_buffer[11], p_AllMonitoredValues->M_wanted_speed->Data.SendData,   4);        
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4b7c      	ldr	r3, [pc, #496]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
        memcpy(&temp_monitor_buffer[12], p_AllMonitoredValues->M_max_speed->Data.SendData,   4);    
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	4b79      	ldr	r3, [pc, #484]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002ac0:	631a      	str	r2, [r3, #48]	@ 0x30
        memcpy(&temp_monitor_buffer[13], p_AllMonitoredValues->Emergency_Parking->Data.SendData, 4);    
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b75      	ldr	r3, [pc, #468]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002ace:	635a      	str	r2, [r3, #52]	@ 0x34
        memcpy(&temp_monitor_buffer[14], p_AllMonitoredValues->Traffic_Sign->Data.SendData, 4);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4b72      	ldr	r3, [pc, #456]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002adc:	639a      	str	r2, [r3, #56]	@ 0x38
        memcpy(&temp_monitor_buffer[15], p_AllMonitoredValues->Traffic_Speed->Data.SendData, 4);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4b6e      	ldr	r3, [pc, #440]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002aea:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Reset CRC Unit */
        __HAL_CRC_DR_RESET(&hcrc);
 8002aec:	4b6e      	ldr	r3, [pc, #440]	@ (8002ca8 <monitor_update_task+0x2b4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	4b6d      	ldr	r3, [pc, #436]	@ (8002ca8 <monitor_update_task+0x2b4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	609a      	str	r2, [r3, #8]

        /* Calculate local CRC */
        for (uint8_t counter = 0; counter < 1; counter++)
 8002afc:	2300      	movs	r3, #0
 8002afe:	73bb      	strb	r3, [r7, #14]
 8002b00:	e00e      	b.n	8002b20 <monitor_update_task+0x12c>
        {

            CRC_Value = HAL_CRC_Accumulate(&hcrc, &temp_monitor_buffer[counter], 16);
 8002b02:	7bbb      	ldrb	r3, [r7, #14]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4a67      	ldr	r2, [pc, #412]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002b08:	4413      	add	r3, r2
 8002b0a:	2210      	movs	r2, #16
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4866      	ldr	r0, [pc, #408]	@ (8002ca8 <monitor_update_task+0x2b4>)
 8002b10:	f002 fb28 	bl	8005164 <HAL_CRC_Accumulate>
 8002b14:	4603      	mov	r3, r0
 8002b16:	4a65      	ldr	r2, [pc, #404]	@ (8002cac <monitor_update_task+0x2b8>)
 8002b18:	6013      	str	r3, [r2, #0]
        for (uint8_t counter = 0; counter < 1; counter++)
 8002b1a:	7bbb      	ldrb	r3, [r7, #14]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	73bb      	strb	r3, [r7, #14]
 8002b20:	7bbb      	ldrb	r3, [r7, #14]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0ed      	beq.n	8002b02 <monitor_update_task+0x10e>
        }
        memset(temp_monitor_buffer, 0, 100);
 8002b26:	2264      	movs	r2, #100	@ 0x64
 8002b28:	2100      	movs	r1, #0
 8002b2a:	485e      	ldr	r0, [pc, #376]	@ (8002ca4 <monitor_update_task+0x2b0>)
 8002b2c:	f00d fb1e 	bl	801016c <memset>


        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->M_sync);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f008 f993 	bl	800ae60 <monitoring_send_data>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	73fb      	strb	r3, [r7, #15]

        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->M_mpu);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f008 f989 	bl	800ae60 <monitoring_send_data>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	461a      	mov	r2, r3
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	73fb      	strb	r3, [r7, #15]
        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->M_Kf_Yaw);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f008 f97f 	bl	800ae60 <monitoring_send_data>
 8002b62:	4603      	mov	r3, r0
 8002b64:	461a      	mov	r2, r3
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	73fb      	strb	r3, [r7, #15]
        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->M_mpu_sp);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b70:	4618      	mov	r0, r3
 8002b72:	f008 f975 	bl	800ae60 <monitoring_send_data>
 8002b76:	4603      	mov	r3, r0
 8002b78:	461a      	mov	r2, r3
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	73fb      	strb	r3, [r7, #15]
        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->M_ul0);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f008 f96b 	bl	800ae60 <monitoring_send_data>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	73fb      	strb	r3, [r7, #15]
        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->M_ul45);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f008 f961 	bl	800ae60 <monitoring_send_data>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	73fb      	strb	r3, [r7, #15]
        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->M_ul90);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f008 f957 	bl	800ae60 <monitoring_send_data>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	73fb      	strb	r3, [r7, #15]
        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->M_ul135);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f008 f94d 	bl	800ae60 <monitoring_send_data>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	461a      	mov	r2, r3
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	73fb      	strb	r3, [r7, #15]
        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->M_ul180);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f008 f943 	bl	800ae60 <monitoring_send_data>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	461a      	mov	r2, r3
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	73fb      	strb	r3, [r7, #15]
        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->M_ul225);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	4618      	mov	r0, r3
 8002bea:	f008 f939 	bl	800ae60 <monitoring_send_data>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	73fb      	strb	r3, [r7, #15]
        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->M_ul270);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f008 f92f 	bl	800ae60 <monitoring_send_data>
 8002c02:	4603      	mov	r3, r0
 8002c04:	461a      	mov	r2, r3
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	73fb      	strb	r3, [r7, #15]
        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->M_ul315);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c10:	4618      	mov	r0, r3
 8002c12:	f008 f925 	bl	800ae60 <monitoring_send_data>
 8002c16:	4603      	mov	r3, r0
 8002c18:	461a      	mov	r2, r3
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	73fb      	strb	r3, [r7, #15]
        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->M_wanted_speed);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c24:	4618      	mov	r0, r3
 8002c26:	f008 f91b 	bl	800ae60 <monitoring_send_data>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	73fb      	strb	r3, [r7, #15]
        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->M_max_speed);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f008 f911 	bl	800ae60 <monitoring_send_data>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	461a      	mov	r2, r3
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	73fb      	strb	r3, [r7, #15]
        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->Emergency_Parking);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f008 f907 	bl	800ae60 <monitoring_send_data>
 8002c52:	4603      	mov	r3, r0
 8002c54:	461a      	mov	r2, r3
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	73fb      	strb	r3, [r7, #15]
        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->Traffic_Sign);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c60:	4618      	mov	r0, r3
 8002c62:	f008 f8fd 	bl	800ae60 <monitoring_send_data>
 8002c66:	4603      	mov	r3, r0
 8002c68:	461a      	mov	r2, r3
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	73fb      	strb	r3, [r7, #15]
        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->Traffic_Speed);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c74:	4618      	mov	r0, r3
 8002c76:	f008 f8f3 	bl	800ae60 <monitoring_send_data>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	73fb      	strb	r3, [r7, #15]
        
        l_AppStatus |= monitoring_send_data(p_AllMonitoredValues->M_crc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f008 f8e9 	bl	800ae60 <monitoring_send_data>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	461a      	mov	r2, r3
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	73fb      	strb	r3, [r7, #15]
        


    }
    return l_AppStatus;
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	2000072c 	.word	0x2000072c
 8002ca8:	20000838 	.word	0x20000838
 8002cac:	20000790 	.word	0x20000790

08002cb0 <update>:
/***********************************************************************************************************************
*                                               STATIC FUNCTION DECLARATION                                            *
***********************************************************************************************************************/

static void update(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
    one_float_conv temp;
    temp.value = Main_MPU.YAW;
 8002cb6:	4b21      	ldr	r3, [pc, #132]	@ (8002d3c <update+0x8c>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	607b      	str	r3, [r7, #4]
    memcpy(&temp_monitor_buffer[0], temp.data, 4);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a20      	ldr	r2, [pc, #128]	@ (8002d40 <update+0x90>)
 8002cc0:	6013      	str	r3, [r2, #0]
    temp.value = sensor_0_dis;
 8002cc2:	4b20      	ldr	r3, [pc, #128]	@ (8002d44 <update+0x94>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	607b      	str	r3, [r7, #4]
    memcpy(&temp_monitor_buffer[1], temp.data, 4);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a1d      	ldr	r2, [pc, #116]	@ (8002d40 <update+0x90>)
 8002ccc:	6053      	str	r3, [r2, #4]
    temp.value = sensor_45_dis;
 8002cce:	4b1e      	ldr	r3, [pc, #120]	@ (8002d48 <update+0x98>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	607b      	str	r3, [r7, #4]
    memcpy(&temp_monitor_buffer[2], temp.data, 4);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d40 <update+0x90>)
 8002cd8:	6093      	str	r3, [r2, #8]
    temp.value = sensor_90_dis;
 8002cda:	4b1c      	ldr	r3, [pc, #112]	@ (8002d4c <update+0x9c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	607b      	str	r3, [r7, #4]
    memcpy(&temp_monitor_buffer[3], temp.data, 4);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a17      	ldr	r2, [pc, #92]	@ (8002d40 <update+0x90>)
 8002ce4:	60d3      	str	r3, [r2, #12]
    temp.value = sensor_135_dis;
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <update+0xa0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	607b      	str	r3, [r7, #4]
    memcpy(&temp_monitor_buffer[4], temp.data, 4);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a14      	ldr	r2, [pc, #80]	@ (8002d40 <update+0x90>)
 8002cf0:	6113      	str	r3, [r2, #16]
    temp.value = sensor_180_dis;
 8002cf2:	4b18      	ldr	r3, [pc, #96]	@ (8002d54 <update+0xa4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	607b      	str	r3, [r7, #4]
    memcpy(&temp_monitor_buffer[5], temp.data, 4);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a11      	ldr	r2, [pc, #68]	@ (8002d40 <update+0x90>)
 8002cfc:	6153      	str	r3, [r2, #20]
    temp.value = sensor_225_dis;
 8002cfe:	4b16      	ldr	r3, [pc, #88]	@ (8002d58 <update+0xa8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	607b      	str	r3, [r7, #4]
    memcpy(&temp_monitor_buffer[6], temp.data, 4);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a0e      	ldr	r2, [pc, #56]	@ (8002d40 <update+0x90>)
 8002d08:	6193      	str	r3, [r2, #24]
    temp.value = sensor_270_dis;
 8002d0a:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <update+0xac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	607b      	str	r3, [r7, #4]
    memcpy(&temp_monitor_buffer[7], temp.data, 4);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a0b      	ldr	r2, [pc, #44]	@ (8002d40 <update+0x90>)
 8002d14:	61d3      	str	r3, [r2, #28]
    temp.value = sensor_315_dis;
 8002d16:	4b12      	ldr	r3, [pc, #72]	@ (8002d60 <update+0xb0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	607b      	str	r3, [r7, #4]
    memcpy(&temp_monitor_buffer[9], temp.data, 4);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a08      	ldr	r2, [pc, #32]	@ (8002d40 <update+0x90>)
 8002d20:	6253      	str	r3, [r2, #36]	@ 0x24
    temp.value = Omega_z;
 8002d22:	4b10      	ldr	r3, [pc, #64]	@ (8002d64 <update+0xb4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	607b      	str	r3, [r7, #4]
    memcpy(&temp_monitor_buffer[10], temp.data, 4);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a05      	ldr	r2, [pc, #20]	@ (8002d40 <update+0x90>)
 8002d2c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000040 	.word	0x20000040
 8002d40:	2000072c 	.word	0x2000072c
 8002d44:	20000c64 	.word	0x20000c64
 8002d48:	20000c68 	.word	0x20000c68
 8002d4c:	20000c6c 	.word	0x20000c6c
 8002d50:	20000c70 	.word	0x20000c70
 8002d54:	20000c74 	.word	0x20000c74
 8002d58:	20000c78 	.word	0x20000c78
 8002d5c:	20000c7c 	.word	0x20000c7c
 8002d60:	20000c80 	.word	0x20000c80
 8002d64:	200006f4 	.word	0x200006f4

08002d68 <Orientation_task_init>:
  * @brief initialize the task of orientation
  * @param p_Orientaion pointer to the data descripes the current orientation
  * @return app_status_t status of operation
  */
app_status_t Orientation_task_init(orientation_t *p_Orientaion)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	73fb      	strb	r3, [r7, #15]
    if ((NULL == p_Orientaion))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <Orientation_task_init+0x18>
    {
        l_AppStatus = APP_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
 8002d7e:	e016      	b.n	8002dae <Orientation_task_init+0x46>
    }
    else
    {
        PID_Init(&p_Orientaion->PID, 
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3324      	adds	r3, #36	@ 0x24
 8002d84:	eeb2 3a04 	vmov.f32	s6, #36	@ 0x41200000  10.0
 8002d88:	eefa 2a04 	vmov.f32	s5, #164	@ 0xc1200000 -10.0
 8002d8c:	ed9f 2a0a 	vldr	s4, [pc, #40]	@ 8002db8 <Orientation_task_init+0x50>
 8002d90:	eddf 1a0a 	vldr	s3, [pc, #40]	@ 8002dbc <Orientation_task_init+0x54>
 8002d94:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8002d98:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8002dbc <Orientation_task_init+0x54>
 8002d9c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002dc0 <Orientation_task_init+0x58>
 8002da0:	4618      	mov	r0, r3
 8002da2:	f00c ff5d 	bl	800fc60 <PID_Init>
                 MPU_PID_N, 
                 MPU_PID_TIME_STEP, 
                 MPU_PID_MIN_OUT, 
                 MPU_PID_MAX_OUT);
       
        Kalman_Init(&p_Orientaion->Kf_YAW);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f00c fe05 	bl	800f9b8 <Kalman_Init>
    }
    return l_AppStatus;
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	3c23d70a 	.word	0x3c23d70a
 8002dbc:	00000000 	.word	0x00000000
 8002dc0:	bc9374bc 	.word	0xbc9374bc

08002dc4 <Orientation_Gyro_calibration>:
  * @param p_Orientaion pointer to the data descripes the current orientation
  * @return app_status_t status of operation
  * @note this task should be repeated number of times with specific time constant to perform calibration
  */
app_status_t Orientation_Gyro_calibration(orientation_t *p_Orientaion)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]
    if ((NULL == p_Orientaion))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <Orientation_Gyro_calibration+0x18>
    {
        l_AppStatus = APP_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
 8002dda:	e00b      	b.n	8002df4 <Orientation_Gyro_calibration+0x30>
    }
    else
    {
        p_Orientaion->GyroBias += *(p_Orientaion->MpuWz);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
    }
    return l_AppStatus;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <Orientation_PID_task>:
  * @param p_Wz Return the value of PID Controller output
  * @param p_SetPoint set point of the angle i want
  * @return app_status_t status of operation
  */
app_status_t Orientation_PID_task(orientation_t *p_Orientaion, float_t *p_Wz, float_t p_SetPoint)
{
 8002e04:	b5b0      	push	{r4, r5, r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	ed87 0a01 	vstr	s0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	75fb      	strb	r3, [r7, #23]
    if ((NULL == p_Orientaion) || (NULL == p_Wz))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <Orientation_PID_task+0x1e>
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <Orientation_PID_task+0x24>
    {
        l_AppStatus = APP_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	75fb      	strb	r3, [r7, #23]
 8002e26:	e063      	b.n	8002ef0 <Orientation_PID_task+0xec>
    }
    else
    {
        float_t temp = 0;
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
        temp = PID_Compute(&p_Orientaion->PID, p_SetPoint, p_Orientaion->FilteredYAW);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002e3a:	eef0 0a67 	vmov.f32	s1, s15
 8002e3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e42:	4610      	mov	r0, r2
 8002e44:	f00c ff45 	bl	800fcd2 <PID_Compute>
 8002e48:	ed87 0a04 	vstr	s0, [r7, #16]
        temp = temp *10.0f;
 8002e4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e50:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e58:	edc7 7a04 	vstr	s15, [r7, #16]
        temp = (temp > (floor(temp)+0.5f)) ? ceil(temp) : floor(temp);
 8002e5c:	6938      	ldr	r0, [r7, #16]
 8002e5e:	f7fd fb23 	bl	80004a8 <__aeabi_f2d>
 8002e62:	4604      	mov	r4, r0
 8002e64:	460d      	mov	r5, r1
 8002e66:	6938      	ldr	r0, [r7, #16]
 8002e68:	f7fd fb1e 	bl	80004a8 <__aeabi_f2d>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	ec43 2b10 	vmov	d0, r2, r3
 8002e74:	f00d fcf4 	bl	8010860 <floor>
 8002e78:	ec51 0b10 	vmov	r0, r1, d0
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	4b1e      	ldr	r3, [pc, #120]	@ (8002efc <Orientation_PID_task+0xf8>)
 8002e82:	f7fd f9b3 	bl	80001ec <__adddf3>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	f7fd fdf3 	bl	8000a78 <__aeabi_dcmpgt>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00d      	beq.n	8002eb4 <Orientation_PID_task+0xb0>
 8002e98:	6938      	ldr	r0, [r7, #16]
 8002e9a:	f7fd fb05 	bl	80004a8 <__aeabi_f2d>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	ec43 2b10 	vmov	d0, r2, r3
 8002ea6:	f00d fc5f 	bl	8010768 <ceil>
 8002eaa:	eeb0 7a40 	vmov.f32	s14, s0
 8002eae:	eef0 7a60 	vmov.f32	s15, s1
 8002eb2:	e00c      	b.n	8002ece <Orientation_PID_task+0xca>
 8002eb4:	6938      	ldr	r0, [r7, #16]
 8002eb6:	f7fd faf7 	bl	80004a8 <__aeabi_f2d>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	ec43 2b10 	vmov	d0, r2, r3
 8002ec2:	f00d fccd 	bl	8010860 <floor>
 8002ec6:	eeb0 7a40 	vmov.f32	s14, s0
 8002eca:	eef0 7a60 	vmov.f32	s15, s1
 8002ece:	ec51 0b17 	vmov	r0, r1, d7
 8002ed2:	f7fd fdf1 	bl	8000ab8 <__aeabi_d2f>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	613b      	str	r3, [r7, #16]
        temp = temp / -10.0f;
 8002eda:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ede:	eefa 6a04 	vmov.f32	s13, #164	@ 0xc1200000 -10.0
 8002ee2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ee6:	edc7 7a04 	vstr	s15, [r7, #16]
        *p_Wz = temp;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	601a      	str	r2, [r3, #0]
    }
    return l_AppStatus;
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8002efa:	bf00      	nop
 8002efc:	3fe00000 	.word	0x3fe00000

08002f00 <Orientation_Kf_task>:
 * 
 * @param p_Orientaion pointer to the orientation
 * @return app_status_t status of operation
 */
app_status_t Orientation_Kf_task(orientation_t *p_Orientaion)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	75fb      	strb	r3, [r7, #23]
    if ((NULL == p_Orientaion))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d102      	bne.n	8002f18 <Orientation_Kf_task+0x18>
    {
        l_AppStatus = APP_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
 8002f16:	e02f      	b.n	8002f78 <Orientation_Kf_task+0x78>
    }
    else
    {
        float_t l_GyroZ = *p_Orientaion->MpuWz - p_Orientaion->GyroBias;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1c:	ed93 7a00 	vldr	s14, [r3]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f2a:	edc7 7a04 	vstr	s15, [r7, #16]
        float_t l_Filtered = Kalman_Update(&p_Orientaion->Kf_YAW, 
 8002f2e:	687a      	ldr	r2, [r7, #4]
                                                  *p_Orientaion->CompassYAW, 
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
        float_t l_Filtered = Kalman_Update(&p_Orientaion->Kf_YAW, 
 8002f34:	edd3 7a00 	vldr	s15, [r3]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8002f3e:	eeb0 1a47 	vmov.f32	s2, s14
 8002f42:	edd7 0a04 	vldr	s1, [r7, #16]
 8002f46:	eeb0 0a67 	vmov.f32	s0, s15
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	f00c fd64 	bl	800fa18 <Kalman_Update>
 8002f50:	ed87 0a03 	vstr	s0, [r7, #12]
                                                  l_GyroZ, 
                                                  p_Orientaion->dt);

        p_Orientaion->FilteredYAW = (float_t)(trunc(l_Filtered));
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f7fd faa7 	bl	80004a8 <__aeabi_f2d>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	ec43 2b10 	vmov	d0, r2, r3
 8002f62:	f00d fcf9 	bl	8010958 <trunc>
 8002f66:	ec53 2b10 	vmov	r2, r3, d0
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	f7fd fda3 	bl	8000ab8 <__aeabi_d2f>
 8002f72:	4602      	mov	r2, r0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    return l_AppStatus;
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <TSR_handle>:
 * @param p_Speed detected speed if exists
 * @param p_Sign detected sign if exists
 * @return app_status_t status of operation
 */
app_status_t TSR_handle(traffic_sign_t p_Speed, traffic_sign_t p_Sign)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	460a      	mov	r2, r1
 8002f8e:	71fb      	strb	r3, [r7, #7]
 8002f90:	4613      	mov	r3, r2
 8002f92:	71bb      	strb	r3, [r7, #6]
    app_status_t l_AppStatus = APP_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	73fb      	strb	r3, [r7, #15]
    
    switch (p_Speed)
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	f200 80c9 	bhi.w	8003134 <TSR_handle+0x1b0>
 8002fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa8 <TSR_handle+0x24>)
 8002fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa8:	08002fcd 	.word	0x08002fcd
 8002fac:	08002ff5 	.word	0x08002ff5
 8002fb0:	0800301d 	.word	0x0800301d
 8002fb4:	08003045 	.word	0x08003045
 8002fb8:	0800306d 	.word	0x0800306d
 8002fbc:	08003095 	.word	0x08003095
 8002fc0:	080030bd 	.word	0x080030bd
 8002fc4:	080030e5 	.word	0x080030e5
 8002fc8:	0800310d 	.word	0x0800310d
    {
    case SPEED_30:
        Car_Max_Forced_Speed = Max_speed_responsible(SPEED_30_PERCENTAGE * DEFUALT_ROBOT_MAX_SPEED, TSR);
 8002fcc:	2002      	movs	r0, #2
 8002fce:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8003160 <TSR_handle+0x1dc>
 8002fd2:	f7fe f815 	bl	8001000 <Max_speed_responsible>
 8002fd6:	eef0 7a40 	vmov.f32	s15, s0
 8002fda:	4b62      	ldr	r3, [pc, #392]	@ (8003164 <TSR_handle+0x1e0>)
 8002fdc:	edc3 7a00 	vstr	s15, [r3]
        l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_strafe);
 8002fe0:	4961      	ldr	r1, [pc, #388]	@ (8003168 <TSR_handle+0x1e4>)
 8002fe2:	4862      	ldr	r0, [pc, #392]	@ (800316c <TSR_handle+0x1e8>)
 8002fe4:	f7fe fffc 	bl	8001fe0 <CAN_send_message>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	461a      	mov	r2, r3
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ff2:	e0a0      	b.n	8003136 <TSR_handle+0x1b2>
    
    case SPEED_40:
        Car_Max_Forced_Speed = Max_speed_responsible(SPEED_40_PERCENTAGE * DEFUALT_ROBOT_MAX_SPEED, TSR);
 8002ff4:	2002      	movs	r0, #2
 8002ff6:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8003170 <TSR_handle+0x1ec>
 8002ffa:	f7fe f801 	bl	8001000 <Max_speed_responsible>
 8002ffe:	eef0 7a40 	vmov.f32	s15, s0
 8003002:	4b58      	ldr	r3, [pc, #352]	@ (8003164 <TSR_handle+0x1e0>)
 8003004:	edc3 7a00 	vstr	s15, [r3]
        l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_strafe);
 8003008:	4957      	ldr	r1, [pc, #348]	@ (8003168 <TSR_handle+0x1e4>)
 800300a:	4858      	ldr	r0, [pc, #352]	@ (800316c <TSR_handle+0x1e8>)
 800300c:	f7fe ffe8 	bl	8001fe0 <CAN_send_message>
 8003010:	4603      	mov	r3, r0
 8003012:	461a      	mov	r2, r3
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	4313      	orrs	r3, r2
 8003018:	73fb      	strb	r3, [r7, #15]
        break;
 800301a:	e08c      	b.n	8003136 <TSR_handle+0x1b2>
    
    case SPEED_50:
        Car_Max_Forced_Speed = Max_speed_responsible(SPEED_50_PERCENTAGE * DEFUALT_ROBOT_MAX_SPEED, TSR);
 800301c:	2002      	movs	r0, #2
 800301e:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 8003174 <TSR_handle+0x1f0>
 8003022:	f7fd ffed 	bl	8001000 <Max_speed_responsible>
 8003026:	eef0 7a40 	vmov.f32	s15, s0
 800302a:	4b4e      	ldr	r3, [pc, #312]	@ (8003164 <TSR_handle+0x1e0>)
 800302c:	edc3 7a00 	vstr	s15, [r3]
        l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_strafe);
 8003030:	494d      	ldr	r1, [pc, #308]	@ (8003168 <TSR_handle+0x1e4>)
 8003032:	484e      	ldr	r0, [pc, #312]	@ (800316c <TSR_handle+0x1e8>)
 8003034:	f7fe ffd4 	bl	8001fe0 <CAN_send_message>
 8003038:	4603      	mov	r3, r0
 800303a:	461a      	mov	r2, r3
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	4313      	orrs	r3, r2
 8003040:	73fb      	strb	r3, [r7, #15]
        break;
 8003042:	e078      	b.n	8003136 <TSR_handle+0x1b2>
    
    case SPEED_60:
        Car_Max_Forced_Speed = Max_speed_responsible(SPEED_60_PERCENTAGE * DEFUALT_ROBOT_MAX_SPEED, TSR);
 8003044:	2002      	movs	r0, #2
 8003046:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8003178 <TSR_handle+0x1f4>
 800304a:	f7fd ffd9 	bl	8001000 <Max_speed_responsible>
 800304e:	eef0 7a40 	vmov.f32	s15, s0
 8003052:	4b44      	ldr	r3, [pc, #272]	@ (8003164 <TSR_handle+0x1e0>)
 8003054:	edc3 7a00 	vstr	s15, [r3]
        l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_strafe);
 8003058:	4943      	ldr	r1, [pc, #268]	@ (8003168 <TSR_handle+0x1e4>)
 800305a:	4844      	ldr	r0, [pc, #272]	@ (800316c <TSR_handle+0x1e8>)
 800305c:	f7fe ffc0 	bl	8001fe0 <CAN_send_message>
 8003060:	4603      	mov	r3, r0
 8003062:	461a      	mov	r2, r3
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	4313      	orrs	r3, r2
 8003068:	73fb      	strb	r3, [r7, #15]
        break;
 800306a:	e064      	b.n	8003136 <TSR_handle+0x1b2>
    
    case SPEED_70:
        Car_Max_Forced_Speed = Max_speed_responsible(SPEED_70_PERCENTAGE * DEFUALT_ROBOT_MAX_SPEED, TSR);
 800306c:	2002      	movs	r0, #2
 800306e:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 800317c <TSR_handle+0x1f8>
 8003072:	f7fd ffc5 	bl	8001000 <Max_speed_responsible>
 8003076:	eef0 7a40 	vmov.f32	s15, s0
 800307a:	4b3a      	ldr	r3, [pc, #232]	@ (8003164 <TSR_handle+0x1e0>)
 800307c:	edc3 7a00 	vstr	s15, [r3]
        l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_strafe);
 8003080:	4939      	ldr	r1, [pc, #228]	@ (8003168 <TSR_handle+0x1e4>)
 8003082:	483a      	ldr	r0, [pc, #232]	@ (800316c <TSR_handle+0x1e8>)
 8003084:	f7fe ffac 	bl	8001fe0 <CAN_send_message>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	4313      	orrs	r3, r2
 8003090:	73fb      	strb	r3, [r7, #15]
        break;
 8003092:	e050      	b.n	8003136 <TSR_handle+0x1b2>
    
    case SPEED_80:
        Car_Max_Forced_Speed = Max_speed_responsible(SPEED_80_PERCENTAGE * DEFUALT_ROBOT_MAX_SPEED, TSR);
 8003094:	2002      	movs	r0, #2
 8003096:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8003180 <TSR_handle+0x1fc>
 800309a:	f7fd ffb1 	bl	8001000 <Max_speed_responsible>
 800309e:	eef0 7a40 	vmov.f32	s15, s0
 80030a2:	4b30      	ldr	r3, [pc, #192]	@ (8003164 <TSR_handle+0x1e0>)
 80030a4:	edc3 7a00 	vstr	s15, [r3]
        l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_strafe);
 80030a8:	492f      	ldr	r1, [pc, #188]	@ (8003168 <TSR_handle+0x1e4>)
 80030aa:	4830      	ldr	r0, [pc, #192]	@ (800316c <TSR_handle+0x1e8>)
 80030ac:	f7fe ff98 	bl	8001fe0 <CAN_send_message>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	73fb      	strb	r3, [r7, #15]
        break;
 80030ba:	e03c      	b.n	8003136 <TSR_handle+0x1b2>
    
    case SPEED_90:
        Car_Max_Forced_Speed = Max_speed_responsible(SPEED_90_PERCENTAGE * DEFUALT_ROBOT_MAX_SPEED, TSR);
 80030bc:	2002      	movs	r0, #2
 80030be:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8003184 <TSR_handle+0x200>
 80030c2:	f7fd ff9d 	bl	8001000 <Max_speed_responsible>
 80030c6:	eef0 7a40 	vmov.f32	s15, s0
 80030ca:	4b26      	ldr	r3, [pc, #152]	@ (8003164 <TSR_handle+0x1e0>)
 80030cc:	edc3 7a00 	vstr	s15, [r3]
        l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_strafe);
 80030d0:	4925      	ldr	r1, [pc, #148]	@ (8003168 <TSR_handle+0x1e4>)
 80030d2:	4826      	ldr	r0, [pc, #152]	@ (800316c <TSR_handle+0x1e8>)
 80030d4:	f7fe ff84 	bl	8001fe0 <CAN_send_message>
 80030d8:	4603      	mov	r3, r0
 80030da:	461a      	mov	r2, r3
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	4313      	orrs	r3, r2
 80030e0:	73fb      	strb	r3, [r7, #15]
        break;
 80030e2:	e028      	b.n	8003136 <TSR_handle+0x1b2>
    
    case SPEED_100:
        Car_Max_Forced_Speed = Max_speed_responsible(SPEED_100_PERCENTAGE * DEFUALT_ROBOT_MAX_SPEED, TSR);
 80030e4:	2002      	movs	r0, #2
 80030e6:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8003188 <TSR_handle+0x204>
 80030ea:	f7fd ff89 	bl	8001000 <Max_speed_responsible>
 80030ee:	eef0 7a40 	vmov.f32	s15, s0
 80030f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003164 <TSR_handle+0x1e0>)
 80030f4:	edc3 7a00 	vstr	s15, [r3]
        l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_strafe);
 80030f8:	491b      	ldr	r1, [pc, #108]	@ (8003168 <TSR_handle+0x1e4>)
 80030fa:	481c      	ldr	r0, [pc, #112]	@ (800316c <TSR_handle+0x1e8>)
 80030fc:	f7fe ff70 	bl	8001fe0 <CAN_send_message>
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	4313      	orrs	r3, r2
 8003108:	73fb      	strb	r3, [r7, #15]
        break;
 800310a:	e014      	b.n	8003136 <TSR_handle+0x1b2>
    
    case SPEED_120:
        Car_Max_Forced_Speed = Max_speed_responsible(SPEED_120_PERCENTAGE * DEFUALT_ROBOT_MAX_SPEED, TSR);
 800310c:	2002      	movs	r0, #2
 800310e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800318c <TSR_handle+0x208>
 8003112:	f7fd ff75 	bl	8001000 <Max_speed_responsible>
 8003116:	eef0 7a40 	vmov.f32	s15, s0
 800311a:	4b12      	ldr	r3, [pc, #72]	@ (8003164 <TSR_handle+0x1e0>)
 800311c:	edc3 7a00 	vstr	s15, [r3]
        l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_strafe);
 8003120:	4911      	ldr	r1, [pc, #68]	@ (8003168 <TSR_handle+0x1e4>)
 8003122:	4812      	ldr	r0, [pc, #72]	@ (800316c <TSR_handle+0x1e8>)
 8003124:	f7fe ff5c 	bl	8001fe0 <CAN_send_message>
 8003128:	4603      	mov	r3, r0
 800312a:	461a      	mov	r2, r3
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	4313      	orrs	r3, r2
 8003130:	73fb      	strb	r3, [r7, #15]
        break;
 8003132:	e000      	b.n	8003136 <TSR_handle+0x1b2>

    default:
        break;
 8003134:	bf00      	nop
    }
    
    switch (p_Sign)
 8003136:	79bb      	ldrb	r3, [r7, #6]
 8003138:	3b0a      	subs	r3, #10
 800313a:	2b03      	cmp	r3, #3
 800313c:	d80a      	bhi.n	8003154 <TSR_handle+0x1d0>
 800313e:	a201      	add	r2, pc, #4	@ (adr r2, 8003144 <TSR_handle+0x1c0>)
 8003140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003144:	08003155 	.word	0x08003155
 8003148:	08003155 	.word	0x08003155
 800314c:	08003155 	.word	0x08003155
 8003150:	08003155 	.word	0x08003155
    case GREEN:
        /* Reserved Until Thinking of the behavior */
        break;
    
    default:
        break;
 8003154:	bf00      	nop
    }
    return l_AppStatus;
 8003156:	7bfb      	ldrb	r3, [r7, #15]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	3db851eb 	.word	0x3db851eb
 8003164:	20000014 	.word	0x20000014
 8003168:	200001cc 	.word	0x200001cc
 800316c:	20000018 	.word	0x20000018
 8003170:	3e0a3d71 	.word	0x3e0a3d71
 8003174:	3e3851eb 	.word	0x3e3851eb
 8003178:	3e666666 	.word	0x3e666666
 800317c:	3e8a3d71 	.word	0x3e8a3d71
 8003180:	3ea147ae 	.word	0x3ea147ae
 8003184:	3eb851eb 	.word	0x3eb851eb
 8003188:	3ecf5c28 	.word	0x3ecf5c28
 800318c:	3ee66666 	.word	0x3ee66666

08003190 <TSR_task>:
 * @brief this function updates the max speed of the car (depending on the last max limited speed deteced)
 * 
 * @return app_status_t status of operation
 */
app_status_t TSR_task(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
    app_status_t l_AppStatus = APP_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	72fb      	strb	r3, [r7, #11]

    float_t l_TempAngle = 0.0f;
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
    float_t l_AngleDifference = 0.0f;
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]
    
    if (Car_Wanted_Angle > 180)
 80031a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003250 <TSR_task+0xc0>)
 80031a8:	edd3 7a00 	vldr	s15, [r3]
 80031ac:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8003254 <TSR_task+0xc4>
 80031b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b8:	dd08      	ble.n	80031cc <TSR_task+0x3c>
        l_TempAngle = Car_Wanted_Angle - 360.0f;
 80031ba:	4b25      	ldr	r3, [pc, #148]	@ (8003250 <TSR_task+0xc0>)
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8003258 <TSR_task+0xc8>
 80031c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031c8:	edc7 7a03 	vstr	s15, [r7, #12]
    
    l_AngleDifference = LastCarAngle - l_TempAngle;
 80031cc:	4b23      	ldr	r3, [pc, #140]	@ (800325c <TSR_task+0xcc>)
 80031ce:	ed93 7a00 	vldr	s14, [r3]
 80031d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80031d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031da:	edc7 7a01 	vstr	s15, [r7, #4]

    if (!(value_in_range(l_AngleDifference, 0, 10) || value_in_range(l_AngleDifference, -10, 0)))
 80031de:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80031e2:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8003260 <TSR_task+0xd0>
 80031e6:	ed97 0a01 	vldr	s0, [r7, #4]
 80031ea:	f00c fe4b 	bl	800fe84 <value_in_range>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f083 0301 	eor.w	r3, r3, #1
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d020      	beq.n	800323c <TSR_task+0xac>
 80031fa:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8003260 <TSR_task+0xd0>
 80031fe:	eefa 0a04 	vmov.f32	s1, #164	@ 0xc1200000 -10.0
 8003202:	ed97 0a01 	vldr	s0, [r7, #4]
 8003206:	f00c fe3d 	bl	800fe84 <value_in_range>
 800320a:	4603      	mov	r3, r0
 800320c:	f083 0301 	eor.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d012      	beq.n	800323c <TSR_task+0xac>
    {
        Car_Max_Forced_Speed = Max_speed_responsible(DEFUALT_ROBOT_MAX_SPEED, TSR);
 8003216:	2002      	movs	r0, #2
 8003218:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8003264 <TSR_task+0xd4>
 800321c:	f7fd fef0 	bl	8001000 <Max_speed_responsible>
 8003220:	eef0 7a40 	vmov.f32	s15, s0
 8003224:	4b10      	ldr	r3, [pc, #64]	@ (8003268 <TSR_task+0xd8>)
 8003226:	edc3 7a00 	vstr	s15, [r3]

        l_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_strafe);
 800322a:	4910      	ldr	r1, [pc, #64]	@ (800326c <TSR_task+0xdc>)
 800322c:	4810      	ldr	r0, [pc, #64]	@ (8003270 <TSR_task+0xe0>)
 800322e:	f7fe fed7 	bl	8001fe0 <CAN_send_message>
 8003232:	4603      	mov	r3, r0
 8003234:	461a      	mov	r2, r3
 8003236:	7afb      	ldrb	r3, [r7, #11]
 8003238:	4313      	orrs	r3, r2
 800323a:	72fb      	strb	r3, [r7, #11]
    }

    LastCarAngle = Car_Wanted_Angle;
 800323c:	4b04      	ldr	r3, [pc, #16]	@ (8003250 <TSR_task+0xc0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a06      	ldr	r2, [pc, #24]	@ (800325c <TSR_task+0xcc>)
 8003242:	6013      	str	r3, [r2, #0]
}
 8003244:	bf00      	nop
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200006d8 	.word	0x200006d8
 8003254:	43340000 	.word	0x43340000
 8003258:	43b40000 	.word	0x43b40000
 800325c:	20000794 	.word	0x20000794
 8003260:	00000000 	.word	0x00000000
 8003264:	3ee66666 	.word	0x3ee66666
 8003268:	20000014 	.word	0x20000014
 800326c:	200001cc 	.word	0x200001cc
 8003270:	20000018 	.word	0x20000018

08003274 <ultrasonics_task_init>:
 * @brief this function initialize the task of reading from all ultrasonics
 * @param p_AllUltrasonics pointer to the Ultrasonics of the car
 * @return app_status_t status of operation
 */
app_status_t ultrasonics_task_init(ultrasonics_t *p_AllUltrasonics)
{
 8003274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003276:	b08b      	sub	sp, #44	@ 0x2c
 8003278:	af06      	add	r7, sp, #24
 800327a:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_AllUltrasonics)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d102      	bne.n	800328c <ultrasonics_task_init+0x18>
    {
        l_AppStatus = APP_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	73fb      	strb	r3, [r7, #15]
 800328a:	e022      	b.n	80032d2 <ultrasonics_task_init+0x5e>
    }
    else
    {
        ecu_status_t l_EcuStatus = Ultrasonic_Init(8,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681d      	ldr	r5, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691e      	ldr	r6, [r3, #16]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	603b      	str	r3, [r7, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6852      	ldr	r2, [r2, #4]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	6949      	ldr	r1, [r1, #20]
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	68c0      	ldr	r0, [r0, #12]
 80032aa:	687c      	ldr	r4, [r7, #4]
 80032ac:	69e4      	ldr	r4, [r4, #28]
 80032ae:	9404      	str	r4, [sp, #16]
 80032b0:	9003      	str	r0, [sp, #12]
 80032b2:	9102      	str	r1, [sp, #8]
 80032b4:	9201      	str	r2, [sp, #4]
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	4632      	mov	r2, r6
 80032bc:	4629      	mov	r1, r5
 80032be:	2008      	movs	r0, #8
 80032c0:	f008 fb50 	bl	800b964 <Ultrasonic_Init>
 80032c4:	4603      	mov	r3, r0
 80032c6:	73bb      	strb	r3, [r7, #14]
                                                   p_AllUltrasonics->UL_225,
                                                   p_AllUltrasonics->UL_135,
                                                   p_AllUltrasonics->UL_315
                                                   
        );
        if (ECU_OK != l_EcuStatus)
 80032c8:	7bbb      	ldrb	r3, [r7, #14]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <ultrasonics_task_init+0x5e>
        {
            l_AppStatus = APP_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_AppStatus;
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032dc <ultrasonics_update_task_X>:
 * @brief this function requests for update the value of 0-180 ultrasonics
 * @param p_AllUltrasonics pointer to the Ultrasonics of the car
 * @return app_status_t status of operation
 */
app_status_t ultrasonics_update_task_X(ultrasonics_t *p_AllUltrasonics)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_AllUltrasonics)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d102      	bne.n	80032f4 <ultrasonics_update_task_X+0x18>
    {
        l_AppStatus = APP_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	73fb      	strb	r3, [r7, #15]
 80032f2:	e00e      	b.n	8003312 <ultrasonics_update_task_X+0x36>
    }
    else
    {
        ecu_status_t l_EcuStatus = Ultrasonic_ReadDistance(2, 
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2101      	movs	r1, #1
 80032fe:	2002      	movs	r0, #2
 8003300:	f008 fb7e 	bl	800ba00 <Ultrasonic_ReadDistance>
 8003304:	4603      	mov	r3, r0
 8003306:	73bb      	strb	r3, [r7, #14]
                                                           1,
                                                           p_AllUltrasonics->UL_0,
                                                           p_AllUltrasonics->UL_180
                                                           
        );
        if (ECU_OK != l_EcuStatus)
 8003308:	7bbb      	ldrb	r3, [r7, #14]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <ultrasonics_update_task_X+0x36>
        {
        	l_AppStatus = APP_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_AppStatus;
 8003312:	7bfb      	ldrb	r3, [r7, #15]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <ultrasonics_update_task_U>:
 * @brief this function requests for update the value of 45-135-225-315 ultrasonics
 * @param p_AllUltrasonics pointer to the Ultrasonics of the car
 * @return app_status_t status of operation
 */
app_status_t ultrasonics_update_task_U(ultrasonics_t *p_AllUltrasonics)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_AllUltrasonics)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <ultrasonics_update_task_U+0x18>
    {
        l_AppStatus = APP_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
 8003332:	e00e      	b.n	8003352 <ultrasonics_update_task_U+0x36>
    }
    else
    {
        ecu_status_t l_EcuStatus = Ultrasonic_ReadDistance(2, 
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	2105      	movs	r1, #5
 800333e:	2002      	movs	r0, #2
 8003340:	f008 fb5e 	bl	800ba00 <Ultrasonic_ReadDistance>
 8003344:	4603      	mov	r3, r0
 8003346:	73bb      	strb	r3, [r7, #14]
                                                           5,
                                                           p_AllUltrasonics->UL_45,
                                                           p_AllUltrasonics->UL_225
                                                           
        );
        if (ECU_OK != l_EcuStatus)
 8003348:	7bbb      	ldrb	r3, [r7, #14]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <ultrasonics_update_task_U+0x36>
        {
        	l_AppStatus = APP_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_AppStatus;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <ultrasonics_update_task_Y>:
 * @brief this function requests for update the value of 90-270 ultrasonics
 * @param p_AllUltrasonics pointer to the Ultrasonics of the car
 * @return app_status_t status of operation
 */
app_status_t ultrasonics_update_task_Y(ultrasonics_t *p_AllUltrasonics)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_AllUltrasonics)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <ultrasonics_update_task_Y+0x18>
    {
        l_AppStatus = APP_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
 8003372:	e00e      	b.n	8003392 <ultrasonics_update_task_Y+0x36>
    }
    else
    {
        ecu_status_t l_EcuStatus = Ultrasonic_ReadDistance(2, 
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2103      	movs	r1, #3
 800337e:	2002      	movs	r0, #2
 8003380:	f008 fb3e 	bl	800ba00 <Ultrasonic_ReadDistance>
 8003384:	4603      	mov	r3, r0
 8003386:	73bb      	strb	r3, [r7, #14]
                                                           3,
                                                           p_AllUltrasonics->UL_90,
                                                           p_AllUltrasonics->UL_270
                                                        
        );
        if (ECU_OK != l_EcuStatus)
 8003388:	7bbb      	ldrb	r3, [r7, #14]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <ultrasonics_update_task_Y+0x36>
        {
        	l_AppStatus = APP_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_AppStatus;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <ultrasonics_update_task_V>:
 * @brief this function requests for update the value of 45-135-225-315 ultrasonics
 * @param p_AllUltrasonics pointer to the Ultrasonics of the car
 * @return app_status_t status of operation
 */
app_status_t ultrasonics_update_task_V(ultrasonics_t *p_AllUltrasonics)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_AllUltrasonics)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <ultrasonics_update_task_V+0x18>
    {
        l_AppStatus = APP_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
 80033b2:	e00e      	b.n	80033d2 <ultrasonics_update_task_V+0x36>
    }
    else
    {
        ecu_status_t l_EcuStatus = Ultrasonic_ReadDistance(2, 
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	2107      	movs	r1, #7
 80033be:	2002      	movs	r0, #2
 80033c0:	f008 fb1e 	bl	800ba00 <Ultrasonic_ReadDistance>
 80033c4:	4603      	mov	r3, r0
 80033c6:	73bb      	strb	r3, [r7, #14]
                                                           7,
                                                           p_AllUltrasonics->UL_135,
                                                           p_AllUltrasonics->UL_315
                                                           
        );
        if (ECU_OK != l_EcuStatus)
 80033c8:	7bbb      	ldrb	r3, [r7, #14]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <ultrasonics_update_task_V+0x36>
        {
        	l_AppStatus = APP_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_AppStatus;
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <ultrasonics_outlier_detect_X>:
 * 
 * @param p_AllUltrasonics pointer to all ultrasonics
 * @return app_status_t status of operations
 */
app_status_t ultrasonics_outlier_detect_X(ultrasonics_t *p_AllUltrasonics)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_AllUltrasonics)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <ultrasonics_outlier_detect_X+0x18>
    {
        l_AppStatus = APP_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
 80033f2:	e02e      	b.n	8003452 <ultrasonics_outlier_detect_X+0x76>
    }
    else
    {
        float_t temp = 0.0f;
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
        temp = outlier_detect(Last_N_Readings_ul0, *(p_AllUltrasonics->UL_0->Distance));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	edd3 7a00 	vldr	s15, [r3]
 8003404:	eeb0 0a67 	vmov.f32	s0, s15
 8003408:	4814      	ldr	r0, [pc, #80]	@ (800345c <ultrasonics_outlier_detect_X+0x80>)
 800340a:	f000 f91f 	bl	800364c <outlier_detect>
 800340e:	ed87 0a02 	vstr	s0, [r7, #8]
        shift_readings(Last_N_Readings_ul0, temp);
 8003412:	ed97 0a02 	vldr	s0, [r7, #8]
 8003416:	4811      	ldr	r0, [pc, #68]	@ (800345c <ultrasonics_outlier_detect_X+0x80>)
 8003418:	f000 f8f2 	bl	8003600 <shift_readings>
        *(p_AllUltrasonics->UL_0->Distance) = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	601a      	str	r2, [r3, #0]

        temp = outlier_detect(Last_N_Readings_ul180, *(p_AllUltrasonics->UL_180->Distance));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	edd3 7a00 	vldr	s15, [r3]
 8003430:	eeb0 0a67 	vmov.f32	s0, s15
 8003434:	480a      	ldr	r0, [pc, #40]	@ (8003460 <ultrasonics_outlier_detect_X+0x84>)
 8003436:	f000 f909 	bl	800364c <outlier_detect>
 800343a:	ed87 0a02 	vstr	s0, [r7, #8]
        shift_readings(Last_N_Readings_ul180, temp);
 800343e:	ed97 0a02 	vldr	s0, [r7, #8]
 8003442:	4807      	ldr	r0, [pc, #28]	@ (8003460 <ultrasonics_outlier_detect_X+0x84>)
 8003444:	f000 f8dc 	bl	8003600 <shift_readings>
        *(p_AllUltrasonics->UL_180->Distance) = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	601a      	str	r2, [r3, #0]
    }
    return l_AppStatus;
 8003452:	7bfb      	ldrb	r3, [r7, #15]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20000798 	.word	0x20000798
 8003460:	200007e8 	.word	0x200007e8

08003464 <ultrasonics_outlier_detect_U>:
 * 
 * @param p_AllUltrasonics pointer to all ultrasonics
 * @return app_status_t status of operations
 */
app_status_t ultrasonics_outlier_detect_U(ultrasonics_t *p_AllUltrasonics)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_AllUltrasonics)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d102      	bne.n	800347c <ultrasonics_outlier_detect_U+0x18>
    {
        l_AppStatus = APP_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
 800347a:	e02e      	b.n	80034da <ultrasonics_outlier_detect_U+0x76>
    }
    else
    {
        float_t temp = 0.0f;
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]
        temp = outlier_detect(Last_N_Readings_ul45, *(p_AllUltrasonics->UL_45->Distance));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	eeb0 0a67 	vmov.f32	s0, s15
 8003490:	4814      	ldr	r0, [pc, #80]	@ (80034e4 <ultrasonics_outlier_detect_U+0x80>)
 8003492:	f000 f8db 	bl	800364c <outlier_detect>
 8003496:	ed87 0a02 	vstr	s0, [r7, #8]
        shift_readings(Last_N_Readings_ul45, temp);
 800349a:	ed97 0a02 	vldr	s0, [r7, #8]
 800349e:	4811      	ldr	r0, [pc, #68]	@ (80034e4 <ultrasonics_outlier_detect_U+0x80>)
 80034a0:	f000 f8ae 	bl	8003600 <shift_readings>
        *(p_AllUltrasonics->UL_45->Distance) = temp;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	601a      	str	r2, [r3, #0]

        temp = outlier_detect(Last_N_Readings_ul225, *(p_AllUltrasonics->UL_225->Distance));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	edd3 7a00 	vldr	s15, [r3]
 80034b8:	eeb0 0a67 	vmov.f32	s0, s15
 80034bc:	480a      	ldr	r0, [pc, #40]	@ (80034e8 <ultrasonics_outlier_detect_U+0x84>)
 80034be:	f000 f8c5 	bl	800364c <outlier_detect>
 80034c2:	ed87 0a02 	vstr	s0, [r7, #8]
        shift_readings(Last_N_Readings_ul225, temp);
 80034c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80034ca:	4807      	ldr	r0, [pc, #28]	@ (80034e8 <ultrasonics_outlier_detect_U+0x84>)
 80034cc:	f000 f898 	bl	8003600 <shift_readings>
        *(p_AllUltrasonics->UL_225->Distance) = temp;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	601a      	str	r2, [r3, #0]
    }
    return l_AppStatus;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	200007ac 	.word	0x200007ac
 80034e8:	200007fc 	.word	0x200007fc

080034ec <ultrasonics_outlier_detect_Y>:
 * 
 * @param p_AllUltrasonics pointer to all ultrasonics
 * @return app_status_t status of operations
 */
app_status_t ultrasonics_outlier_detect_Y(ultrasonics_t *p_AllUltrasonics)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_AllUltrasonics)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <ultrasonics_outlier_detect_Y+0x18>
    {
        l_AppStatus = APP_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	e02e      	b.n	8003562 <ultrasonics_outlier_detect_Y+0x76>
    }
    else
    {
        float_t temp = 0.0f;
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
        temp = outlier_detect(Last_N_Readings_ul90, *(p_AllUltrasonics->UL_90->Distance));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	edd3 7a00 	vldr	s15, [r3]
 8003514:	eeb0 0a67 	vmov.f32	s0, s15
 8003518:	4814      	ldr	r0, [pc, #80]	@ (800356c <ultrasonics_outlier_detect_Y+0x80>)
 800351a:	f000 f897 	bl	800364c <outlier_detect>
 800351e:	ed87 0a02 	vstr	s0, [r7, #8]
        shift_readings(Last_N_Readings_ul90, temp);
 8003522:	ed97 0a02 	vldr	s0, [r7, #8]
 8003526:	4811      	ldr	r0, [pc, #68]	@ (800356c <ultrasonics_outlier_detect_Y+0x80>)
 8003528:	f000 f86a 	bl	8003600 <shift_readings>
        *(p_AllUltrasonics->UL_90->Distance) = temp;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	601a      	str	r2, [r3, #0]

        temp = outlier_detect(Last_N_Readings_ul270, *(p_AllUltrasonics->UL_270->Distance));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	edd3 7a00 	vldr	s15, [r3]
 8003540:	eeb0 0a67 	vmov.f32	s0, s15
 8003544:	480a      	ldr	r0, [pc, #40]	@ (8003570 <ultrasonics_outlier_detect_Y+0x84>)
 8003546:	f000 f881 	bl	800364c <outlier_detect>
 800354a:	ed87 0a02 	vstr	s0, [r7, #8]
        shift_readings(Last_N_Readings_ul315, temp);
 800354e:	ed97 0a02 	vldr	s0, [r7, #8]
 8003552:	4808      	ldr	r0, [pc, #32]	@ (8003574 <ultrasonics_outlier_detect_Y+0x88>)
 8003554:	f000 f854 	bl	8003600 <shift_readings>
        *(p_AllUltrasonics->UL_270->Distance) = temp;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	601a      	str	r2, [r3, #0]
    }
    return l_AppStatus;
 8003562:	7bfb      	ldrb	r3, [r7, #15]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	200007c0 	.word	0x200007c0
 8003570:	20000810 	.word	0x20000810
 8003574:	20000824 	.word	0x20000824

08003578 <ultrasonics_outlier_detect_V>:
 * 
 * @param p_AllUltrasonics pointer to all ultrasonics
 * @return app_status_t status of operations
 */
app_status_t ultrasonics_outlier_detect_V(ultrasonics_t *p_AllUltrasonics)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_AllUltrasonics)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <ultrasonics_outlier_detect_V+0x18>
    {
        l_AppStatus = APP_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	e02e      	b.n	80035ee <ultrasonics_outlier_detect_V+0x76>
    }
    else
    {
        float_t temp = 0.0f;
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]
        temp = outlier_detect(Last_N_Readings_ul135, *(p_AllUltrasonics->UL_135->Distance));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	edd3 7a00 	vldr	s15, [r3]
 80035a0:	eeb0 0a67 	vmov.f32	s0, s15
 80035a4:	4814      	ldr	r0, [pc, #80]	@ (80035f8 <ultrasonics_outlier_detect_V+0x80>)
 80035a6:	f000 f851 	bl	800364c <outlier_detect>
 80035aa:	ed87 0a02 	vstr	s0, [r7, #8]
        shift_readings(Last_N_Readings_ul135, temp);
 80035ae:	ed97 0a02 	vldr	s0, [r7, #8]
 80035b2:	4811      	ldr	r0, [pc, #68]	@ (80035f8 <ultrasonics_outlier_detect_V+0x80>)
 80035b4:	f000 f824 	bl	8003600 <shift_readings>
        *(p_AllUltrasonics->UL_135->Distance) = temp;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	601a      	str	r2, [r3, #0]

        temp = outlier_detect(Last_N_Readings_ul315, *(p_AllUltrasonics->UL_315->Distance));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	edd3 7a00 	vldr	s15, [r3]
 80035cc:	eeb0 0a67 	vmov.f32	s0, s15
 80035d0:	480a      	ldr	r0, [pc, #40]	@ (80035fc <ultrasonics_outlier_detect_V+0x84>)
 80035d2:	f000 f83b 	bl	800364c <outlier_detect>
 80035d6:	ed87 0a02 	vstr	s0, [r7, #8]
        shift_readings(Last_N_Readings_ul315, temp);
 80035da:	ed97 0a02 	vldr	s0, [r7, #8]
 80035de:	4807      	ldr	r0, [pc, #28]	@ (80035fc <ultrasonics_outlier_detect_V+0x84>)
 80035e0:	f000 f80e 	bl	8003600 <shift_readings>
        *(p_AllUltrasonics->UL_315->Distance) = temp;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	601a      	str	r2, [r3, #0]
        
    }
    return l_AppStatus;
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	200007d4 	.word	0x200007d4
 80035fc:	20000824 	.word	0x20000824

08003600 <shift_readings>:
 * 
 * @param p_ReadingBuffer buffer will be shifted
 * @param p_NewReading the new value should be shiffted in the buffer
 */
static void shift_readings(float_t *p_ReadingBuffer, float_t p_NewReading)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	ed87 0a00 	vstr	s0, [r7]
    for (uint8_t counter = OUTLIER_WINDOW_SIZE - 1; counter > 0; counter--)
 800360c:	2304      	movs	r3, #4
 800360e:	73fb      	strb	r3, [r7, #15]
 8003610:	e00f      	b.n	8003632 <shift_readings+0x32>
    {
        p_ReadingBuffer[counter] = p_ReadingBuffer[counter - 1];
 8003612:	7bfb      	ldrb	r3, [r7, #15]
 8003614:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003618:	3b01      	subs	r3, #1
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	441a      	add	r2, r3
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	440b      	add	r3, r1
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	601a      	str	r2, [r3, #0]
    for (uint8_t counter = OUTLIER_WINDOW_SIZE - 1; counter > 0; counter--)
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	3b01      	subs	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ec      	bne.n	8003612 <shift_readings+0x12>
    }
    p_ReadingBuffer[0] = p_NewReading;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	601a      	str	r2, [r3, #0]
}
 800363e:	bf00      	nop
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <outlier_detect>:
 * @return float_t best reading decision
 * @note this function returns the new reading if no outlier detected and returns the median of 
 * last N (OUTLIER_WINDOW_SIZE) reading if detected
 */
static float_t outlier_detect(float_t *p_ReadingBuffer, float_t p_NewReading)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	ed87 0a00 	vstr	s0, [r7]
    float_t l_RetReading = 0.0f;
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
    float_t l_Median = 0.0f;
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	613b      	str	r3, [r7, #16]
    for (uint8_t counter = 0; counter < OUTLIER_WINDOW_SIZE; counter++)
 8003664:	2300      	movs	r3, #0
 8003666:	73fb      	strb	r3, [r7, #15]
 8003668:	e00e      	b.n	8003688 <outlier_detect+0x3c>
    {
        l_Median += p_ReadingBuffer[counter];
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	edd3 7a00 	vldr	s15, [r3]
 8003676:	ed97 7a04 	vldr	s14, [r7, #16]
 800367a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800367e:	edc7 7a04 	vstr	s15, [r7, #16]
    for (uint8_t counter = 0; counter < OUTLIER_WINDOW_SIZE; counter++)
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	3301      	adds	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b04      	cmp	r3, #4
 800368c:	d9ed      	bls.n	800366a <outlier_detect+0x1e>
    }
    l_Median /= (float_t)OUTLIER_WINDOW_SIZE;
 800368e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003692:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8003696:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800369a:	edc7 7a04 	vstr	s15, [r7, #16]
    if ((p_NewReading > (l_Median + OUTLIER_THRESHOLD)) || 
 800369e:	edd7 7a04 	vldr	s15, [r7, #16]
 80036a2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003704 <outlier_detect+0xb8>
 80036a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036aa:	ed97 7a00 	vldr	s14, [r7]
 80036ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b6:	dc15      	bgt.n	80036e4 <outlier_detect+0x98>
        (p_NewReading < (l_Median - OUTLIER_THRESHOLD)) ||
 80036b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80036bc:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003704 <outlier_detect+0xb8>
 80036c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    if ((p_NewReading > (l_Median + OUTLIER_THRESHOLD)) || 
 80036c4:	ed97 7a00 	vldr	s14, [r7]
 80036c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d0:	d408      	bmi.n	80036e4 <outlier_detect+0x98>
        (p_NewReading < (l_Median - OUTLIER_THRESHOLD)) ||
 80036d2:	edd7 7a00 	vldr	s15, [r7]
 80036d6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003704 <outlier_detect+0xb8>
 80036da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e2:	dd02      	ble.n	80036ea <outlier_detect+0x9e>
        (p_NewReading > ULTRASONIC_MAX_READING))
    {
        l_RetReading = l_Median;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	e001      	b.n	80036ee <outlier_detect+0xa2>
    }
    else
    {
        l_RetReading = p_NewReading;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	617b      	str	r3, [r7, #20]
    }
    return l_RetReading;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	ee07 3a90 	vmov	s15, r3
}
 80036f4:	eeb0 0a67 	vmov.f32	s0, s15
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	43c80000 	.word	0x43c80000

08003708 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800370c:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <MX_CRC_Init+0x20>)
 800370e:	4a07      	ldr	r2, [pc, #28]	@ (800372c <MX_CRC_Init+0x24>)
 8003710:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003712:	4805      	ldr	r0, [pc, #20]	@ (8003728 <MX_CRC_Init+0x20>)
 8003714:	f001 fd0a 	bl	800512c <HAL_CRC_Init>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800371e:	f000 ff8b 	bl	8004638 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000838 	.word	0x20000838
 800372c:	40023000 	.word	0x40023000

08003730 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0b      	ldr	r2, [pc, #44]	@ (800376c <HAL_CRC_MspInit+0x3c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d10d      	bne.n	800375e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	4b0a      	ldr	r3, [pc, #40]	@ (8003770 <HAL_CRC_MspInit+0x40>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	4a09      	ldr	r2, [pc, #36]	@ (8003770 <HAL_CRC_MspInit+0x40>)
 800374c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003750:	6313      	str	r3, [r2, #48]	@ 0x30
 8003752:	4b07      	ldr	r3, [pc, #28]	@ (8003770 <HAL_CRC_MspInit+0x40>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40023000 	.word	0x40023000
 8003770:	40023800 	.word	0x40023800

08003774 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of MPU_sema */
  MPU_semaHandle = osSemaphoreNew(1, 0, &MPU_sema_attributes);
 8003778:	4a55      	ldr	r2, [pc, #340]	@ (80038d0 <MX_FREERTOS_Init+0x15c>)
 800377a:	2100      	movs	r1, #0
 800377c:	2001      	movs	r0, #1
 800377e:	f008 fd77 	bl	800c270 <osSemaphoreNew>
 8003782:	4603      	mov	r3, r0
 8003784:	4a53      	ldr	r2, [pc, #332]	@ (80038d4 <MX_FREERTOS_Init+0x160>)
 8003786:	6013      	str	r3, [r2, #0]

  /* creation of CONTROL_sema */
  CONTROL_semaHandle = osSemaphoreNew(1, 0, &CONTROL_sema_attributes);
 8003788:	4a53      	ldr	r2, [pc, #332]	@ (80038d8 <MX_FREERTOS_Init+0x164>)
 800378a:	2100      	movs	r1, #0
 800378c:	2001      	movs	r0, #1
 800378e:	f008 fd6f 	bl	800c270 <osSemaphoreNew>
 8003792:	4603      	mov	r3, r0
 8003794:	4a51      	ldr	r2, [pc, #324]	@ (80038dc <MX_FREERTOS_Init+0x168>)
 8003796:	6013      	str	r3, [r2, #0]

  /* creation of PID_tune_sema */
  PID_tune_semaHandle = osSemaphoreNew(1, 0, &PID_tune_sema_attributes);
 8003798:	4a51      	ldr	r2, [pc, #324]	@ (80038e0 <MX_FREERTOS_Init+0x16c>)
 800379a:	2100      	movs	r1, #0
 800379c:	2001      	movs	r0, #1
 800379e:	f008 fd67 	bl	800c270 <osSemaphoreNew>
 80037a2:	4603      	mov	r3, r0
 80037a4:	4a4f      	ldr	r2, [pc, #316]	@ (80038e4 <MX_FREERTOS_Init+0x170>)
 80037a6:	6013      	str	r3, [r2, #0]

  /* creation of KalmanReady_sema */
  KalmanReady_semaHandle = osSemaphoreNew(1, 0, &KalmanReady_sema_attributes);
 80037a8:	4a4f      	ldr	r2, [pc, #316]	@ (80038e8 <MX_FREERTOS_Init+0x174>)
 80037aa:	2100      	movs	r1, #0
 80037ac:	2001      	movs	r0, #1
 80037ae:	f008 fd5f 	bl	800c270 <osSemaphoreNew>
 80037b2:	4603      	mov	r3, r0
 80037b4:	4a4d      	ldr	r2, [pc, #308]	@ (80038ec <MX_FREERTOS_Init+0x178>)
 80037b6:	6013      	str	r3, [r2, #0]

  /* creation of YawPIDReady_sema */
  YawPIDReady_semaHandle = osSemaphoreNew(1, 0, &YawPIDReady_sema_attributes);
 80037b8:	4a4d      	ldr	r2, [pc, #308]	@ (80038f0 <MX_FREERTOS_Init+0x17c>)
 80037ba:	2100      	movs	r1, #0
 80037bc:	2001      	movs	r0, #1
 80037be:	f008 fd57 	bl	800c270 <osSemaphoreNew>
 80037c2:	4603      	mov	r3, r0
 80037c4:	4a4b      	ldr	r2, [pc, #300]	@ (80038f4 <MX_FREERTOS_Init+0x180>)
 80037c6:	6013      	str	r3, [r2, #0]

  /* creation of CAN_sema */
  CAN_semaHandle = osSemaphoreNew(2, 0, &CAN_sema_attributes);
 80037c8:	4a4b      	ldr	r2, [pc, #300]	@ (80038f8 <MX_FREERTOS_Init+0x184>)
 80037ca:	2100      	movs	r1, #0
 80037cc:	2002      	movs	r0, #2
 80037ce:	f008 fd4f 	bl	800c270 <osSemaphoreNew>
 80037d2:	4603      	mov	r3, r0
 80037d4:	4a49      	ldr	r2, [pc, #292]	@ (80038fc <MX_FREERTOS_Init+0x188>)
 80037d6:	6013      	str	r3, [r2, #0]

  /* creation of Orientation_sema */
  Orientation_semaHandle = osSemaphoreNew(2, 0, &Orientation_sema_attributes);
 80037d8:	4a49      	ldr	r2, [pc, #292]	@ (8003900 <MX_FREERTOS_Init+0x18c>)
 80037da:	2100      	movs	r1, #0
 80037dc:	2002      	movs	r0, #2
 80037de:	f008 fd47 	bl	800c270 <osSemaphoreNew>
 80037e2:	4603      	mov	r3, r0
 80037e4:	4a47      	ldr	r2, [pc, #284]	@ (8003904 <MX_FREERTOS_Init+0x190>)
 80037e6:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Timer_test */
  Timer_testHandle = osTimerNew(callback_test, osTimerPeriodic, NULL, &Timer_test_attributes);
 80037e8:	4b47      	ldr	r3, [pc, #284]	@ (8003908 <MX_FREERTOS_Init+0x194>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	2101      	movs	r1, #1
 80037ee:	4847      	ldr	r0, [pc, #284]	@ (800390c <MX_FREERTOS_Init+0x198>)
 80037f0:	f008 fcc2 	bl	800c178 <osTimerNew>
 80037f4:	4603      	mov	r3, r0
 80037f6:	4a46      	ldr	r2, [pc, #280]	@ (8003910 <MX_FREERTOS_Init+0x19c>)
 80037f8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MPU_task */
  MPU_taskHandle = osThreadNew(MPUtask, NULL, &MPU_task_attributes);
 80037fa:	4a46      	ldr	r2, [pc, #280]	@ (8003914 <MX_FREERTOS_Init+0x1a0>)
 80037fc:	2100      	movs	r1, #0
 80037fe:	4846      	ldr	r0, [pc, #280]	@ (8003918 <MX_FREERTOS_Init+0x1a4>)
 8003800:	f008 fbb6 	bl	800bf70 <osThreadNew>
 8003804:	4603      	mov	r3, r0
 8003806:	4a45      	ldr	r2, [pc, #276]	@ (800391c <MX_FREERTOS_Init+0x1a8>)
 8003808:	6013      	str	r3, [r2, #0]

  /* creation of CAN_task */
  CAN_taskHandle = osThreadNew(CANtask, NULL, &CAN_task_attributes);
 800380a:	4a45      	ldr	r2, [pc, #276]	@ (8003920 <MX_FREERTOS_Init+0x1ac>)
 800380c:	2100      	movs	r1, #0
 800380e:	4845      	ldr	r0, [pc, #276]	@ (8003924 <MX_FREERTOS_Init+0x1b0>)
 8003810:	f008 fbae 	bl	800bf70 <osThreadNew>
 8003814:	4603      	mov	r3, r0
 8003816:	4a44      	ldr	r2, [pc, #272]	@ (8003928 <MX_FREERTOS_Init+0x1b4>)
 8003818:	6013      	str	r3, [r2, #0]

  /* creation of MONITORING_task */
  MONITORING_taskHandle = osThreadNew(MONITORINGtask, NULL, &MONITORING_task_attributes);
 800381a:	4a44      	ldr	r2, [pc, #272]	@ (800392c <MX_FREERTOS_Init+0x1b8>)
 800381c:	2100      	movs	r1, #0
 800381e:	4844      	ldr	r0, [pc, #272]	@ (8003930 <MX_FREERTOS_Init+0x1bc>)
 8003820:	f008 fba6 	bl	800bf70 <osThreadNew>
 8003824:	4603      	mov	r3, r0
 8003826:	4a43      	ldr	r2, [pc, #268]	@ (8003934 <MX_FREERTOS_Init+0x1c0>)
 8003828:	6013      	str	r3, [r2, #0]

  /* creation of Ultrasonic_task */
  Ultrasonic_taskHandle = osThreadNew(ULTRASONICtask, NULL, &Ultrasonic_task_attributes);
 800382a:	4a43      	ldr	r2, [pc, #268]	@ (8003938 <MX_FREERTOS_Init+0x1c4>)
 800382c:	2100      	movs	r1, #0
 800382e:	4843      	ldr	r0, [pc, #268]	@ (800393c <MX_FREERTOS_Init+0x1c8>)
 8003830:	f008 fb9e 	bl	800bf70 <osThreadNew>
 8003834:	4603      	mov	r3, r0
 8003836:	4a42      	ldr	r2, [pc, #264]	@ (8003940 <MX_FREERTOS_Init+0x1cc>)
 8003838:	6013      	str	r3, [r2, #0]

  /* creation of CONTROL_task */
  CONTROL_taskHandle = osThreadNew(CONTROLtask, NULL, &CONTROL_task_attributes);
 800383a:	4a42      	ldr	r2, [pc, #264]	@ (8003944 <MX_FREERTOS_Init+0x1d0>)
 800383c:	2100      	movs	r1, #0
 800383e:	4842      	ldr	r0, [pc, #264]	@ (8003948 <MX_FREERTOS_Init+0x1d4>)
 8003840:	f008 fb96 	bl	800bf70 <osThreadNew>
 8003844:	4603      	mov	r3, r0
 8003846:	4a41      	ldr	r2, [pc, #260]	@ (800394c <MX_FREERTOS_Init+0x1d8>)
 8003848:	6013      	str	r3, [r2, #0]

  /* creation of YawKalman_task */
  YawKalman_taskHandle = osThreadNew(YawKalmanTask, NULL, &YawKalman_task_attributes);
 800384a:	4a41      	ldr	r2, [pc, #260]	@ (8003950 <MX_FREERTOS_Init+0x1dc>)
 800384c:	2100      	movs	r1, #0
 800384e:	4841      	ldr	r0, [pc, #260]	@ (8003954 <MX_FREERTOS_Init+0x1e0>)
 8003850:	f008 fb8e 	bl	800bf70 <osThreadNew>
 8003854:	4603      	mov	r3, r0
 8003856:	4a40      	ldr	r2, [pc, #256]	@ (8003958 <MX_FREERTOS_Init+0x1e4>)
 8003858:	6013      	str	r3, [r2, #0]

  /* creation of YawPID_task */
  YawPID_taskHandle = osThreadNew(YawPIDtask, NULL, &YawPID_task_attributes);
 800385a:	4a40      	ldr	r2, [pc, #256]	@ (800395c <MX_FREERTOS_Init+0x1e8>)
 800385c:	2100      	movs	r1, #0
 800385e:	4840      	ldr	r0, [pc, #256]	@ (8003960 <MX_FREERTOS_Init+0x1ec>)
 8003860:	f008 fb86 	bl	800bf70 <osThreadNew>
 8003864:	4603      	mov	r3, r0
 8003866:	4a3f      	ldr	r2, [pc, #252]	@ (8003964 <MX_FREERTOS_Init+0x1f0>)
 8003868:	6013      	str	r3, [r2, #0]

  /* creation of ACC_Task */
  ACC_TaskHandle = osThreadNew(ACCtask, NULL, &ACC_Task_attributes);
 800386a:	4a3f      	ldr	r2, [pc, #252]	@ (8003968 <MX_FREERTOS_Init+0x1f4>)
 800386c:	2100      	movs	r1, #0
 800386e:	483f      	ldr	r0, [pc, #252]	@ (800396c <MX_FREERTOS_Init+0x1f8>)
 8003870:	f008 fb7e 	bl	800bf70 <osThreadNew>
 8003874:	4603      	mov	r3, r0
 8003876:	4a3e      	ldr	r2, [pc, #248]	@ (8003970 <MX_FREERTOS_Init+0x1fc>)
 8003878:	6013      	str	r3, [r2, #0]

  /* creation of TSR_Task */
  TSR_TaskHandle = osThreadNew(TSRtask, NULL, &TSR_Task_attributes);
 800387a:	4a3e      	ldr	r2, [pc, #248]	@ (8003974 <MX_FREERTOS_Init+0x200>)
 800387c:	2100      	movs	r1, #0
 800387e:	483e      	ldr	r0, [pc, #248]	@ (8003978 <MX_FREERTOS_Init+0x204>)
 8003880:	f008 fb76 	bl	800bf70 <osThreadNew>
 8003884:	4603      	mov	r3, r0
 8003886:	4a3d      	ldr	r2, [pc, #244]	@ (800397c <MX_FREERTOS_Init+0x208>)
 8003888:	6013      	str	r3, [r2, #0]

  /* creation of BSD_task */
  BSD_taskHandle = osThreadNew(BSDtask, NULL, &BSD_task_attributes);
 800388a:	4a3d      	ldr	r2, [pc, #244]	@ (8003980 <MX_FREERTOS_Init+0x20c>)
 800388c:	2100      	movs	r1, #0
 800388e:	483d      	ldr	r0, [pc, #244]	@ (8003984 <MX_FREERTOS_Init+0x210>)
 8003890:	f008 fb6e 	bl	800bf70 <osThreadNew>
 8003894:	4603      	mov	r3, r0
 8003896:	4a3c      	ldr	r2, [pc, #240]	@ (8003988 <MX_FREERTOS_Init+0x214>)
 8003898:	6013      	str	r3, [r2, #0]

  /* creation of BUZZ_task */
  BUZZ_taskHandle = osThreadNew(BUZZtask, NULL, &BUZZ_task_attributes);
 800389a:	4a3c      	ldr	r2, [pc, #240]	@ (800398c <MX_FREERTOS_Init+0x218>)
 800389c:	2100      	movs	r1, #0
 800389e:	483c      	ldr	r0, [pc, #240]	@ (8003990 <MX_FREERTOS_Init+0x21c>)
 80038a0:	f008 fb66 	bl	800bf70 <osThreadNew>
 80038a4:	4603      	mov	r3, r0
 80038a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003994 <MX_FREERTOS_Init+0x220>)
 80038a8:	6013      	str	r3, [r2, #0]

  /* creation of ALC_Task */
  ALC_TaskHandle = osThreadNew(ALCtask, NULL, &ALC_Task_attributes);
 80038aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003998 <MX_FREERTOS_Init+0x224>)
 80038ac:	2100      	movs	r1, #0
 80038ae:	483b      	ldr	r0, [pc, #236]	@ (800399c <MX_FREERTOS_Init+0x228>)
 80038b0:	f008 fb5e 	bl	800bf70 <osThreadNew>
 80038b4:	4603      	mov	r3, r0
 80038b6:	4a3a      	ldr	r2, [pc, #232]	@ (80039a0 <MX_FREERTOS_Init+0x22c>)
 80038b8:	6013      	str	r3, [r2, #0]

  /* creation of APK_Task */
  APK_TaskHandle = osThreadNew(APKtask, NULL, &APK_Task_attributes);
 80038ba:	4a3a      	ldr	r2, [pc, #232]	@ (80039a4 <MX_FREERTOS_Init+0x230>)
 80038bc:	2100      	movs	r1, #0
 80038be:	483a      	ldr	r0, [pc, #232]	@ (80039a8 <MX_FREERTOS_Init+0x234>)
 80038c0:	f008 fb56 	bl	800bf70 <osThreadNew>
 80038c4:	4603      	mov	r3, r0
 80038c6:	4a39      	ldr	r2, [pc, #228]	@ (80039ac <MX_FREERTOS_Init+0x238>)
 80038c8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	08010ea4 	.word	0x08010ea4
 80038d4:	2000087c 	.word	0x2000087c
 80038d8:	08010eb4 	.word	0x08010eb4
 80038dc:	20000880 	.word	0x20000880
 80038e0:	08010ec4 	.word	0x08010ec4
 80038e4:	20000884 	.word	0x20000884
 80038e8:	08010ed4 	.word	0x08010ed4
 80038ec:	20000888 	.word	0x20000888
 80038f0:	08010ee4 	.word	0x08010ee4
 80038f4:	2000088c 	.word	0x2000088c
 80038f8:	08010ef4 	.word	0x08010ef4
 80038fc:	20000890 	.word	0x20000890
 8003900:	08010f04 	.word	0x08010f04
 8003904:	20000894 	.word	0x20000894
 8003908:	08010e94 	.word	0x08010e94
 800390c:	08003f71 	.word	0x08003f71
 8003910:	20000878 	.word	0x20000878
 8003914:	08010cc0 	.word	0x08010cc0
 8003918:	080039b1 	.word	0x080039b1
 800391c:	20000844 	.word	0x20000844
 8003920:	08010ce4 	.word	0x08010ce4
 8003924:	08003a95 	.word	0x08003a95
 8003928:	20000848 	.word	0x20000848
 800392c:	08010d08 	.word	0x08010d08
 8003930:	08003aed 	.word	0x08003aed
 8003934:	2000084c 	.word	0x2000084c
 8003938:	08010d2c 	.word	0x08010d2c
 800393c:	08003b1d 	.word	0x08003b1d
 8003940:	20000850 	.word	0x20000850
 8003944:	08010d50 	.word	0x08010d50
 8003948:	08003bd1 	.word	0x08003bd1
 800394c:	20000854 	.word	0x20000854
 8003950:	08010d74 	.word	0x08010d74
 8003954:	08003d01 	.word	0x08003d01
 8003958:	20000858 	.word	0x20000858
 800395c:	08010d98 	.word	0x08010d98
 8003960:	08003d51 	.word	0x08003d51
 8003964:	2000085c 	.word	0x2000085c
 8003968:	08010dbc 	.word	0x08010dbc
 800396c:	08003dd9 	.word	0x08003dd9
 8003970:	20000860 	.word	0x20000860
 8003974:	08010de0 	.word	0x08010de0
 8003978:	08003e19 	.word	0x08003e19
 800397c:	20000864 	.word	0x20000864
 8003980:	08010e04 	.word	0x08010e04
 8003984:	08003e45 	.word	0x08003e45
 8003988:	20000868 	.word	0x20000868
 800398c:	08010e28 	.word	0x08010e28
 8003990:	08003e9d 	.word	0x08003e9d
 8003994:	2000086c 	.word	0x2000086c
 8003998:	08010e4c 	.word	0x08010e4c
 800399c:	08003ed5 	.word	0x08003ed5
 80039a0:	20000870 	.word	0x20000870
 80039a4:	08010e70 	.word	0x08010e70
 80039a8:	08003f09 	.word	0x08003f09
 80039ac:	20000874 	.word	0x20000874

080039b0 <MPUtask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MPUtask */
void MPUtask(void *argument)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MPUtask */
  osDelay(100);
 80039b8:	2064      	movs	r0, #100	@ 0x64
 80039ba:	f008 fbad 	bl	800c118 <osDelay>
  app_status_t t_AppStatus = MPU_task_init(&Main_MPU);
 80039be:	482d      	ldr	r0, [pc, #180]	@ (8003a74 <MPUtask+0xc4>)
 80039c0:	f7fe fd40 	bl	8002444 <MPU_task_init>
 80039c4:	4603      	mov	r3, r0
 80039c6:	73fb      	strb	r3, [r7, #15]
  osSemaphoreAcquire(Orientation_semaHandle, osWaitForever);
 80039c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a78 <MPUtask+0xc8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f04f 31ff 	mov.w	r1, #4294967295
 80039d0:	4618      	mov	r0, r3
 80039d2:	f008 fcd7 	bl	800c384 <osSemaphoreAcquire>
  for (uint32_t i = 0; i < 100; i++)
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	e01e      	b.n	8003a1a <MPUtask+0x6a>
  {
    osSemaphoreAcquire(MPU_semaHandle, osWaitForever);
 80039dc:	4b27      	ldr	r3, [pc, #156]	@ (8003a7c <MPUtask+0xcc>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f04f 31ff 	mov.w	r1, #4294967295
 80039e4:	4618      	mov	r0, r3
 80039e6:	f008 fccd 	bl	800c384 <osSemaphoreAcquire>
    t_AppStatus |= MPU_update_task(&Main_MPU);
 80039ea:	4822      	ldr	r0, [pc, #136]	@ (8003a74 <MPUtask+0xc4>)
 80039ec:	f7fe fd4a 	bl	8002484 <MPU_update_task>
 80039f0:	4603      	mov	r3, r0
 80039f2:	461a      	mov	r2, r3
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	73fb      	strb	r3, [r7, #15]
    MpuGz = Main_MPU.mpu->Gz;
 80039fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003a74 <MPUtask+0xc4>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	4a1f      	ldr	r2, [pc, #124]	@ (8003a80 <MPUtask+0xd0>)
 8003a02:	6013      	str	r3, [r2, #0]
    t_AppStatus |= Orientation_Gyro_calibration(&Main_Orientation);
 8003a04:	481f      	ldr	r0, [pc, #124]	@ (8003a84 <MPUtask+0xd4>)
 8003a06:	f7ff f9dd 	bl	8002dc4 <Orientation_Gyro_calibration>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0; i < 100; i++)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	3301      	adds	r3, #1
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b63      	cmp	r3, #99	@ 0x63
 8003a1e:	d9dd      	bls.n	80039dc <MPUtask+0x2c>
  }
  Main_Orientation.GyroBias /= 100.0f;
 8003a20:	4b18      	ldr	r3, [pc, #96]	@ (8003a84 <MPUtask+0xd4>)
 8003a22:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8003a26:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8003a88 <MPUtask+0xd8>
 8003a2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a2e:	4b15      	ldr	r3, [pc, #84]	@ (8003a84 <MPUtask+0xd4>)
 8003a30:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
  osSemaphoreRelease(KalmanReady_semaHandle);
 8003a34:	4b15      	ldr	r3, [pc, #84]	@ (8003a8c <MPUtask+0xdc>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f008 fcf5 	bl	800c428 <osSemaphoreRelease>
  osSemaphoreRelease(YawPIDReady_semaHandle);
 8003a3e:	4b14      	ldr	r3, [pc, #80]	@ (8003a90 <MPUtask+0xe0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f008 fcf0 	bl	800c428 <osSemaphoreRelease>
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreAcquire(MPU_semaHandle, osWaitForever);
 8003a48:	4b0c      	ldr	r3, [pc, #48]	@ (8003a7c <MPUtask+0xcc>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a50:	4618      	mov	r0, r3
 8003a52:	f008 fc97 	bl	800c384 <osSemaphoreAcquire>
    t_AppStatus |= MPU_update_task(&Main_MPU);
 8003a56:	4807      	ldr	r0, [pc, #28]	@ (8003a74 <MPUtask+0xc4>)
 8003a58:	f7fe fd14 	bl	8002484 <MPU_update_task>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	73fb      	strb	r3, [r7, #15]
    MpuGz = Main_MPU.mpu->Gz;
 8003a66:	4b03      	ldr	r3, [pc, #12]	@ (8003a74 <MPUtask+0xc4>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	4a04      	ldr	r2, [pc, #16]	@ (8003a80 <MPUtask+0xd0>)
 8003a6e:	6013      	str	r3, [r2, #0]
    osSemaphoreAcquire(MPU_semaHandle, osWaitForever);
 8003a70:	bf00      	nop
 8003a72:	e7e9      	b.n	8003a48 <MPUtask+0x98>
 8003a74:	20000040 	.word	0x20000040
 8003a78:	20000894 	.word	0x20000894
 8003a7c:	2000087c 	.word	0x2000087c
 8003a80:	200006f0 	.word	0x200006f0
 8003a84:	200000f0 	.word	0x200000f0
 8003a88:	42c80000 	.word	0x42c80000
 8003a8c:	20000888 	.word	0x20000888
 8003a90:	2000088c 	.word	0x2000088c

08003a94 <CANtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CANtask */
void CANtask(void *argument)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CANtask */
  app_status_t t_AppStatus = CAN_task_init(&Main_CAN);
 8003a9c:	480f      	ldr	r0, [pc, #60]	@ (8003adc <CANtask+0x48>)
 8003a9e:	f7fe fa13 	bl	8001ec8 <CAN_task_init>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	73fb      	strb	r3, [r7, #15]
  t_AppStatus |= messages_init(Yaw_PID_suspend, Yaw_PID_resume);
 8003aa6:	490e      	ldr	r1, [pc, #56]	@ (8003ae0 <CANtask+0x4c>)
 8003aa8:	480e      	ldr	r0, [pc, #56]	@ (8003ae4 <CANtask+0x50>)
 8003aaa:	f7fe fd11 	bl	80024d0 <messages_init>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	//while(flag == 0);
    osSemaphoreAcquire(CAN_semaHandle, osWaitForever);
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <CANtask+0x54>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f008 fc5f 	bl	800c384 <osSemaphoreAcquire>
    t_AppStatus |= CAN_rx_task(&Main_CAN);
 8003ac6:	4805      	ldr	r0, [pc, #20]	@ (8003adc <CANtask+0x48>)
 8003ac8:	f7fe fa44 	bl	8001f54 <CAN_rx_task>
 8003acc:	4603      	mov	r3, r0
 8003ace:	461a      	mov	r2, r3
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	73fb      	strb	r3, [r7, #15]
    osSemaphoreAcquire(CAN_semaHandle, osWaitForever);
 8003ad6:	bf00      	nop
 8003ad8:	e7ee      	b.n	8003ab8 <CANtask+0x24>
 8003ada:	bf00      	nop
 8003adc:	20000018 	.word	0x20000018
 8003ae0:	080041d5 	.word	0x080041d5
 8003ae4:	080041bd 	.word	0x080041bd
 8003ae8:	20000890 	.word	0x20000890

08003aec <MONITORINGtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MONITORINGtask */
void MONITORINGtask(void *argument)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MONITORINGtask */
  app_status_t t_AppStatus = monitor_task_init(&Main_Monitor_values);
 8003af4:	4808      	ldr	r0, [pc, #32]	@ (8003b18 <MONITORINGtask+0x2c>)
 8003af6:	f7fe fe33 	bl	8002760 <monitor_task_init>
 8003afa:	4603      	mov	r3, r0
 8003afc:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
    t_AppStatus |= monitor_update_task(&Main_Monitor_values);
 8003afe:	4806      	ldr	r0, [pc, #24]	@ (8003b18 <MONITORINGtask+0x2c>)
 8003b00:	f7fe ff78 	bl	80029f4 <monitor_update_task>
 8003b04:	4603      	mov	r3, r0
 8003b06:	461a      	mov	r2, r3
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	73fb      	strb	r3, [r7, #15]
    osDelay(100);
 8003b0e:	2064      	movs	r0, #100	@ 0x64
 8003b10:	f008 fb02 	bl	800c118 <osDelay>
    t_AppStatus |= monitor_update_task(&Main_Monitor_values);
 8003b14:	bf00      	nop
 8003b16:	e7f2      	b.n	8003afe <MONITORINGtask+0x12>
 8003b18:	2000004c 	.word	0x2000004c

08003b1c <ULTRASONICtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ULTRASONICtask */
void ULTRASONICtask(void *argument)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ULTRASONICtask */
  app_status_t t_AppStatus = ultrasonics_task_init(&Main_Ultrasonics);
 8003b24:	4829      	ldr	r0, [pc, #164]	@ (8003bcc <ULTRASONICtask+0xb0>)
 8003b26:	f7ff fba5 	bl	8003274 <ultrasonics_task_init>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
    t_AppStatus |= ultrasonics_update_task_X(&Main_Ultrasonics);
 8003b2e:	4827      	ldr	r0, [pc, #156]	@ (8003bcc <ULTRASONICtask+0xb0>)
 8003b30:	f7ff fbd4 	bl	80032dc <ultrasonics_update_task_X>
 8003b34:	4603      	mov	r3, r0
 8003b36:	461a      	mov	r2, r3
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	73fb      	strb	r3, [r7, #15]
    osDelay(50);
 8003b3e:	2032      	movs	r0, #50	@ 0x32
 8003b40:	f008 faea 	bl	800c118 <osDelay>
    t_AppStatus |= ultrasonics_outlier_detect_X(&Main_Ultrasonics);
 8003b44:	4821      	ldr	r0, [pc, #132]	@ (8003bcc <ULTRASONICtask+0xb0>)
 8003b46:	f7ff fc49 	bl	80033dc <ultrasonics_outlier_detect_X>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	73fb      	strb	r3, [r7, #15]

    t_AppStatus |= ultrasonics_update_task_Y(&Main_Ultrasonics);
 8003b54:	481d      	ldr	r0, [pc, #116]	@ (8003bcc <ULTRASONICtask+0xb0>)
 8003b56:	f7ff fc01 	bl	800335c <ultrasonics_update_task_Y>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	73fb      	strb	r3, [r7, #15]
    osDelay(50);
 8003b64:	2032      	movs	r0, #50	@ 0x32
 8003b66:	f008 fad7 	bl	800c118 <osDelay>
    t_AppStatus |= ultrasonics_outlier_detect_Y(&Main_Ultrasonics);
 8003b6a:	4818      	ldr	r0, [pc, #96]	@ (8003bcc <ULTRASONICtask+0xb0>)
 8003b6c:	f7ff fcbe 	bl	80034ec <ultrasonics_outlier_detect_Y>
 8003b70:	4603      	mov	r3, r0
 8003b72:	461a      	mov	r2, r3
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	73fb      	strb	r3, [r7, #15]

    t_AppStatus |= ultrasonics_update_task_U(&Main_Ultrasonics);
 8003b7a:	4814      	ldr	r0, [pc, #80]	@ (8003bcc <ULTRASONICtask+0xb0>)
 8003b7c:	f7ff fbce 	bl	800331c <ultrasonics_update_task_U>
 8003b80:	4603      	mov	r3, r0
 8003b82:	461a      	mov	r2, r3
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	73fb      	strb	r3, [r7, #15]
    osDelay(50);
 8003b8a:	2032      	movs	r0, #50	@ 0x32
 8003b8c:	f008 fac4 	bl	800c118 <osDelay>
    t_AppStatus |= ultrasonics_outlier_detect_U(&Main_Ultrasonics);
 8003b90:	480e      	ldr	r0, [pc, #56]	@ (8003bcc <ULTRASONICtask+0xb0>)
 8003b92:	f7ff fc67 	bl	8003464 <ultrasonics_outlier_detect_U>
 8003b96:	4603      	mov	r3, r0
 8003b98:	461a      	mov	r2, r3
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	73fb      	strb	r3, [r7, #15]

    t_AppStatus |= ultrasonics_update_task_V(&Main_Ultrasonics);
 8003ba0:	480a      	ldr	r0, [pc, #40]	@ (8003bcc <ULTRASONICtask+0xb0>)
 8003ba2:	f7ff fbfb 	bl	800339c <ultrasonics_update_task_V>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	461a      	mov	r2, r3
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	73fb      	strb	r3, [r7, #15]
    osDelay(50);
 8003bb0:	2032      	movs	r0, #50	@ 0x32
 8003bb2:	f008 fab1 	bl	800c118 <osDelay>
    t_AppStatus |= ultrasonics_outlier_detect_V(&Main_Ultrasonics);
 8003bb6:	4805      	ldr	r0, [pc, #20]	@ (8003bcc <ULTRASONICtask+0xb0>)
 8003bb8:	f7ff fcde 	bl	8003578 <ultrasonics_outlier_detect_V>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	73fb      	strb	r3, [r7, #15]
    t_AppStatus |= ultrasonics_update_task_X(&Main_Ultrasonics);
 8003bc6:	bf00      	nop
 8003bc8:	e7b1      	b.n	8003b2e <ULTRASONICtask+0x12>
 8003bca:	bf00      	nop
 8003bcc:	20000020 	.word	0x20000020

08003bd0 <CONTROLtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CONTROLtask */
void CONTROLtask(void *argument)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CONTROLtask */
  app_status_t t_AppStatus = APP_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	73fb      	strb	r3, [r7, #15]
  t_AppStatus |= controller_get_yaw_control_init(&Main_Controller, Yaw_PID_suspend);
 8003bdc:	493d      	ldr	r1, [pc, #244]	@ (8003cd4 <CONTROLtask+0x104>)
 8003bde:	483e      	ldr	r0, [pc, #248]	@ (8003cd8 <CONTROLtask+0x108>)
 8003be0:	f7fe fbf8 	bl	80023d4 <controller_get_yaw_control_init>
 8003be4:	4603      	mov	r3, r0
 8003be6:	461a      	mov	r2, r3
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	73fb      	strb	r3, [r7, #15]
  t_AppStatus |= controller_give_yaw_control_init(&Main_Controller, Yaw_PID_resume);
 8003bee:	493b      	ldr	r1, [pc, #236]	@ (8003cdc <CONTROLtask+0x10c>)
 8003bf0:	4839      	ldr	r0, [pc, #228]	@ (8003cd8 <CONTROLtask+0x108>)
 8003bf2:	f7fe fc0b 	bl	800240c <controller_give_yaw_control_init>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	73fb      	strb	r3, [r7, #15]
  t_AppStatus |= controller_add_callback(&Main_Controller, UP, Adaptive_Cruise_Control);
 8003c00:	4a37      	ldr	r2, [pc, #220]	@ (8003ce0 <CONTROLtask+0x110>)
 8003c02:	2100      	movs	r1, #0
 8003c04:	4834      	ldr	r0, [pc, #208]	@ (8003cd8 <CONTROLtask+0x108>)
 8003c06:	f7fe fa5d 	bl	80020c4 <controller_add_callback>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	73fb      	strb	r3, [r7, #15]
  t_AppStatus |= controller_add_callback(&Main_Controller, DOWN, Traffic_Sign_Recognition);
 8003c14:	4a33      	ldr	r2, [pc, #204]	@ (8003ce4 <CONTROLtask+0x114>)
 8003c16:	2101      	movs	r1, #1
 8003c18:	482f      	ldr	r0, [pc, #188]	@ (8003cd8 <CONTROLtask+0x108>)
 8003c1a:	f7fe fa53 	bl	80020c4 <controller_add_callback>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	461a      	mov	r2, r3
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	73fb      	strb	r3, [r7, #15]
  t_AppStatus |= controller_add_callback(&Main_Controller, LEFT, Blind_Spot_Detection);
 8003c28:	4a2f      	ldr	r2, [pc, #188]	@ (8003ce8 <CONTROLtask+0x118>)
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	482a      	ldr	r0, [pc, #168]	@ (8003cd8 <CONTROLtask+0x108>)
 8003c2e:	f7fe fa49 	bl	80020c4 <controller_add_callback>
 8003c32:	4603      	mov	r3, r0
 8003c34:	461a      	mov	r2, r3
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	73fb      	strb	r3, [r7, #15]
  t_AppStatus |= controller_add_callback(&Main_Controller, RIGHT, Change_Lane_Left);
 8003c3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003cec <CONTROLtask+0x11c>)
 8003c3e:	2103      	movs	r1, #3
 8003c40:	4825      	ldr	r0, [pc, #148]	@ (8003cd8 <CONTROLtask+0x108>)
 8003c42:	f7fe fa3f 	bl	80020c4 <controller_add_callback>
 8003c46:	4603      	mov	r3, r0
 8003c48:	461a      	mov	r2, r3
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	73fb      	strb	r3, [r7, #15]
  t_AppStatus |= controller_add_callback(&Main_Controller, SELECT, Change_Lane_Right);
 8003c50:	4a27      	ldr	r2, [pc, #156]	@ (8003cf0 <CONTROLtask+0x120>)
 8003c52:	2104      	movs	r1, #4
 8003c54:	4820      	ldr	r0, [pc, #128]	@ (8003cd8 <CONTROLtask+0x108>)
 8003c56:	f7fe fa35 	bl	80020c4 <controller_add_callback>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	73fb      	strb	r3, [r7, #15]
  t_AppStatus |= controller_add_callback(&Main_Controller, START, Park);
 8003c64:	4a23      	ldr	r2, [pc, #140]	@ (8003cf4 <CONTROLtask+0x124>)
 8003c66:	2105      	movs	r1, #5
 8003c68:	481b      	ldr	r0, [pc, #108]	@ (8003cd8 <CONTROLtask+0x108>)
 8003c6a:	f7fe fa2b 	bl	80020c4 <controller_add_callback>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	461a      	mov	r2, r3
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	73fb      	strb	r3, [r7, #15]
  t_AppStatus |= controller_add_callback(&Main_Controller, LEFT_STICK, Increase_N);
 8003c78:	4a1f      	ldr	r2, [pc, #124]	@ (8003cf8 <CONTROLtask+0x128>)
 8003c7a:	2106      	movs	r1, #6
 8003c7c:	4816      	ldr	r0, [pc, #88]	@ (8003cd8 <CONTROLtask+0x108>)
 8003c7e:	f7fe fa21 	bl	80020c4 <controller_add_callback>
 8003c82:	4603      	mov	r3, r0
 8003c84:	461a      	mov	r2, r3
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	73fb      	strb	r3, [r7, #15]
  t_AppStatus |= controller_add_callback(&Main_Controller, RITHT_STICK, Park);
 8003c8c:	4a19      	ldr	r2, [pc, #100]	@ (8003cf4 <CONTROLtask+0x124>)
 8003c8e:	2107      	movs	r1, #7
 8003c90:	4811      	ldr	r0, [pc, #68]	@ (8003cd8 <CONTROLtask+0x108>)
 8003c92:	f7fe fa17 	bl	80020c4 <controller_add_callback>
 8003c96:	4603      	mov	r3, r0
 8003c98:	461a      	mov	r2, r3
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
    t_AppStatus |= controller_wait_receive(&Main_Controller);
 8003ca0:	480d      	ldr	r0, [pc, #52]	@ (8003cd8 <CONTROLtask+0x108>)
 8003ca2:	f7fe fa61 	bl	8002168 <controller_wait_receive>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	461a      	mov	r2, r3
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	73fb      	strb	r3, [r7, #15]
    osSemaphoreAcquire(CONTROL_semaHandle, osWaitForever);
 8003cb0:	4b12      	ldr	r3, [pc, #72]	@ (8003cfc <CONTROLtask+0x12c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f008 fb63 	bl	800c384 <osSemaphoreAcquire>
    t_AppStatus |= controller_task(&Main_Controller);
 8003cbe:	4806      	ldr	r0, [pc, #24]	@ (8003cd8 <CONTROLtask+0x108>)
 8003cc0:	f7fe fa70 	bl	80021a4 <controller_task>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	73fb      	strb	r3, [r7, #15]
    t_AppStatus |= controller_wait_receive(&Main_Controller);
 8003cce:	bf00      	nop
 8003cd0:	e7e6      	b.n	8003ca0 <CONTROLtask+0xd0>
 8003cd2:	bf00      	nop
 8003cd4:	080041bd 	.word	0x080041bd
 8003cd8:	200000c8 	.word	0x200000c8
 8003cdc:	080041d5 	.word	0x080041d5
 8003ce0:	08003fe5 	.word	0x08003fe5
 8003ce4:	08004071 	.word	0x08004071
 8003ce8:	080040bd 	.word	0x080040bd
 8003cec:	08004109 	.word	0x08004109
 8003cf0:	0800411f 	.word	0x0800411f
 8003cf4:	08004135 	.word	0x08004135
 8003cf8:	08004181 	.word	0x08004181
 8003cfc:	20000880 	.word	0x20000880

08003d00 <YawKalmanTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_YawKalmanTask */
void YawKalmanTask(void *argument)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN YawKalmanTask */
  app_status_t t_AppStatus = Orientation_task_init(&Main_Orientation);
 8003d08:	480e      	ldr	r0, [pc, #56]	@ (8003d44 <YawKalmanTask+0x44>)
 8003d0a:	f7ff f82d 	bl	8002d68 <Orientation_task_init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	73fb      	strb	r3, [r7, #15]
  osSemaphoreRelease(Orientation_semaHandle);
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <YawKalmanTask+0x48>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f008 fb86 	bl	800c428 <osSemaphoreRelease>
  osSemaphoreAcquire(KalmanReady_semaHandle, osWaitForever);
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <YawKalmanTask+0x4c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f04f 31ff 	mov.w	r1, #4294967295
 8003d24:	4618      	mov	r0, r3
 8003d26:	f008 fb2d 	bl	800c384 <osSemaphoreAcquire>
  /* Infinite loop */
  for(;;)
  {
    t_AppStatus |= Orientation_Kf_task(&Main_Orientation);
 8003d2a:	4806      	ldr	r0, [pc, #24]	@ (8003d44 <YawKalmanTask+0x44>)
 8003d2c:	f7ff f8e8 	bl	8002f00 <Orientation_Kf_task>
 8003d30:	4603      	mov	r3, r0
 8003d32:	461a      	mov	r2, r3
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	73fb      	strb	r3, [r7, #15]
    osDelay(10);
 8003d3a:	200a      	movs	r0, #10
 8003d3c:	f008 f9ec 	bl	800c118 <osDelay>
    t_AppStatus |= Orientation_Kf_task(&Main_Orientation);
 8003d40:	bf00      	nop
 8003d42:	e7f2      	b.n	8003d2a <YawKalmanTask+0x2a>
 8003d44:	200000f0 	.word	0x200000f0
 8003d48:	20000894 	.word	0x20000894
 8003d4c:	20000888 	.word	0x20000888

08003d50 <YawPIDtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_YawPIDtask */
void YawPIDtask(void *argument)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN YawPIDtask */
  app_status_t t_AppStatus = APP_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	73fb      	strb	r3, [r7, #15]
  osSemaphoreAcquire(YawPIDReady_semaHandle, osWaitForever);
 8003d5c:	4b18      	ldr	r3, [pc, #96]	@ (8003dc0 <YawPIDtask+0x70>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f04f 31ff 	mov.w	r1, #4294967295
 8003d64:	4618      	mov	r0, r3
 8003d66:	f008 fb0d 	bl	800c384 <osSemaphoreAcquire>
  float_t Omega_z_flag = 0;
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	60bb      	str	r3, [r7, #8]
  //osThreadSuspend(YawPID_taskHandle);
  /* Infinite loop */
  for(;;)
  {
	  Omega_z_flag = Omega_z;
 8003d70:	4b14      	ldr	r3, [pc, #80]	@ (8003dc4 <YawPIDtask+0x74>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60bb      	str	r3, [r7, #8]
    t_AppStatus |= Orientation_PID_task(&Main_Orientation, &Omega_z, Car_Wanted_Angle);
 8003d76:	4b14      	ldr	r3, [pc, #80]	@ (8003dc8 <YawPIDtask+0x78>)
 8003d78:	edd3 7a00 	vldr	s15, [r3]
 8003d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d80:	4910      	ldr	r1, [pc, #64]	@ (8003dc4 <YawPIDtask+0x74>)
 8003d82:	4812      	ldr	r0, [pc, #72]	@ (8003dcc <YawPIDtask+0x7c>)
 8003d84:	f7ff f83e 	bl	8002e04 <Orientation_PID_task>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	73fb      	strb	r3, [r7, #15]
    if (Omega_z_flag != Omega_z)
 8003d92:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc4 <YawPIDtask+0x74>)
 8003d94:	edd3 7a00 	vldr	s15, [r3]
 8003d98:	ed97 7a02 	vldr	s14, [r7, #8]
 8003d9c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da4:	d008      	beq.n	8003db8 <YawPIDtask+0x68>
    	t_AppStatus |= CAN_send_message(&Main_CAN, &msg_robot_Wz);
 8003da6:	490a      	ldr	r1, [pc, #40]	@ (8003dd0 <YawPIDtask+0x80>)
 8003da8:	480a      	ldr	r0, [pc, #40]	@ (8003dd4 <YawPIDtask+0x84>)
 8003daa:	f7fe f919 	bl	8001fe0 <CAN_send_message>
 8003dae:	4603      	mov	r3, r0
 8003db0:	461a      	mov	r2, r3
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	73fb      	strb	r3, [r7, #15]
    osDelay(10);
 8003db8:	200a      	movs	r0, #10
 8003dba:	f008 f9ad 	bl	800c118 <osDelay>
	  Omega_z_flag = Omega_z;
 8003dbe:	e7d7      	b.n	8003d70 <YawPIDtask+0x20>
 8003dc0:	2000088c 	.word	0x2000088c
 8003dc4:	200006f4 	.word	0x200006f4
 8003dc8:	200006d8 	.word	0x200006d8
 8003dcc:	200000f0 	.word	0x200000f0
 8003dd0:	20000220 	.word	0x20000220
 8003dd4:	20000018 	.word	0x20000018

08003dd8 <ACCtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ACCtask */
void ACCtask(void *argument)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ACCtask */
  app_status_t t_AppStatus = ACC_task_init(&ACC_Object);
 8003de0:	480b      	ldr	r0, [pc, #44]	@ (8003e10 <ACCtask+0x38>)
 8003de2:	f7fd f8c3 	bl	8000f6c <ACC_task_init>
 8003de6:	4603      	mov	r3, r0
 8003de8:	73fb      	strb	r3, [r7, #15]
  osThreadSuspend(ACC_TaskHandle);
 8003dea:	4b0a      	ldr	r3, [pc, #40]	@ (8003e14 <ACCtask+0x3c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f008 f950 	bl	800c094 <osThreadSuspend>
  /* Infinite loop */
  for(;;)
  {
    t_AppStatus |= ACC_relative_task(&ACC_Object);
 8003df4:	4806      	ldr	r0, [pc, #24]	@ (8003e10 <ACCtask+0x38>)
 8003df6:	f7fd f827 	bl	8000e48 <ACC_relative_task>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	73fb      	strb	r3, [r7, #15]
    osDelay(100);
 8003e04:	2064      	movs	r0, #100	@ 0x64
 8003e06:	f008 f987 	bl	800c118 <osDelay>
    t_AppStatus |= ACC_relative_task(&ACC_Object);
 8003e0a:	bf00      	nop
 8003e0c:	e7f2      	b.n	8003df4 <ACCtask+0x1c>
 8003e0e:	bf00      	nop
 8003e10:	20000150 	.word	0x20000150
 8003e14:	20000860 	.word	0x20000860

08003e18 <TSRtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TSRtask */
void TSRtask(void *argument)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TSRtask */
  app_status_t t_AppStatus = APP_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	73fb      	strb	r3, [r7, #15]
  osThreadSuspend(TSR_TaskHandle);
 8003e24:	4b06      	ldr	r3, [pc, #24]	@ (8003e40 <TSRtask+0x28>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f008 f933 	bl	800c094 <osThreadSuspend>
  /* Infinite loop */
  for(;;)
  {
    t_AppStatus = TSR_task();
 8003e2e:	f7ff f9af 	bl	8003190 <TSR_task>
 8003e32:	4603      	mov	r3, r0
 8003e34:	73fb      	strb	r3, [r7, #15]
    osDelay(200);
 8003e36:	20c8      	movs	r0, #200	@ 0xc8
 8003e38:	f008 f96e 	bl	800c118 <osDelay>
    t_AppStatus = TSR_task();
 8003e3c:	bf00      	nop
 8003e3e:	e7f6      	b.n	8003e2e <TSRtask+0x16>
 8003e40:	20000864 	.word	0x20000864

08003e44 <BSDtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BSDtask */
void BSDtask(void *argument)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSDtask */
  app_status_t t_AppStatus = BSD_init(&BSD_Object, BuzzerDelay, BuzzerSuspend, BuzzerResume);
 8003e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8003e88 <BSDtask+0x44>)
 8003e4e:	4a0f      	ldr	r2, [pc, #60]	@ (8003e8c <BSDtask+0x48>)
 8003e50:	490f      	ldr	r1, [pc, #60]	@ (8003e90 <BSDtask+0x4c>)
 8003e52:	4810      	ldr	r0, [pc, #64]	@ (8003e94 <BSDtask+0x50>)
 8003e54:	f7fd fef0 	bl	8001c38 <BSD_init>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	73fb      	strb	r3, [r7, #15]
  osDelay(2000);
 8003e5c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003e60:	f008 f95a 	bl	800c118 <osDelay>
  osThreadSuspend(BSD_taskHandle);
 8003e64:	4b0c      	ldr	r3, [pc, #48]	@ (8003e98 <BSDtask+0x54>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f008 f913 	bl	800c094 <osThreadSuspend>
  /* Infinite loop */
  for(;;)
  {
    t_AppStatus |= BSD_task(&BSD_Object);
 8003e6e:	4809      	ldr	r0, [pc, #36]	@ (8003e94 <BSDtask+0x50>)
 8003e70:	f7fd ff08 	bl	8001c84 <BSD_task>
 8003e74:	4603      	mov	r3, r0
 8003e76:	461a      	mov	r2, r3
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	73fb      	strb	r3, [r7, #15]
    osDelay(100);
 8003e7e:	2064      	movs	r0, #100	@ 0x64
 8003e80:	f008 f94a 	bl	800c118 <osDelay>
    t_AppStatus |= BSD_task(&BSD_Object);
 8003e84:	bf00      	nop
 8003e86:	e7f2      	b.n	8003e6e <BSDtask+0x2a>
 8003e88:	08004205 	.word	0x08004205
 8003e8c:	0800421d 	.word	0x0800421d
 8003e90:	080041ed 	.word	0x080041ed
 8003e94:	200001c0 	.word	0x200001c0
 8003e98:	20000868 	.word	0x20000868

08003e9c <BUZZtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BUZZtask */
void BUZZtask(void *argument)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BUZZtask */
  app_status_t t_AppStatus = APP_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	73fb      	strb	r3, [r7, #15]
  BuzzerSuspend();
 8003ea8:	f000 f9b8 	bl	800421c <BuzzerSuspend>
  /* Infinite loop */
  for(;;)
  {
    t_AppStatus |= BSD_buzzer_task(&BSD_Object);
 8003eac:	4807      	ldr	r0, [pc, #28]	@ (8003ecc <BUZZtask+0x30>)
 8003eae:	f7fd ff8f 	bl	8001dd0 <BSD_buzzer_task>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	73fb      	strb	r3, [r7, #15]
    if (BSD_Flag == 0)
 8003ebc:	4b04      	ldr	r3, [pc, #16]	@ (8003ed0 <BUZZtask+0x34>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f3      	bne.n	8003eac <BUZZtask+0x10>
      BuzzerSuspend();
 8003ec4:	f000 f9aa 	bl	800421c <BuzzerSuspend>
    t_AppStatus |= BSD_buzzer_task(&BSD_Object);
 8003ec8:	e7f0      	b.n	8003eac <BUZZtask+0x10>
 8003eca:	bf00      	nop
 8003ecc:	200001c0 	.word	0x200001c0
 8003ed0:	20000842 	.word	0x20000842

08003ed4 <ALCtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ALCtask */
void ALCtask(void *argument)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ALCtask */
  app_status_t t_AppStatus = APP_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	73fb      	strb	r3, [r7, #15]
  osThreadSuspend(ALC_TaskHandle);
 8003ee0:	4b08      	ldr	r3, [pc, #32]	@ (8003f04 <ALCtask+0x30>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f008 f8d5 	bl	800c094 <osThreadSuspend>
  /* Infinite loop */
  for(;;)
  {
    t_AppStatus |= ALC_Task();
 8003eea:	f7fd f955 	bl	8001198 <ALC_Task>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	73fb      	strb	r3, [r7, #15]
    osDelay(250);
 8003ef8:	20fa      	movs	r0, #250	@ 0xfa
 8003efa:	f008 f90d 	bl	800c118 <osDelay>
    t_AppStatus |= ALC_Task();
 8003efe:	bf00      	nop
 8003f00:	e7f3      	b.n	8003eea <ALCtask+0x16>
 8003f02:	bf00      	nop
 8003f04:	20000870 	.word	0x20000870

08003f08 <APKtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_APKtask */
void APKtask(void *argument)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN APKtask */
  app_status_t t_AppStatus = APP_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	73fb      	strb	r3, [r7, #15]
  osThreadSuspend(APK_TaskHandle);
 8003f14:	4b13      	ldr	r3, [pc, #76]	@ (8003f64 <APKtask+0x5c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f008 f8bb 	bl	800c094 <osThreadSuspend>
  /* Infinite loop */
  for(;;)
  {
    t_AppStatus |= APK_Task(&APK_Object);
 8003f1e:	4812      	ldr	r0, [pc, #72]	@ (8003f68 <APKtask+0x60>)
 8003f20:	f7fd fb22 	bl	8001568 <APK_Task>
 8003f24:	4603      	mov	r3, r0
 8003f26:	461a      	mov	r2, r3
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	73fb      	strb	r3, [r7, #15]
    osDelay(300);
 8003f2e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003f32:	f008 f8f1 	bl	800c118 <osDelay>
    if (APK_Object.Mode_Parking == MODE_PARKING_PARK)
 8003f36:	4b0c      	ldr	r3, [pc, #48]	@ (8003f68 <APKtask+0x60>)
 8003f38:	789b      	ldrb	r3, [r3, #2]
 8003f3a:	ee07 3a90 	vmov	s15, r3
 8003f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f42:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003f46:	eef4 7a47 	vcmp.f32	s15, s14
 8003f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4e:	d1e6      	bne.n	8003f1e <APKtask+0x16>
    {
      APK_Flag = 0; // wait for turnning on the feature
 8003f50:	4b06      	ldr	r3, [pc, #24]	@ (8003f6c <APKtask+0x64>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	701a      	strb	r2, [r3, #0]
      osThreadSuspend(APK_TaskHandle);
 8003f56:	4b03      	ldr	r3, [pc, #12]	@ (8003f64 <APKtask+0x5c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f008 f89a 	bl	800c094 <osThreadSuspend>
    t_AppStatus |= APK_Task(&APK_Object);
 8003f60:	e7dd      	b.n	8003f1e <APKtask+0x16>
 8003f62:	bf00      	nop
 8003f64:	20000874 	.word	0x20000874
 8003f68:	20000700 	.word	0x20000700
 8003f6c:	20000843 	.word	0x20000843

08003f70 <callback_test>:
  /* USER CODE END APKtask */
}

/* callback_test function */
void callback_test(void *argument)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN callback_test */

  /* USER CODE END callback_test */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_GPIO_EXTI_Callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == CAN_INT_Pin)
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f94:	d104      	bne.n	8003fa0 <HAL_GPIO_EXTI_Callback+0x1c>
  {
	 osSemaphoreRelease(CAN_semaHandle);
 8003f96:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <HAL_GPIO_EXTI_Callback+0x38>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f008 fa44 	bl	800c428 <osSemaphoreRelease>
  }
  if (GPIO_Pin == MPU_INT_Pin)
 8003fa0:	88fb      	ldrh	r3, [r7, #6]
 8003fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fa6:	d104      	bne.n	8003fb2 <HAL_GPIO_EXTI_Callback+0x2e>
  {
    osSemaphoreRelease(MPU_semaHandle);
 8003fa8:	4b05      	ldr	r3, [pc, #20]	@ (8003fc0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f008 fa3b 	bl	800c428 <osSemaphoreRelease>
  }
}
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000890 	.word	0x20000890
 8003fc0:	2000087c 	.word	0x2000087c

08003fc4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(CONTROL_semaHandle);
 8003fcc:	4b04      	ldr	r3, [pc, #16]	@ (8003fe0 <HAL_UART_RxCpltCallback+0x1c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f008 fa29 	bl	800c428 <osSemaphoreRelease>
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000880 	.word	0x20000880

08003fe4 <Adaptive_Cruise_Control>:

/**
 * @brief the callback function which will be called when the adaptive cruise control button will be pressed
 */
void Adaptive_Cruise_Control(void *)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  if (ACC_Flag == 0)
 8003fec:	4b18      	ldr	r3, [pc, #96]	@ (8004050 <Adaptive_Cruise_Control+0x6c>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d118      	bne.n	8004026 <Adaptive_Cruise_Control+0x42>
  {
    // move the car in front direction with the maximum allowed speed
    Car_Wanted_Speed = DEFUALT_ROBOT_MAX_SPEED;
 8003ff4:	4b17      	ldr	r3, [pc, #92]	@ (8004054 <Adaptive_Cruise_Control+0x70>)
 8003ff6:	4a18      	ldr	r2, [pc, #96]	@ (8004058 <Adaptive_Cruise_Control+0x74>)
 8003ff8:	601a      	str	r2, [r3, #0]
    Car_Wanted_direction = 0;
 8003ffa:	4b18      	ldr	r3, [pc, #96]	@ (800405c <Adaptive_Cruise_Control+0x78>)
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
    CAN_send_message(&Main_CAN, &msg_robot_strafe);
 8004002:	4917      	ldr	r1, [pc, #92]	@ (8004060 <Adaptive_Cruise_Control+0x7c>)
 8004004:	4817      	ldr	r0, [pc, #92]	@ (8004064 <Adaptive_Cruise_Control+0x80>)
 8004006:	f7fd ffeb 	bl	8001fe0 <CAN_send_message>

    osThreadResume(ACC_TaskHandle);
 800400a:	4b17      	ldr	r3, [pc, #92]	@ (8004068 <Adaptive_Cruise_Control+0x84>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f008 f861 	bl	800c0d6 <osThreadResume>
    osThreadResume(ALC_TaskHandle);
 8004014:	4b15      	ldr	r3, [pc, #84]	@ (800406c <Adaptive_Cruise_Control+0x88>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f008 f85c 	bl	800c0d6 <osThreadResume>

    ACC_Flag = 1; // wait for turnning off the feature
 800401e:	4b0c      	ldr	r3, [pc, #48]	@ (8004050 <Adaptive_Cruise_Control+0x6c>)
 8004020:	2201      	movs	r2, #1
 8004022:	701a      	strb	r2, [r3, #0]
    osThreadSuspend(ACC_TaskHandle);
    osThreadSuspend(ALC_TaskHandle);

    ACC_Flag = 0; // wait for turnning on the feature
  }
}
 8004024:	e010      	b.n	8004048 <Adaptive_Cruise_Control+0x64>
  else if (ACC_Flag == 1)
 8004026:	4b0a      	ldr	r3, [pc, #40]	@ (8004050 <Adaptive_Cruise_Control+0x6c>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d10c      	bne.n	8004048 <Adaptive_Cruise_Control+0x64>
    osThreadSuspend(ACC_TaskHandle);
 800402e:	4b0e      	ldr	r3, [pc, #56]	@ (8004068 <Adaptive_Cruise_Control+0x84>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f008 f82e 	bl	800c094 <osThreadSuspend>
    osThreadSuspend(ALC_TaskHandle);
 8004038:	4b0c      	ldr	r3, [pc, #48]	@ (800406c <Adaptive_Cruise_Control+0x88>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f008 f829 	bl	800c094 <osThreadSuspend>
    ACC_Flag = 0; // wait for turnning on the feature
 8004042:	4b03      	ldr	r3, [pc, #12]	@ (8004050 <Adaptive_Cruise_Control+0x6c>)
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
}
 8004048:	bf00      	nop
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20000840 	.word	0x20000840
 8004054:	200006dc 	.word	0x200006dc
 8004058:	3ee66666 	.word	0x3ee66666
 800405c:	200006e0 	.word	0x200006e0
 8004060:	200001cc 	.word	0x200001cc
 8004064:	20000018 	.word	0x20000018
 8004068:	20000860 	.word	0x20000860
 800406c:	20000870 	.word	0x20000870

08004070 <Traffic_Sign_Recognition>:

/**
 * @brief the callback function which will be called when the traffic sign recognition button will be pressed
 */
void Traffic_Sign_Recognition(void *)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  if (TSR_Flag == 0)
 8004078:	4b0e      	ldr	r3, [pc, #56]	@ (80040b4 <Traffic_Sign_Recognition+0x44>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d108      	bne.n	8004092 <Traffic_Sign_Recognition+0x22>
  {
    osThreadResume(TSR_TaskHandle);   
 8004080:	4b0d      	ldr	r3, [pc, #52]	@ (80040b8 <Traffic_Sign_Recognition+0x48>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f008 f826 	bl	800c0d6 <osThreadResume>
    
    TSR_Flag = 1; // wait for turnning off the feature
 800408a:	4b0a      	ldr	r3, [pc, #40]	@ (80040b4 <Traffic_Sign_Recognition+0x44>)
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
  {
    osThreadSuspend(TSR_TaskHandle);
    
    TSR_Flag = 0; // wait for turnning on the feature
  }
}
 8004090:	e00b      	b.n	80040aa <Traffic_Sign_Recognition+0x3a>
  else if (TSR_Flag == 1)
 8004092:	4b08      	ldr	r3, [pc, #32]	@ (80040b4 <Traffic_Sign_Recognition+0x44>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d107      	bne.n	80040aa <Traffic_Sign_Recognition+0x3a>
    osThreadSuspend(TSR_TaskHandle);
 800409a:	4b07      	ldr	r3, [pc, #28]	@ (80040b8 <Traffic_Sign_Recognition+0x48>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f007 fff8 	bl	800c094 <osThreadSuspend>
    TSR_Flag = 0; // wait for turnning on the feature
 80040a4:	4b03      	ldr	r3, [pc, #12]	@ (80040b4 <Traffic_Sign_Recognition+0x44>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20000841 	.word	0x20000841
 80040b8:	20000864 	.word	0x20000864

080040bc <Blind_Spot_Detection>:
/**
 * @brief the callback function which will be called when the blind spot detection button will be pressed
 * 
 */
void Blind_Spot_Detection(void *)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  if (BSD_Flag == 0)
 80040c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004100 <Blind_Spot_Detection+0x44>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d108      	bne.n	80040de <Blind_Spot_Detection+0x22>
  {
    osThreadResume(BSD_taskHandle);   
 80040cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004104 <Blind_Spot_Detection+0x48>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f008 f800 	bl	800c0d6 <osThreadResume>

    BSD_Flag = 1; // wait for turnning off the feature
 80040d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004100 <Blind_Spot_Detection+0x44>)
 80040d8:	2201      	movs	r2, #1
 80040da:	701a      	strb	r2, [r3, #0]
  {
    osThreadSuspend(BSD_taskHandle);

    BSD_Flag = 0; // wait for turnning on the feature
  }
}
 80040dc:	e00b      	b.n	80040f6 <Blind_Spot_Detection+0x3a>
  else if (BSD_Flag == 1)
 80040de:	4b08      	ldr	r3, [pc, #32]	@ (8004100 <Blind_Spot_Detection+0x44>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d107      	bne.n	80040f6 <Blind_Spot_Detection+0x3a>
    osThreadSuspend(BSD_taskHandle);
 80040e6:	4b07      	ldr	r3, [pc, #28]	@ (8004104 <Blind_Spot_Detection+0x48>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f007 ffd2 	bl	800c094 <osThreadSuspend>
    BSD_Flag = 0; // wait for turnning on the feature
 80040f0:	4b03      	ldr	r3, [pc, #12]	@ (8004100 <Blind_Spot_Detection+0x44>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
}
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000842 	.word	0x20000842
 8004104:	20000868 	.word	0x20000868

08004108 <Change_Lane_Left>:

void Change_Lane_Left(void *)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
	ALC_Change_Lane(D_LEFT);
 8004110:	2001      	movs	r0, #1
 8004112:	f7fd f8c3 	bl	800129c <ALC_Change_Lane>
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <Change_Lane_Right>:

void Change_Lane_Right(void *)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  ALC_Change_Lane(D_RIGHT);
 8004126:	2002      	movs	r0, #2
 8004128:	f7fd f8b8 	bl	800129c <ALC_Change_Lane>
}
 800412c:	bf00      	nop
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <Park>:

void Park(void *)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  if (APK_Flag == 0)
 800413c:	4b0e      	ldr	r3, [pc, #56]	@ (8004178 <Park+0x44>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d108      	bne.n	8004156 <Park+0x22>
  {

    osThreadResume(APK_TaskHandle);
 8004144:	4b0d      	ldr	r3, [pc, #52]	@ (800417c <Park+0x48>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f007 ffc4 	bl	800c0d6 <osThreadResume>

    APK_Flag = 1; // wait for turnning off the feature
 800414e:	4b0a      	ldr	r3, [pc, #40]	@ (8004178 <Park+0x44>)
 8004150:	2201      	movs	r2, #1
 8004152:	701a      	strb	r2, [r3, #0]
  {
    osThreadSuspend(APK_TaskHandle);
    APK_Flag = 0; // wait for turnning on the feature
  }
  /* Reserved */
}
 8004154:	e00b      	b.n	800416e <Park+0x3a>
  else if (APK_Flag == 1)
 8004156:	4b08      	ldr	r3, [pc, #32]	@ (8004178 <Park+0x44>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d107      	bne.n	800416e <Park+0x3a>
    osThreadSuspend(APK_TaskHandle);
 800415e:	4b07      	ldr	r3, [pc, #28]	@ (800417c <Park+0x48>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f007 ff96 	bl	800c094 <osThreadSuspend>
    APK_Flag = 0; // wait for turnning on the feature
 8004168:	4b03      	ldr	r3, [pc, #12]	@ (8004178 <Park+0x44>)
 800416a:	2200      	movs	r2, #0
 800416c:	701a      	strb	r2, [r3, #0]
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000843 	.word	0x20000843
 800417c:	20000874 	.word	0x20000874

08004180 <Increase_N>:

void Increase_N(void *)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  Car_Wanted_Speed = 0.3 * DEFUALT_ROBOT_MAX_SPEED;
 8004188:	4b07      	ldr	r3, [pc, #28]	@ (80041a8 <Increase_N+0x28>)
 800418a:	4a08      	ldr	r2, [pc, #32]	@ (80041ac <Increase_N+0x2c>)
 800418c:	601a      	str	r2, [r3, #0]
  Car_Wanted_direction = 0;
 800418e:	4b08      	ldr	r3, [pc, #32]	@ (80041b0 <Increase_N+0x30>)
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
  CAN_send_message(&Main_CAN, &msg_robot_strafe);
 8004196:	4907      	ldr	r1, [pc, #28]	@ (80041b4 <Increase_N+0x34>)
 8004198:	4807      	ldr	r0, [pc, #28]	@ (80041b8 <Increase_N+0x38>)
 800419a:	f7fd ff21 	bl	8001fe0 <CAN_send_message>
}
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	200006dc 	.word	0x200006dc
 80041ac:	3e0a3d70 	.word	0x3e0a3d70
 80041b0:	200006e0 	.word	0x200006e0
 80041b4:	200001cc 	.word	0x200001cc
 80041b8:	20000018 	.word	0x20000018

080041bc <Yaw_PID_suspend>:




void Yaw_PID_suspend(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  osThreadSuspend(YawPID_taskHandle);
 80041c0:	4b03      	ldr	r3, [pc, #12]	@ (80041d0 <Yaw_PID_suspend+0x14>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f007 ff65 	bl	800c094 <osThreadSuspend>
}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	2000085c 	.word	0x2000085c

080041d4 <Yaw_PID_resume>:

void Yaw_PID_resume(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  osThreadResume(YawPID_taskHandle);
 80041d8:	4b03      	ldr	r3, [pc, #12]	@ (80041e8 <Yaw_PID_resume+0x14>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f007 ff7a 	bl	800c0d6 <osThreadResume>
}
 80041e2:	bf00      	nop
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	2000085c 	.word	0x2000085c

080041ec <BuzzerDelay>:

void BuzzerDelay(uint32_t ticks)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  osDelay(ticks);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f007 ff8f 	bl	800c118 <osDelay>
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <BuzzerResume>:

void BuzzerResume(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  osThreadResume(BUZZ_taskHandle);
 8004208:	4b03      	ldr	r3, [pc, #12]	@ (8004218 <BuzzerResume+0x14>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f007 ff62 	bl	800c0d6 <osThreadResume>
}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	2000086c 	.word	0x2000086c

0800421c <BuzzerSuspend>:

void BuzzerSuspend(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  osThreadSuspend(BUZZ_taskHandle);
 8004220:	4b03      	ldr	r3, [pc, #12]	@ (8004230 <BuzzerSuspend+0x14>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f007 ff35 	bl	800c094 <osThreadSuspend>
}
 800422a:	bf00      	nop
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	2000086c 	.word	0x2000086c

08004234 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	@ 0x28
 8004238:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800423a:	f107 0314 	add.w	r3, r7, #20
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	605a      	str	r2, [r3, #4]
 8004244:	609a      	str	r2, [r3, #8]
 8004246:	60da      	str	r2, [r3, #12]
 8004248:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800424a:	2300      	movs	r3, #0
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	4b65      	ldr	r3, [pc, #404]	@ (80043e4 <MX_GPIO_Init+0x1b0>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004252:	4a64      	ldr	r2, [pc, #400]	@ (80043e4 <MX_GPIO_Init+0x1b0>)
 8004254:	f043 0304 	orr.w	r3, r3, #4
 8004258:	6313      	str	r3, [r2, #48]	@ 0x30
 800425a:	4b62      	ldr	r3, [pc, #392]	@ (80043e4 <MX_GPIO_Init+0x1b0>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	613b      	str	r3, [r7, #16]
 8004264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	4b5e      	ldr	r3, [pc, #376]	@ (80043e4 <MX_GPIO_Init+0x1b0>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426e:	4a5d      	ldr	r2, [pc, #372]	@ (80043e4 <MX_GPIO_Init+0x1b0>)
 8004270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004274:	6313      	str	r3, [r2, #48]	@ 0x30
 8004276:	4b5b      	ldr	r3, [pc, #364]	@ (80043e4 <MX_GPIO_Init+0x1b0>)
 8004278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004282:	2300      	movs	r3, #0
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	4b57      	ldr	r3, [pc, #348]	@ (80043e4 <MX_GPIO_Init+0x1b0>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428a:	4a56      	ldr	r2, [pc, #344]	@ (80043e4 <MX_GPIO_Init+0x1b0>)
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	6313      	str	r3, [r2, #48]	@ 0x30
 8004292:	4b54      	ldr	r3, [pc, #336]	@ (80043e4 <MX_GPIO_Init+0x1b0>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	60bb      	str	r3, [r7, #8]
 800429c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800429e:	2300      	movs	r3, #0
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	4b50      	ldr	r3, [pc, #320]	@ (80043e4 <MX_GPIO_Init+0x1b0>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a6:	4a4f      	ldr	r2, [pc, #316]	@ (80043e4 <MX_GPIO_Init+0x1b0>)
 80042a8:	f043 0302 	orr.w	r3, r3, #2
 80042ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80042ae:	4b4d      	ldr	r3, [pc, #308]	@ (80043e4 <MX_GPIO_Init+0x1b0>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	607b      	str	r3, [r7, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UL_TRIGGER_Y_Pin|UL_TRIGGER_V_Pin, GPIO_PIN_RESET);
 80042ba:	2200      	movs	r2, #0
 80042bc:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80042c0:	4849      	ldr	r0, [pc, #292]	@ (80043e8 <MX_GPIO_Init+0x1b4>)
 80042c2:	f001 f991 	bl	80055e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UL_TRIGGER_U_Pin|MPU_RESET_Pin|BUZZER_Pin|LED_LEFT_Pin
 80042c6:	2200      	movs	r2, #0
 80042c8:	f649 1102 	movw	r1, #39170	@ 0x9902
 80042cc:	4847      	ldr	r0, [pc, #284]	@ (80043ec <MX_GPIO_Init+0x1b8>)
 80042ce:	f001 f98b 	bl	80055e8 <HAL_GPIO_WritePin>
                          |LED_RIGHT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 80042d2:	2201      	movs	r2, #1
 80042d4:	2110      	movs	r1, #16
 80042d6:	4845      	ldr	r0, [pc, #276]	@ (80043ec <MX_GPIO_Init+0x1b8>)
 80042d8:	f001 f986 	bl	80055e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UL_TRIGGER_X_GPIO_Port, UL_TRIGGER_X_Pin, GPIO_PIN_RESET);
 80042dc:	2200      	movs	r2, #0
 80042de:	2104      	movs	r1, #4
 80042e0:	4843      	ldr	r0, [pc, #268]	@ (80043f0 <MX_GPIO_Init+0x1bc>)
 80042e2:	f001 f981 	bl	80055e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UL_TRIGGER_Y_Pin UL_TRIGGER_V_Pin */
  GPIO_InitStruct.Pin = UL_TRIGGER_Y_Pin|UL_TRIGGER_V_Pin;
 80042e6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80042ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042ec:	2301      	movs	r3, #1
 80042ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f4:	2300      	movs	r3, #0
 80042f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042f8:	f107 0314 	add.w	r3, r7, #20
 80042fc:	4619      	mov	r1, r3
 80042fe:	483a      	ldr	r0, [pc, #232]	@ (80043e8 <MX_GPIO_Init+0x1b4>)
 8004300:	f000 ffee 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UL_TRIGGER_U_Pin */
  GPIO_InitStruct.Pin = UL_TRIGGER_U_Pin;
 8004304:	2302      	movs	r3, #2
 8004306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004308:	2301      	movs	r3, #1
 800430a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800430c:	2302      	movs	r3, #2
 800430e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004310:	2302      	movs	r3, #2
 8004312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UL_TRIGGER_U_GPIO_Port, &GPIO_InitStruct);
 8004314:	f107 0314 	add.w	r3, r7, #20
 8004318:	4619      	mov	r1, r3
 800431a:	4834      	ldr	r0, [pc, #208]	@ (80043ec <MX_GPIO_Init+0x1b8>)
 800431c:	f000 ffe0 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8004320:	2310      	movs	r3, #16
 8004322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004324:	2301      	movs	r3, #1
 8004326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004328:	2301      	movs	r3, #1
 800432a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800432c:	2300      	movs	r3, #0
 800432e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8004330:	f107 0314 	add.w	r3, r7, #20
 8004334:	4619      	mov	r1, r3
 8004336:	482d      	ldr	r0, [pc, #180]	@ (80043ec <MX_GPIO_Init+0x1b8>)
 8004338:	f000 ffd2 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UL_TRIGGER_X_Pin */
  GPIO_InitStruct.Pin = UL_TRIGGER_X_Pin;
 800433c:	2304      	movs	r3, #4
 800433e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004340:	2301      	movs	r3, #1
 8004342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004344:	2302      	movs	r3, #2
 8004346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004348:	2302      	movs	r3, #2
 800434a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UL_TRIGGER_X_GPIO_Port, &GPIO_InitStruct);
 800434c:	f107 0314 	add.w	r3, r7, #20
 8004350:	4619      	mov	r1, r3
 8004352:	4827      	ldr	r0, [pc, #156]	@ (80043f0 <MX_GPIO_Init+0x1bc>)
 8004354:	f000 ffc4 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU_INT_Pin */
  GPIO_InitStruct.Pin = MPU_INT_Pin;
 8004358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800435c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800435e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004364:	2302      	movs	r3, #2
 8004366:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8004368:	f107 0314 	add.w	r3, r7, #20
 800436c:	4619      	mov	r1, r3
 800436e:	4820      	ldr	r0, [pc, #128]	@ (80043f0 <MX_GPIO_Init+0x1bc>)
 8004370:	f000 ffb6 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_INT_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin;
 8004374:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800437a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800437e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004380:	2301      	movs	r3, #1
 8004382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 8004384:	f107 0314 	add.w	r3, r7, #20
 8004388:	4619      	mov	r1, r3
 800438a:	4819      	ldr	r0, [pc, #100]	@ (80043f0 <MX_GPIO_Init+0x1bc>)
 800438c:	f000 ffa8 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MPU_RESET_Pin LED_RIGHT_Pin */
  GPIO_InitStruct.Pin = MPU_RESET_Pin|LED_RIGHT_Pin;
 8004390:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004396:	2301      	movs	r3, #1
 8004398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439e:	2300      	movs	r3, #0
 80043a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043a2:	f107 0314 	add.w	r3, r7, #20
 80043a6:	4619      	mov	r1, r3
 80043a8:	4810      	ldr	r0, [pc, #64]	@ (80043ec <MX_GPIO_Init+0x1b8>)
 80043aa:	f000 ff99 	bl	80052e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin LED_LEFT_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_LEFT_Pin;
 80043ae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80043b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043b4:	2301      	movs	r3, #1
 80043b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80043b8:	2302      	movs	r3, #2
 80043ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043bc:	2300      	movs	r3, #0
 80043be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c0:	f107 0314 	add.w	r3, r7, #20
 80043c4:	4619      	mov	r1, r3
 80043c6:	4809      	ldr	r0, [pc, #36]	@ (80043ec <MX_GPIO_Init+0x1b8>)
 80043c8:	f000 ff8a 	bl	80052e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80043cc:	2200      	movs	r2, #0
 80043ce:	2105      	movs	r1, #5
 80043d0:	2028      	movs	r0, #40	@ 0x28
 80043d2:	f000 fe81 	bl	80050d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043d6:	2028      	movs	r0, #40	@ 0x28
 80043d8:	f000 fe9a 	bl	8005110 <HAL_NVIC_EnableIRQ>

}
 80043dc:	bf00      	nop
 80043de:	3728      	adds	r7, #40	@ 0x28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40020800 	.word	0x40020800
 80043ec:	40020000 	.word	0x40020000
 80043f0:	40020400 	.word	0x40020400

080043f4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80043f8:	4b12      	ldr	r3, [pc, #72]	@ (8004444 <MX_I2C2_Init+0x50>)
 80043fa:	4a13      	ldr	r2, [pc, #76]	@ (8004448 <MX_I2C2_Init+0x54>)
 80043fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80043fe:	4b11      	ldr	r3, [pc, #68]	@ (8004444 <MX_I2C2_Init+0x50>)
 8004400:	4a12      	ldr	r2, [pc, #72]	@ (800444c <MX_I2C2_Init+0x58>)
 8004402:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004404:	4b0f      	ldr	r3, [pc, #60]	@ (8004444 <MX_I2C2_Init+0x50>)
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800440a:	4b0e      	ldr	r3, [pc, #56]	@ (8004444 <MX_I2C2_Init+0x50>)
 800440c:	2200      	movs	r2, #0
 800440e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004410:	4b0c      	ldr	r3, [pc, #48]	@ (8004444 <MX_I2C2_Init+0x50>)
 8004412:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004416:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004418:	4b0a      	ldr	r3, [pc, #40]	@ (8004444 <MX_I2C2_Init+0x50>)
 800441a:	2200      	movs	r2, #0
 800441c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800441e:	4b09      	ldr	r3, [pc, #36]	@ (8004444 <MX_I2C2_Init+0x50>)
 8004420:	2200      	movs	r2, #0
 8004422:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004424:	4b07      	ldr	r3, [pc, #28]	@ (8004444 <MX_I2C2_Init+0x50>)
 8004426:	2200      	movs	r2, #0
 8004428:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800442a:	4b06      	ldr	r3, [pc, #24]	@ (8004444 <MX_I2C2_Init+0x50>)
 800442c:	2200      	movs	r2, #0
 800442e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004430:	4804      	ldr	r0, [pc, #16]	@ (8004444 <MX_I2C2_Init+0x50>)
 8004432:	f001 f90b 	bl	800564c <HAL_I2C_Init>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800443c:	f000 f8fc 	bl	8004638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004440:	bf00      	nop
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20000898 	.word	0x20000898
 8004448:	40005800 	.word	0x40005800
 800444c:	00061a80 	.word	0x00061a80

08004450 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08a      	sub	sp, #40	@ 0x28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004458:	f107 0314 	add.w	r3, r7, #20
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	605a      	str	r2, [r3, #4]
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	60da      	str	r2, [r3, #12]
 8004466:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a21      	ldr	r2, [pc, #132]	@ (80044f4 <HAL_I2C_MspInit+0xa4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d13c      	bne.n	80044ec <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004472:	2300      	movs	r3, #0
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	4b20      	ldr	r3, [pc, #128]	@ (80044f8 <HAL_I2C_MspInit+0xa8>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447a:	4a1f      	ldr	r2, [pc, #124]	@ (80044f8 <HAL_I2C_MspInit+0xa8>)
 800447c:	f043 0302 	orr.w	r3, r3, #2
 8004480:	6313      	str	r3, [r2, #48]	@ 0x30
 8004482:	4b1d      	ldr	r3, [pc, #116]	@ (80044f8 <HAL_I2C_MspInit+0xa8>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = MPU_SCL_Pin;
 800448e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004494:	2312      	movs	r3, #18
 8004496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004498:	2301      	movs	r3, #1
 800449a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800449c:	2303      	movs	r3, #3
 800449e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80044a0:	2304      	movs	r3, #4
 80044a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPU_SCL_GPIO_Port, &GPIO_InitStruct);
 80044a4:	f107 0314 	add.w	r3, r7, #20
 80044a8:	4619      	mov	r1, r3
 80044aa:	4814      	ldr	r0, [pc, #80]	@ (80044fc <HAL_I2C_MspInit+0xac>)
 80044ac:	f000 ff18 	bl	80052e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MPU_SDA_Pin;
 80044b0:	2308      	movs	r3, #8
 80044b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044b4:	2312      	movs	r3, #18
 80044b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044b8:	2301      	movs	r3, #1
 80044ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044bc:	2303      	movs	r3, #3
 80044be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80044c0:	2309      	movs	r3, #9
 80044c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPU_SDA_GPIO_Port, &GPIO_InitStruct);
 80044c4:	f107 0314 	add.w	r3, r7, #20
 80044c8:	4619      	mov	r1, r3
 80044ca:	480c      	ldr	r0, [pc, #48]	@ (80044fc <HAL_I2C_MspInit+0xac>)
 80044cc:	f000 ff08 	bl	80052e0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	4b08      	ldr	r3, [pc, #32]	@ (80044f8 <HAL_I2C_MspInit+0xa8>)
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	4a07      	ldr	r2, [pc, #28]	@ (80044f8 <HAL_I2C_MspInit+0xa8>)
 80044da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044de:	6413      	str	r3, [r2, #64]	@ 0x40
 80044e0:	4b05      	ldr	r3, [pc, #20]	@ (80044f8 <HAL_I2C_MspInit+0xa8>)
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80044ec:	bf00      	nop
 80044ee:	3728      	adds	r7, #40	@ 0x28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40005800 	.word	0x40005800
 80044f8:	40023800 	.word	0x40023800
 80044fc:	40020400 	.word	0x40020400

08004500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004504:	f000 fcca 	bl	8004e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004508:	f000 f818 	bl	800453c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800450c:	f7ff fe92 	bl	8004234 <MX_GPIO_Init>
  MX_TIM4_Init();
 8004510:	f000 fac2 	bl	8004a98 <MX_TIM4_Init>
  MX_TIM3_Init();
 8004514:	f000 fa4c 	bl	80049b0 <MX_TIM3_Init>
  MX_I2C2_Init();
 8004518:	f7ff ff6c 	bl	80043f4 <MX_I2C2_Init>
  MX_SPI1_Init();
 800451c:	f000 f892 	bl	8004644 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004520:	f000 fbba 	bl	8004c98 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004524:	f000 fbe2 	bl	8004cec <MX_USART2_UART_Init>
  MX_CRC_Init();
 8004528:	f7ff f8ee 	bl	8003708 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800452c:	f007 fcd6 	bl	800bedc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8004530:	f7ff f920 	bl	8003774 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004534:	f007 fcf6 	bl	800bf24 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8004538:	bf00      	nop
 800453a:	e7fd      	b.n	8004538 <main+0x38>

0800453c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b094      	sub	sp, #80	@ 0x50
 8004540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004542:	f107 0320 	add.w	r3, r7, #32
 8004546:	2230      	movs	r2, #48	@ 0x30
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f00b fe0e 	bl	801016c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004550:	f107 030c 	add.w	r3, r7, #12
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	605a      	str	r2, [r3, #4]
 800455a:	609a      	str	r2, [r3, #8]
 800455c:	60da      	str	r2, [r3, #12]
 800455e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004560:	2300      	movs	r3, #0
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	4b29      	ldr	r3, [pc, #164]	@ (800460c <SystemClock_Config+0xd0>)
 8004566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004568:	4a28      	ldr	r2, [pc, #160]	@ (800460c <SystemClock_Config+0xd0>)
 800456a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800456e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004570:	4b26      	ldr	r3, [pc, #152]	@ (800460c <SystemClock_Config+0xd0>)
 8004572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800457c:	2300      	movs	r3, #0
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	4b23      	ldr	r3, [pc, #140]	@ (8004610 <SystemClock_Config+0xd4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004588:	4a21      	ldr	r2, [pc, #132]	@ (8004610 <SystemClock_Config+0xd4>)
 800458a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	4b1f      	ldr	r3, [pc, #124]	@ (8004610 <SystemClock_Config+0xd4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004598:	607b      	str	r3, [r7, #4]
 800459a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800459c:	2301      	movs	r3, #1
 800459e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80045a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045a6:	2302      	movs	r3, #2
 80045a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80045ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80045b0:	2319      	movs	r3, #25
 80045b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80045b4:	23a8      	movs	r3, #168	@ 0xa8
 80045b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045b8:	2302      	movs	r3, #2
 80045ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80045bc:	2304      	movs	r3, #4
 80045be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045c0:	f107 0320 	add.w	r3, r7, #32
 80045c4:	4618      	mov	r0, r3
 80045c6:	f002 f865 	bl	8006694 <HAL_RCC_OscConfig>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80045d0:	f000 f832 	bl	8004638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045d4:	230f      	movs	r3, #15
 80045d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045d8:	2302      	movs	r3, #2
 80045da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80045ea:	f107 030c 	add.w	r3, r7, #12
 80045ee:	2102      	movs	r1, #2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f002 fac7 	bl	8006b84 <HAL_RCC_ClockConfig>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80045fc:	f000 f81c 	bl	8004638 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8004600:	f002 fba6 	bl	8006d50 <HAL_RCC_EnableCSS>
}
 8004604:	bf00      	nop
 8004606:	3750      	adds	r7, #80	@ 0x50
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40023800 	.word	0x40023800
 8004610:	40007000 	.word	0x40007000

08004614 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a04      	ldr	r2, [pc, #16]	@ (8004634 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d101      	bne.n	800462a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004626:	f000 fc5b 	bl	8004ee0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40014400 	.word	0x40014400

08004638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800463c:	b672      	cpsid	i
}
 800463e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004640:	bf00      	nop
 8004642:	e7fd      	b.n	8004640 <Error_Handler+0x8>

08004644 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004648:	4b17      	ldr	r3, [pc, #92]	@ (80046a8 <MX_SPI1_Init+0x64>)
 800464a:	4a18      	ldr	r2, [pc, #96]	@ (80046ac <MX_SPI1_Init+0x68>)
 800464c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800464e:	4b16      	ldr	r3, [pc, #88]	@ (80046a8 <MX_SPI1_Init+0x64>)
 8004650:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004654:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004656:	4b14      	ldr	r3, [pc, #80]	@ (80046a8 <MX_SPI1_Init+0x64>)
 8004658:	2200      	movs	r2, #0
 800465a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800465c:	4b12      	ldr	r3, [pc, #72]	@ (80046a8 <MX_SPI1_Init+0x64>)
 800465e:	2200      	movs	r2, #0
 8004660:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004662:	4b11      	ldr	r3, [pc, #68]	@ (80046a8 <MX_SPI1_Init+0x64>)
 8004664:	2200      	movs	r2, #0
 8004666:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004668:	4b0f      	ldr	r3, [pc, #60]	@ (80046a8 <MX_SPI1_Init+0x64>)
 800466a:	2200      	movs	r2, #0
 800466c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800466e:	4b0e      	ldr	r3, [pc, #56]	@ (80046a8 <MX_SPI1_Init+0x64>)
 8004670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004674:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004676:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <MX_SPI1_Init+0x64>)
 8004678:	2218      	movs	r2, #24
 800467a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800467c:	4b0a      	ldr	r3, [pc, #40]	@ (80046a8 <MX_SPI1_Init+0x64>)
 800467e:	2200      	movs	r2, #0
 8004680:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004682:	4b09      	ldr	r3, [pc, #36]	@ (80046a8 <MX_SPI1_Init+0x64>)
 8004684:	2200      	movs	r2, #0
 8004686:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004688:	4b07      	ldr	r3, [pc, #28]	@ (80046a8 <MX_SPI1_Init+0x64>)
 800468a:	2200      	movs	r2, #0
 800468c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800468e:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <MX_SPI1_Init+0x64>)
 8004690:	220a      	movs	r2, #10
 8004692:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004694:	4804      	ldr	r0, [pc, #16]	@ (80046a8 <MX_SPI1_Init+0x64>)
 8004696:	f002 fcae 	bl	8006ff6 <HAL_SPI_Init>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80046a0:	f7ff ffca 	bl	8004638 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80046a4:	bf00      	nop
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	200008ec 	.word	0x200008ec
 80046ac:	40013000 	.word	0x40013000

080046b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08a      	sub	sp, #40	@ 0x28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b8:	f107 0314 	add.w	r3, r7, #20
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a19      	ldr	r2, [pc, #100]	@ (8004734 <HAL_SPI_MspInit+0x84>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d12b      	bne.n	800472a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	4b18      	ldr	r3, [pc, #96]	@ (8004738 <HAL_SPI_MspInit+0x88>)
 80046d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046da:	4a17      	ldr	r2, [pc, #92]	@ (8004738 <HAL_SPI_MspInit+0x88>)
 80046dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80046e2:	4b15      	ldr	r3, [pc, #84]	@ (8004738 <HAL_SPI_MspInit+0x88>)
 80046e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	4b11      	ldr	r3, [pc, #68]	@ (8004738 <HAL_SPI_MspInit+0x88>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f6:	4a10      	ldr	r2, [pc, #64]	@ (8004738 <HAL_SPI_MspInit+0x88>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80046fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004738 <HAL_SPI_MspInit+0x88>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = CAN_SCK_Pin|CAN_SO_Pin|CAN_SI_Pin;
 800470a:	23e0      	movs	r3, #224	@ 0xe0
 800470c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800470e:	2302      	movs	r3, #2
 8004710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004712:	2301      	movs	r3, #1
 8004714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004716:	2303      	movs	r3, #3
 8004718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800471a:	2305      	movs	r3, #5
 800471c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800471e:	f107 0314 	add.w	r3, r7, #20
 8004722:	4619      	mov	r1, r3
 8004724:	4805      	ldr	r0, [pc, #20]	@ (800473c <HAL_SPI_MspInit+0x8c>)
 8004726:	f000 fddb 	bl	80052e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800472a:	bf00      	nop
 800472c:	3728      	adds	r7, #40	@ 0x28
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40013000 	.word	0x40013000
 8004738:	40023800 	.word	0x40023800
 800473c:	40020000 	.word	0x40020000

08004740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004746:	2300      	movs	r3, #0
 8004748:	607b      	str	r3, [r7, #4]
 800474a:	4b12      	ldr	r3, [pc, #72]	@ (8004794 <HAL_MspInit+0x54>)
 800474c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474e:	4a11      	ldr	r2, [pc, #68]	@ (8004794 <HAL_MspInit+0x54>)
 8004750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004754:	6453      	str	r3, [r2, #68]	@ 0x44
 8004756:	4b0f      	ldr	r3, [pc, #60]	@ (8004794 <HAL_MspInit+0x54>)
 8004758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800475e:	607b      	str	r3, [r7, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004762:	2300      	movs	r3, #0
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	4b0b      	ldr	r3, [pc, #44]	@ (8004794 <HAL_MspInit+0x54>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	4a0a      	ldr	r2, [pc, #40]	@ (8004794 <HAL_MspInit+0x54>)
 800476c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004770:	6413      	str	r3, [r2, #64]	@ 0x40
 8004772:	4b08      	ldr	r3, [pc, #32]	@ (8004794 <HAL_MspInit+0x54>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800477e:	2200      	movs	r2, #0
 8004780:	210f      	movs	r1, #15
 8004782:	f06f 0001 	mvn.w	r0, #1
 8004786:	f000 fca7 	bl	80050d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800

08004798 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08c      	sub	sp, #48	@ 0x30
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80047a8:	2300      	movs	r3, #0
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004868 <HAL_InitTick+0xd0>)
 80047ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004868 <HAL_InitTick+0xd0>)
 80047b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80047b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004868 <HAL_InitTick+0xd0>)
 80047ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80047c4:	f107 020c 	add.w	r2, r7, #12
 80047c8:	f107 0310 	add.w	r3, r7, #16
 80047cc:	4611      	mov	r1, r2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f002 fbc4 	bl	8006f5c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80047d4:	f002 fbae 	bl	8006f34 <HAL_RCC_GetPCLK2Freq>
 80047d8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80047da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047dc:	4a23      	ldr	r2, [pc, #140]	@ (800486c <HAL_InitTick+0xd4>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	0c9b      	lsrs	r3, r3, #18
 80047e4:	3b01      	subs	r3, #1
 80047e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80047e8:	4b21      	ldr	r3, [pc, #132]	@ (8004870 <HAL_InitTick+0xd8>)
 80047ea:	4a22      	ldr	r2, [pc, #136]	@ (8004874 <HAL_InitTick+0xdc>)
 80047ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80047ee:	4b20      	ldr	r3, [pc, #128]	@ (8004870 <HAL_InitTick+0xd8>)
 80047f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80047f4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80047f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004870 <HAL_InitTick+0xd8>)
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80047fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004870 <HAL_InitTick+0xd8>)
 80047fe:	2200      	movs	r2, #0
 8004800:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004802:	4b1b      	ldr	r3, [pc, #108]	@ (8004870 <HAL_InitTick+0xd8>)
 8004804:	2200      	movs	r2, #0
 8004806:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004808:	4b19      	ldr	r3, [pc, #100]	@ (8004870 <HAL_InitTick+0xd8>)
 800480a:	2200      	movs	r2, #0
 800480c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800480e:	4818      	ldr	r0, [pc, #96]	@ (8004870 <HAL_InitTick+0xd8>)
 8004810:	f003 f9d0 	bl	8007bb4 <HAL_TIM_Base_Init>
 8004814:	4603      	mov	r3, r0
 8004816:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800481a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800481e:	2b00      	cmp	r3, #0
 8004820:	d11b      	bne.n	800485a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8004822:	4813      	ldr	r0, [pc, #76]	@ (8004870 <HAL_InitTick+0xd8>)
 8004824:	f003 fa2c 	bl	8007c80 <HAL_TIM_Base_Start_IT>
 8004828:	4603      	mov	r3, r0
 800482a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800482e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004832:	2b00      	cmp	r3, #0
 8004834:	d111      	bne.n	800485a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004836:	2019      	movs	r0, #25
 8004838:	f000 fc6a 	bl	8005110 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b0f      	cmp	r3, #15
 8004840:	d808      	bhi.n	8004854 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8004842:	2200      	movs	r2, #0
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	2019      	movs	r0, #25
 8004848:	f000 fc46 	bl	80050d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800484c:	4a0a      	ldr	r2, [pc, #40]	@ (8004878 <HAL_InitTick+0xe0>)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	e002      	b.n	800485a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800485a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800485e:	4618      	mov	r0, r3
 8004860:	3730      	adds	r7, #48	@ 0x30
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40023800 	.word	0x40023800
 800486c:	431bde83 	.word	0x431bde83
 8004870:	20000944 	.word	0x20000944
 8004874:	40014400 	.word	0x40014400
 8004878:	20000298 	.word	0x20000298

0800487c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004880:	f002 fb9e 	bl	8006fc0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004884:	bf00      	nop
 8004886:	e7fd      	b.n	8004884 <NMI_Handler+0x8>

08004888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800488c:	bf00      	nop
 800488e:	e7fd      	b.n	800488c <HardFault_Handler+0x4>

08004890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004894:	bf00      	nop
 8004896:	e7fd      	b.n	8004894 <MemManage_Handler+0x4>

08004898 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800489c:	bf00      	nop
 800489e:	e7fd      	b.n	800489c <BusFault_Handler+0x4>

080048a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048a4:	bf00      	nop
 80048a6:	e7fd      	b.n	80048a4 <UsageFault_Handler+0x4>

080048a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048ac:	bf00      	nop
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
	...

080048b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80048bc:	4802      	ldr	r0, [pc, #8]	@ (80048c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80048be:	f003 fbb7 	bl	8008030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20000944 	.word	0x20000944

080048cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80048d0:	4802      	ldr	r0, [pc, #8]	@ (80048dc <TIM3_IRQHandler+0x10>)
 80048d2:	f003 fbad 	bl	8008030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	200009fc 	.word	0x200009fc

080048e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80048e4:	4802      	ldr	r0, [pc, #8]	@ (80048f0 <TIM4_IRQHandler+0x10>)
 80048e6:	f003 fba3 	bl	8008030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80048ea:	bf00      	nop
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000ab0 	.word	0x20000ab0

080048f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80048f8:	4802      	ldr	r0, [pc, #8]	@ (8004904 <USART1_IRQHandler+0x10>)
 80048fa:	f004 fadf 	bl	8008ebc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80048fe:	bf00      	nop
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000b64 	.word	0x20000b64

08004908 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU_INT_Pin);
 800490c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004910:	f000 fe84 	bl	800561c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN_INT_Pin);
 8004914:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004918:	f000 fe80 	bl	800561c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800491c:	bf00      	nop
 800491e:	bd80      	pop	{r7, pc}

08004920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004928:	4a14      	ldr	r2, [pc, #80]	@ (800497c <_sbrk+0x5c>)
 800492a:	4b15      	ldr	r3, [pc, #84]	@ (8004980 <_sbrk+0x60>)
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004934:	4b13      	ldr	r3, [pc, #76]	@ (8004984 <_sbrk+0x64>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d102      	bne.n	8004942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800493c:	4b11      	ldr	r3, [pc, #68]	@ (8004984 <_sbrk+0x64>)
 800493e:	4a12      	ldr	r2, [pc, #72]	@ (8004988 <_sbrk+0x68>)
 8004940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004942:	4b10      	ldr	r3, [pc, #64]	@ (8004984 <_sbrk+0x64>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4413      	add	r3, r2
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	429a      	cmp	r2, r3
 800494e:	d207      	bcs.n	8004960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004950:	f00b fc24 	bl	801019c <__errno>
 8004954:	4603      	mov	r3, r0
 8004956:	220c      	movs	r2, #12
 8004958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800495a:	f04f 33ff 	mov.w	r3, #4294967295
 800495e:	e009      	b.n	8004974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004960:	4b08      	ldr	r3, [pc, #32]	@ (8004984 <_sbrk+0x64>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004966:	4b07      	ldr	r3, [pc, #28]	@ (8004984 <_sbrk+0x64>)
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4413      	add	r3, r2
 800496e:	4a05      	ldr	r2, [pc, #20]	@ (8004984 <_sbrk+0x64>)
 8004970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004972:	68fb      	ldr	r3, [r7, #12]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20010000 	.word	0x20010000
 8004980:	00000400 	.word	0x00000400
 8004984:	200009f8 	.word	0x200009f8
 8004988:	200093c0 	.word	0x200093c0

0800498c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004990:	4b06      	ldr	r3, [pc, #24]	@ (80049ac <SystemInit+0x20>)
 8004992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004996:	4a05      	ldr	r2, [pc, #20]	@ (80049ac <SystemInit+0x20>)
 8004998:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800499c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049a0:	bf00      	nop
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	e000ed00 	.word	0xe000ed00

080049b0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049b6:	f107 0310 	add.w	r3, r7, #16
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80049c0:	463b      	mov	r3, r7
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	605a      	str	r2, [r3, #4]
 80049c8:	609a      	str	r2, [r3, #8]
 80049ca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80049cc:	4b30      	ldr	r3, [pc, #192]	@ (8004a90 <MX_TIM3_Init+0xe0>)
 80049ce:	4a31      	ldr	r2, [pc, #196]	@ (8004a94 <MX_TIM3_Init+0xe4>)
 80049d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80049d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004a90 <MX_TIM3_Init+0xe0>)
 80049d4:	2253      	movs	r2, #83	@ 0x53
 80049d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004a90 <MX_TIM3_Init+0xe0>)
 80049da:	2200      	movs	r2, #0
 80049dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80049de:	4b2c      	ldr	r3, [pc, #176]	@ (8004a90 <MX_TIM3_Init+0xe0>)
 80049e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004a90 <MX_TIM3_Init+0xe0>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049ec:	4b28      	ldr	r3, [pc, #160]	@ (8004a90 <MX_TIM3_Init+0xe0>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80049f2:	4827      	ldr	r0, [pc, #156]	@ (8004a90 <MX_TIM3_Init+0xe0>)
 80049f4:	f003 f9a6 	bl	8007d44 <HAL_TIM_IC_Init>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80049fe:	f7ff fe1b 	bl	8004638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a02:	2300      	movs	r3, #0
 8004a04:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004a0a:	f107 0310 	add.w	r3, r7, #16
 8004a0e:	4619      	mov	r1, r3
 8004a10:	481f      	ldr	r0, [pc, #124]	@ (8004a90 <MX_TIM3_Init+0xe0>)
 8004a12:	f004 f8b9 	bl	8008b88 <HAL_TIMEx_MasterConfigSynchronization>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004a1c:	f7ff fe0c 	bl	8004638 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004a20:	230a      	movs	r3, #10
 8004a22:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004a24:	2301      	movs	r3, #1
 8004a26:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004a30:	463b      	mov	r3, r7
 8004a32:	2200      	movs	r2, #0
 8004a34:	4619      	mov	r1, r3
 8004a36:	4816      	ldr	r0, [pc, #88]	@ (8004a90 <MX_TIM3_Init+0xe0>)
 8004a38:	f003 fc0a 	bl	8008250 <HAL_TIM_IC_ConfigChannel>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8004a42:	f7ff fdf9 	bl	8004638 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004a46:	463b      	mov	r3, r7
 8004a48:	2204      	movs	r2, #4
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4810      	ldr	r0, [pc, #64]	@ (8004a90 <MX_TIM3_Init+0xe0>)
 8004a4e:	f003 fbff 	bl	8008250 <HAL_TIM_IC_ConfigChannel>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8004a58:	f7ff fdee 	bl	8004638 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	2208      	movs	r2, #8
 8004a60:	4619      	mov	r1, r3
 8004a62:	480b      	ldr	r0, [pc, #44]	@ (8004a90 <MX_TIM3_Init+0xe0>)
 8004a64:	f003 fbf4 	bl	8008250 <HAL_TIM_IC_ConfigChannel>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8004a6e:	f7ff fde3 	bl	8004638 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004a72:	463b      	mov	r3, r7
 8004a74:	220c      	movs	r2, #12
 8004a76:	4619      	mov	r1, r3
 8004a78:	4805      	ldr	r0, [pc, #20]	@ (8004a90 <MX_TIM3_Init+0xe0>)
 8004a7a:	f003 fbe9 	bl	8008250 <HAL_TIM_IC_ConfigChannel>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004a84:	f7ff fdd8 	bl	8004638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004a88:	bf00      	nop
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	200009fc 	.word	0x200009fc
 8004a94:	40000400 	.word	0x40000400

08004a98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a9e:	f107 0310 	add.w	r3, r7, #16
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004aa8:	463b      	mov	r3, r7
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	605a      	str	r2, [r3, #4]
 8004ab0:	609a      	str	r2, [r3, #8]
 8004ab2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004ab4:	4b30      	ldr	r3, [pc, #192]	@ (8004b78 <MX_TIM4_Init+0xe0>)
 8004ab6:	4a31      	ldr	r2, [pc, #196]	@ (8004b7c <MX_TIM4_Init+0xe4>)
 8004ab8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8004aba:	4b2f      	ldr	r3, [pc, #188]	@ (8004b78 <MX_TIM4_Init+0xe0>)
 8004abc:	2253      	movs	r2, #83	@ 0x53
 8004abe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8004b78 <MX_TIM4_Init+0xe0>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004ac6:	4b2c      	ldr	r3, [pc, #176]	@ (8004b78 <MX_TIM4_Init+0xe0>)
 8004ac8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004acc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ace:	4b2a      	ldr	r3, [pc, #168]	@ (8004b78 <MX_TIM4_Init+0xe0>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ad4:	4b28      	ldr	r3, [pc, #160]	@ (8004b78 <MX_TIM4_Init+0xe0>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8004ada:	4827      	ldr	r0, [pc, #156]	@ (8004b78 <MX_TIM4_Init+0xe0>)
 8004adc:	f003 f932 	bl	8007d44 <HAL_TIM_IC_Init>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004ae6:	f7ff fda7 	bl	8004638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004aea:	2300      	movs	r3, #0
 8004aec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004af2:	f107 0310 	add.w	r3, r7, #16
 8004af6:	4619      	mov	r1, r3
 8004af8:	481f      	ldr	r0, [pc, #124]	@ (8004b78 <MX_TIM4_Init+0xe0>)
 8004afa:	f004 f845 	bl	8008b88 <HAL_TIMEx_MasterConfigSynchronization>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004b04:	f7ff fd98 	bl	8004638 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004b08:	230a      	movs	r3, #10
 8004b0a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004b18:	463b      	mov	r3, r7
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4816      	ldr	r0, [pc, #88]	@ (8004b78 <MX_TIM4_Init+0xe0>)
 8004b20:	f003 fb96 	bl	8008250 <HAL_TIM_IC_ConfigChannel>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8004b2a:	f7ff fd85 	bl	8004638 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004b2e:	463b      	mov	r3, r7
 8004b30:	2204      	movs	r2, #4
 8004b32:	4619      	mov	r1, r3
 8004b34:	4810      	ldr	r0, [pc, #64]	@ (8004b78 <MX_TIM4_Init+0xe0>)
 8004b36:	f003 fb8b 	bl	8008250 <HAL_TIM_IC_ConfigChannel>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8004b40:	f7ff fd7a 	bl	8004638 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004b44:	463b      	mov	r3, r7
 8004b46:	2208      	movs	r2, #8
 8004b48:	4619      	mov	r1, r3
 8004b4a:	480b      	ldr	r0, [pc, #44]	@ (8004b78 <MX_TIM4_Init+0xe0>)
 8004b4c:	f003 fb80 	bl	8008250 <HAL_TIM_IC_ConfigChannel>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8004b56:	f7ff fd6f 	bl	8004638 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004b5a:	463b      	mov	r3, r7
 8004b5c:	220c      	movs	r2, #12
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4805      	ldr	r0, [pc, #20]	@ (8004b78 <MX_TIM4_Init+0xe0>)
 8004b62:	f003 fb75 	bl	8008250 <HAL_TIM_IC_ConfigChannel>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004b6c:	f7ff fd64 	bl	8004638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004b70:	bf00      	nop
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	20000ab0 	.word	0x20000ab0
 8004b7c:	40000800 	.word	0x40000800

08004b80 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08c      	sub	sp, #48	@ 0x30
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b88:	f107 031c 	add.w	r3, r7, #28
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	605a      	str	r2, [r3, #4]
 8004b92:	609a      	str	r2, [r3, #8]
 8004b94:	60da      	str	r2, [r3, #12]
 8004b96:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a3a      	ldr	r2, [pc, #232]	@ (8004c88 <HAL_TIM_IC_MspInit+0x108>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d134      	bne.n	8004c0c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	4b39      	ldr	r3, [pc, #228]	@ (8004c8c <HAL_TIM_IC_MspInit+0x10c>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004baa:	4a38      	ldr	r2, [pc, #224]	@ (8004c8c <HAL_TIM_IC_MspInit+0x10c>)
 8004bac:	f043 0302 	orr.w	r3, r3, #2
 8004bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bb2:	4b36      	ldr	r3, [pc, #216]	@ (8004c8c <HAL_TIM_IC_MspInit+0x10c>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	61bb      	str	r3, [r7, #24]
 8004bbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	4b32      	ldr	r3, [pc, #200]	@ (8004c8c <HAL_TIM_IC_MspInit+0x10c>)
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc6:	4a31      	ldr	r2, [pc, #196]	@ (8004c8c <HAL_TIM_IC_MspInit+0x10c>)
 8004bc8:	f043 0302 	orr.w	r3, r3, #2
 8004bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bce:	4b2f      	ldr	r3, [pc, #188]	@ (8004c8c <HAL_TIM_IC_MspInit+0x10c>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	697b      	ldr	r3, [r7, #20]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = UL_90_Pin|UL_135_Pin|UL_0_Pin|UL_45_Pin;
 8004bda:	2333      	movs	r3, #51	@ 0x33
 8004bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bde:	2302      	movs	r3, #2
 8004be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004be2:	2302      	movs	r3, #2
 8004be4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be6:	2300      	movs	r3, #0
 8004be8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004bea:	2302      	movs	r3, #2
 8004bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bee:	f107 031c 	add.w	r3, r7, #28
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	4826      	ldr	r0, [pc, #152]	@ (8004c90 <HAL_TIM_IC_MspInit+0x110>)
 8004bf6:	f000 fb73 	bl	80052e0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2105      	movs	r1, #5
 8004bfe:	201d      	movs	r0, #29
 8004c00:	f000 fa6a 	bl	80050d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004c04:	201d      	movs	r0, #29
 8004c06:	f000 fa83 	bl	8005110 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004c0a:	e039      	b.n	8004c80 <HAL_TIM_IC_MspInit+0x100>
  else if(tim_icHandle->Instance==TIM4)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a20      	ldr	r2, [pc, #128]	@ (8004c94 <HAL_TIM_IC_MspInit+0x114>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d134      	bne.n	8004c80 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004c8c <HAL_TIM_IC_MspInit+0x10c>)
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004c8c <HAL_TIM_IC_MspInit+0x10c>)
 8004c20:	f043 0304 	orr.w	r3, r3, #4
 8004c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c26:	4b19      	ldr	r3, [pc, #100]	@ (8004c8c <HAL_TIM_IC_MspInit+0x10c>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	4b15      	ldr	r3, [pc, #84]	@ (8004c8c <HAL_TIM_IC_MspInit+0x10c>)
 8004c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3a:	4a14      	ldr	r2, [pc, #80]	@ (8004c8c <HAL_TIM_IC_MspInit+0x10c>)
 8004c3c:	f043 0302 	orr.w	r3, r3, #2
 8004c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c42:	4b12      	ldr	r3, [pc, #72]	@ (8004c8c <HAL_TIM_IC_MspInit+0x10c>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UL_180_Pin|UL_225_Pin|UL_270_Pin|UL_315_Pin;
 8004c4e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c54:	2302      	movs	r3, #2
 8004c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004c60:	2302      	movs	r3, #2
 8004c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c64:	f107 031c 	add.w	r3, r7, #28
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4809      	ldr	r0, [pc, #36]	@ (8004c90 <HAL_TIM_IC_MspInit+0x110>)
 8004c6c:	f000 fb38 	bl	80052e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004c70:	2200      	movs	r2, #0
 8004c72:	2105      	movs	r1, #5
 8004c74:	201e      	movs	r0, #30
 8004c76:	f000 fa2f 	bl	80050d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004c7a:	201e      	movs	r0, #30
 8004c7c:	f000 fa48 	bl	8005110 <HAL_NVIC_EnableIRQ>
}
 8004c80:	bf00      	nop
 8004c82:	3730      	adds	r7, #48	@ 0x30
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40000400 	.word	0x40000400
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40020400 	.word	0x40020400
 8004c94:	40000800 	.word	0x40000800

08004c98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004c9c:	4b11      	ldr	r3, [pc, #68]	@ (8004ce4 <MX_USART1_UART_Init+0x4c>)
 8004c9e:	4a12      	ldr	r2, [pc, #72]	@ (8004ce8 <MX_USART1_UART_Init+0x50>)
 8004ca0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004ca2:	4b10      	ldr	r3, [pc, #64]	@ (8004ce4 <MX_USART1_UART_Init+0x4c>)
 8004ca4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004ca8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004caa:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce4 <MX_USART1_UART_Init+0x4c>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce4 <MX_USART1_UART_Init+0x4c>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce4 <MX_USART1_UART_Init+0x4c>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004cbc:	4b09      	ldr	r3, [pc, #36]	@ (8004ce4 <MX_USART1_UART_Init+0x4c>)
 8004cbe:	220c      	movs	r2, #12
 8004cc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cc2:	4b08      	ldr	r3, [pc, #32]	@ (8004ce4 <MX_USART1_UART_Init+0x4c>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cc8:	4b06      	ldr	r3, [pc, #24]	@ (8004ce4 <MX_USART1_UART_Init+0x4c>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004cce:	4805      	ldr	r0, [pc, #20]	@ (8004ce4 <MX_USART1_UART_Init+0x4c>)
 8004cd0:	f003 ffe6 	bl	8008ca0 <HAL_UART_Init>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004cda:	f7ff fcad 	bl	8004638 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004cde:	bf00      	nop
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20000b64 	.word	0x20000b64
 8004ce8:	40011000 	.word	0x40011000

08004cec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004cf0:	4b11      	ldr	r3, [pc, #68]	@ (8004d38 <MX_USART2_UART_Init+0x4c>)
 8004cf2:	4a12      	ldr	r2, [pc, #72]	@ (8004d3c <MX_USART2_UART_Init+0x50>)
 8004cf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8004cf6:	4b10      	ldr	r3, [pc, #64]	@ (8004d38 <MX_USART2_UART_Init+0x4c>)
 8004cf8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8004cfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8004d38 <MX_USART2_UART_Init+0x4c>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d04:	4b0c      	ldr	r3, [pc, #48]	@ (8004d38 <MX_USART2_UART_Init+0x4c>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d38 <MX_USART2_UART_Init+0x4c>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d10:	4b09      	ldr	r3, [pc, #36]	@ (8004d38 <MX_USART2_UART_Init+0x4c>)
 8004d12:	220c      	movs	r2, #12
 8004d14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d16:	4b08      	ldr	r3, [pc, #32]	@ (8004d38 <MX_USART2_UART_Init+0x4c>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d1c:	4b06      	ldr	r3, [pc, #24]	@ (8004d38 <MX_USART2_UART_Init+0x4c>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d22:	4805      	ldr	r0, [pc, #20]	@ (8004d38 <MX_USART2_UART_Init+0x4c>)
 8004d24:	f003 ffbc 	bl	8008ca0 <HAL_UART_Init>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004d2e:	f7ff fc83 	bl	8004638 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d32:	bf00      	nop
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000bdc 	.word	0x20000bdc
 8004d3c:	40004400 	.word	0x40004400

08004d40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08c      	sub	sp, #48	@ 0x30
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d48:	f107 031c 	add.w	r3, r7, #28
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	605a      	str	r2, [r3, #4]
 8004d52:	609a      	str	r2, [r3, #8]
 8004d54:	60da      	str	r2, [r3, #12]
 8004d56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a36      	ldr	r2, [pc, #216]	@ (8004e38 <HAL_UART_MspInit+0xf8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d135      	bne.n	8004dce <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d62:	2300      	movs	r3, #0
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	4b35      	ldr	r3, [pc, #212]	@ (8004e3c <HAL_UART_MspInit+0xfc>)
 8004d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6a:	4a34      	ldr	r2, [pc, #208]	@ (8004e3c <HAL_UART_MspInit+0xfc>)
 8004d6c:	f043 0310 	orr.w	r3, r3, #16
 8004d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d72:	4b32      	ldr	r3, [pc, #200]	@ (8004e3c <HAL_UART_MspInit+0xfc>)
 8004d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d7e:	2300      	movs	r3, #0
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	4b2e      	ldr	r3, [pc, #184]	@ (8004e3c <HAL_UART_MspInit+0xfc>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d86:	4a2d      	ldr	r2, [pc, #180]	@ (8004e3c <HAL_UART_MspInit+0xfc>)
 8004d88:	f043 0301 	orr.w	r3, r3, #1
 8004d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8004e3c <HAL_UART_MspInit+0xfc>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP32_TX_Pin|ESP32_RX_Pin;
 8004d9a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da0:	2302      	movs	r3, #2
 8004da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004da4:	2301      	movs	r3, #1
 8004da6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004da8:	2303      	movs	r3, #3
 8004daa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004dac:	2307      	movs	r3, #7
 8004dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004db0:	f107 031c 	add.w	r3, r7, #28
 8004db4:	4619      	mov	r1, r3
 8004db6:	4822      	ldr	r0, [pc, #136]	@ (8004e40 <HAL_UART_MspInit+0x100>)
 8004db8:	f000 fa92 	bl	80052e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2105      	movs	r1, #5
 8004dc0:	2025      	movs	r0, #37	@ 0x25
 8004dc2:	f000 f989 	bl	80050d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004dc6:	2025      	movs	r0, #37	@ 0x25
 8004dc8:	f000 f9a2 	bl	8005110 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004dcc:	e030      	b.n	8004e30 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8004e44 <HAL_UART_MspInit+0x104>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d12b      	bne.n	8004e30 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004dd8:	2300      	movs	r3, #0
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	4b17      	ldr	r3, [pc, #92]	@ (8004e3c <HAL_UART_MspInit+0xfc>)
 8004dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de0:	4a16      	ldr	r2, [pc, #88]	@ (8004e3c <HAL_UART_MspInit+0xfc>)
 8004de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004de6:	6413      	str	r3, [r2, #64]	@ 0x40
 8004de8:	4b14      	ldr	r3, [pc, #80]	@ (8004e3c <HAL_UART_MspInit+0xfc>)
 8004dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	4b10      	ldr	r3, [pc, #64]	@ (8004e3c <HAL_UART_MspInit+0xfc>)
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfc:	4a0f      	ldr	r2, [pc, #60]	@ (8004e3c <HAL_UART_MspInit+0xfc>)
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e04:	4b0d      	ldr	r3, [pc, #52]	@ (8004e3c <HAL_UART_MspInit+0xfc>)
 8004e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BT_TX_Pin|BT_RX_Pin;
 8004e10:	230c      	movs	r3, #12
 8004e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e14:	2302      	movs	r3, #2
 8004e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e20:	2307      	movs	r3, #7
 8004e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e24:	f107 031c 	add.w	r3, r7, #28
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4805      	ldr	r0, [pc, #20]	@ (8004e40 <HAL_UART_MspInit+0x100>)
 8004e2c:	f000 fa58 	bl	80052e0 <HAL_GPIO_Init>
}
 8004e30:	bf00      	nop
 8004e32:	3730      	adds	r7, #48	@ 0x30
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40011000 	.word	0x40011000
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	40020000 	.word	0x40020000
 8004e44:	40004400 	.word	0x40004400

08004e48 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8004e48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004e80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004e4c:	f7ff fd9e 	bl	800498c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e50:	480c      	ldr	r0, [pc, #48]	@ (8004e84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004e52:	490d      	ldr	r1, [pc, #52]	@ (8004e88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e54:	4a0d      	ldr	r2, [pc, #52]	@ (8004e8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e58:	e002      	b.n	8004e60 <LoopCopyDataInit>

08004e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e5e:	3304      	adds	r3, #4

08004e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e64:	d3f9      	bcc.n	8004e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e66:	4a0a      	ldr	r2, [pc, #40]	@ (8004e90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e68:	4c0a      	ldr	r4, [pc, #40]	@ (8004e94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e6c:	e001      	b.n	8004e72 <LoopFillZerobss>

08004e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e70:	3204      	adds	r2, #4

08004e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e74:	d3fb      	bcc.n	8004e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e76:	f00b f997 	bl	80101a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e7a:	f7ff fb41 	bl	8004500 <main>
  bx  lr    
 8004e7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e80:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e88:	20000680 	.word	0x20000680
  ldr r2, =_sidata
 8004e8c:	08010fb0 	.word	0x08010fb0
  ldr r2, =_sbss
 8004e90:	20000680 	.word	0x20000680
  ldr r4, =_ebss
 8004e94:	200093bc 	.word	0x200093bc

08004e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e98:	e7fe      	b.n	8004e98 <ADC_IRQHandler>
	...

08004e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8004edc <HAL_Init+0x40>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8004edc <HAL_Init+0x40>)
 8004ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004eac:	4b0b      	ldr	r3, [pc, #44]	@ (8004edc <HAL_Init+0x40>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8004edc <HAL_Init+0x40>)
 8004eb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004eb8:	4b08      	ldr	r3, [pc, #32]	@ (8004edc <HAL_Init+0x40>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a07      	ldr	r2, [pc, #28]	@ (8004edc <HAL_Init+0x40>)
 8004ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ec4:	2003      	movs	r0, #3
 8004ec6:	f000 f8fc 	bl	80050c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004eca:	200f      	movs	r0, #15
 8004ecc:	f7ff fc64 	bl	8004798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ed0:	f7ff fc36 	bl	8004740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40023c00 	.word	0x40023c00

08004ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ee4:	4b06      	ldr	r3, [pc, #24]	@ (8004f00 <HAL_IncTick+0x20>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	4b06      	ldr	r3, [pc, #24]	@ (8004f04 <HAL_IncTick+0x24>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4413      	add	r3, r2
 8004ef0:	4a04      	ldr	r2, [pc, #16]	@ (8004f04 <HAL_IncTick+0x24>)
 8004ef2:	6013      	str	r3, [r2, #0]
}
 8004ef4:	bf00      	nop
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	2000029c 	.word	0x2000029c
 8004f04:	20000c54 	.word	0x20000c54

08004f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8004f0c:	4b03      	ldr	r3, [pc, #12]	@ (8004f1c <HAL_GetTick+0x14>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	20000c54 	.word	0x20000c54

08004f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f28:	f7ff ffee 	bl	8004f08 <HAL_GetTick>
 8004f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d005      	beq.n	8004f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f64 <HAL_Delay+0x44>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f46:	bf00      	nop
 8004f48:	f7ff ffde 	bl	8004f08 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d8f7      	bhi.n	8004f48 <HAL_Delay+0x28>
  {
  }
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	2000029c 	.word	0x2000029c

08004f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f78:	4b0c      	ldr	r3, [pc, #48]	@ (8004fac <__NVIC_SetPriorityGrouping+0x44>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f84:	4013      	ands	r3, r2
 8004f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f9a:	4a04      	ldr	r2, [pc, #16]	@ (8004fac <__NVIC_SetPriorityGrouping+0x44>)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	60d3      	str	r3, [r2, #12]
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	e000ed00 	.word	0xe000ed00

08004fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fb4:	4b04      	ldr	r3, [pc, #16]	@ (8004fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	0a1b      	lsrs	r3, r3, #8
 8004fba:	f003 0307 	and.w	r3, r3, #7
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	e000ed00 	.word	0xe000ed00

08004fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	db0b      	blt.n	8004ff6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	f003 021f 	and.w	r2, r3, #31
 8004fe4:	4907      	ldr	r1, [pc, #28]	@ (8005004 <__NVIC_EnableIRQ+0x38>)
 8004fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	2001      	movs	r0, #1
 8004fee:	fa00 f202 	lsl.w	r2, r0, r2
 8004ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	e000e100 	.word	0xe000e100

08005008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	4603      	mov	r3, r0
 8005010:	6039      	str	r1, [r7, #0]
 8005012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005018:	2b00      	cmp	r3, #0
 800501a:	db0a      	blt.n	8005032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	b2da      	uxtb	r2, r3
 8005020:	490c      	ldr	r1, [pc, #48]	@ (8005054 <__NVIC_SetPriority+0x4c>)
 8005022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005026:	0112      	lsls	r2, r2, #4
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	440b      	add	r3, r1
 800502c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005030:	e00a      	b.n	8005048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	b2da      	uxtb	r2, r3
 8005036:	4908      	ldr	r1, [pc, #32]	@ (8005058 <__NVIC_SetPriority+0x50>)
 8005038:	79fb      	ldrb	r3, [r7, #7]
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	3b04      	subs	r3, #4
 8005040:	0112      	lsls	r2, r2, #4
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	440b      	add	r3, r1
 8005046:	761a      	strb	r2, [r3, #24]
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	e000e100 	.word	0xe000e100
 8005058:	e000ed00 	.word	0xe000ed00

0800505c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800505c:	b480      	push	{r7}
 800505e:	b089      	sub	sp, #36	@ 0x24
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f1c3 0307 	rsb	r3, r3, #7
 8005076:	2b04      	cmp	r3, #4
 8005078:	bf28      	it	cs
 800507a:	2304      	movcs	r3, #4
 800507c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3304      	adds	r3, #4
 8005082:	2b06      	cmp	r3, #6
 8005084:	d902      	bls.n	800508c <NVIC_EncodePriority+0x30>
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	3b03      	subs	r3, #3
 800508a:	e000      	b.n	800508e <NVIC_EncodePriority+0x32>
 800508c:	2300      	movs	r3, #0
 800508e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005090:	f04f 32ff 	mov.w	r2, #4294967295
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	43da      	mvns	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	401a      	ands	r2, r3
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050a4:	f04f 31ff 	mov.w	r1, #4294967295
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	fa01 f303 	lsl.w	r3, r1, r3
 80050ae:	43d9      	mvns	r1, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050b4:	4313      	orrs	r3, r2
         );
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3724      	adds	r7, #36	@ 0x24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b082      	sub	sp, #8
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7ff ff4c 	bl	8004f68 <__NVIC_SetPriorityGrouping>
}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050ea:	f7ff ff61 	bl	8004fb0 <__NVIC_GetPriorityGrouping>
 80050ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	6978      	ldr	r0, [r7, #20]
 80050f6:	f7ff ffb1 	bl	800505c <NVIC_EncodePriority>
 80050fa:	4602      	mov	r2, r0
 80050fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005100:	4611      	mov	r1, r2
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff ff80 	bl	8005008 <__NVIC_SetPriority>
}
 8005108:	bf00      	nop
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800511a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff ff54 	bl	8004fcc <__NVIC_EnableIRQ>
}
 8005124:	bf00      	nop
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e00e      	b.n	800515c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	795b      	ldrb	r3, [r3, #5]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d105      	bne.n	8005154 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fe faee 	bl	8003730 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005170:	2300      	movs	r3, #0
 8005172:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2202      	movs	r2, #2
 8005178:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800517a:	2300      	movs	r3, #0
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	e00a      	b.n	8005196 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	441a      	add	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6812      	ldr	r2, [r2, #0]
 800518e:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	3301      	adds	r3, #1
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	429a      	cmp	r2, r3
 800519c:	d3f0      	bcc.n	8005180 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80051ac:	693b      	ldr	r3, [r7, #16]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	371c      	adds	r7, #28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80051c8:	f7ff fe9e 	bl	8004f08 <HAL_GetTick>
 80051cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d008      	beq.n	80051ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2280      	movs	r2, #128	@ 0x80
 80051de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e052      	b.n	8005292 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0216 	bic.w	r2, r2, #22
 80051fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800520a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d103      	bne.n	800521c <HAL_DMA_Abort+0x62>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005218:	2b00      	cmp	r3, #0
 800521a:	d007      	beq.n	800522c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0208 	bic.w	r2, r2, #8
 800522a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0201 	bic.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800523c:	e013      	b.n	8005266 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800523e:	f7ff fe63 	bl	8004f08 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b05      	cmp	r3, #5
 800524a:	d90c      	bls.n	8005266 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2203      	movs	r2, #3
 8005256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e015      	b.n	8005292 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e4      	bne.n	800523e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005278:	223f      	movs	r2, #63	@ 0x3f
 800527a:	409a      	lsls	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d004      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2280      	movs	r2, #128	@ 0x80
 80052b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e00c      	b.n	80052d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2205      	movs	r2, #5
 80052bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0201 	bic.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
	...

080052e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b089      	sub	sp, #36	@ 0x24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
 80052fa:	e159      	b.n	80055b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052fc:	2201      	movs	r2, #1
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4013      	ands	r3, r2
 800530e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	429a      	cmp	r2, r3
 8005316:	f040 8148 	bne.w	80055aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	2b01      	cmp	r3, #1
 8005324:	d005      	beq.n	8005332 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800532e:	2b02      	cmp	r3, #2
 8005330:	d130      	bne.n	8005394 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	2203      	movs	r2, #3
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	43db      	mvns	r3, r3
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	4013      	ands	r3, r2
 8005348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	fa02 f303 	lsl.w	r3, r2, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4313      	orrs	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005368:	2201      	movs	r2, #1
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	43db      	mvns	r3, r3
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	4013      	ands	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	091b      	lsrs	r3, r3, #4
 800537e:	f003 0201 	and.w	r2, r3, #1
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	4313      	orrs	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f003 0303 	and.w	r3, r3, #3
 800539c:	2b03      	cmp	r3, #3
 800539e:	d017      	beq.n	80053d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	2203      	movs	r2, #3
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	43db      	mvns	r3, r3
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	4013      	ands	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f003 0303 	and.w	r3, r3, #3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d123      	bne.n	8005424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	08da      	lsrs	r2, r3, #3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3208      	adds	r2, #8
 80053e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	220f      	movs	r2, #15
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	43db      	mvns	r3, r3
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	4013      	ands	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	691a      	ldr	r2, [r3, #16]
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4313      	orrs	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	08da      	lsrs	r2, r3, #3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3208      	adds	r2, #8
 800541e:	69b9      	ldr	r1, [r7, #24]
 8005420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	2203      	movs	r2, #3
 8005430:	fa02 f303 	lsl.w	r3, r2, r3
 8005434:	43db      	mvns	r3, r3
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	4013      	ands	r3, r2
 800543a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f003 0203 	and.w	r2, r3, #3
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	fa02 f303 	lsl.w	r3, r2, r3
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	4313      	orrs	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80a2 	beq.w	80055aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	4b57      	ldr	r3, [pc, #348]	@ (80055c8 <HAL_GPIO_Init+0x2e8>)
 800546c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546e:	4a56      	ldr	r2, [pc, #344]	@ (80055c8 <HAL_GPIO_Init+0x2e8>)
 8005470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005474:	6453      	str	r3, [r2, #68]	@ 0x44
 8005476:	4b54      	ldr	r3, [pc, #336]	@ (80055c8 <HAL_GPIO_Init+0x2e8>)
 8005478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005482:	4a52      	ldr	r2, [pc, #328]	@ (80055cc <HAL_GPIO_Init+0x2ec>)
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	089b      	lsrs	r3, r3, #2
 8005488:	3302      	adds	r3, #2
 800548a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800548e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	220f      	movs	r2, #15
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	43db      	mvns	r3, r3
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	4013      	ands	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a49      	ldr	r2, [pc, #292]	@ (80055d0 <HAL_GPIO_Init+0x2f0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d019      	beq.n	80054e2 <HAL_GPIO_Init+0x202>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a48      	ldr	r2, [pc, #288]	@ (80055d4 <HAL_GPIO_Init+0x2f4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d013      	beq.n	80054de <HAL_GPIO_Init+0x1fe>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a47      	ldr	r2, [pc, #284]	@ (80055d8 <HAL_GPIO_Init+0x2f8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00d      	beq.n	80054da <HAL_GPIO_Init+0x1fa>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a46      	ldr	r2, [pc, #280]	@ (80055dc <HAL_GPIO_Init+0x2fc>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d007      	beq.n	80054d6 <HAL_GPIO_Init+0x1f6>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a45      	ldr	r2, [pc, #276]	@ (80055e0 <HAL_GPIO_Init+0x300>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d101      	bne.n	80054d2 <HAL_GPIO_Init+0x1f2>
 80054ce:	2304      	movs	r3, #4
 80054d0:	e008      	b.n	80054e4 <HAL_GPIO_Init+0x204>
 80054d2:	2307      	movs	r3, #7
 80054d4:	e006      	b.n	80054e4 <HAL_GPIO_Init+0x204>
 80054d6:	2303      	movs	r3, #3
 80054d8:	e004      	b.n	80054e4 <HAL_GPIO_Init+0x204>
 80054da:	2302      	movs	r3, #2
 80054dc:	e002      	b.n	80054e4 <HAL_GPIO_Init+0x204>
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <HAL_GPIO_Init+0x204>
 80054e2:	2300      	movs	r3, #0
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	f002 0203 	and.w	r2, r2, #3
 80054ea:	0092      	lsls	r2, r2, #2
 80054ec:	4093      	lsls	r3, r2
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054f4:	4935      	ldr	r1, [pc, #212]	@ (80055cc <HAL_GPIO_Init+0x2ec>)
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	089b      	lsrs	r3, r3, #2
 80054fa:	3302      	adds	r3, #2
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005502:	4b38      	ldr	r3, [pc, #224]	@ (80055e4 <HAL_GPIO_Init+0x304>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	43db      	mvns	r3, r3
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	4013      	ands	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005526:	4a2f      	ldr	r2, [pc, #188]	@ (80055e4 <HAL_GPIO_Init+0x304>)
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800552c:	4b2d      	ldr	r3, [pc, #180]	@ (80055e4 <HAL_GPIO_Init+0x304>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	43db      	mvns	r3, r3
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	4013      	ands	r3, r2
 800553a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005550:	4a24      	ldr	r2, [pc, #144]	@ (80055e4 <HAL_GPIO_Init+0x304>)
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005556:	4b23      	ldr	r3, [pc, #140]	@ (80055e4 <HAL_GPIO_Init+0x304>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	43db      	mvns	r3, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4013      	ands	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800557a:	4a1a      	ldr	r2, [pc, #104]	@ (80055e4 <HAL_GPIO_Init+0x304>)
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005580:	4b18      	ldr	r3, [pc, #96]	@ (80055e4 <HAL_GPIO_Init+0x304>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	43db      	mvns	r3, r3
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	4013      	ands	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055a4:	4a0f      	ldr	r2, [pc, #60]	@ (80055e4 <HAL_GPIO_Init+0x304>)
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	3301      	adds	r3, #1
 80055ae:	61fb      	str	r3, [r7, #28]
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	2b0f      	cmp	r3, #15
 80055b4:	f67f aea2 	bls.w	80052fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	3724      	adds	r7, #36	@ 0x24
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40023800 	.word	0x40023800
 80055cc:	40013800 	.word	0x40013800
 80055d0:	40020000 	.word	0x40020000
 80055d4:	40020400 	.word	0x40020400
 80055d8:	40020800 	.word	0x40020800
 80055dc:	40020c00 	.word	0x40020c00
 80055e0:	40021000 	.word	0x40021000
 80055e4:	40013c00 	.word	0x40013c00

080055e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	807b      	strh	r3, [r7, #2]
 80055f4:	4613      	mov	r3, r2
 80055f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055f8:	787b      	ldrb	r3, [r7, #1]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055fe:	887a      	ldrh	r2, [r7, #2]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005604:	e003      	b.n	800560e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005606:	887b      	ldrh	r3, [r7, #2]
 8005608:	041a      	lsls	r2, r3, #16
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	619a      	str	r2, [r3, #24]
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
	...

0800561c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	4603      	mov	r3, r0
 8005624:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005626:	4b08      	ldr	r3, [pc, #32]	@ (8005648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005628:	695a      	ldr	r2, [r3, #20]
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	4013      	ands	r3, r2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d006      	beq.n	8005640 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005632:	4a05      	ldr	r2, [pc, #20]	@ (8005648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005634:	88fb      	ldrh	r3, [r7, #6]
 8005636:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005638:	88fb      	ldrh	r3, [r7, #6]
 800563a:	4618      	mov	r0, r3
 800563c:	f7fe fca2 	bl	8003f84 <HAL_GPIO_EXTI_Callback>
  }
}
 8005640:	bf00      	nop
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40013c00 	.word	0x40013c00

0800564c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e12b      	b.n	80058b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d106      	bne.n	8005678 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fe feec 	bl	8004450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2224      	movs	r2, #36	@ 0x24
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800569e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056b0:	f001 fc2c 	bl	8006f0c <HAL_RCC_GetPCLK1Freq>
 80056b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4a81      	ldr	r2, [pc, #516]	@ (80058c0 <HAL_I2C_Init+0x274>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d807      	bhi.n	80056d0 <HAL_I2C_Init+0x84>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4a80      	ldr	r2, [pc, #512]	@ (80058c4 <HAL_I2C_Init+0x278>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	bf94      	ite	ls
 80056c8:	2301      	movls	r3, #1
 80056ca:	2300      	movhi	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	e006      	b.n	80056de <HAL_I2C_Init+0x92>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4a7d      	ldr	r2, [pc, #500]	@ (80058c8 <HAL_I2C_Init+0x27c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	bf94      	ite	ls
 80056d8:	2301      	movls	r3, #1
 80056da:	2300      	movhi	r3, #0
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e0e7      	b.n	80058b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4a78      	ldr	r2, [pc, #480]	@ (80058cc <HAL_I2C_Init+0x280>)
 80056ea:	fba2 2303 	umull	r2, r3, r2, r3
 80056ee:	0c9b      	lsrs	r3, r3, #18
 80056f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	430a      	orrs	r2, r1
 8005704:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	4a6a      	ldr	r2, [pc, #424]	@ (80058c0 <HAL_I2C_Init+0x274>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d802      	bhi.n	8005720 <HAL_I2C_Init+0xd4>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	3301      	adds	r3, #1
 800571e:	e009      	b.n	8005734 <HAL_I2C_Init+0xe8>
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005726:	fb02 f303 	mul.w	r3, r2, r3
 800572a:	4a69      	ldr	r2, [pc, #420]	@ (80058d0 <HAL_I2C_Init+0x284>)
 800572c:	fba2 2303 	umull	r2, r3, r2, r3
 8005730:	099b      	lsrs	r3, r3, #6
 8005732:	3301      	adds	r3, #1
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6812      	ldr	r2, [r2, #0]
 8005738:	430b      	orrs	r3, r1
 800573a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005746:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	495c      	ldr	r1, [pc, #368]	@ (80058c0 <HAL_I2C_Init+0x274>)
 8005750:	428b      	cmp	r3, r1
 8005752:	d819      	bhi.n	8005788 <HAL_I2C_Init+0x13c>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	1e59      	subs	r1, r3, #1
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005762:	1c59      	adds	r1, r3, #1
 8005764:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005768:	400b      	ands	r3, r1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <HAL_I2C_Init+0x138>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1e59      	subs	r1, r3, #1
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	fbb1 f3f3 	udiv	r3, r1, r3
 800577c:	3301      	adds	r3, #1
 800577e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005782:	e051      	b.n	8005828 <HAL_I2C_Init+0x1dc>
 8005784:	2304      	movs	r3, #4
 8005786:	e04f      	b.n	8005828 <HAL_I2C_Init+0x1dc>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d111      	bne.n	80057b4 <HAL_I2C_Init+0x168>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	1e58      	subs	r0, r3, #1
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6859      	ldr	r1, [r3, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	440b      	add	r3, r1
 800579e:	fbb0 f3f3 	udiv	r3, r0, r3
 80057a2:	3301      	adds	r3, #1
 80057a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	bf0c      	ite	eq
 80057ac:	2301      	moveq	r3, #1
 80057ae:	2300      	movne	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	e012      	b.n	80057da <HAL_I2C_Init+0x18e>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	1e58      	subs	r0, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6859      	ldr	r1, [r3, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	440b      	add	r3, r1
 80057c2:	0099      	lsls	r1, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ca:	3301      	adds	r3, #1
 80057cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	bf0c      	ite	eq
 80057d4:	2301      	moveq	r3, #1
 80057d6:	2300      	movne	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <HAL_I2C_Init+0x196>
 80057de:	2301      	movs	r3, #1
 80057e0:	e022      	b.n	8005828 <HAL_I2C_Init+0x1dc>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10e      	bne.n	8005808 <HAL_I2C_Init+0x1bc>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	1e58      	subs	r0, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6859      	ldr	r1, [r3, #4]
 80057f2:	460b      	mov	r3, r1
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	440b      	add	r3, r1
 80057f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80057fc:	3301      	adds	r3, #1
 80057fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005802:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005806:	e00f      	b.n	8005828 <HAL_I2C_Init+0x1dc>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	1e58      	subs	r0, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6859      	ldr	r1, [r3, #4]
 8005810:	460b      	mov	r3, r1
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	0099      	lsls	r1, r3, #2
 8005818:	440b      	add	r3, r1
 800581a:	fbb0 f3f3 	udiv	r3, r0, r3
 800581e:	3301      	adds	r3, #1
 8005820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005824:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	6809      	ldr	r1, [r1, #0]
 800582c:	4313      	orrs	r3, r2
 800582e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69da      	ldr	r2, [r3, #28]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005856:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6911      	ldr	r1, [r2, #16]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	68d2      	ldr	r2, [r2, #12]
 8005862:	4311      	orrs	r1, r2
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6812      	ldr	r2, [r2, #0]
 8005868:	430b      	orrs	r3, r1
 800586a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	695a      	ldr	r2, [r3, #20]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0201 	orr.w	r2, r2, #1
 8005896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	000186a0 	.word	0x000186a0
 80058c4:	001e847f 	.word	0x001e847f
 80058c8:	003d08ff 	.word	0x003d08ff
 80058cc:	431bde83 	.word	0x431bde83
 80058d0:	10624dd3 	.word	0x10624dd3

080058d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af02      	add	r7, sp, #8
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	4608      	mov	r0, r1
 80058de:	4611      	mov	r1, r2
 80058e0:	461a      	mov	r2, r3
 80058e2:	4603      	mov	r3, r0
 80058e4:	817b      	strh	r3, [r7, #10]
 80058e6:	460b      	mov	r3, r1
 80058e8:	813b      	strh	r3, [r7, #8]
 80058ea:	4613      	mov	r3, r2
 80058ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058ee:	f7ff fb0b 	bl	8004f08 <HAL_GetTick>
 80058f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	f040 80d9 	bne.w	8005ab4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	2319      	movs	r3, #25
 8005908:	2201      	movs	r2, #1
 800590a:	496d      	ldr	r1, [pc, #436]	@ (8005ac0 <HAL_I2C_Mem_Write+0x1ec>)
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 fc8b 	bl	8006228 <I2C_WaitOnFlagUntilTimeout>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005918:	2302      	movs	r3, #2
 800591a:	e0cc      	b.n	8005ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_I2C_Mem_Write+0x56>
 8005926:	2302      	movs	r3, #2
 8005928:	e0c5      	b.n	8005ab6 <HAL_I2C_Mem_Write+0x1e2>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b01      	cmp	r3, #1
 800593e:	d007      	beq.n	8005950 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800595e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2221      	movs	r2, #33	@ 0x21
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2240      	movs	r2, #64	@ 0x40
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6a3a      	ldr	r2, [r7, #32]
 800597a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005980:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4a4d      	ldr	r2, [pc, #308]	@ (8005ac4 <HAL_I2C_Mem_Write+0x1f0>)
 8005990:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005992:	88f8      	ldrh	r0, [r7, #6]
 8005994:	893a      	ldrh	r2, [r7, #8]
 8005996:	8979      	ldrh	r1, [r7, #10]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	9301      	str	r3, [sp, #4]
 800599c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	4603      	mov	r3, r0
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 fac2 	bl	8005f2c <I2C_RequestMemoryWrite>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d052      	beq.n	8005a54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e081      	b.n	8005ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 fd50 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00d      	beq.n	80059de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d107      	bne.n	80059da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e06b      	b.n	8005ab6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e2:	781a      	ldrb	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d11b      	bne.n	8005a54 <HAL_I2C_Mem_Write+0x180>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d017      	beq.n	8005a54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a28:	781a      	ldrb	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1aa      	bne.n	80059b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 fd43 	bl	80064ec <I2C_WaitOnBTFFlagUntilTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00d      	beq.n	8005a88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d107      	bne.n	8005a84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e016      	b.n	8005ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	e000      	b.n	8005ab6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ab4:	2302      	movs	r3, #2
  }
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	00100002 	.word	0x00100002
 8005ac4:	ffff0000 	.word	0xffff0000

08005ac8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08c      	sub	sp, #48	@ 0x30
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	817b      	strh	r3, [r7, #10]
 8005ada:	460b      	mov	r3, r1
 8005adc:	813b      	strh	r3, [r7, #8]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ae2:	f7ff fa11 	bl	8004f08 <HAL_GetTick>
 8005ae6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	f040 8214 	bne.w	8005f1e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	2319      	movs	r3, #25
 8005afc:	2201      	movs	r2, #1
 8005afe:	497b      	ldr	r1, [pc, #492]	@ (8005cec <HAL_I2C_Mem_Read+0x224>)
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 fb91 	bl	8006228 <I2C_WaitOnFlagUntilTimeout>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e207      	b.n	8005f20 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_I2C_Mem_Read+0x56>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e200      	b.n	8005f20 <HAL_I2C_Mem_Read+0x458>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d007      	beq.n	8005b44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0201 	orr.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2222      	movs	r2, #34	@ 0x22
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2240      	movs	r2, #64	@ 0x40
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005b74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4a5b      	ldr	r2, [pc, #364]	@ (8005cf0 <HAL_I2C_Mem_Read+0x228>)
 8005b84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b86:	88f8      	ldrh	r0, [r7, #6]
 8005b88:	893a      	ldrh	r2, [r7, #8]
 8005b8a:	8979      	ldrh	r1, [r7, #10]
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	4603      	mov	r3, r0
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 fa5e 	bl	8006058 <I2C_RequestMemoryRead>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e1bc      	b.n	8005f20 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d113      	bne.n	8005bd6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bae:	2300      	movs	r3, #0
 8005bb0:	623b      	str	r3, [r7, #32]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	623b      	str	r3, [r7, #32]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	623b      	str	r3, [r7, #32]
 8005bc2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	e190      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d11b      	bne.n	8005c16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61fb      	str	r3, [r7, #28]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	61fb      	str	r3, [r7, #28]
 8005c02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e170      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d11b      	bne.n	8005c56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	61bb      	str	r3, [r7, #24]
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	e150      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c56:	2300      	movs	r3, #0
 8005c58:	617b      	str	r3, [r7, #20]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c6c:	e144      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	f200 80f1 	bhi.w	8005e5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d123      	bne.n	8005cc8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 fc79 	bl	800657c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e145      	b.n	8005f20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691a      	ldr	r2, [r3, #16]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cc6:	e117      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d14e      	bne.n	8005d6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	4906      	ldr	r1, [pc, #24]	@ (8005cf4 <HAL_I2C_Mem_Read+0x22c>)
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 faa4 	bl	8006228 <I2C_WaitOnFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d008      	beq.n	8005cf8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e11a      	b.n	8005f20 <HAL_I2C_Mem_Read+0x458>
 8005cea:	bf00      	nop
 8005cec:	00100002 	.word	0x00100002
 8005cf0:	ffff0000 	.word	0xffff0000
 8005cf4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d12:	b2d2      	uxtb	r2, r2
 8005d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d6c:	e0c4      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d74:	2200      	movs	r2, #0
 8005d76:	496c      	ldr	r1, [pc, #432]	@ (8005f28 <HAL_I2C_Mem_Read+0x460>)
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 fa55 	bl	8006228 <I2C_WaitOnFlagUntilTimeout>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e0cb      	b.n	8005f20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	4955      	ldr	r1, [pc, #340]	@ (8005f28 <HAL_I2C_Mem_Read+0x460>)
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 fa27 	bl	8006228 <I2C_WaitOnFlagUntilTimeout>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e09d      	b.n	8005f20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e38:	1c5a      	adds	r2, r3, #1
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e58:	e04e      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e5c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fb8c 	bl	800657c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e058      	b.n	8005f20 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	d124      	bne.n	8005ef8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d107      	bne.n	8005ec6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ec4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f47f aeb6 	bne.w	8005c6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e000      	b.n	8005f20 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005f1e:	2302      	movs	r3, #2
  }
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3728      	adds	r7, #40	@ 0x28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	00010004 	.word	0x00010004

08005f2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	4608      	mov	r0, r1
 8005f36:	4611      	mov	r1, r2
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	817b      	strh	r3, [r7, #10]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	813b      	strh	r3, [r7, #8]
 8005f42:	4613      	mov	r3, r2
 8005f44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 f960 	bl	8006228 <I2C_WaitOnFlagUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00d      	beq.n	8005f8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f7c:	d103      	bne.n	8005f86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e05f      	b.n	800604a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f8a:	897b      	ldrh	r3, [r7, #10]
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005f98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	6a3a      	ldr	r2, [r7, #32]
 8005f9e:	492d      	ldr	r1, [pc, #180]	@ (8006054 <I2C_RequestMemoryWrite+0x128>)
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f9bb 	bl	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e04c      	b.n	800604a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fc8:	6a39      	ldr	r1, [r7, #32]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 fa46 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00d      	beq.n	8005ff2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d107      	bne.n	8005fee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e02b      	b.n	800604a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ff2:	88fb      	ldrh	r3, [r7, #6]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d105      	bne.n	8006004 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ff8:	893b      	ldrh	r3, [r7, #8]
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	611a      	str	r2, [r3, #16]
 8006002:	e021      	b.n	8006048 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006004:	893b      	ldrh	r3, [r7, #8]
 8006006:	0a1b      	lsrs	r3, r3, #8
 8006008:	b29b      	uxth	r3, r3
 800600a:	b2da      	uxtb	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006014:	6a39      	ldr	r1, [r7, #32]
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 fa20 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00d      	beq.n	800603e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006026:	2b04      	cmp	r3, #4
 8006028:	d107      	bne.n	800603a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006038:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e005      	b.n	800604a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800603e:	893b      	ldrh	r3, [r7, #8]
 8006040:	b2da      	uxtb	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	00010002 	.word	0x00010002

08006058 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af02      	add	r7, sp, #8
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	4608      	mov	r0, r1
 8006062:	4611      	mov	r1, r2
 8006064:	461a      	mov	r2, r3
 8006066:	4603      	mov	r3, r0
 8006068:	817b      	strh	r3, [r7, #10]
 800606a:	460b      	mov	r3, r1
 800606c:	813b      	strh	r3, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006080:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006090:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	2200      	movs	r2, #0
 800609a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 f8c2 	bl	8006228 <I2C_WaitOnFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00d      	beq.n	80060c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060b8:	d103      	bne.n	80060c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e0aa      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060c6:	897b      	ldrh	r3, [r7, #10]
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	461a      	mov	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	6a3a      	ldr	r2, [r7, #32]
 80060da:	4952      	ldr	r1, [pc, #328]	@ (8006224 <I2C_RequestMemoryRead+0x1cc>)
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f91d 	bl	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e097      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006104:	6a39      	ldr	r1, [r7, #32]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 f9a8 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00d      	beq.n	800612e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006116:	2b04      	cmp	r3, #4
 8006118:	d107      	bne.n	800612a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006128:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e076      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800612e:	88fb      	ldrh	r3, [r7, #6]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d105      	bne.n	8006140 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006134:	893b      	ldrh	r3, [r7, #8]
 8006136:	b2da      	uxtb	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	611a      	str	r2, [r3, #16]
 800613e:	e021      	b.n	8006184 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006140:	893b      	ldrh	r3, [r7, #8]
 8006142:	0a1b      	lsrs	r3, r3, #8
 8006144:	b29b      	uxth	r3, r3
 8006146:	b2da      	uxtb	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800614e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006150:	6a39      	ldr	r1, [r7, #32]
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 f982 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00d      	beq.n	800617a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006162:	2b04      	cmp	r3, #4
 8006164:	d107      	bne.n	8006176 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006174:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e050      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800617a:	893b      	ldrh	r3, [r7, #8]
 800617c:	b2da      	uxtb	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006186:	6a39      	ldr	r1, [r7, #32]
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 f967 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00d      	beq.n	80061b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006198:	2b04      	cmp	r3, #4
 800619a:	d107      	bne.n	80061ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e035      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 f82b 	bl	8006228 <I2C_WaitOnFlagUntilTimeout>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00d      	beq.n	80061f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061e6:	d103      	bne.n	80061f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e013      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80061f4:	897b      	ldrh	r3, [r7, #10]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	f043 0301 	orr.w	r3, r3, #1
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006206:	6a3a      	ldr	r2, [r7, #32]
 8006208:	4906      	ldr	r1, [pc, #24]	@ (8006224 <I2C_RequestMemoryRead+0x1cc>)
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 f886 	bl	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	00010002 	.word	0x00010002

08006228 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	4613      	mov	r3, r2
 8006236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006238:	e048      	b.n	80062cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006240:	d044      	beq.n	80062cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006242:	f7fe fe61 	bl	8004f08 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	429a      	cmp	r2, r3
 8006250:	d302      	bcc.n	8006258 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d139      	bne.n	80062cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	0c1b      	lsrs	r3, r3, #16
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b01      	cmp	r3, #1
 8006260:	d10d      	bne.n	800627e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	43da      	mvns	r2, r3
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	4013      	ands	r3, r2
 800626e:	b29b      	uxth	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	bf0c      	ite	eq
 8006274:	2301      	moveq	r3, #1
 8006276:	2300      	movne	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	461a      	mov	r2, r3
 800627c:	e00c      	b.n	8006298 <I2C_WaitOnFlagUntilTimeout+0x70>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	43da      	mvns	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	4013      	ands	r3, r2
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	bf0c      	ite	eq
 8006290:	2301      	moveq	r3, #1
 8006292:	2300      	movne	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	461a      	mov	r2, r3
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	429a      	cmp	r2, r3
 800629c:	d116      	bne.n	80062cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b8:	f043 0220 	orr.w	r2, r3, #32
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e023      	b.n	8006314 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	0c1b      	lsrs	r3, r3, #16
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d10d      	bne.n	80062f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	43da      	mvns	r2, r3
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	4013      	ands	r3, r2
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	bf0c      	ite	eq
 80062e8:	2301      	moveq	r3, #1
 80062ea:	2300      	movne	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	e00c      	b.n	800630c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	43da      	mvns	r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	4013      	ands	r3, r2
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	bf0c      	ite	eq
 8006304:	2301      	moveq	r3, #1
 8006306:	2300      	movne	r3, #0
 8006308:	b2db      	uxtb	r3, r3
 800630a:	461a      	mov	r2, r3
 800630c:	79fb      	ldrb	r3, [r7, #7]
 800630e:	429a      	cmp	r2, r3
 8006310:	d093      	beq.n	800623a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800632a:	e071      	b.n	8006410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800633a:	d123      	bne.n	8006384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800634a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006354:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006370:	f043 0204 	orr.w	r2, r3, #4
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e067      	b.n	8006454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638a:	d041      	beq.n	8006410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800638c:	f7fe fdbc 	bl	8004f08 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	429a      	cmp	r2, r3
 800639a:	d302      	bcc.n	80063a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d136      	bne.n	8006410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	0c1b      	lsrs	r3, r3, #16
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d10c      	bne.n	80063c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	43da      	mvns	r2, r3
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4013      	ands	r3, r2
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	bf14      	ite	ne
 80063be:	2301      	movne	r3, #1
 80063c0:	2300      	moveq	r3, #0
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	e00b      	b.n	80063de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	43da      	mvns	r2, r3
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	4013      	ands	r3, r2
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	bf14      	ite	ne
 80063d8:	2301      	movne	r3, #1
 80063da:	2300      	moveq	r3, #0
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d016      	beq.n	8006410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fc:	f043 0220 	orr.w	r2, r3, #32
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e021      	b.n	8006454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	0c1b      	lsrs	r3, r3, #16
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b01      	cmp	r3, #1
 8006418:	d10c      	bne.n	8006434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	43da      	mvns	r2, r3
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	4013      	ands	r3, r2
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	bf14      	ite	ne
 800642c:	2301      	movne	r3, #1
 800642e:	2300      	moveq	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	e00b      	b.n	800644c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	43da      	mvns	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4013      	ands	r3, r2
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	bf14      	ite	ne
 8006446:	2301      	movne	r3, #1
 8006448:	2300      	moveq	r3, #0
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	f47f af6d 	bne.w	800632c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006468:	e034      	b.n	80064d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 f8e3 	bl	8006636 <I2C_IsAcknowledgeFailed>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e034      	b.n	80064e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006480:	d028      	beq.n	80064d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006482:	f7fe fd41 	bl	8004f08 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	429a      	cmp	r2, r3
 8006490:	d302      	bcc.n	8006498 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d11d      	bne.n	80064d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a2:	2b80      	cmp	r3, #128	@ 0x80
 80064a4:	d016      	beq.n	80064d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c0:	f043 0220 	orr.w	r2, r3, #32
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e007      	b.n	80064e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064de:	2b80      	cmp	r3, #128	@ 0x80
 80064e0:	d1c3      	bne.n	800646a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064f8:	e034      	b.n	8006564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 f89b 	bl	8006636 <I2C_IsAcknowledgeFailed>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e034      	b.n	8006574 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006510:	d028      	beq.n	8006564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006512:	f7fe fcf9 	bl	8004f08 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11d      	bne.n	8006564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	f003 0304 	and.w	r3, r3, #4
 8006532:	2b04      	cmp	r3, #4
 8006534:	d016      	beq.n	8006564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006550:	f043 0220 	orr.w	r2, r3, #32
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e007      	b.n	8006574 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f003 0304 	and.w	r3, r3, #4
 800656e:	2b04      	cmp	r3, #4
 8006570:	d1c3      	bne.n	80064fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006588:	e049      	b.n	800661e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	f003 0310 	and.w	r3, r3, #16
 8006594:	2b10      	cmp	r3, #16
 8006596:	d119      	bne.n	80065cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f06f 0210 	mvn.w	r2, #16
 80065a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e030      	b.n	800662e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065cc:	f7fe fc9c 	bl	8004f08 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d302      	bcc.n	80065e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d11d      	bne.n	800661e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ec:	2b40      	cmp	r3, #64	@ 0x40
 80065ee:	d016      	beq.n	800661e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660a:	f043 0220 	orr.w	r2, r3, #32
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e007      	b.n	800662e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006628:	2b40      	cmp	r3, #64	@ 0x40
 800662a:	d1ae      	bne.n	800658a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006636:	b480      	push	{r7}
 8006638:	b083      	sub	sp, #12
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006648:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800664c:	d11b      	bne.n	8006686 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006656:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006672:	f043 0204 	orr.w	r2, r3, #4
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e000      	b.n	8006688 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e267      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d075      	beq.n	800679e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80066b2:	4b88      	ldr	r3, [pc, #544]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f003 030c 	and.w	r3, r3, #12
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d00c      	beq.n	80066d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066be:	4b85      	ldr	r3, [pc, #532]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d112      	bne.n	80066f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066ca:	4b82      	ldr	r3, [pc, #520]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066d6:	d10b      	bne.n	80066f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066d8:	4b7e      	ldr	r3, [pc, #504]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d05b      	beq.n	800679c <HAL_RCC_OscConfig+0x108>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d157      	bne.n	800679c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e242      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066f8:	d106      	bne.n	8006708 <HAL_RCC_OscConfig+0x74>
 80066fa:	4b76      	ldr	r3, [pc, #472]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a75      	ldr	r2, [pc, #468]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	e01d      	b.n	8006744 <HAL_RCC_OscConfig+0xb0>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006710:	d10c      	bne.n	800672c <HAL_RCC_OscConfig+0x98>
 8006712:	4b70      	ldr	r3, [pc, #448]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a6f      	ldr	r2, [pc, #444]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	4b6d      	ldr	r3, [pc, #436]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a6c      	ldr	r2, [pc, #432]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	e00b      	b.n	8006744 <HAL_RCC_OscConfig+0xb0>
 800672c:	4b69      	ldr	r3, [pc, #420]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a68      	ldr	r2, [pc, #416]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	4b66      	ldr	r3, [pc, #408]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a65      	ldr	r2, [pc, #404]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 800673e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d013      	beq.n	8006774 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800674c:	f7fe fbdc 	bl	8004f08 <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006754:	f7fe fbd8 	bl	8004f08 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b64      	cmp	r3, #100	@ 0x64
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e207      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006766:	4b5b      	ldr	r3, [pc, #364]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0f0      	beq.n	8006754 <HAL_RCC_OscConfig+0xc0>
 8006772:	e014      	b.n	800679e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006774:	f7fe fbc8 	bl	8004f08 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800677c:	f7fe fbc4 	bl	8004f08 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b64      	cmp	r3, #100	@ 0x64
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e1f3      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800678e:	4b51      	ldr	r3, [pc, #324]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f0      	bne.n	800677c <HAL_RCC_OscConfig+0xe8>
 800679a:	e000      	b.n	800679e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800679c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d063      	beq.n	8006872 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80067aa:	4b4a      	ldr	r3, [pc, #296]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 030c 	and.w	r3, r3, #12
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00b      	beq.n	80067ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067b6:	4b47      	ldr	r3, [pc, #284]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d11c      	bne.n	80067fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067c2:	4b44      	ldr	r3, [pc, #272]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d116      	bne.n	80067fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ce:	4b41      	ldr	r3, [pc, #260]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d005      	beq.n	80067e6 <HAL_RCC_OscConfig+0x152>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d001      	beq.n	80067e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e1c7      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067e6:	4b3b      	ldr	r3, [pc, #236]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	4937      	ldr	r1, [pc, #220]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067fa:	e03a      	b.n	8006872 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d020      	beq.n	8006846 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006804:	4b34      	ldr	r3, [pc, #208]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006806:	2201      	movs	r2, #1
 8006808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800680a:	f7fe fb7d 	bl	8004f08 <HAL_GetTick>
 800680e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006810:	e008      	b.n	8006824 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006812:	f7fe fb79 	bl	8004f08 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d901      	bls.n	8006824 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e1a8      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006824:	4b2b      	ldr	r3, [pc, #172]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0f0      	beq.n	8006812 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006830:	4b28      	ldr	r3, [pc, #160]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	00db      	lsls	r3, r3, #3
 800683e:	4925      	ldr	r1, [pc, #148]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006840:	4313      	orrs	r3, r2
 8006842:	600b      	str	r3, [r1, #0]
 8006844:	e015      	b.n	8006872 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006846:	4b24      	ldr	r3, [pc, #144]	@ (80068d8 <HAL_RCC_OscConfig+0x244>)
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800684c:	f7fe fb5c 	bl	8004f08 <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006852:	e008      	b.n	8006866 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006854:	f7fe fb58 	bl	8004f08 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e187      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006866:	4b1b      	ldr	r3, [pc, #108]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1f0      	bne.n	8006854 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d036      	beq.n	80068ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d016      	beq.n	80068b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006886:	4b15      	ldr	r3, [pc, #84]	@ (80068dc <HAL_RCC_OscConfig+0x248>)
 8006888:	2201      	movs	r2, #1
 800688a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688c:	f7fe fb3c 	bl	8004f08 <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006894:	f7fe fb38 	bl	8004f08 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e167      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068a6:	4b0b      	ldr	r3, [pc, #44]	@ (80068d4 <HAL_RCC_OscConfig+0x240>)
 80068a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0f0      	beq.n	8006894 <HAL_RCC_OscConfig+0x200>
 80068b2:	e01b      	b.n	80068ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068b4:	4b09      	ldr	r3, [pc, #36]	@ (80068dc <HAL_RCC_OscConfig+0x248>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ba:	f7fe fb25 	bl	8004f08 <HAL_GetTick>
 80068be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068c0:	e00e      	b.n	80068e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068c2:	f7fe fb21 	bl	8004f08 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d907      	bls.n	80068e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e150      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
 80068d4:	40023800 	.word	0x40023800
 80068d8:	42470000 	.word	0x42470000
 80068dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068e0:	4b88      	ldr	r3, [pc, #544]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 80068e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1ea      	bne.n	80068c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8097 	beq.w	8006a28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068fa:	2300      	movs	r3, #0
 80068fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068fe:	4b81      	ldr	r3, [pc, #516]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10f      	bne.n	800692a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800690a:	2300      	movs	r3, #0
 800690c:	60bb      	str	r3, [r7, #8]
 800690e:	4b7d      	ldr	r3, [pc, #500]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006912:	4a7c      	ldr	r2, [pc, #496]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006918:	6413      	str	r3, [r2, #64]	@ 0x40
 800691a:	4b7a      	ldr	r3, [pc, #488]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 800691c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006922:	60bb      	str	r3, [r7, #8]
 8006924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006926:	2301      	movs	r3, #1
 8006928:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800692a:	4b77      	ldr	r3, [pc, #476]	@ (8006b08 <HAL_RCC_OscConfig+0x474>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006932:	2b00      	cmp	r3, #0
 8006934:	d118      	bne.n	8006968 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006936:	4b74      	ldr	r3, [pc, #464]	@ (8006b08 <HAL_RCC_OscConfig+0x474>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a73      	ldr	r2, [pc, #460]	@ (8006b08 <HAL_RCC_OscConfig+0x474>)
 800693c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006942:	f7fe fae1 	bl	8004f08 <HAL_GetTick>
 8006946:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006948:	e008      	b.n	800695c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800694a:	f7fe fadd 	bl	8004f08 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d901      	bls.n	800695c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e10c      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800695c:	4b6a      	ldr	r3, [pc, #424]	@ (8006b08 <HAL_RCC_OscConfig+0x474>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006964:	2b00      	cmp	r3, #0
 8006966:	d0f0      	beq.n	800694a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d106      	bne.n	800697e <HAL_RCC_OscConfig+0x2ea>
 8006970:	4b64      	ldr	r3, [pc, #400]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006974:	4a63      	ldr	r2, [pc, #396]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006976:	f043 0301 	orr.w	r3, r3, #1
 800697a:	6713      	str	r3, [r2, #112]	@ 0x70
 800697c:	e01c      	b.n	80069b8 <HAL_RCC_OscConfig+0x324>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	2b05      	cmp	r3, #5
 8006984:	d10c      	bne.n	80069a0 <HAL_RCC_OscConfig+0x30c>
 8006986:	4b5f      	ldr	r3, [pc, #380]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800698a:	4a5e      	ldr	r2, [pc, #376]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 800698c:	f043 0304 	orr.w	r3, r3, #4
 8006990:	6713      	str	r3, [r2, #112]	@ 0x70
 8006992:	4b5c      	ldr	r3, [pc, #368]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006996:	4a5b      	ldr	r2, [pc, #364]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006998:	f043 0301 	orr.w	r3, r3, #1
 800699c:	6713      	str	r3, [r2, #112]	@ 0x70
 800699e:	e00b      	b.n	80069b8 <HAL_RCC_OscConfig+0x324>
 80069a0:	4b58      	ldr	r3, [pc, #352]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 80069a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a4:	4a57      	ldr	r2, [pc, #348]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 80069a6:	f023 0301 	bic.w	r3, r3, #1
 80069aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80069ac:	4b55      	ldr	r3, [pc, #340]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 80069ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b0:	4a54      	ldr	r2, [pc, #336]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 80069b2:	f023 0304 	bic.w	r3, r3, #4
 80069b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d015      	beq.n	80069ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c0:	f7fe faa2 	bl	8004f08 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069c6:	e00a      	b.n	80069de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069c8:	f7fe fa9e 	bl	8004f08 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e0cb      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069de:	4b49      	ldr	r3, [pc, #292]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 80069e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0ee      	beq.n	80069c8 <HAL_RCC_OscConfig+0x334>
 80069ea:	e014      	b.n	8006a16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069ec:	f7fe fa8c 	bl	8004f08 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069f2:	e00a      	b.n	8006a0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069f4:	f7fe fa88 	bl	8004f08 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e0b5      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1ee      	bne.n	80069f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a16:	7dfb      	ldrb	r3, [r7, #23]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d105      	bne.n	8006a28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a1c:	4b39      	ldr	r3, [pc, #228]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a20:	4a38      	ldr	r2, [pc, #224]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006a22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80a1 	beq.w	8006b74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a32:	4b34      	ldr	r3, [pc, #208]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 030c 	and.w	r3, r3, #12
 8006a3a:	2b08      	cmp	r3, #8
 8006a3c:	d05c      	beq.n	8006af8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d141      	bne.n	8006aca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a46:	4b31      	ldr	r3, [pc, #196]	@ (8006b0c <HAL_RCC_OscConfig+0x478>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a4c:	f7fe fa5c 	bl	8004f08 <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a54:	f7fe fa58 	bl	8004f08 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e087      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a66:	4b27      	ldr	r3, [pc, #156]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f0      	bne.n	8006a54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	69da      	ldr	r2, [r3, #28]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a80:	019b      	lsls	r3, r3, #6
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a88:	085b      	lsrs	r3, r3, #1
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	041b      	lsls	r3, r3, #16
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a94:	061b      	lsls	r3, r3, #24
 8006a96:	491b      	ldr	r1, [pc, #108]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8006b0c <HAL_RCC_OscConfig+0x478>)
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa2:	f7fe fa31 	bl	8004f08 <HAL_GetTick>
 8006aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aa8:	e008      	b.n	8006abc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aaa:	f7fe fa2d 	bl	8004f08 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d901      	bls.n	8006abc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e05c      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006abc:	4b11      	ldr	r3, [pc, #68]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0f0      	beq.n	8006aaa <HAL_RCC_OscConfig+0x416>
 8006ac8:	e054      	b.n	8006b74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aca:	4b10      	ldr	r3, [pc, #64]	@ (8006b0c <HAL_RCC_OscConfig+0x478>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad0:	f7fe fa1a 	bl	8004f08 <HAL_GetTick>
 8006ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ad8:	f7fe fa16 	bl	8004f08 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e045      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aea:	4b06      	ldr	r3, [pc, #24]	@ (8006b04 <HAL_RCC_OscConfig+0x470>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1f0      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x444>
 8006af6:	e03d      	b.n	8006b74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d107      	bne.n	8006b10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e038      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
 8006b04:	40023800 	.word	0x40023800
 8006b08:	40007000 	.word	0x40007000
 8006b0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b10:	4b1b      	ldr	r3, [pc, #108]	@ (8006b80 <HAL_RCC_OscConfig+0x4ec>)
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d028      	beq.n	8006b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d121      	bne.n	8006b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d11a      	bne.n	8006b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b40:	4013      	ands	r3, r2
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d111      	bne.n	8006b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b56:	085b      	lsrs	r3, r3, #1
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d107      	bne.n	8006b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d001      	beq.n	8006b74 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e000      	b.n	8006b76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	40023800 	.word	0x40023800

08006b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e0cc      	b.n	8006d32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b98:	4b68      	ldr	r3, [pc, #416]	@ (8006d3c <HAL_RCC_ClockConfig+0x1b8>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d90c      	bls.n	8006bc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ba6:	4b65      	ldr	r3, [pc, #404]	@ (8006d3c <HAL_RCC_ClockConfig+0x1b8>)
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	b2d2      	uxtb	r2, r2
 8006bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bae:	4b63      	ldr	r3, [pc, #396]	@ (8006d3c <HAL_RCC_ClockConfig+0x1b8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0307 	and.w	r3, r3, #7
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d001      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e0b8      	b.n	8006d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d020      	beq.n	8006c0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d005      	beq.n	8006be4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bd8:	4b59      	ldr	r3, [pc, #356]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	4a58      	ldr	r2, [pc, #352]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006bde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006be2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0308 	and.w	r3, r3, #8
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d005      	beq.n	8006bfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bf0:	4b53      	ldr	r3, [pc, #332]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	4a52      	ldr	r2, [pc, #328]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006bfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bfc:	4b50      	ldr	r3, [pc, #320]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	494d      	ldr	r1, [pc, #308]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d044      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d107      	bne.n	8006c32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c22:	4b47      	ldr	r3, [pc, #284]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d119      	bne.n	8006c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e07f      	b.n	8006d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d003      	beq.n	8006c42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d107      	bne.n	8006c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c42:	4b3f      	ldr	r3, [pc, #252]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d109      	bne.n	8006c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e06f      	b.n	8006d32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c52:	4b3b      	ldr	r3, [pc, #236]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e067      	b.n	8006d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c62:	4b37      	ldr	r3, [pc, #220]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f023 0203 	bic.w	r2, r3, #3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	4934      	ldr	r1, [pc, #208]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c74:	f7fe f948 	bl	8004f08 <HAL_GetTick>
 8006c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c7a:	e00a      	b.n	8006c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c7c:	f7fe f944 	bl	8004f08 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e04f      	b.n	8006d32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c92:	4b2b      	ldr	r3, [pc, #172]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f003 020c 	and.w	r2, r3, #12
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d1eb      	bne.n	8006c7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ca4:	4b25      	ldr	r3, [pc, #148]	@ (8006d3c <HAL_RCC_ClockConfig+0x1b8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d20c      	bcs.n	8006ccc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cb2:	4b22      	ldr	r3, [pc, #136]	@ (8006d3c <HAL_RCC_ClockConfig+0x1b8>)
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cba:	4b20      	ldr	r3, [pc, #128]	@ (8006d3c <HAL_RCC_ClockConfig+0x1b8>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0307 	and.w	r3, r3, #7
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d001      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e032      	b.n	8006d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d008      	beq.n	8006cea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cd8:	4b19      	ldr	r3, [pc, #100]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	4916      	ldr	r1, [pc, #88]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0308 	and.w	r3, r3, #8
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d009      	beq.n	8006d0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cf6:	4b12      	ldr	r3, [pc, #72]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	00db      	lsls	r3, r3, #3
 8006d04:	490e      	ldr	r1, [pc, #56]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d0a:	f000 f82d 	bl	8006d68 <HAL_RCC_GetSysClockFreq>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	4b0b      	ldr	r3, [pc, #44]	@ (8006d40 <HAL_RCC_ClockConfig+0x1bc>)
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	091b      	lsrs	r3, r3, #4
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	490a      	ldr	r1, [pc, #40]	@ (8006d44 <HAL_RCC_ClockConfig+0x1c0>)
 8006d1c:	5ccb      	ldrb	r3, [r1, r3]
 8006d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d22:	4a09      	ldr	r2, [pc, #36]	@ (8006d48 <HAL_RCC_ClockConfig+0x1c4>)
 8006d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006d26:	4b09      	ldr	r3, [pc, #36]	@ (8006d4c <HAL_RCC_ClockConfig+0x1c8>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fd fd34 	bl	8004798 <HAL_InitTick>

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	40023c00 	.word	0x40023c00
 8006d40:	40023800 	.word	0x40023800
 8006d44:	08010f14 	.word	0x08010f14
 8006d48:	20000294 	.word	0x20000294
 8006d4c:	20000298 	.word	0x20000298

08006d50 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006d50:	b480      	push	{r7}
 8006d52:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006d54:	4b03      	ldr	r3, [pc, #12]	@ (8006d64 <HAL_RCC_EnableCSS+0x14>)
 8006d56:	2201      	movs	r2, #1
 8006d58:	601a      	str	r2, [r3, #0]
}
 8006d5a:	bf00      	nop
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	4247004c 	.word	0x4247004c

08006d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d6c:	b090      	sub	sp, #64	@ 0x40
 8006d6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d80:	4b59      	ldr	r3, [pc, #356]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 030c 	and.w	r3, r3, #12
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d00d      	beq.n	8006da8 <HAL_RCC_GetSysClockFreq+0x40>
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	f200 80a1 	bhi.w	8006ed4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <HAL_RCC_GetSysClockFreq+0x34>
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d003      	beq.n	8006da2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d9a:	e09b      	b.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d9c:	4b53      	ldr	r3, [pc, #332]	@ (8006eec <HAL_RCC_GetSysClockFreq+0x184>)
 8006d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006da0:	e09b      	b.n	8006eda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006da2:	4b53      	ldr	r3, [pc, #332]	@ (8006ef0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006da4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006da6:	e098      	b.n	8006eda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006da8:	4b4f      	ldr	r3, [pc, #316]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006db0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006db2:	4b4d      	ldr	r3, [pc, #308]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d028      	beq.n	8006e10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	099b      	lsrs	r3, r3, #6
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	623b      	str	r3, [r7, #32]
 8006dc8:	627a      	str	r2, [r7, #36]	@ 0x24
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	4b47      	ldr	r3, [pc, #284]	@ (8006ef0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006dd4:	fb03 f201 	mul.w	r2, r3, r1
 8006dd8:	2300      	movs	r3, #0
 8006dda:	fb00 f303 	mul.w	r3, r0, r3
 8006dde:	4413      	add	r3, r2
 8006de0:	4a43      	ldr	r2, [pc, #268]	@ (8006ef0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006de2:	fba0 1202 	umull	r1, r2, r0, r2
 8006de6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006de8:	460a      	mov	r2, r1
 8006dea:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006dec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dee:	4413      	add	r3, r2
 8006df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df4:	2200      	movs	r2, #0
 8006df6:	61bb      	str	r3, [r7, #24]
 8006df8:	61fa      	str	r2, [r7, #28]
 8006dfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006e02:	f7f9 fea9 	bl	8000b58 <__aeabi_uldivmod>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e0e:	e053      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e10:	4b35      	ldr	r3, [pc, #212]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	099b      	lsrs	r3, r3, #6
 8006e16:	2200      	movs	r2, #0
 8006e18:	613b      	str	r3, [r7, #16]
 8006e1a:	617a      	str	r2, [r7, #20]
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006e22:	f04f 0b00 	mov.w	fp, #0
 8006e26:	4652      	mov	r2, sl
 8006e28:	465b      	mov	r3, fp
 8006e2a:	f04f 0000 	mov.w	r0, #0
 8006e2e:	f04f 0100 	mov.w	r1, #0
 8006e32:	0159      	lsls	r1, r3, #5
 8006e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e38:	0150      	lsls	r0, r2, #5
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	ebb2 080a 	subs.w	r8, r2, sl
 8006e42:	eb63 090b 	sbc.w	r9, r3, fp
 8006e46:	f04f 0200 	mov.w	r2, #0
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006e52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006e56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006e5a:	ebb2 0408 	subs.w	r4, r2, r8
 8006e5e:	eb63 0509 	sbc.w	r5, r3, r9
 8006e62:	f04f 0200 	mov.w	r2, #0
 8006e66:	f04f 0300 	mov.w	r3, #0
 8006e6a:	00eb      	lsls	r3, r5, #3
 8006e6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e70:	00e2      	lsls	r2, r4, #3
 8006e72:	4614      	mov	r4, r2
 8006e74:	461d      	mov	r5, r3
 8006e76:	eb14 030a 	adds.w	r3, r4, sl
 8006e7a:	603b      	str	r3, [r7, #0]
 8006e7c:	eb45 030b 	adc.w	r3, r5, fp
 8006e80:	607b      	str	r3, [r7, #4]
 8006e82:	f04f 0200 	mov.w	r2, #0
 8006e86:	f04f 0300 	mov.w	r3, #0
 8006e8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e8e:	4629      	mov	r1, r5
 8006e90:	028b      	lsls	r3, r1, #10
 8006e92:	4621      	mov	r1, r4
 8006e94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e98:	4621      	mov	r1, r4
 8006e9a:	028a      	lsls	r2, r1, #10
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	60bb      	str	r3, [r7, #8]
 8006ea6:	60fa      	str	r2, [r7, #12]
 8006ea8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006eac:	f7f9 fe54 	bl	8000b58 <__aeabi_uldivmod>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	0c1b      	lsrs	r3, r3, #16
 8006ebe:	f003 0303 	and.w	r3, r3, #3
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006ec8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006ed2:	e002      	b.n	8006eda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ed4:	4b05      	ldr	r3, [pc, #20]	@ (8006eec <HAL_RCC_GetSysClockFreq+0x184>)
 8006ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3740      	adds	r7, #64	@ 0x40
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ee6:	bf00      	nop
 8006ee8:	40023800 	.word	0x40023800
 8006eec:	00f42400 	.word	0x00f42400
 8006ef0:	017d7840 	.word	0x017d7840

08006ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ef8:	4b03      	ldr	r3, [pc, #12]	@ (8006f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8006efa:	681b      	ldr	r3, [r3, #0]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	20000294 	.word	0x20000294

08006f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f10:	f7ff fff0 	bl	8006ef4 <HAL_RCC_GetHCLKFreq>
 8006f14:	4602      	mov	r2, r0
 8006f16:	4b05      	ldr	r3, [pc, #20]	@ (8006f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	0a9b      	lsrs	r3, r3, #10
 8006f1c:	f003 0307 	and.w	r3, r3, #7
 8006f20:	4903      	ldr	r1, [pc, #12]	@ (8006f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f22:	5ccb      	ldrb	r3, [r1, r3]
 8006f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	40023800 	.word	0x40023800
 8006f30:	08010f24 	.word	0x08010f24

08006f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f38:	f7ff ffdc 	bl	8006ef4 <HAL_RCC_GetHCLKFreq>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	4b05      	ldr	r3, [pc, #20]	@ (8006f54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	0b5b      	lsrs	r3, r3, #13
 8006f44:	f003 0307 	and.w	r3, r3, #7
 8006f48:	4903      	ldr	r1, [pc, #12]	@ (8006f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f4a:	5ccb      	ldrb	r3, [r1, r3]
 8006f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	40023800 	.word	0x40023800
 8006f58:	08010f24 	.word	0x08010f24

08006f5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	220f      	movs	r2, #15
 8006f6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f6c:	4b12      	ldr	r3, [pc, #72]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x5c>)
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f003 0203 	and.w	r2, r3, #3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f78:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x5c>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f84:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x5c>)
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006f90:	4b09      	ldr	r3, [pc, #36]	@ (8006fb8 <HAL_RCC_GetClockConfig+0x5c>)
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	08db      	lsrs	r3, r3, #3
 8006f96:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f9e:	4b07      	ldr	r3, [pc, #28]	@ (8006fbc <HAL_RCC_GetClockConfig+0x60>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0207 	and.w	r2, r3, #7
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	601a      	str	r2, [r3, #0]
}
 8006faa:	bf00      	nop
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	40023800 	.word	0x40023800
 8006fbc:	40023c00 	.word	0x40023c00

08006fc0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006fc4:	4b06      	ldr	r3, [pc, #24]	@ (8006fe0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fcc:	2b80      	cmp	r3, #128	@ 0x80
 8006fce:	d104      	bne.n	8006fda <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006fd0:	f000 f80a 	bl	8006fe8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006fd4:	4b03      	ldr	r3, [pc, #12]	@ (8006fe4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006fd6:	2280      	movs	r2, #128	@ 0x80
 8006fd8:	701a      	strb	r2, [r3, #0]
  }
}
 8006fda:	bf00      	nop
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	40023800 	.word	0x40023800
 8006fe4:	4002380e 	.word	0x4002380e

08006fe8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006fec:	bf00      	nop
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e07b      	b.n	8007100 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700c:	2b00      	cmp	r3, #0
 800700e:	d108      	bne.n	8007022 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007018:	d009      	beq.n	800702e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	61da      	str	r2, [r3, #28]
 8007020:	e005      	b.n	800702e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b00      	cmp	r3, #0
 800703e:	d106      	bne.n	800704e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7fd fb31 	bl	80046b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2202      	movs	r2, #2
 8007052:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007064:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007080:	431a      	orrs	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	431a      	orrs	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070a8:	431a      	orrs	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070b2:	ea42 0103 	orr.w	r1, r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	0c1b      	lsrs	r3, r3, #16
 80070cc:	f003 0104 	and.w	r1, r3, #4
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d4:	f003 0210 	and.w	r2, r3, #16
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	69da      	ldr	r2, [r3, #28]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	4613      	mov	r3, r2
 8007116:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007118:	f7fd fef6 	bl	8004f08 <HAL_GetTick>
 800711c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800711e:	88fb      	ldrh	r3, [r7, #6]
 8007120:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b01      	cmp	r3, #1
 800712c:	d001      	beq.n	8007132 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800712e:	2302      	movs	r3, #2
 8007130:	e12a      	b.n	8007388 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <HAL_SPI_Transmit+0x36>
 8007138:	88fb      	ldrh	r3, [r7, #6]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e122      	b.n	8007388 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_SPI_Transmit+0x48>
 800714c:	2302      	movs	r3, #2
 800714e:	e11b      	b.n	8007388 <HAL_SPI_Transmit+0x280>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2203      	movs	r2, #3
 800715c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	88fa      	ldrh	r2, [r7, #6]
 8007170:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	88fa      	ldrh	r2, [r7, #6]
 8007176:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800719e:	d10f      	bne.n	80071c0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ca:	2b40      	cmp	r3, #64	@ 0x40
 80071cc:	d007      	beq.n	80071de <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071e6:	d152      	bne.n	800728e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <HAL_SPI_Transmit+0xee>
 80071f0:	8b7b      	ldrh	r3, [r7, #26]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d145      	bne.n	8007282 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071fa:	881a      	ldrh	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007206:	1c9a      	adds	r2, r3, #2
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007210:	b29b      	uxth	r3, r3
 8007212:	3b01      	subs	r3, #1
 8007214:	b29a      	uxth	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800721a:	e032      	b.n	8007282 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b02      	cmp	r3, #2
 8007228:	d112      	bne.n	8007250 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800722e:	881a      	ldrh	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723a:	1c9a      	adds	r2, r3, #2
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007244:	b29b      	uxth	r3, r3
 8007246:	3b01      	subs	r3, #1
 8007248:	b29a      	uxth	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800724e:	e018      	b.n	8007282 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007250:	f7fd fe5a 	bl	8004f08 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d803      	bhi.n	8007268 <HAL_SPI_Transmit+0x160>
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007266:	d102      	bne.n	800726e <HAL_SPI_Transmit+0x166>
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d109      	bne.n	8007282 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e082      	b.n	8007388 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1c7      	bne.n	800721c <HAL_SPI_Transmit+0x114>
 800728c:	e053      	b.n	8007336 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <HAL_SPI_Transmit+0x194>
 8007296:	8b7b      	ldrh	r3, [r7, #26]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d147      	bne.n	800732c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	330c      	adds	r3, #12
 80072a6:	7812      	ldrb	r2, [r2, #0]
 80072a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80072c2:	e033      	b.n	800732c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d113      	bne.n	80072fa <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	330c      	adds	r3, #12
 80072dc:	7812      	ldrb	r2, [r2, #0]
 80072de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	3b01      	subs	r3, #1
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80072f8:	e018      	b.n	800732c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072fa:	f7fd fe05 	bl	8004f08 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	429a      	cmp	r2, r3
 8007308:	d803      	bhi.n	8007312 <HAL_SPI_Transmit+0x20a>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007310:	d102      	bne.n	8007318 <HAL_SPI_Transmit+0x210>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d109      	bne.n	800732c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e02d      	b.n	8007388 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007330:	b29b      	uxth	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1c6      	bne.n	80072c4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007336:	69fa      	ldr	r2, [r7, #28]
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 fbe6 	bl	8007b0c <SPI_EndRxTxTransaction>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2220      	movs	r2, #32
 800734a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10a      	bne.n	800736a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	617b      	str	r3, [r7, #20]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	617b      	str	r3, [r7, #20]
 8007368:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e000      	b.n	8007388 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007386:	2300      	movs	r3, #0
  }
}
 8007388:	4618      	mov	r0, r3
 800738a:	3720      	adds	r7, #32
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b088      	sub	sp, #32
 8007394:	af02      	add	r7, sp, #8
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	4613      	mov	r3, r2
 800739e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d001      	beq.n	80073b0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80073ac:	2302      	movs	r3, #2
 80073ae:	e104      	b.n	80075ba <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073b8:	d112      	bne.n	80073e0 <HAL_SPI_Receive+0x50>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10e      	bne.n	80073e0 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2204      	movs	r2, #4
 80073c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80073ca:	88fa      	ldrh	r2, [r7, #6]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	4613      	mov	r3, r2
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 f8f3 	bl	80075c2 <HAL_SPI_TransmitReceive>
 80073dc:	4603      	mov	r3, r0
 80073de:	e0ec      	b.n	80075ba <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073e0:	f7fd fd92 	bl	8004f08 <HAL_GetTick>
 80073e4:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <HAL_SPI_Receive+0x62>
 80073ec:	88fb      	ldrh	r3, [r7, #6]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e0e1      	b.n	80075ba <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d101      	bne.n	8007404 <HAL_SPI_Receive+0x74>
 8007400:	2302      	movs	r3, #2
 8007402:	e0da      	b.n	80075ba <HAL_SPI_Receive+0x22a>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2204      	movs	r2, #4
 8007410:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	88fa      	ldrh	r2, [r7, #6]
 8007424:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	88fa      	ldrh	r2, [r7, #6]
 800742a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007452:	d10f      	bne.n	8007474 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007462:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007472:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800747e:	2b40      	cmp	r3, #64	@ 0x40
 8007480:	d007      	beq.n	8007492 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007490:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d170      	bne.n	800757c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800749a:	e035      	b.n	8007508 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d115      	bne.n	80074d6 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f103 020c 	add.w	r2, r3, #12
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b6:	7812      	ldrb	r2, [r2, #0]
 80074b8:	b2d2      	uxtb	r2, r2
 80074ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074d4:	e018      	b.n	8007508 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074d6:	f7fd fd17 	bl	8004f08 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d803      	bhi.n	80074ee <HAL_SPI_Receive+0x15e>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ec:	d102      	bne.n	80074f4 <HAL_SPI_Receive+0x164>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d109      	bne.n	8007508 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e058      	b.n	80075ba <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1c4      	bne.n	800749c <HAL_SPI_Receive+0x10c>
 8007512:	e038      	b.n	8007586 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b01      	cmp	r3, #1
 8007520:	d113      	bne.n	800754a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752c:	b292      	uxth	r2, r2
 800752e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007534:	1c9a      	adds	r2, r3, #2
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800753e:	b29b      	uxth	r3, r3
 8007540:	3b01      	subs	r3, #1
 8007542:	b29a      	uxth	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007548:	e018      	b.n	800757c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800754a:	f7fd fcdd 	bl	8004f08 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	683a      	ldr	r2, [r7, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d803      	bhi.n	8007562 <HAL_SPI_Receive+0x1d2>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d102      	bne.n	8007568 <HAL_SPI_Receive+0x1d8>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d109      	bne.n	800757c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e01e      	b.n	80075ba <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007580:	b29b      	uxth	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1c6      	bne.n	8007514 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 fa58 	bl	8007a40 <SPI_EndRxTransaction>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2220      	movs	r2, #32
 800759a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e000      	b.n	80075ba <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80075b8:	2300      	movs	r3, #0
  }
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b08a      	sub	sp, #40	@ 0x28
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075d0:	2301      	movs	r3, #1
 80075d2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075d4:	f7fd fc98 	bl	8004f08 <HAL_GetTick>
 80075d8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075e0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80075e8:	887b      	ldrh	r3, [r7, #2]
 80075ea:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075ec:	7ffb      	ldrb	r3, [r7, #31]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d00c      	beq.n	800760c <HAL_SPI_TransmitReceive+0x4a>
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075f8:	d106      	bne.n	8007608 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d102      	bne.n	8007608 <HAL_SPI_TransmitReceive+0x46>
 8007602:	7ffb      	ldrb	r3, [r7, #31]
 8007604:	2b04      	cmp	r3, #4
 8007606:	d001      	beq.n	800760c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007608:	2302      	movs	r3, #2
 800760a:	e17f      	b.n	800790c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d005      	beq.n	800761e <HAL_SPI_TransmitReceive+0x5c>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <HAL_SPI_TransmitReceive+0x5c>
 8007618:	887b      	ldrh	r3, [r7, #2]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e174      	b.n	800790c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007628:	2b01      	cmp	r3, #1
 800762a:	d101      	bne.n	8007630 <HAL_SPI_TransmitReceive+0x6e>
 800762c:	2302      	movs	r3, #2
 800762e:	e16d      	b.n	800790c <HAL_SPI_TransmitReceive+0x34a>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b04      	cmp	r3, #4
 8007642:	d003      	beq.n	800764c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2205      	movs	r2, #5
 8007648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	887a      	ldrh	r2, [r7, #2]
 800765c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	887a      	ldrh	r2, [r7, #2]
 8007662:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	887a      	ldrh	r2, [r7, #2]
 800766e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	887a      	ldrh	r2, [r7, #2]
 8007674:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800768c:	2b40      	cmp	r3, #64	@ 0x40
 800768e:	d007      	beq.n	80076a0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800769e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076a8:	d17e      	bne.n	80077a8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <HAL_SPI_TransmitReceive+0xf6>
 80076b2:	8afb      	ldrh	r3, [r7, #22]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d16c      	bne.n	8007792 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076bc:	881a      	ldrh	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c8:	1c9a      	adds	r2, r3, #2
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	3b01      	subs	r3, #1
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076dc:	e059      	b.n	8007792 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f003 0302 	and.w	r3, r3, #2
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d11b      	bne.n	8007724 <HAL_SPI_TransmitReceive+0x162>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d016      	beq.n	8007724 <HAL_SPI_TransmitReceive+0x162>
 80076f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d113      	bne.n	8007724 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007700:	881a      	ldrh	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770c:	1c9a      	adds	r2, r3, #2
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007716:	b29b      	uxth	r3, r3
 8007718:	3b01      	subs	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b01      	cmp	r3, #1
 8007730:	d119      	bne.n	8007766 <HAL_SPI_TransmitReceive+0x1a4>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007736:	b29b      	uxth	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d014      	beq.n	8007766 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007746:	b292      	uxth	r2, r2
 8007748:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774e:	1c9a      	adds	r2, r3, #2
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007758:	b29b      	uxth	r3, r3
 800775a:	3b01      	subs	r3, #1
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007762:	2301      	movs	r3, #1
 8007764:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007766:	f7fd fbcf 	bl	8004f08 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007772:	429a      	cmp	r2, r3
 8007774:	d80d      	bhi.n	8007792 <HAL_SPI_TransmitReceive+0x1d0>
 8007776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777c:	d009      	beq.n	8007792 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e0bc      	b.n	800790c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007796:	b29b      	uxth	r3, r3
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1a0      	bne.n	80076de <HAL_SPI_TransmitReceive+0x11c>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d19b      	bne.n	80076de <HAL_SPI_TransmitReceive+0x11c>
 80077a6:	e082      	b.n	80078ae <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <HAL_SPI_TransmitReceive+0x1f4>
 80077b0:	8afb      	ldrh	r3, [r7, #22]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d171      	bne.n	800789a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	330c      	adds	r3, #12
 80077c0:	7812      	ldrb	r2, [r2, #0]
 80077c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	3b01      	subs	r3, #1
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077dc:	e05d      	b.n	800789a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d11c      	bne.n	8007826 <HAL_SPI_TransmitReceive+0x264>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d017      	beq.n	8007826 <HAL_SPI_TransmitReceive+0x264>
 80077f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d114      	bne.n	8007826 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	330c      	adds	r3, #12
 8007806:	7812      	ldrb	r2, [r2, #0]
 8007808:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007818:	b29b      	uxth	r3, r3
 800781a:	3b01      	subs	r3, #1
 800781c:	b29a      	uxth	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b01      	cmp	r3, #1
 8007832:	d119      	bne.n	8007868 <HAL_SPI_TransmitReceive+0x2a6>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d014      	beq.n	8007868 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68da      	ldr	r2, [r3, #12]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007848:	b2d2      	uxtb	r2, r2
 800784a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b01      	subs	r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007864:	2301      	movs	r3, #1
 8007866:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007868:	f7fd fb4e 	bl	8004f08 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007874:	429a      	cmp	r2, r3
 8007876:	d803      	bhi.n	8007880 <HAL_SPI_TransmitReceive+0x2be>
 8007878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787e:	d102      	bne.n	8007886 <HAL_SPI_TransmitReceive+0x2c4>
 8007880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007882:	2b00      	cmp	r3, #0
 8007884:	d109      	bne.n	800789a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e038      	b.n	800790c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800789e:	b29b      	uxth	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d19c      	bne.n	80077de <HAL_SPI_TransmitReceive+0x21c>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d197      	bne.n	80077de <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078ae:	6a3a      	ldr	r2, [r7, #32]
 80078b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 f92a 	bl	8007b0c <SPI_EndRxTxTransaction>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d008      	beq.n	80078d0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2220      	movs	r2, #32
 80078c2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e01d      	b.n	800790c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10a      	bne.n	80078ee <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078d8:	2300      	movs	r3, #0
 80078da:	613b      	str	r3, [r7, #16]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	613b      	str	r3, [r7, #16]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	613b      	str	r3, [r7, #16]
 80078ec:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e000      	b.n	800790c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800790a:	2300      	movs	r3, #0
  }
}
 800790c:	4618      	mov	r0, r3
 800790e:	3728      	adds	r7, #40	@ 0x28
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007922:	b2db      	uxtb	r3, r3
}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	603b      	str	r3, [r7, #0]
 800793c:	4613      	mov	r3, r2
 800793e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007940:	f7fd fae2 	bl	8004f08 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007948:	1a9b      	subs	r3, r3, r2
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	4413      	add	r3, r2
 800794e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007950:	f7fd fada 	bl	8004f08 <HAL_GetTick>
 8007954:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007956:	4b39      	ldr	r3, [pc, #228]	@ (8007a3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	015b      	lsls	r3, r3, #5
 800795c:	0d1b      	lsrs	r3, r3, #20
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	fb02 f303 	mul.w	r3, r2, r3
 8007964:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007966:	e054      	b.n	8007a12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796e:	d050      	beq.n	8007a12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007970:	f7fd faca 	bl	8004f08 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	69fa      	ldr	r2, [r7, #28]
 800797c:	429a      	cmp	r2, r3
 800797e:	d902      	bls.n	8007986 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d13d      	bne.n	8007a02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007994:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800799e:	d111      	bne.n	80079c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079a8:	d004      	beq.n	80079b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079b2:	d107      	bne.n	80079c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079cc:	d10f      	bne.n	80079ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80079ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e017      	b.n	8007a32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	bf0c      	ite	eq
 8007a22:	2301      	moveq	r3, #1
 8007a24:	2300      	movne	r3, #0
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	461a      	mov	r2, r3
 8007a2a:	79fb      	ldrb	r3, [r7, #7]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d19b      	bne.n	8007968 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3720      	adds	r7, #32
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000294 	.word	0x20000294

08007a40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af02      	add	r7, sp, #8
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a54:	d111      	bne.n	8007a7a <SPI_EndRxTransaction+0x3a>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a5e:	d004      	beq.n	8007a6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a68:	d107      	bne.n	8007a7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a82:	d12a      	bne.n	8007ada <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a8c:	d012      	beq.n	8007ab4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2200      	movs	r2, #0
 8007a96:	2180      	movs	r1, #128	@ 0x80
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f7ff ff49 	bl	8007930 <SPI_WaitFlagStateUntilTimeout>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d02d      	beq.n	8007b00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aa8:	f043 0220 	orr.w	r2, r3, #32
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e026      	b.n	8007b02 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	2200      	movs	r2, #0
 8007abc:	2101      	movs	r1, #1
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f7ff ff36 	bl	8007930 <SPI_WaitFlagStateUntilTimeout>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d01a      	beq.n	8007b00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ace:	f043 0220 	orr.w	r2, r3, #32
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e013      	b.n	8007b02 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f7ff ff23 	bl	8007930 <SPI_WaitFlagStateUntilTimeout>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d007      	beq.n	8007b00 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af4:	f043 0220 	orr.w	r2, r3, #32
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e000      	b.n	8007b02 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
	...

08007b0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b088      	sub	sp, #32
 8007b10:	af02      	add	r7, sp, #8
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	2102      	movs	r1, #2
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f7ff ff04 	bl	8007930 <SPI_WaitFlagStateUntilTimeout>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d007      	beq.n	8007b3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b32:	f043 0220 	orr.w	r2, r3, #32
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e032      	b.n	8007ba4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8007bac <SPI_EndRxTxTransaction+0xa0>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a1b      	ldr	r2, [pc, #108]	@ (8007bb0 <SPI_EndRxTxTransaction+0xa4>)
 8007b44:	fba2 2303 	umull	r2, r3, r2, r3
 8007b48:	0d5b      	lsrs	r3, r3, #21
 8007b4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007b4e:	fb02 f303 	mul.w	r3, r2, r3
 8007b52:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b5c:	d112      	bne.n	8007b84 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	2200      	movs	r2, #0
 8007b66:	2180      	movs	r1, #128	@ 0x80
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f7ff fee1 	bl	8007930 <SPI_WaitFlagStateUntilTimeout>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d016      	beq.n	8007ba2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b78:	f043 0220 	orr.w	r2, r3, #32
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e00f      	b.n	8007ba4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b9a:	2b80      	cmp	r3, #128	@ 0x80
 8007b9c:	d0f2      	beq.n	8007b84 <SPI_EndRxTxTransaction+0x78>
 8007b9e:	e000      	b.n	8007ba2 <SPI_EndRxTxTransaction+0x96>
        break;
 8007ba0:	bf00      	nop
  }

  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3718      	adds	r7, #24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20000294 	.word	0x20000294
 8007bb0:	165e9f81 	.word	0x165e9f81

08007bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e04c      	b.n	8007c60 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d111      	bne.n	8007bf6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 ff7c 	bl	8008ad8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d102      	bne.n	8007bee <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a1f      	ldr	r2, [pc, #124]	@ (8007c68 <HAL_TIM_Base_Init+0xb4>)
 8007bec:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3304      	adds	r3, #4
 8007c06:	4619      	mov	r1, r3
 8007c08:	4610      	mov	r0, r2
 8007c0a:	f000 fd95 	bl	8008738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	08007c6d 	.word	0x08007c6d

08007c6c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d001      	beq.n	8007c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e044      	b.n	8007d22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68da      	ldr	r2, [r3, #12]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f042 0201 	orr.w	r2, r2, #1
 8007cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8007d30 <HAL_TIM_Base_Start_IT+0xb0>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d018      	beq.n	8007cec <HAL_TIM_Base_Start_IT+0x6c>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cc2:	d013      	beq.n	8007cec <HAL_TIM_Base_Start_IT+0x6c>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8007d34 <HAL_TIM_Base_Start_IT+0xb4>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d00e      	beq.n	8007cec <HAL_TIM_Base_Start_IT+0x6c>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a19      	ldr	r2, [pc, #100]	@ (8007d38 <HAL_TIM_Base_Start_IT+0xb8>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d009      	beq.n	8007cec <HAL_TIM_Base_Start_IT+0x6c>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a17      	ldr	r2, [pc, #92]	@ (8007d3c <HAL_TIM_Base_Start_IT+0xbc>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d004      	beq.n	8007cec <HAL_TIM_Base_Start_IT+0x6c>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a16      	ldr	r2, [pc, #88]	@ (8007d40 <HAL_TIM_Base_Start_IT+0xc0>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d111      	bne.n	8007d10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b06      	cmp	r3, #6
 8007cfc:	d010      	beq.n	8007d20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f042 0201 	orr.w	r2, r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d0e:	e007      	b.n	8007d20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0201 	orr.w	r2, r2, #1
 8007d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	40010000 	.word	0x40010000
 8007d34:	40000400 	.word	0x40000400
 8007d38:	40000800 	.word	0x40000800
 8007d3c:	40000c00 	.word	0x40000c00
 8007d40:	40014000 	.word	0x40014000

08007d44 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e04c      	b.n	8007df0 <HAL_TIM_IC_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d111      	bne.n	8007d86 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 feb4 	bl	8008ad8 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d102      	bne.n	8007d7e <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8007df8 <HAL_TIM_IC_Init+0xb4>)
 8007d7c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	3304      	adds	r3, #4
 8007d96:	4619      	mov	r1, r3
 8007d98:	4610      	mov	r0, r2
 8007d9a:	f000 fccd 	bl	8008738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	08004b81 	.word	0x08004b81

08007dfc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d104      	bne.n	8007e1a <HAL_TIM_IC_Start_IT+0x1e>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	e013      	b.n	8007e42 <HAL_TIM_IC_Start_IT+0x46>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d104      	bne.n	8007e2a <HAL_TIM_IC_Start_IT+0x2e>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	e00b      	b.n	8007e42 <HAL_TIM_IC_Start_IT+0x46>
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b08      	cmp	r3, #8
 8007e2e:	d104      	bne.n	8007e3a <HAL_TIM_IC_Start_IT+0x3e>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	e003      	b.n	8007e42 <HAL_TIM_IC_Start_IT+0x46>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d104      	bne.n	8007e54 <HAL_TIM_IC_Start_IT+0x58>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	e013      	b.n	8007e7c <HAL_TIM_IC_Start_IT+0x80>
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2b04      	cmp	r3, #4
 8007e58:	d104      	bne.n	8007e64 <HAL_TIM_IC_Start_IT+0x68>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	e00b      	b.n	8007e7c <HAL_TIM_IC_Start_IT+0x80>
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2b08      	cmp	r3, #8
 8007e68:	d104      	bne.n	8007e74 <HAL_TIM_IC_Start_IT+0x78>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	e003      	b.n	8007e7c <HAL_TIM_IC_Start_IT+0x80>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e7e:	7bbb      	ldrb	r3, [r7, #14]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d102      	bne.n	8007e8a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e84:	7b7b      	ldrb	r3, [r7, #13]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d001      	beq.n	8007e8e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e0c2      	b.n	8008014 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d104      	bne.n	8007e9e <HAL_TIM_IC_Start_IT+0xa2>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e9c:	e013      	b.n	8007ec6 <HAL_TIM_IC_Start_IT+0xca>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	d104      	bne.n	8007eae <HAL_TIM_IC_Start_IT+0xb2>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007eac:	e00b      	b.n	8007ec6 <HAL_TIM_IC_Start_IT+0xca>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d104      	bne.n	8007ebe <HAL_TIM_IC_Start_IT+0xc2>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ebc:	e003      	b.n	8007ec6 <HAL_TIM_IC_Start_IT+0xca>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d104      	bne.n	8007ed6 <HAL_TIM_IC_Start_IT+0xda>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ed4:	e013      	b.n	8007efe <HAL_TIM_IC_Start_IT+0x102>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b04      	cmp	r3, #4
 8007eda:	d104      	bne.n	8007ee6 <HAL_TIM_IC_Start_IT+0xea>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ee4:	e00b      	b.n	8007efe <HAL_TIM_IC_Start_IT+0x102>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2b08      	cmp	r3, #8
 8007eea:	d104      	bne.n	8007ef6 <HAL_TIM_IC_Start_IT+0xfa>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ef4:	e003      	b.n	8007efe <HAL_TIM_IC_Start_IT+0x102>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b0c      	cmp	r3, #12
 8007f02:	d841      	bhi.n	8007f88 <HAL_TIM_IC_Start_IT+0x18c>
 8007f04:	a201      	add	r2, pc, #4	@ (adr r2, 8007f0c <HAL_TIM_IC_Start_IT+0x110>)
 8007f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0a:	bf00      	nop
 8007f0c:	08007f41 	.word	0x08007f41
 8007f10:	08007f89 	.word	0x08007f89
 8007f14:	08007f89 	.word	0x08007f89
 8007f18:	08007f89 	.word	0x08007f89
 8007f1c:	08007f53 	.word	0x08007f53
 8007f20:	08007f89 	.word	0x08007f89
 8007f24:	08007f89 	.word	0x08007f89
 8007f28:	08007f89 	.word	0x08007f89
 8007f2c:	08007f65 	.word	0x08007f65
 8007f30:	08007f89 	.word	0x08007f89
 8007f34:	08007f89 	.word	0x08007f89
 8007f38:	08007f89 	.word	0x08007f89
 8007f3c:	08007f77 	.word	0x08007f77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68da      	ldr	r2, [r3, #12]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f042 0202 	orr.w	r2, r2, #2
 8007f4e:	60da      	str	r2, [r3, #12]
      break;
 8007f50:	e01d      	b.n	8007f8e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f042 0204 	orr.w	r2, r2, #4
 8007f60:	60da      	str	r2, [r3, #12]
      break;
 8007f62:	e014      	b.n	8007f8e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68da      	ldr	r2, [r3, #12]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f042 0208 	orr.w	r2, r2, #8
 8007f72:	60da      	str	r2, [r3, #12]
      break;
 8007f74:	e00b      	b.n	8007f8e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f042 0210 	orr.w	r2, r2, #16
 8007f84:	60da      	str	r2, [r3, #12]
      break;
 8007f86:	e002      	b.n	8007f8e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d13e      	bne.n	8008012 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 fd75 	bl	8008a8c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800801c <HAL_TIM_IC_Start_IT+0x220>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d018      	beq.n	8007fde <HAL_TIM_IC_Start_IT+0x1e2>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb4:	d013      	beq.n	8007fde <HAL_TIM_IC_Start_IT+0x1e2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a19      	ldr	r2, [pc, #100]	@ (8008020 <HAL_TIM_IC_Start_IT+0x224>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d00e      	beq.n	8007fde <HAL_TIM_IC_Start_IT+0x1e2>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a17      	ldr	r2, [pc, #92]	@ (8008024 <HAL_TIM_IC_Start_IT+0x228>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d009      	beq.n	8007fde <HAL_TIM_IC_Start_IT+0x1e2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a16      	ldr	r2, [pc, #88]	@ (8008028 <HAL_TIM_IC_Start_IT+0x22c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d004      	beq.n	8007fde <HAL_TIM_IC_Start_IT+0x1e2>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a14      	ldr	r2, [pc, #80]	@ (800802c <HAL_TIM_IC_Start_IT+0x230>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d111      	bne.n	8008002 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f003 0307 	and.w	r3, r3, #7
 8007fe8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2b06      	cmp	r3, #6
 8007fee:	d010      	beq.n	8008012 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f042 0201 	orr.w	r2, r2, #1
 8007ffe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008000:	e007      	b.n	8008012 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f042 0201 	orr.w	r2, r2, #1
 8008010:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008012:	7bfb      	ldrb	r3, [r7, #15]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	40010000 	.word	0x40010000
 8008020:	40000400 	.word	0x40000400
 8008024:	40000800 	.word	0x40000800
 8008028:	40000c00 	.word	0x40000c00
 800802c:	40014000 	.word	0x40014000

08008030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d026      	beq.n	80080a0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	2b00      	cmp	r3, #0
 800805a:	d021      	beq.n	80080a0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f06f 0202 	mvn.w	r2, #2
 8008064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d005      	beq.n	8008086 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	4798      	blx	r3
 8008084:	e009      	b.n	800809a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f003 0304 	and.w	r3, r3, #4
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d026      	beq.n	80080f8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f003 0304 	and.w	r3, r3, #4
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d021      	beq.n	80080f8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f06f 0204 	mvn.w	r2, #4
 80080bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2202      	movs	r2, #2
 80080c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d005      	beq.n	80080de <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	4798      	blx	r3
 80080dc:	e009      	b.n	80080f2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f003 0308 	and.w	r3, r3, #8
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d026      	beq.n	8008150 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f003 0308 	and.w	r3, r3, #8
 8008108:	2b00      	cmp	r3, #0
 800810a:	d021      	beq.n	8008150 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f06f 0208 	mvn.w	r2, #8
 8008114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2204      	movs	r2, #4
 800811a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	f003 0303 	and.w	r3, r3, #3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d005      	beq.n	8008136 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	4798      	blx	r3
 8008134:	e009      	b.n	800814a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	f003 0310 	and.w	r3, r3, #16
 8008156:	2b00      	cmp	r3, #0
 8008158:	d026      	beq.n	80081a8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f003 0310 	and.w	r3, r3, #16
 8008160:	2b00      	cmp	r3, #0
 8008162:	d021      	beq.n	80081a8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f06f 0210 	mvn.w	r2, #16
 800816c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2208      	movs	r2, #8
 8008172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800817e:	2b00      	cmp	r3, #0
 8008180:	d005      	beq.n	800818e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	4798      	blx	r3
 800818c:	e009      	b.n	80081a2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00e      	beq.n	80081d0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d009      	beq.n	80081d0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f06f 0201 	mvn.w	r2, #1
 80081c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00e      	beq.n	80081f8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d009      	beq.n	80081f8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80081ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00e      	beq.n	8008220 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008208:	2b00      	cmp	r3, #0
 800820a:	d009      	beq.n	8008220 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f003 0320 	and.w	r3, r3, #32
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00e      	beq.n	8008248 <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f003 0320 	and.w	r3, r3, #32
 8008230:	2b00      	cmp	r3, #0
 8008232:	d009      	beq.n	8008248 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f06f 0220 	mvn.w	r2, #32
 800823c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008248:	bf00      	nop
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <HAL_TIM_IC_ConfigChannel+0x1e>
 800826a:	2302      	movs	r3, #2
 800826c:	e088      	b.n	8008380 <HAL_TIM_IC_ConfigChannel+0x130>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d11b      	bne.n	80082b4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800828c:	f000 fae0 	bl	8008850 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	699a      	ldr	r2, [r3, #24]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f022 020c 	bic.w	r2, r2, #12
 800829e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6999      	ldr	r1, [r3, #24]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	689a      	ldr	r2, [r3, #8]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	430a      	orrs	r2, r1
 80082b0:	619a      	str	r2, [r3, #24]
 80082b2:	e060      	b.n	8008376 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	d11c      	bne.n	80082f4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80082ca:	f000 fb29 	bl	8008920 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	699a      	ldr	r2, [r3, #24]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80082dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6999      	ldr	r1, [r3, #24]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	021a      	lsls	r2, r3, #8
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	619a      	str	r2, [r3, #24]
 80082f2:	e040      	b.n	8008376 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b08      	cmp	r3, #8
 80082f8:	d11b      	bne.n	8008332 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800830a:	f000 fb46 	bl	800899a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	69da      	ldr	r2, [r3, #28]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 020c 	bic.w	r2, r2, #12
 800831c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	69d9      	ldr	r1, [r3, #28]
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	61da      	str	r2, [r3, #28]
 8008330:	e021      	b.n	8008376 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2b0c      	cmp	r3, #12
 8008336:	d11c      	bne.n	8008372 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008348:	f000 fb63 	bl	8008a12 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	69da      	ldr	r2, [r3, #28]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800835a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	69d9      	ldr	r1, [r3, #28]
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	021a      	lsls	r2, r3, #8
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	430a      	orrs	r2, r1
 800836e:	61da      	str	r2, [r3, #28]
 8008370:	e001      	b.n	8008376 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800837e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008392:	2300      	movs	r3, #0
 8008394:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b0c      	cmp	r3, #12
 800839a:	d831      	bhi.n	8008400 <HAL_TIM_ReadCapturedValue+0x78>
 800839c:	a201      	add	r2, pc, #4	@ (adr r2, 80083a4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800839e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a2:	bf00      	nop
 80083a4:	080083d9 	.word	0x080083d9
 80083a8:	08008401 	.word	0x08008401
 80083ac:	08008401 	.word	0x08008401
 80083b0:	08008401 	.word	0x08008401
 80083b4:	080083e3 	.word	0x080083e3
 80083b8:	08008401 	.word	0x08008401
 80083bc:	08008401 	.word	0x08008401
 80083c0:	08008401 	.word	0x08008401
 80083c4:	080083ed 	.word	0x080083ed
 80083c8:	08008401 	.word	0x08008401
 80083cc:	08008401 	.word	0x08008401
 80083d0:	08008401 	.word	0x08008401
 80083d4:	080083f7 	.word	0x080083f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083de:	60fb      	str	r3, [r7, #12]

      break;
 80083e0:	e00f      	b.n	8008402 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e8:	60fb      	str	r3, [r7, #12]

      break;
 80083ea:	e00a      	b.n	8008402 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083f2:	60fb      	str	r3, [r7, #12]

      break;
 80083f4:	e005      	b.n	8008402 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083fc:	60fb      	str	r3, [r7, #12]

      break;
 80083fe:	e000      	b.n	8008402 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008400:	bf00      	nop
  }

  return tmpreg;
 8008402:	68fb      	ldr	r3, [r7, #12]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b087      	sub	sp, #28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	460b      	mov	r3, r1
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e125      	b.n	800872c <HAL_TIM_RegisterCallback+0x268>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	f040 80b9 	bne.w	8008660 <HAL_TIM_RegisterCallback+0x19c>
  {
    switch (CallbackID)
 80084ee:	7afb      	ldrb	r3, [r7, #11]
 80084f0:	2b1a      	cmp	r3, #26
 80084f2:	f200 80b2 	bhi.w	800865a <HAL_TIM_RegisterCallback+0x196>
 80084f6:	a201      	add	r2, pc, #4	@ (adr r2, 80084fc <HAL_TIM_RegisterCallback+0x38>)
 80084f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fc:	08008569 	.word	0x08008569
 8008500:	08008571 	.word	0x08008571
 8008504:	08008579 	.word	0x08008579
 8008508:	08008581 	.word	0x08008581
 800850c:	08008589 	.word	0x08008589
 8008510:	08008591 	.word	0x08008591
 8008514:	08008599 	.word	0x08008599
 8008518:	080085a1 	.word	0x080085a1
 800851c:	080085a9 	.word	0x080085a9
 8008520:	080085b1 	.word	0x080085b1
 8008524:	080085b9 	.word	0x080085b9
 8008528:	080085c1 	.word	0x080085c1
 800852c:	080085c9 	.word	0x080085c9
 8008530:	080085d1 	.word	0x080085d1
 8008534:	080085d9 	.word	0x080085d9
 8008538:	080085e3 	.word	0x080085e3
 800853c:	080085ed 	.word	0x080085ed
 8008540:	080085f7 	.word	0x080085f7
 8008544:	08008601 	.word	0x08008601
 8008548:	0800860b 	.word	0x0800860b
 800854c:	08008615 	.word	0x08008615
 8008550:	0800861f 	.word	0x0800861f
 8008554:	08008629 	.word	0x08008629
 8008558:	08008633 	.word	0x08008633
 800855c:	0800863d 	.word	0x0800863d
 8008560:	08008647 	.word	0x08008647
 8008564:	08008651 	.word	0x08008651
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 800856e:	e0dc      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008576:	e0d8      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800857e:	e0d4      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008586:	e0d0      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800858e:	e0cc      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008596:	e0c8      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800859e:	e0c4      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80085a6:	e0c0      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80085ae:	e0bc      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80085b6:	e0b8      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80085be:	e0b4      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80085c6:	e0b0      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80085ce:	e0ac      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80085d6:	e0a8      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80085e0:	e0a3      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80085ea:	e09e      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80085f4:	e099      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80085fe:	e094      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008608:	e08f      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008612:	e08a      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800861c:	e085      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008626:	e080      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008630:	e07b      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800863a:	e076      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008644:	e071      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800864e:	e06c      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008658:	e067      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	75fb      	strb	r3, [r7, #23]
        break;
 800865e:	e064      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b00      	cmp	r3, #0
 800866a:	d15c      	bne.n	8008726 <HAL_TIM_RegisterCallback+0x262>
  {
    switch (CallbackID)
 800866c:	7afb      	ldrb	r3, [r7, #11]
 800866e:	2b0d      	cmp	r3, #13
 8008670:	d856      	bhi.n	8008720 <HAL_TIM_RegisterCallback+0x25c>
 8008672:	a201      	add	r2, pc, #4	@ (adr r2, 8008678 <HAL_TIM_RegisterCallback+0x1b4>)
 8008674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008678:	080086b1 	.word	0x080086b1
 800867c:	080086b9 	.word	0x080086b9
 8008680:	080086c1 	.word	0x080086c1
 8008684:	080086c9 	.word	0x080086c9
 8008688:	080086d1 	.word	0x080086d1
 800868c:	080086d9 	.word	0x080086d9
 8008690:	080086e1 	.word	0x080086e1
 8008694:	080086e9 	.word	0x080086e9
 8008698:	080086f1 	.word	0x080086f1
 800869c:	080086f9 	.word	0x080086f9
 80086a0:	08008701 	.word	0x08008701
 80086a4:	08008709 	.word	0x08008709
 80086a8:	08008711 	.word	0x08008711
 80086ac:	08008719 	.word	0x08008719
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 80086b6:	e038      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80086be:	e034      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80086c6:	e030      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80086ce:	e02c      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80086d6:	e028      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80086de:	e024      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80086e6:	e020      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80086ee:	e01c      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80086f6:	e018      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80086fe:	e014      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008706:	e010      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800870e:	e00c      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008716:	e008      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800871e:	e004      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	75fb      	strb	r3, [r7, #23]
        break;
 8008724:	e001      	b.n	800872a <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800872a:	7dfb      	ldrb	r3, [r7, #23]
}
 800872c:	4618      	mov	r0, r3
 800872e:	371c      	adds	r7, #28
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a3a      	ldr	r2, [pc, #232]	@ (8008834 <TIM_Base_SetConfig+0xfc>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d00f      	beq.n	8008770 <TIM_Base_SetConfig+0x38>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008756:	d00b      	beq.n	8008770 <TIM_Base_SetConfig+0x38>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a37      	ldr	r2, [pc, #220]	@ (8008838 <TIM_Base_SetConfig+0x100>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d007      	beq.n	8008770 <TIM_Base_SetConfig+0x38>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a36      	ldr	r2, [pc, #216]	@ (800883c <TIM_Base_SetConfig+0x104>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d003      	beq.n	8008770 <TIM_Base_SetConfig+0x38>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a35      	ldr	r2, [pc, #212]	@ (8008840 <TIM_Base_SetConfig+0x108>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d108      	bne.n	8008782 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	4313      	orrs	r3, r2
 8008780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a2b      	ldr	r2, [pc, #172]	@ (8008834 <TIM_Base_SetConfig+0xfc>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d01b      	beq.n	80087c2 <TIM_Base_SetConfig+0x8a>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008790:	d017      	beq.n	80087c2 <TIM_Base_SetConfig+0x8a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a28      	ldr	r2, [pc, #160]	@ (8008838 <TIM_Base_SetConfig+0x100>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d013      	beq.n	80087c2 <TIM_Base_SetConfig+0x8a>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a27      	ldr	r2, [pc, #156]	@ (800883c <TIM_Base_SetConfig+0x104>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d00f      	beq.n	80087c2 <TIM_Base_SetConfig+0x8a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a26      	ldr	r2, [pc, #152]	@ (8008840 <TIM_Base_SetConfig+0x108>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d00b      	beq.n	80087c2 <TIM_Base_SetConfig+0x8a>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a25      	ldr	r2, [pc, #148]	@ (8008844 <TIM_Base_SetConfig+0x10c>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d007      	beq.n	80087c2 <TIM_Base_SetConfig+0x8a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a24      	ldr	r2, [pc, #144]	@ (8008848 <TIM_Base_SetConfig+0x110>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d003      	beq.n	80087c2 <TIM_Base_SetConfig+0x8a>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a23      	ldr	r2, [pc, #140]	@ (800884c <TIM_Base_SetConfig+0x114>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d108      	bne.n	80087d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	4313      	orrs	r3, r2
 80087e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a0e      	ldr	r2, [pc, #56]	@ (8008834 <TIM_Base_SetConfig+0xfc>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d103      	bne.n	8008808 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	691a      	ldr	r2, [r3, #16]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b01      	cmp	r3, #1
 8008818:	d105      	bne.n	8008826 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	f023 0201 	bic.w	r2, r3, #1
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	611a      	str	r2, [r3, #16]
  }
}
 8008826:	bf00      	nop
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	40010000 	.word	0x40010000
 8008838:	40000400 	.word	0x40000400
 800883c:	40000800 	.word	0x40000800
 8008840:	40000c00 	.word	0x40000c00
 8008844:	40014000 	.word	0x40014000
 8008848:	40014400 	.word	0x40014400
 800884c:	40014800 	.word	0x40014800

08008850 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008850:	b480      	push	{r7}
 8008852:	b087      	sub	sp, #28
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	f023 0201 	bic.w	r2, r3, #1
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	4a24      	ldr	r2, [pc, #144]	@ (800890c <TIM_TI1_SetConfig+0xbc>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d013      	beq.n	80088a6 <TIM_TI1_SetConfig+0x56>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008884:	d00f      	beq.n	80088a6 <TIM_TI1_SetConfig+0x56>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	4a21      	ldr	r2, [pc, #132]	@ (8008910 <TIM_TI1_SetConfig+0xc0>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d00b      	beq.n	80088a6 <TIM_TI1_SetConfig+0x56>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	4a20      	ldr	r2, [pc, #128]	@ (8008914 <TIM_TI1_SetConfig+0xc4>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d007      	beq.n	80088a6 <TIM_TI1_SetConfig+0x56>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	4a1f      	ldr	r2, [pc, #124]	@ (8008918 <TIM_TI1_SetConfig+0xc8>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d003      	beq.n	80088a6 <TIM_TI1_SetConfig+0x56>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	4a1e      	ldr	r2, [pc, #120]	@ (800891c <TIM_TI1_SetConfig+0xcc>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d101      	bne.n	80088aa <TIM_TI1_SetConfig+0x5a>
 80088a6:	2301      	movs	r3, #1
 80088a8:	e000      	b.n	80088ac <TIM_TI1_SetConfig+0x5c>
 80088aa:	2300      	movs	r3, #0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d008      	beq.n	80088c2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	f023 0303 	bic.w	r3, r3, #3
 80088b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4313      	orrs	r3, r2
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	e003      	b.n	80088ca <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f043 0301 	orr.w	r3, r3, #1
 80088c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	011b      	lsls	r3, r3, #4
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	4313      	orrs	r3, r2
 80088dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	f023 030a 	bic.w	r3, r3, #10
 80088e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	f003 030a 	and.w	r3, r3, #10
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	621a      	str	r2, [r3, #32]
}
 80088fe:	bf00      	nop
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	40010000 	.word	0x40010000
 8008910:	40000400 	.word	0x40000400
 8008914:	40000800 	.word	0x40000800
 8008918:	40000c00 	.word	0x40000c00
 800891c:	40014000 	.word	0x40014000

08008920 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008920:	b480      	push	{r7}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	f023 0210 	bic.w	r2, r3, #16
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800894c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	021b      	lsls	r3, r3, #8
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	4313      	orrs	r3, r2
 8008956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800895e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	031b      	lsls	r3, r3, #12
 8008964:	b29b      	uxth	r3, r3
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	4313      	orrs	r3, r2
 800896a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008972:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	011b      	lsls	r3, r3, #4
 8008978:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	4313      	orrs	r3, r2
 8008980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	621a      	str	r2, [r3, #32]
}
 800898e:	bf00      	nop
 8008990:	371c      	adds	r7, #28
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800899a:	b480      	push	{r7}
 800899c:	b087      	sub	sp, #28
 800899e:	af00      	add	r7, sp, #0
 80089a0:	60f8      	str	r0, [r7, #12]
 80089a2:	60b9      	str	r1, [r7, #8]
 80089a4:	607a      	str	r2, [r7, #4]
 80089a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6a1b      	ldr	r3, [r3, #32]
 80089ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	69db      	ldr	r3, [r3, #28]
 80089be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	f023 0303 	bic.w	r3, r3, #3
 80089c6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	011b      	lsls	r3, r3, #4
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80089ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	021b      	lsls	r3, r3, #8
 80089f0:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	621a      	str	r2, [r3, #32]
}
 8008a06:	bf00      	nop
 8008a08:	371c      	adds	r7, #28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b087      	sub	sp, #28
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	607a      	str	r2, [r7, #4]
 8008a1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	69db      	ldr	r3, [r3, #28]
 8008a36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a3e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	021b      	lsls	r3, r3, #8
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a50:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	031b      	lsls	r3, r3, #12
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008a64:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	031b      	lsls	r3, r3, #12
 8008a6a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	621a      	str	r2, [r3, #32]
}
 8008a80:	bf00      	nop
 8008a82:	371c      	adds	r7, #28
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	f003 031f 	and.w	r3, r3, #31
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6a1a      	ldr	r2, [r3, #32]
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	43db      	mvns	r3, r3
 8008aae:	401a      	ands	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6a1a      	ldr	r2, [r3, #32]
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	f003 031f 	and.w	r3, r3, #31
 8008abe:	6879      	ldr	r1, [r7, #4]
 8008ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ac4:	431a      	orrs	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	621a      	str	r2, [r3, #32]
}
 8008aca:	bf00      	nop
 8008acc:	371c      	adds	r7, #28
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
	...

08008ad8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8008b54 <TIM_ResetCallback+0x7c>)
 8008ae4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a1b      	ldr	r2, [pc, #108]	@ (8008b58 <TIM_ResetCallback+0x80>)
 8008aec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a1a      	ldr	r2, [pc, #104]	@ (8008b5c <TIM_ResetCallback+0x84>)
 8008af4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a19      	ldr	r2, [pc, #100]	@ (8008b60 <TIM_ResetCallback+0x88>)
 8008afc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a18      	ldr	r2, [pc, #96]	@ (8008b64 <TIM_ResetCallback+0x8c>)
 8008b04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a17      	ldr	r2, [pc, #92]	@ (8008b68 <TIM_ResetCallback+0x90>)
 8008b0c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a16      	ldr	r2, [pc, #88]	@ (8008b6c <TIM_ResetCallback+0x94>)
 8008b14:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a15      	ldr	r2, [pc, #84]	@ (8008b70 <TIM_ResetCallback+0x98>)
 8008b1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a14      	ldr	r2, [pc, #80]	@ (8008b74 <TIM_ResetCallback+0x9c>)
 8008b24:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a13      	ldr	r2, [pc, #76]	@ (8008b78 <TIM_ResetCallback+0xa0>)
 8008b2c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a12      	ldr	r2, [pc, #72]	@ (8008b7c <TIM_ResetCallback+0xa4>)
 8008b34:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a11      	ldr	r2, [pc, #68]	@ (8008b80 <TIM_ResetCallback+0xa8>)
 8008b3c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a10      	ldr	r2, [pc, #64]	@ (8008b84 <TIM_ResetCallback+0xac>)
 8008b44:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	08004615 	.word	0x08004615
 8008b58:	08008411 	.word	0x08008411
 8008b5c:	08008489 	.word	0x08008489
 8008b60:	0800849d 	.word	0x0800849d
 8008b64:	08008439 	.word	0x08008439
 8008b68:	0800844d 	.word	0x0800844d
 8008b6c:	08008425 	.word	0x08008425
 8008b70:	08008461 	.word	0x08008461
 8008b74:	08008475 	.word	0x08008475
 8008b78:	080084b1 	.word	0x080084b1
 8008b7c:	08008c65 	.word	0x08008c65
 8008b80:	08008c79 	.word	0x08008c79
 8008b84:	08008c8d 	.word	0x08008c8d

08008b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d101      	bne.n	8008ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	e050      	b.n	8008c42 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2202      	movs	r2, #2
 8008bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a1c      	ldr	r2, [pc, #112]	@ (8008c50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d018      	beq.n	8008c16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bec:	d013      	beq.n	8008c16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a18      	ldr	r2, [pc, #96]	@ (8008c54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d00e      	beq.n	8008c16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a16      	ldr	r2, [pc, #88]	@ (8008c58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d009      	beq.n	8008c16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a15      	ldr	r2, [pc, #84]	@ (8008c5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d004      	beq.n	8008c16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a13      	ldr	r2, [pc, #76]	@ (8008c60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d10c      	bne.n	8008c30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	40010000 	.word	0x40010000
 8008c54:	40000400 	.word	0x40000400
 8008c58:	40000800 	.word	0x40000800
 8008c5c:	40000c00 	.word	0x40000c00
 8008c60:	40014000 	.word	0x40014000

08008c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e04d      	b.n	8008d4e <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d111      	bne.n	8008ce2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fbe2 	bl	8009490 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d102      	bne.n	8008cda <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a20      	ldr	r2, [pc, #128]	@ (8008d58 <HAL_UART_Init+0xb8>)
 8008cd8:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2224      	movs	r2, #36	@ 0x24
 8008ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68da      	ldr	r2, [r3, #12]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008cf8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fe34 	bl	8009968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	691a      	ldr	r2, [r3, #16]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d0e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	695a      	ldr	r2, [r3, #20]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d1e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68da      	ldr	r2, [r3, #12]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d2e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2220      	movs	r2, #32
 8008d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2220      	movs	r2, #32
 8008d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	08004d41 	.word	0x08004d41

08008d5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b08a      	sub	sp, #40	@ 0x28
 8008d60:	af02      	add	r7, sp, #8
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	603b      	str	r3, [r7, #0]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	2b20      	cmp	r3, #32
 8008d7a:	d175      	bne.n	8008e68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <HAL_UART_Transmit+0x2c>
 8008d82:	88fb      	ldrh	r3, [r7, #6]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e06e      	b.n	8008e6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2221      	movs	r2, #33	@ 0x21
 8008d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d9a:	f7fc f8b5 	bl	8004f08 <HAL_GetTick>
 8008d9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	88fa      	ldrh	r2, [r7, #6]
 8008da4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	88fa      	ldrh	r2, [r7, #6]
 8008daa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008db4:	d108      	bne.n	8008dc8 <HAL_UART_Transmit+0x6c>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d104      	bne.n	8008dc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	61bb      	str	r3, [r7, #24]
 8008dc6:	e003      	b.n	8008dd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008dd0:	e02e      	b.n	8008e30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2180      	movs	r1, #128	@ 0x80
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f000 fb8f 	bl	8009500 <UART_WaitOnFlagUntilTimeout>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d005      	beq.n	8008df4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e03a      	b.n	8008e6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10b      	bne.n	8008e12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	881b      	ldrh	r3, [r3, #0]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	3302      	adds	r3, #2
 8008e0e:	61bb      	str	r3, [r7, #24]
 8008e10:	e007      	b.n	8008e22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	781a      	ldrb	r2, [r3, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1cb      	bne.n	8008dd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	2200      	movs	r2, #0
 8008e42:	2140      	movs	r1, #64	@ 0x40
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 fb5b 	bl	8009500 <UART_WaitOnFlagUntilTimeout>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d005      	beq.n	8008e5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e006      	b.n	8008e6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2220      	movs	r2, #32
 8008e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	e000      	b.n	8008e6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008e68:	2302      	movs	r3, #2
  }
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3720      	adds	r7, #32
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	60f8      	str	r0, [r7, #12]
 8008e7a:	60b9      	str	r1, [r7, #8]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b20      	cmp	r3, #32
 8008e8a:	d112      	bne.n	8008eb2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d002      	beq.n	8008e98 <HAL_UART_Receive_IT+0x26>
 8008e92:	88fb      	ldrh	r3, [r7, #6]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d101      	bne.n	8008e9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e00b      	b.n	8008eb4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008ea2:	88fb      	ldrh	r3, [r7, #6]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	68b9      	ldr	r1, [r7, #8]
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 fb82 	bl	80095b2 <UART_Start_Receive_IT>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	e000      	b.n	8008eb4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008eb2:	2302      	movs	r3, #2
  }
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b0ba      	sub	sp, #232	@ 0xe8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ef2:	f003 030f 	and.w	r3, r3, #15
 8008ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008efa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10f      	bne.n	8008f22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f06:	f003 0320 	and.w	r3, r3, #32
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d009      	beq.n	8008f22 <HAL_UART_IRQHandler+0x66>
 8008f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f12:	f003 0320 	and.w	r3, r3, #32
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d003      	beq.n	8008f22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fc64 	bl	80097e8 <UART_Receive_IT>
      return;
 8008f20:	e260      	b.n	80093e4 <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f000 80e1 	beq.w	80090ee <HAL_UART_IRQHandler+0x232>
 8008f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f30:	f003 0301 	and.w	r3, r3, #1
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d106      	bne.n	8008f46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f3c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 80d4 	beq.w	80090ee <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00b      	beq.n	8008f6a <HAL_UART_IRQHandler+0xae>
 8008f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d005      	beq.n	8008f6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f62:	f043 0201 	orr.w	r2, r3, #1
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f6e:	f003 0304 	and.w	r3, r3, #4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00b      	beq.n	8008f8e <HAL_UART_IRQHandler+0xd2>
 8008f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d005      	beq.n	8008f8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f86:	f043 0202 	orr.w	r2, r3, #2
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00b      	beq.n	8008fb2 <HAL_UART_IRQHandler+0xf6>
 8008f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d005      	beq.n	8008fb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008faa:	f043 0204 	orr.w	r2, r3, #4
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fb6:	f003 0308 	and.w	r3, r3, #8
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d011      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x126>
 8008fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fc2:	f003 0320 	and.w	r3, r3, #32
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d105      	bne.n	8008fd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d005      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fda:	f043 0208 	orr.w	r2, r3, #8
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f000 81f7 	beq.w	80093da <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ff0:	f003 0320 	and.w	r3, r3, #32
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d008      	beq.n	800900a <HAL_UART_IRQHandler+0x14e>
 8008ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ffc:	f003 0320 	and.w	r3, r3, #32
 8009000:	2b00      	cmp	r3, #0
 8009002:	d002      	beq.n	800900a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 fbef 	bl	80097e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009014:	2b40      	cmp	r3, #64	@ 0x40
 8009016:	bf0c      	ite	eq
 8009018:	2301      	moveq	r3, #1
 800901a:	2300      	movne	r3, #0
 800901c:	b2db      	uxtb	r3, r3
 800901e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009026:	f003 0308 	and.w	r3, r3, #8
 800902a:	2b00      	cmp	r3, #0
 800902c:	d103      	bne.n	8009036 <HAL_UART_IRQHandler+0x17a>
 800902e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009032:	2b00      	cmp	r3, #0
 8009034:	d051      	beq.n	80090da <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 faf5 	bl	8009626 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009046:	2b40      	cmp	r3, #64	@ 0x40
 8009048:	d142      	bne.n	80090d0 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3314      	adds	r3, #20
 8009050:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009054:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009058:	e853 3f00 	ldrex	r3, [r3]
 800905c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009060:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009064:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009068:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3314      	adds	r3, #20
 8009072:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009076:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800907a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009082:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009086:	e841 2300 	strex	r3, r2, [r1]
 800908a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800908e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1d9      	bne.n	800904a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800909a:	2b00      	cmp	r3, #0
 800909c:	d013      	beq.n	80090c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090a2:	4a80      	ldr	r2, [pc, #512]	@ (80092a4 <HAL_UART_IRQHandler+0x3e8>)
 80090a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fc f8f5 	bl	800529a <HAL_DMA_Abort_IT>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d019      	beq.n	80090ea <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80090c0:	4610      	mov	r0, r2
 80090c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090c4:	e011      	b.n	80090ea <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090ce:	e00c      	b.n	80090ea <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090d8:	e007      	b.n	80090ea <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80090e8:	e177      	b.n	80093da <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090ea:	bf00      	nop
    return;
 80090ec:	e175      	b.n	80093da <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	f040 8151 	bne.w	800939a <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80090f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090fc:	f003 0310 	and.w	r3, r3, #16
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 814a 	beq.w	800939a <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800910a:	f003 0310 	and.w	r3, r3, #16
 800910e:	2b00      	cmp	r3, #0
 8009110:	f000 8143 	beq.w	800939a <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009114:	2300      	movs	r3, #0
 8009116:	60bb      	str	r3, [r7, #8]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60bb      	str	r3, [r7, #8]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	60bb      	str	r3, [r7, #8]
 8009128:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009134:	2b40      	cmp	r3, #64	@ 0x40
 8009136:	f040 80b7 	bne.w	80092a8 <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009146:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 8147 	beq.w	80093de <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009154:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009158:	429a      	cmp	r2, r3
 800915a:	f080 8140 	bcs.w	80093de <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009164:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800916a:	69db      	ldr	r3, [r3, #28]
 800916c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009170:	f000 8088 	beq.w	8009284 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	330c      	adds	r3, #12
 800917a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009182:	e853 3f00 	ldrex	r3, [r3]
 8009186:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800918a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800918e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009192:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	330c      	adds	r3, #12
 800919c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80091a0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80091a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80091ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80091b0:	e841 2300 	strex	r3, r2, [r1]
 80091b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80091b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1d9      	bne.n	8009174 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3314      	adds	r3, #20
 80091c6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80091ca:	e853 3f00 	ldrex	r3, [r3]
 80091ce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80091d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80091d2:	f023 0301 	bic.w	r3, r3, #1
 80091d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3314      	adds	r3, #20
 80091e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80091e4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80091e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80091ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80091f0:	e841 2300 	strex	r3, r2, [r1]
 80091f4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80091f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e1      	bne.n	80091c0 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3314      	adds	r3, #20
 8009202:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009204:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009206:	e853 3f00 	ldrex	r3, [r3]
 800920a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800920c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800920e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009212:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3314      	adds	r3, #20
 800921c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009220:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009222:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009226:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800922e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e3      	bne.n	80091fc <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2220      	movs	r2, #32
 8009238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	330c      	adds	r3, #12
 8009248:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800924c:	e853 3f00 	ldrex	r3, [r3]
 8009250:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009254:	f023 0310 	bic.w	r3, r3, #16
 8009258:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	330c      	adds	r3, #12
 8009262:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009266:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009268:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800926c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800926e:	e841 2300 	strex	r3, r2, [r1]
 8009272:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009274:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1e3      	bne.n	8009242 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800927e:	4618      	mov	r0, r3
 8009280:	f7fb ff9b 	bl	80051ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2202      	movs	r2, #2
 8009288:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 8009296:	b292      	uxth	r2, r2
 8009298:	1a8a      	subs	r2, r1, r2
 800929a:	b292      	uxth	r2, r2
 800929c:	4611      	mov	r1, r2
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092a2:	e09c      	b.n	80093de <HAL_UART_IRQHandler+0x522>
 80092a4:	080096ed 	.word	0x080096ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092bc:	b29b      	uxth	r3, r3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f000 808f 	beq.w	80093e2 <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 80092c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 808a 	beq.w	80093e2 <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	330c      	adds	r3, #12
 80092d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d8:	e853 3f00 	ldrex	r3, [r3]
 80092dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	330c      	adds	r3, #12
 80092ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80092f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80092f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092fa:	e841 2300 	strex	r3, r2, [r1]
 80092fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1e3      	bne.n	80092ce <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	3314      	adds	r3, #20
 800930c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009310:	e853 3f00 	ldrex	r3, [r3]
 8009314:	623b      	str	r3, [r7, #32]
   return(result);
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	f023 0301 	bic.w	r3, r3, #1
 800931c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3314      	adds	r3, #20
 8009326:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800932a:	633a      	str	r2, [r7, #48]	@ 0x30
 800932c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009332:	e841 2300 	strex	r3, r2, [r1]
 8009336:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1e3      	bne.n	8009306 <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2220      	movs	r2, #32
 8009342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	330c      	adds	r3, #12
 8009352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	e853 3f00 	ldrex	r3, [r3]
 800935a:	60fb      	str	r3, [r7, #12]
   return(result);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f023 0310 	bic.w	r3, r3, #16
 8009362:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	330c      	adds	r3, #12
 800936c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009370:	61fa      	str	r2, [r7, #28]
 8009372:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009374:	69b9      	ldr	r1, [r7, #24]
 8009376:	69fa      	ldr	r2, [r7, #28]
 8009378:	e841 2300 	strex	r3, r2, [r1]
 800937c:	617b      	str	r3, [r7, #20]
   return(result);
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1e3      	bne.n	800934c <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2202      	movs	r2, #2
 8009388:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800938e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009392:	4611      	mov	r1, r2
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009398:	e023      	b.n	80093e2 <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800939a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800939e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d009      	beq.n	80093ba <HAL_UART_IRQHandler+0x4fe>
 80093a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f9af 	bl	8009716 <UART_Transmit_IT>
    return;
 80093b8:	e014      	b.n	80093e4 <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00e      	beq.n	80093e4 <HAL_UART_IRQHandler+0x528>
 80093c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d008      	beq.n	80093e4 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f9ef 	bl	80097b6 <UART_EndTransmit_IT>
    return;
 80093d8:	e004      	b.n	80093e4 <HAL_UART_IRQHandler+0x528>
    return;
 80093da:	bf00      	nop
 80093dc:	e002      	b.n	80093e4 <HAL_UART_IRQHandler+0x528>
      return;
 80093de:	bf00      	nop
 80093e0:	e000      	b.n	80093e4 <HAL_UART_IRQHandler+0x528>
      return;
 80093e2:	bf00      	nop
  }
}
 80093e4:	37e8      	adds	r7, #232	@ 0xe8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop

080093ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a10      	ldr	r2, [pc, #64]	@ (80094dc <UART_InitCallbacksToDefault+0x4c>)
 800949c:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a0f      	ldr	r2, [pc, #60]	@ (80094e0 <UART_InitCallbacksToDefault+0x50>)
 80094a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a0f      	ldr	r2, [pc, #60]	@ (80094e4 <UART_InitCallbacksToDefault+0x54>)
 80094a8:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a0e      	ldr	r2, [pc, #56]	@ (80094e8 <UART_InitCallbacksToDefault+0x58>)
 80094ae:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a0e      	ldr	r2, [pc, #56]	@ (80094ec <UART_InitCallbacksToDefault+0x5c>)
 80094b4:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a0d      	ldr	r2, [pc, #52]	@ (80094f0 <UART_InitCallbacksToDefault+0x60>)
 80094ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a0d      	ldr	r2, [pc, #52]	@ (80094f4 <UART_InitCallbacksToDefault+0x64>)
 80094c0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a0c      	ldr	r2, [pc, #48]	@ (80094f8 <UART_InitCallbacksToDefault+0x68>)
 80094c6:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a0c      	ldr	r2, [pc, #48]	@ (80094fc <UART_InitCallbacksToDefault+0x6c>)
 80094cc:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 80094ce:	bf00      	nop
 80094d0:	370c      	adds	r7, #12
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	08009401 	.word	0x08009401
 80094e0:	080093ed 	.word	0x080093ed
 80094e4:	08009415 	.word	0x08009415
 80094e8:	08003fc5 	.word	0x08003fc5
 80094ec:	08009429 	.word	0x08009429
 80094f0:	0800943d 	.word	0x0800943d
 80094f4:	08009451 	.word	0x08009451
 80094f8:	08009465 	.word	0x08009465
 80094fc:	08009479 	.word	0x08009479

08009500 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	603b      	str	r3, [r7, #0]
 800950c:	4613      	mov	r3, r2
 800950e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009510:	e03b      	b.n	800958a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009512:	6a3b      	ldr	r3, [r7, #32]
 8009514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009518:	d037      	beq.n	800958a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800951a:	f7fb fcf5 	bl	8004f08 <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	6a3a      	ldr	r2, [r7, #32]
 8009526:	429a      	cmp	r2, r3
 8009528:	d302      	bcc.n	8009530 <UART_WaitOnFlagUntilTimeout+0x30>
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e03a      	b.n	80095aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	f003 0304 	and.w	r3, r3, #4
 800953e:	2b00      	cmp	r3, #0
 8009540:	d023      	beq.n	800958a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	2b80      	cmp	r3, #128	@ 0x80
 8009546:	d020      	beq.n	800958a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	2b40      	cmp	r3, #64	@ 0x40
 800954c:	d01d      	beq.n	800958a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0308 	and.w	r3, r3, #8
 8009558:	2b08      	cmp	r3, #8
 800955a:	d116      	bne.n	800958a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800955c:	2300      	movs	r3, #0
 800955e:	617b      	str	r3, [r7, #20]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	617b      	str	r3, [r7, #20]
 8009570:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f000 f857 	bl	8009626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2208      	movs	r2, #8
 800957c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e00f      	b.n	80095aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	4013      	ands	r3, r2
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	429a      	cmp	r2, r3
 8009598:	bf0c      	ite	eq
 800959a:	2301      	moveq	r3, #1
 800959c:	2300      	movne	r3, #0
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	461a      	mov	r2, r3
 80095a2:	79fb      	ldrb	r3, [r7, #7]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d0b4      	beq.n	8009512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3718      	adds	r7, #24
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095b2:	b480      	push	{r7}
 80095b4:	b085      	sub	sp, #20
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	60f8      	str	r0, [r7, #12]
 80095ba:	60b9      	str	r1, [r7, #8]
 80095bc:	4613      	mov	r3, r2
 80095be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	88fa      	ldrh	r2, [r7, #6]
 80095ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	88fa      	ldrh	r2, [r7, #6]
 80095d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2222      	movs	r2, #34	@ 0x22
 80095dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d007      	beq.n	80095f8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68da      	ldr	r2, [r3, #12]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80095f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	695a      	ldr	r2, [r3, #20]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f042 0201 	orr.w	r2, r2, #1
 8009606:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68da      	ldr	r2, [r3, #12]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f042 0220 	orr.w	r2, r2, #32
 8009616:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3714      	adds	r7, #20
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009626:	b480      	push	{r7}
 8009628:	b095      	sub	sp, #84	@ 0x54
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	330c      	adds	r3, #12
 8009634:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800963e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009640:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009644:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	330c      	adds	r3, #12
 800964c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800964e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009650:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009652:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009654:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009656:	e841 2300 	strex	r3, r2, [r1]
 800965a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800965c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e5      	bne.n	800962e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3314      	adds	r3, #20
 8009668:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966a:	6a3b      	ldr	r3, [r7, #32]
 800966c:	e853 3f00 	ldrex	r3, [r3]
 8009670:	61fb      	str	r3, [r7, #28]
   return(result);
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	f023 0301 	bic.w	r3, r3, #1
 8009678:	64bb      	str	r3, [r7, #72]	@ 0x48
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3314      	adds	r3, #20
 8009680:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009682:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009684:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009686:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009688:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800968a:	e841 2300 	strex	r3, r2, [r1]
 800968e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1e5      	bne.n	8009662 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800969a:	2b01      	cmp	r3, #1
 800969c:	d119      	bne.n	80096d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	330c      	adds	r3, #12
 80096a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	e853 3f00 	ldrex	r3, [r3]
 80096ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	f023 0310 	bic.w	r3, r3, #16
 80096b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	330c      	adds	r3, #12
 80096bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096be:	61ba      	str	r2, [r7, #24]
 80096c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c2:	6979      	ldr	r1, [r7, #20]
 80096c4:	69ba      	ldr	r2, [r7, #24]
 80096c6:	e841 2300 	strex	r3, r2, [r1]
 80096ca:	613b      	str	r3, [r7, #16]
   return(result);
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1e5      	bne.n	800969e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2220      	movs	r2, #32
 80096d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80096e0:	bf00      	nop
 80096e2:	3754      	adds	r7, #84	@ 0x54
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	84da      	strh	r2, [r3, #38]	@ 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800970e:	bf00      	nop
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009716:	b480      	push	{r7}
 8009718:	b085      	sub	sp, #20
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b21      	cmp	r3, #33	@ 0x21
 8009728:	d13e      	bne.n	80097a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009732:	d114      	bne.n	800975e <UART_Transmit_IT+0x48>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d110      	bne.n	800975e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a1b      	ldr	r3, [r3, #32]
 8009740:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	881b      	ldrh	r3, [r3, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009750:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	1c9a      	adds	r2, r3, #2
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	621a      	str	r2, [r3, #32]
 800975c:	e008      	b.n	8009770 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	1c59      	adds	r1, r3, #1
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	6211      	str	r1, [r2, #32]
 8009768:	781a      	ldrb	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009774:	b29b      	uxth	r3, r3
 8009776:	3b01      	subs	r3, #1
 8009778:	b29b      	uxth	r3, r3
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	4619      	mov	r1, r3
 800977e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10f      	bne.n	80097a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68da      	ldr	r2, [r3, #12]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009792:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68da      	ldr	r2, [r3, #12]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80097a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	e000      	b.n	80097aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80097a8:	2302      	movs	r3, #2
  }
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b082      	sub	sp, #8
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68da      	ldr	r2, [r3, #12]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2220      	movs	r2, #32
 80097d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08c      	sub	sp, #48	@ 0x30
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b22      	cmp	r3, #34	@ 0x22
 80097fa:	f040 80b0 	bne.w	800995e <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009806:	d117      	bne.n	8009838 <UART_Receive_IT+0x50>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d113      	bne.n	8009838 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009810:	2300      	movs	r3, #0
 8009812:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009818:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	b29b      	uxth	r3, r3
 8009822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009826:	b29a      	uxth	r2, r3
 8009828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009830:	1c9a      	adds	r2, r3, #2
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	629a      	str	r2, [r3, #40]	@ 0x28
 8009836:	e026      	b.n	8009886 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800983c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800983e:	2300      	movs	r3, #0
 8009840:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800984a:	d007      	beq.n	800985c <UART_Receive_IT+0x74>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10a      	bne.n	800986a <UART_Receive_IT+0x82>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d106      	bne.n	800986a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	b2da      	uxtb	r2, r3
 8009864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009866:	701a      	strb	r2, [r3, #0]
 8009868:	e008      	b.n	800987c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	b2db      	uxtb	r3, r3
 8009872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009876:	b2da      	uxtb	r2, r3
 8009878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009880:	1c5a      	adds	r2, r3, #1
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800988a:	b29b      	uxth	r3, r3
 800988c:	3b01      	subs	r3, #1
 800988e:	b29b      	uxth	r3, r3
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	4619      	mov	r1, r3
 8009894:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009896:	2b00      	cmp	r3, #0
 8009898:	d15f      	bne.n	800995a <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68da      	ldr	r2, [r3, #12]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f022 0220 	bic.w	r2, r2, #32
 80098a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68da      	ldr	r2, [r3, #12]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80098b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	695a      	ldr	r2, [r3, #20]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f022 0201 	bic.w	r2, r2, #1
 80098c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2220      	movs	r2, #32
 80098ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d136      	bne.n	800994e <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	330c      	adds	r3, #12
 80098ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	e853 3f00 	ldrex	r3, [r3]
 80098f4:	613b      	str	r3, [r7, #16]
   return(result);
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	f023 0310 	bic.w	r3, r3, #16
 80098fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	330c      	adds	r3, #12
 8009904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009906:	623a      	str	r2, [r7, #32]
 8009908:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990a:	69f9      	ldr	r1, [r7, #28]
 800990c:	6a3a      	ldr	r2, [r7, #32]
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	61bb      	str	r3, [r7, #24]
   return(result);
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e5      	bne.n	80098e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 0310 	and.w	r3, r3, #16
 8009924:	2b10      	cmp	r3, #16
 8009926:	d10a      	bne.n	800993e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009928:	2300      	movs	r3, #0
 800992a:	60fb      	str	r3, [r7, #12]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	60fb      	str	r3, [r7, #12]
 800993c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8009946:	4611      	mov	r1, r2
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	4798      	blx	r3
 800994c:	e003      	b.n	8009956 <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	e002      	b.n	8009960 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	e000      	b.n	8009960 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 800995e:	2302      	movs	r3, #2
  }
}
 8009960:	4618      	mov	r0, r3
 8009962:	3730      	adds	r7, #48	@ 0x30
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800996c:	b0c0      	sub	sp, #256	@ 0x100
 800996e:	af00      	add	r7, sp, #0
 8009970:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009984:	68d9      	ldr	r1, [r3, #12]
 8009986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	ea40 0301 	orr.w	r3, r0, r1
 8009990:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009996:	689a      	ldr	r2, [r3, #8]
 8009998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	431a      	orrs	r2, r3
 80099a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	431a      	orrs	r2, r3
 80099a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099ac:	69db      	ldr	r3, [r3, #28]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80099b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80099c0:	f021 010c 	bic.w	r1, r1, #12
 80099c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80099ce:	430b      	orrs	r3, r1
 80099d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80099d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80099de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099e2:	6999      	ldr	r1, [r3, #24]
 80099e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	ea40 0301 	orr.w	r3, r0, r1
 80099ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80099f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	4b8f      	ldr	r3, [pc, #572]	@ (8009c34 <UART_SetConfig+0x2cc>)
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d005      	beq.n	8009a08 <UART_SetConfig+0xa0>
 80099fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	4b8d      	ldr	r3, [pc, #564]	@ (8009c38 <UART_SetConfig+0x2d0>)
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d104      	bne.n	8009a12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a08:	f7fd fa94 	bl	8006f34 <HAL_RCC_GetPCLK2Freq>
 8009a0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009a10:	e003      	b.n	8009a1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a12:	f7fd fa7b 	bl	8006f0c <HAL_RCC_GetPCLK1Freq>
 8009a16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a1e:	69db      	ldr	r3, [r3, #28]
 8009a20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a24:	f040 810c 	bne.w	8009c40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009a32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009a36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009a3a:	4622      	mov	r2, r4
 8009a3c:	462b      	mov	r3, r5
 8009a3e:	1891      	adds	r1, r2, r2
 8009a40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009a42:	415b      	adcs	r3, r3
 8009a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	eb12 0801 	adds.w	r8, r2, r1
 8009a50:	4629      	mov	r1, r5
 8009a52:	eb43 0901 	adc.w	r9, r3, r1
 8009a56:	f04f 0200 	mov.w	r2, #0
 8009a5a:	f04f 0300 	mov.w	r3, #0
 8009a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009a6a:	4690      	mov	r8, r2
 8009a6c:	4699      	mov	r9, r3
 8009a6e:	4623      	mov	r3, r4
 8009a70:	eb18 0303 	adds.w	r3, r8, r3
 8009a74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009a78:	462b      	mov	r3, r5
 8009a7a:	eb49 0303 	adc.w	r3, r9, r3
 8009a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009a92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009a96:	460b      	mov	r3, r1
 8009a98:	18db      	adds	r3, r3, r3
 8009a9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	eb42 0303 	adc.w	r3, r2, r3
 8009aa2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009aa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009aa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009aac:	f7f7 f854 	bl	8000b58 <__aeabi_uldivmod>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4b61      	ldr	r3, [pc, #388]	@ (8009c3c <UART_SetConfig+0x2d4>)
 8009ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8009aba:	095b      	lsrs	r3, r3, #5
 8009abc:	011c      	lsls	r4, r3, #4
 8009abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ac8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009acc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009ad0:	4642      	mov	r2, r8
 8009ad2:	464b      	mov	r3, r9
 8009ad4:	1891      	adds	r1, r2, r2
 8009ad6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009ad8:	415b      	adcs	r3, r3
 8009ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009adc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009ae0:	4641      	mov	r1, r8
 8009ae2:	eb12 0a01 	adds.w	sl, r2, r1
 8009ae6:	4649      	mov	r1, r9
 8009ae8:	eb43 0b01 	adc.w	fp, r3, r1
 8009aec:	f04f 0200 	mov.w	r2, #0
 8009af0:	f04f 0300 	mov.w	r3, #0
 8009af4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009af8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b00:	4692      	mov	sl, r2
 8009b02:	469b      	mov	fp, r3
 8009b04:	4643      	mov	r3, r8
 8009b06:	eb1a 0303 	adds.w	r3, sl, r3
 8009b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b0e:	464b      	mov	r3, r9
 8009b10:	eb4b 0303 	adc.w	r3, fp, r3
 8009b14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009b28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	18db      	adds	r3, r3, r3
 8009b30:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b32:	4613      	mov	r3, r2
 8009b34:	eb42 0303 	adc.w	r3, r2, r3
 8009b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009b3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009b42:	f7f7 f809 	bl	8000b58 <__aeabi_uldivmod>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8009c3c <UART_SetConfig+0x2d4>)
 8009b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8009b52:	095b      	lsrs	r3, r3, #5
 8009b54:	2264      	movs	r2, #100	@ 0x64
 8009b56:	fb02 f303 	mul.w	r3, r2, r3
 8009b5a:	1acb      	subs	r3, r1, r3
 8009b5c:	00db      	lsls	r3, r3, #3
 8009b5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009b62:	4b36      	ldr	r3, [pc, #216]	@ (8009c3c <UART_SetConfig+0x2d4>)
 8009b64:	fba3 2302 	umull	r2, r3, r3, r2
 8009b68:	095b      	lsrs	r3, r3, #5
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009b70:	441c      	add	r4, r3
 8009b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b76:	2200      	movs	r2, #0
 8009b78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009b80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009b84:	4642      	mov	r2, r8
 8009b86:	464b      	mov	r3, r9
 8009b88:	1891      	adds	r1, r2, r2
 8009b8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009b8c:	415b      	adcs	r3, r3
 8009b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009b94:	4641      	mov	r1, r8
 8009b96:	1851      	adds	r1, r2, r1
 8009b98:	6339      	str	r1, [r7, #48]	@ 0x30
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	414b      	adcs	r3, r1
 8009b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ba0:	f04f 0200 	mov.w	r2, #0
 8009ba4:	f04f 0300 	mov.w	r3, #0
 8009ba8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009bac:	4659      	mov	r1, fp
 8009bae:	00cb      	lsls	r3, r1, #3
 8009bb0:	4651      	mov	r1, sl
 8009bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bb6:	4651      	mov	r1, sl
 8009bb8:	00ca      	lsls	r2, r1, #3
 8009bba:	4610      	mov	r0, r2
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	4642      	mov	r2, r8
 8009bc2:	189b      	adds	r3, r3, r2
 8009bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009bc8:	464b      	mov	r3, r9
 8009bca:	460a      	mov	r2, r1
 8009bcc:	eb42 0303 	adc.w	r3, r2, r3
 8009bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009be0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009be4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009be8:	460b      	mov	r3, r1
 8009bea:	18db      	adds	r3, r3, r3
 8009bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009bee:	4613      	mov	r3, r2
 8009bf0:	eb42 0303 	adc.w	r3, r2, r3
 8009bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009bfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009bfe:	f7f6 ffab 	bl	8000b58 <__aeabi_uldivmod>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	4b0d      	ldr	r3, [pc, #52]	@ (8009c3c <UART_SetConfig+0x2d4>)
 8009c08:	fba3 1302 	umull	r1, r3, r3, r2
 8009c0c:	095b      	lsrs	r3, r3, #5
 8009c0e:	2164      	movs	r1, #100	@ 0x64
 8009c10:	fb01 f303 	mul.w	r3, r1, r3
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	3332      	adds	r3, #50	@ 0x32
 8009c1a:	4a08      	ldr	r2, [pc, #32]	@ (8009c3c <UART_SetConfig+0x2d4>)
 8009c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c20:	095b      	lsrs	r3, r3, #5
 8009c22:	f003 0207 	and.w	r2, r3, #7
 8009c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4422      	add	r2, r4
 8009c2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009c30:	e106      	b.n	8009e40 <UART_SetConfig+0x4d8>
 8009c32:	bf00      	nop
 8009c34:	40011000 	.word	0x40011000
 8009c38:	40011400 	.word	0x40011400
 8009c3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c44:	2200      	movs	r2, #0
 8009c46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009c4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009c4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009c52:	4642      	mov	r2, r8
 8009c54:	464b      	mov	r3, r9
 8009c56:	1891      	adds	r1, r2, r2
 8009c58:	6239      	str	r1, [r7, #32]
 8009c5a:	415b      	adcs	r3, r3
 8009c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c62:	4641      	mov	r1, r8
 8009c64:	1854      	adds	r4, r2, r1
 8009c66:	4649      	mov	r1, r9
 8009c68:	eb43 0501 	adc.w	r5, r3, r1
 8009c6c:	f04f 0200 	mov.w	r2, #0
 8009c70:	f04f 0300 	mov.w	r3, #0
 8009c74:	00eb      	lsls	r3, r5, #3
 8009c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c7a:	00e2      	lsls	r2, r4, #3
 8009c7c:	4614      	mov	r4, r2
 8009c7e:	461d      	mov	r5, r3
 8009c80:	4643      	mov	r3, r8
 8009c82:	18e3      	adds	r3, r4, r3
 8009c84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c88:	464b      	mov	r3, r9
 8009c8a:	eb45 0303 	adc.w	r3, r5, r3
 8009c8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009ca2:	f04f 0200 	mov.w	r2, #0
 8009ca6:	f04f 0300 	mov.w	r3, #0
 8009caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009cae:	4629      	mov	r1, r5
 8009cb0:	008b      	lsls	r3, r1, #2
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cb8:	4621      	mov	r1, r4
 8009cba:	008a      	lsls	r2, r1, #2
 8009cbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009cc0:	f7f6 ff4a 	bl	8000b58 <__aeabi_uldivmod>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4b60      	ldr	r3, [pc, #384]	@ (8009e4c <UART_SetConfig+0x4e4>)
 8009cca:	fba3 2302 	umull	r2, r3, r3, r2
 8009cce:	095b      	lsrs	r3, r3, #5
 8009cd0:	011c      	lsls	r4, r3, #4
 8009cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009cdc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009ce0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009ce4:	4642      	mov	r2, r8
 8009ce6:	464b      	mov	r3, r9
 8009ce8:	1891      	adds	r1, r2, r2
 8009cea:	61b9      	str	r1, [r7, #24]
 8009cec:	415b      	adcs	r3, r3
 8009cee:	61fb      	str	r3, [r7, #28]
 8009cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009cf4:	4641      	mov	r1, r8
 8009cf6:	1851      	adds	r1, r2, r1
 8009cf8:	6139      	str	r1, [r7, #16]
 8009cfa:	4649      	mov	r1, r9
 8009cfc:	414b      	adcs	r3, r1
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	f04f 0200 	mov.w	r2, #0
 8009d04:	f04f 0300 	mov.w	r3, #0
 8009d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d0c:	4659      	mov	r1, fp
 8009d0e:	00cb      	lsls	r3, r1, #3
 8009d10:	4651      	mov	r1, sl
 8009d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d16:	4651      	mov	r1, sl
 8009d18:	00ca      	lsls	r2, r1, #3
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4603      	mov	r3, r0
 8009d20:	4642      	mov	r2, r8
 8009d22:	189b      	adds	r3, r3, r2
 8009d24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d28:	464b      	mov	r3, r9
 8009d2a:	460a      	mov	r2, r1
 8009d2c:	eb42 0303 	adc.w	r3, r2, r3
 8009d30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009d40:	f04f 0200 	mov.w	r2, #0
 8009d44:	f04f 0300 	mov.w	r3, #0
 8009d48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009d4c:	4649      	mov	r1, r9
 8009d4e:	008b      	lsls	r3, r1, #2
 8009d50:	4641      	mov	r1, r8
 8009d52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d56:	4641      	mov	r1, r8
 8009d58:	008a      	lsls	r2, r1, #2
 8009d5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009d5e:	f7f6 fefb 	bl	8000b58 <__aeabi_uldivmod>
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	4611      	mov	r1, r2
 8009d68:	4b38      	ldr	r3, [pc, #224]	@ (8009e4c <UART_SetConfig+0x4e4>)
 8009d6a:	fba3 2301 	umull	r2, r3, r3, r1
 8009d6e:	095b      	lsrs	r3, r3, #5
 8009d70:	2264      	movs	r2, #100	@ 0x64
 8009d72:	fb02 f303 	mul.w	r3, r2, r3
 8009d76:	1acb      	subs	r3, r1, r3
 8009d78:	011b      	lsls	r3, r3, #4
 8009d7a:	3332      	adds	r3, #50	@ 0x32
 8009d7c:	4a33      	ldr	r2, [pc, #204]	@ (8009e4c <UART_SetConfig+0x4e4>)
 8009d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d82:	095b      	lsrs	r3, r3, #5
 8009d84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d88:	441c      	add	r4, r3
 8009d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d8e:	2200      	movs	r2, #0
 8009d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d92:	677a      	str	r2, [r7, #116]	@ 0x74
 8009d94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009d98:	4642      	mov	r2, r8
 8009d9a:	464b      	mov	r3, r9
 8009d9c:	1891      	adds	r1, r2, r2
 8009d9e:	60b9      	str	r1, [r7, #8]
 8009da0:	415b      	adcs	r3, r3
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009da8:	4641      	mov	r1, r8
 8009daa:	1851      	adds	r1, r2, r1
 8009dac:	6039      	str	r1, [r7, #0]
 8009dae:	4649      	mov	r1, r9
 8009db0:	414b      	adcs	r3, r1
 8009db2:	607b      	str	r3, [r7, #4]
 8009db4:	f04f 0200 	mov.w	r2, #0
 8009db8:	f04f 0300 	mov.w	r3, #0
 8009dbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009dc0:	4659      	mov	r1, fp
 8009dc2:	00cb      	lsls	r3, r1, #3
 8009dc4:	4651      	mov	r1, sl
 8009dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009dca:	4651      	mov	r1, sl
 8009dcc:	00ca      	lsls	r2, r1, #3
 8009dce:	4610      	mov	r0, r2
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	4642      	mov	r2, r8
 8009dd6:	189b      	adds	r3, r3, r2
 8009dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009dda:	464b      	mov	r3, r9
 8009ddc:	460a      	mov	r2, r1
 8009dde:	eb42 0303 	adc.w	r3, r2, r3
 8009de2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	663b      	str	r3, [r7, #96]	@ 0x60
 8009dee:	667a      	str	r2, [r7, #100]	@ 0x64
 8009df0:	f04f 0200 	mov.w	r2, #0
 8009df4:	f04f 0300 	mov.w	r3, #0
 8009df8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009dfc:	4649      	mov	r1, r9
 8009dfe:	008b      	lsls	r3, r1, #2
 8009e00:	4641      	mov	r1, r8
 8009e02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e06:	4641      	mov	r1, r8
 8009e08:	008a      	lsls	r2, r1, #2
 8009e0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009e0e:	f7f6 fea3 	bl	8000b58 <__aeabi_uldivmod>
 8009e12:	4602      	mov	r2, r0
 8009e14:	460b      	mov	r3, r1
 8009e16:	4b0d      	ldr	r3, [pc, #52]	@ (8009e4c <UART_SetConfig+0x4e4>)
 8009e18:	fba3 1302 	umull	r1, r3, r3, r2
 8009e1c:	095b      	lsrs	r3, r3, #5
 8009e1e:	2164      	movs	r1, #100	@ 0x64
 8009e20:	fb01 f303 	mul.w	r3, r1, r3
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	011b      	lsls	r3, r3, #4
 8009e28:	3332      	adds	r3, #50	@ 0x32
 8009e2a:	4a08      	ldr	r2, [pc, #32]	@ (8009e4c <UART_SetConfig+0x4e4>)
 8009e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e30:	095b      	lsrs	r3, r3, #5
 8009e32:	f003 020f 	and.w	r2, r3, #15
 8009e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4422      	add	r2, r4
 8009e3e:	609a      	str	r2, [r3, #8]
}
 8009e40:	bf00      	nop
 8009e42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009e46:	46bd      	mov	sp, r7
 8009e48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e4c:	51eb851f 	.word	0x51eb851f

08009e50 <CANSPI_Initialize>:
    return l_EcuStatus;
}

/* Initialize CAN */
ecu_status_t CANSPI_Initialize(Can_t *p_CAN)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b08c      	sub	sp, #48	@ 0x30
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (NULL == p_CAN)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d103      	bne.n	8009e6c <CANSPI_Initialize+0x1c>
    {
        l_EcuStatus = ECU_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009e6a:	e19b      	b.n	800a1a4 <CANSPI_Initialize+0x354>
        RXF5 RXF5reg;
        RXM0 RXM0reg;
        RXM1 RXM1reg;

        /* Intialize Rx Mask values */
        RXM0reg.RXM0SIDH = 0x00;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	743b      	strb	r3, [r7, #16]
        RXM0reg.RXM0SIDL = 0x00;
 8009e70:	2300      	movs	r3, #0
 8009e72:	747b      	strb	r3, [r7, #17]
        RXM0reg.RXM0EID8 = 0x00;
 8009e74:	2300      	movs	r3, #0
 8009e76:	74bb      	strb	r3, [r7, #18]
        RXM0reg.RXM0EID0 = 0x00;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	74fb      	strb	r3, [r7, #19]

        RXM1reg.RXM1SIDH = 0x00;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	733b      	strb	r3, [r7, #12]
        RXM1reg.RXM1SIDL = 0x00;
 8009e80:	2300      	movs	r3, #0
 8009e82:	737b      	strb	r3, [r7, #13]
        RXM1reg.RXM1EID8 = 0x00;
 8009e84:	2300      	movs	r3, #0
 8009e86:	73bb      	strb	r3, [r7, #14]
        RXM1reg.RXM1EID0 = 0x00;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	73fb      	strb	r3, [r7, #15]

        /* Intialize Rx Filter values */
        RXF0reg.RXF0SIDH = 0x00;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        RXF0reg.RXF0SIDL = 0x00; // Starndard Filter
 8009e92:	2300      	movs	r3, #0
 8009e94:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
        RXF0reg.RXF0EID8 = 0x00;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        RXF0reg.RXF0EID0 = 0x00;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        RXF1reg.RXF1SIDH = 0x00;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        RXF1reg.RXF1SIDL = 0x08; // Exntended Filter
 8009eaa:	2308      	movs	r3, #8
 8009eac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        RXF1reg.RXF1EID8 = 0x00;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        RXF1reg.RXF1EID0 = 0x00;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        RXF2reg.RXF2SIDH = 0x00;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	f887 3020 	strb.w	r3, [r7, #32]
        RXF2reg.RXF2SIDL = 0x00;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        RXF2reg.RXF2EID8 = 0x00;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        RXF2reg.RXF2EID0 = 0x00;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        RXF3reg.RXF3SIDH = 0x00;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	773b      	strb	r3, [r7, #28]
        RXF3reg.RXF3SIDL = 0x00;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	777b      	strb	r3, [r7, #29]
        RXF3reg.RXF3EID8 = 0x00;
 8009edc:	2300      	movs	r3, #0
 8009ede:	77bb      	strb	r3, [r7, #30]
        RXF3reg.RXF3EID0 = 0x00;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	77fb      	strb	r3, [r7, #31]

        RXF4reg.RXF4SIDH = 0x00;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	763b      	strb	r3, [r7, #24]
        RXF4reg.RXF4SIDL = 0x00;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	767b      	strb	r3, [r7, #25]
        RXF4reg.RXF4EID8 = 0x00;
 8009eec:	2300      	movs	r3, #0
 8009eee:	76bb      	strb	r3, [r7, #26]
        RXF4reg.RXF4EID0 = 0x00;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	76fb      	strb	r3, [r7, #27]

        RXF5reg.RXF5SIDH = 0x00;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	753b      	strb	r3, [r7, #20]
        RXF5reg.RXF5SIDL = 0x08;
 8009ef8:	2308      	movs	r3, #8
 8009efa:	757b      	strb	r3, [r7, #21]
        RXF5reg.RXF5EID8 = 0x00;
 8009efc:	2300      	movs	r3, #0
 8009efe:	75bb      	strb	r3, [r7, #22]
        RXF5reg.RXF5EID0 = 0x00;
 8009f00:	2300      	movs	r3, #0
 8009f02:	75fb      	strb	r3, [r7, #23]

        /* Intialize MCP2515, check SPI */
        l_EcuStatus |= MCP2515_Initialize(p_CAN->UsedSPI);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 fbfb 	bl	800a704 <MCP2515_Initialize>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	461a      	mov	r2, r3
 8009f12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009f16:	4313      	orrs	r3, r2
 8009f18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        
        if (l_EcuStatus == ECU_OK)
 8009f1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f040 813f 	bne.w	800a1a4 <CANSPI_Initialize+0x354>
        {
            l_EcuStatus |= MCP2515_Reset(p_CAN->UsedSPI);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 fc8c 	bl	800a848 <MCP2515_Reset>
 8009f30:	4603      	mov	r3, r0
 8009f32:	461a      	mov	r2, r3
 8009f34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            /* Change mode as configuration mode */
            l_EcuStatus |= MCP2515_SetConfigMode(p_CAN->UsedSPI);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 fc0a 	bl	800a75c <MCP2515_SetConfigMode>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009f50:	4313      	orrs	r3, r2
 8009f52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (l_EcuStatus == ECU_OK)
 8009f56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f040 8122 	bne.w	800a1a4 <CANSPI_Initialize+0x354>
            {
                /* enable interrupt on receiving */
                l_EcuStatus |= MCP2515_WriteByte(p_CAN->UsedSPI, MCP2515_CANINTE, CAN_RX_INTERRUPT);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2203      	movs	r2, #3
 8009f66:	212b      	movs	r1, #43	@ 0x2b
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 fd0d 	bl	800a988 <MCP2515_WriteByte>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	461a      	mov	r2, r3
 8009f72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009f76:	4313      	orrs	r3, r2
 8009f78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

                /* Configure filter & mask */
                l_EcuStatus |= MCP2515_WriteByteSequence(p_CAN->UsedSPI, MCP2515_RXM0SIDH, MCP2515_RXM0EID0, 
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6818      	ldr	r0, [r3, #0]
 8009f80:	f107 0310 	add.w	r3, r7, #16
 8009f84:	2223      	movs	r2, #35	@ 0x23
 8009f86:	2120      	movs	r1, #32
 8009f88:	f000 fd3c 	bl	800aa04 <MCP2515_WriteByteSequence>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	461a      	mov	r2, r3
 8009f90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009f94:	4313      	orrs	r3, r2
 8009f96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                                                           &(RXM0reg.RXM0SIDH));
                l_EcuStatus |= MCP2515_WriteByteSequence(p_CAN->UsedSPI, MCP2515_RXM1SIDH, MCP2515_RXM1EID0, 
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6818      	ldr	r0, [r3, #0]
 8009f9e:	f107 030c 	add.w	r3, r7, #12
 8009fa2:	2227      	movs	r2, #39	@ 0x27
 8009fa4:	2124      	movs	r1, #36	@ 0x24
 8009fa6:	f000 fd2d 	bl	800aa04 <MCP2515_WriteByteSequence>
 8009faa:	4603      	mov	r3, r0
 8009fac:	461a      	mov	r2, r3
 8009fae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                                                           &(RXM1reg.RXM1SIDH));
                l_EcuStatus |= MCP2515_WriteByteSequence(p_CAN->UsedSPI, MCP2515_RXF0SIDH, MCP2515_RXF0EID0, 
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6818      	ldr	r0, [r3, #0]
 8009fbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009fc0:	2203      	movs	r2, #3
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	f000 fd1e 	bl	800aa04 <MCP2515_WriteByteSequence>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	461a      	mov	r2, r3
 8009fcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                                                           &(RXF0reg.RXF0SIDH));
                l_EcuStatus |= MCP2515_WriteByteSequence(p_CAN->UsedSPI, MCP2515_RXF1SIDH, MCP2515_RXF1EID0, 
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6818      	ldr	r0, [r3, #0]
 8009fda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fde:	2207      	movs	r2, #7
 8009fe0:	2104      	movs	r1, #4
 8009fe2:	f000 fd0f 	bl	800aa04 <MCP2515_WriteByteSequence>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	461a      	mov	r2, r3
 8009fea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                                                           &(RXF1reg.RXF1SIDH));
                l_EcuStatus |= MCP2515_WriteByteSequence(p_CAN->UsedSPI, MCP2515_RXF2SIDH, MCP2515_RXF2EID0, 
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6818      	ldr	r0, [r3, #0]
 8009ff8:	f107 0320 	add.w	r3, r7, #32
 8009ffc:	220b      	movs	r2, #11
 8009ffe:	2108      	movs	r1, #8
 800a000:	f000 fd00 	bl	800aa04 <MCP2515_WriteByteSequence>
 800a004:	4603      	mov	r3, r0
 800a006:	461a      	mov	r2, r3
 800a008:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a00c:	4313      	orrs	r3, r2
 800a00e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                                                           &(RXF2reg.RXF2SIDH));
                l_EcuStatus |= MCP2515_WriteByteSequence(p_CAN->UsedSPI, MCP2515_RXF3SIDH, MCP2515_RXF3EID0, 
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6818      	ldr	r0, [r3, #0]
 800a016:	f107 031c 	add.w	r3, r7, #28
 800a01a:	2213      	movs	r2, #19
 800a01c:	2110      	movs	r1, #16
 800a01e:	f000 fcf1 	bl	800aa04 <MCP2515_WriteByteSequence>
 800a022:	4603      	mov	r3, r0
 800a024:	461a      	mov	r2, r3
 800a026:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a02a:	4313      	orrs	r3, r2
 800a02c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                                                           &(RXF3reg.RXF3SIDH));
                l_EcuStatus |= MCP2515_WriteByteSequence(p_CAN->UsedSPI, MCP2515_RXF4SIDH, MCP2515_RXF4EID0, 
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6818      	ldr	r0, [r3, #0]
 800a034:	f107 0318 	add.w	r3, r7, #24
 800a038:	2217      	movs	r2, #23
 800a03a:	2114      	movs	r1, #20
 800a03c:	f000 fce2 	bl	800aa04 <MCP2515_WriteByteSequence>
 800a040:	4603      	mov	r3, r0
 800a042:	461a      	mov	r2, r3
 800a044:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a048:	4313      	orrs	r3, r2
 800a04a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                                                           &(RXF4reg.RXF4SIDH));
                l_EcuStatus |= MCP2515_WriteByteSequence(p_CAN->UsedSPI, MCP2515_RXF5SIDH, MCP2515_RXF5EID0, 
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6818      	ldr	r0, [r3, #0]
 800a052:	f107 0314 	add.w	r3, r7, #20
 800a056:	221b      	movs	r2, #27
 800a058:	2118      	movs	r1, #24
 800a05a:	f000 fcd3 	bl	800aa04 <MCP2515_WriteByteSequence>
 800a05e:	4603      	mov	r3, r0
 800a060:	461a      	mov	r2, r3
 800a062:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a066:	4313      	orrs	r3, r2
 800a068:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                                                           &(RXF5reg.RXF5SIDH));

                /* Accept All (Standard + Extended) */
                // Enable BUKT, Accept Filter 0
                l_EcuStatus |= MCP2515_WriteByte(p_CAN->UsedSPI, MCP2515_RXB0CTRL, 0x04); 
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2204      	movs	r2, #4
 800a072:	2160      	movs	r1, #96	@ 0x60
 800a074:	4618      	mov	r0, r3
 800a076:	f000 fc87 	bl	800a988 <MCP2515_WriteByte>
 800a07a:	4603      	mov	r3, r0
 800a07c:	461a      	mov	r2, r3
 800a07e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a082:	4313      	orrs	r3, r2
 800a084:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                // Accept Filter 1
                l_EcuStatus |= MCP2515_WriteByte(p_CAN->UsedSPI, MCP2515_RXB1CTRL, 0x01); 
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2201      	movs	r2, #1
 800a08e:	2170      	movs	r1, #112	@ 0x70
 800a090:	4618      	mov	r0, r3
 800a092:	f000 fc79 	bl	800a988 <MCP2515_WriteByte>
 800a096:	4603      	mov	r3, r0
 800a098:	461a      	mov	r2, r3
 800a09a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                
                
                uint8_t l_CNF_val[3] = {0, 0, 0};
 800a0a4:	4a42      	ldr	r2, [pc, #264]	@ (800a1b0 <CANSPI_Initialize+0x360>)
 800a0a6:	f107 0308 	add.w	r3, r7, #8
 800a0aa:	6812      	ldr	r2, [r2, #0]
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	8019      	strh	r1, [r3, #0]
 800a0b0:	3302      	adds	r3, #2
 800a0b2:	0c12      	lsrs	r2, r2, #16
 800a0b4:	701a      	strb	r2, [r3, #0]

                switch (p_CAN->Speed)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	791b      	ldrb	r3, [r3, #4]
 800a0ba:	2b05      	cmp	r3, #5
 800a0bc:	d838      	bhi.n	800a130 <CANSPI_Initialize+0x2e0>
 800a0be:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c4 <CANSPI_Initialize+0x274>)
 800a0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c4:	0800a0dd 	.word	0x0800a0dd
 800a0c8:	0800a0eb 	.word	0x0800a0eb
 800a0cc:	0800a0f9 	.word	0x0800a0f9
 800a0d0:	0800a107 	.word	0x0800a107
 800a0d4:	0800a115 	.word	0x0800a115
 800a0d8:	0800a123 	.word	0x0800a123
                {
                case MCP_8MHz_1000kBPS:
                    l_CNF_val[0] = 0x00;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	723b      	strb	r3, [r7, #8]
                    l_CNF_val[1] = 0xC0;
 800a0e0:	23c0      	movs	r3, #192	@ 0xc0
 800a0e2:	727b      	strb	r3, [r7, #9]
                    l_CNF_val[2] = 0x80;
 800a0e4:	2380      	movs	r3, #128	@ 0x80
 800a0e6:	72bb      	strb	r3, [r7, #10]
                    break;
 800a0e8:	e026      	b.n	800a138 <CANSPI_Initialize+0x2e8>

                case MCP_8MHz_500kBPS:
                    l_CNF_val[0] = 0x00;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	723b      	strb	r3, [r7, #8]
                    l_CNF_val[1] = 0xD1;
 800a0ee:	23d1      	movs	r3, #209	@ 0xd1
 800a0f0:	727b      	strb	r3, [r7, #9]
                    l_CNF_val[2] = 0x81;
 800a0f2:	2381      	movs	r3, #129	@ 0x81
 800a0f4:	72bb      	strb	r3, [r7, #10]
                    break;
 800a0f6:	e01f      	b.n	800a138 <CANSPI_Initialize+0x2e8>

                case MCP_8MHz_250kBPS:
                    l_CNF_val[0] = 0x80;
 800a0f8:	2380      	movs	r3, #128	@ 0x80
 800a0fa:	723b      	strb	r3, [r7, #8]
                    l_CNF_val[1] = 0xE5;
 800a0fc:	23e5      	movs	r3, #229	@ 0xe5
 800a0fe:	727b      	strb	r3, [r7, #9]
                    l_CNF_val[2] = 0x83;
 800a100:	2383      	movs	r3, #131	@ 0x83
 800a102:	72bb      	strb	r3, [r7, #10]
                    break;
 800a104:	e018      	b.n	800a138 <CANSPI_Initialize+0x2e8>

                case MCP_8MHz_200kBPS:
                    l_CNF_val[0] = 0x80;
 800a106:	2380      	movs	r3, #128	@ 0x80
 800a108:	723b      	strb	r3, [r7, #8]
                    l_CNF_val[1] = 0xF6;
 800a10a:	23f6      	movs	r3, #246	@ 0xf6
 800a10c:	727b      	strb	r3, [r7, #9]
                    l_CNF_val[2] = 0x84;
 800a10e:	2384      	movs	r3, #132	@ 0x84
 800a110:	72bb      	strb	r3, [r7, #10]
                    break;
 800a112:	e011      	b.n	800a138 <CANSPI_Initialize+0x2e8>

                case MCP_8MHz_125kBPS:
                    l_CNF_val[0] = 0x81;
 800a114:	2381      	movs	r3, #129	@ 0x81
 800a116:	723b      	strb	r3, [r7, #8]
                    l_CNF_val[1] = 0xE5;
 800a118:	23e5      	movs	r3, #229	@ 0xe5
 800a11a:	727b      	strb	r3, [r7, #9]
                    l_CNF_val[2] = 0x83;
 800a11c:	2383      	movs	r3, #131	@ 0x83
 800a11e:	72bb      	strb	r3, [r7, #10]
                    break;
 800a120:	e00a      	b.n	800a138 <CANSPI_Initialize+0x2e8>

                case MCP_8MHz_100kBPS:
                    l_CNF_val[0] = 0x81;
 800a122:	2381      	movs	r3, #129	@ 0x81
 800a124:	723b      	strb	r3, [r7, #8]
                    l_CNF_val[1] = 0xF6;
 800a126:	23f6      	movs	r3, #246	@ 0xf6
 800a128:	727b      	strb	r3, [r7, #9]
                    l_CNF_val[2] = 0x84;
 800a12a:	2384      	movs	r3, #132	@ 0x84
 800a12c:	72bb      	strb	r3, [r7, #10]
                    break;
 800a12e:	e003      	b.n	800a138 <CANSPI_Initialize+0x2e8>
                
                default:
                    l_EcuStatus = ECU_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    break;
 800a136:	bf00      	nop
                }

                l_EcuStatus |= MCP2515_WriteByte(p_CAN->UsedSPI, MCP2515_CNF1, l_CNF_val[0]);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	7a3a      	ldrb	r2, [r7, #8]
 800a13e:	212a      	movs	r1, #42	@ 0x2a
 800a140:	4618      	mov	r0, r3
 800a142:	f000 fc21 	bl	800a988 <MCP2515_WriteByte>
 800a146:	4603      	mov	r3, r0
 800a148:	461a      	mov	r2, r3
 800a14a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a14e:	4313      	orrs	r3, r2
 800a150:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                l_EcuStatus |= MCP2515_WriteByte(p_CAN->UsedSPI, MCP2515_CNF2, l_CNF_val[1]);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	7a7a      	ldrb	r2, [r7, #9]
 800a15a:	2129      	movs	r1, #41	@ 0x29
 800a15c:	4618      	mov	r0, r3
 800a15e:	f000 fc13 	bl	800a988 <MCP2515_WriteByte>
 800a162:	4603      	mov	r3, r0
 800a164:	461a      	mov	r2, r3
 800a166:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a16a:	4313      	orrs	r3, r2
 800a16c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                l_EcuStatus |= MCP2515_WriteByte(p_CAN->UsedSPI, MCP2515_CNF3, l_CNF_val[2]);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	7aba      	ldrb	r2, [r7, #10]
 800a176:	2128      	movs	r1, #40	@ 0x28
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 fc05 	bl	800a988 <MCP2515_WriteByte>
 800a17e:	4603      	mov	r3, r0
 800a180:	461a      	mov	r2, r3
 800a182:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a186:	4313      	orrs	r3, r2
 800a188:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

                l_EcuStatus |= MCP2515_SetNormalMode(p_CAN->UsedSPI);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4618      	mov	r0, r3
 800a192:	f000 fb1e 	bl	800a7d2 <MCP2515_SetNormalMode>
 800a196:	4603      	mov	r3, r0
 800a198:	461a      	mov	r2, r3
 800a19a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }
        }
    }
    return l_EcuStatus;
 800a1a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3730      	adds	r7, #48	@ 0x30
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	08010ca4 	.word	0x08010ca4

0800a1b4 <CANSPI_Transmit>:

/* Transmit CAN message */
ecu_status_t CANSPI_Transmit(Can_t *p_CAN, uCAN_MSG *tempCanMsg)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af02      	add	r7, sp, #8
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
    ecu_status_t l_EcuStatus = ECU_OK;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	73fb      	strb	r3, [r7, #15]
    if ((NULL == p_CAN) || (NULL == tempCanMsg))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <CANSPI_Transmit+0x1a>
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d102      	bne.n	800a1d4 <CANSPI_Transmit+0x20>
    {
        l_EcuStatus = ECU_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	73fb      	strb	r3, [r7, #15]
 800a1d2:	e0ab      	b.n	800a32c <CANSPI_Transmit+0x178>
    }
    else
    {
        idReg.tempSIDH = 0;
 800a1d4:	4b58      	ldr	r3, [pc, #352]	@ (800a338 <CANSPI_Transmit+0x184>)
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	701a      	strb	r2, [r3, #0]
        idReg.tempSIDL = 0;
 800a1da:	4b57      	ldr	r3, [pc, #348]	@ (800a338 <CANSPI_Transmit+0x184>)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	705a      	strb	r2, [r3, #1]
        idReg.tempEID8 = 0;
 800a1e0:	4b55      	ldr	r3, [pc, #340]	@ (800a338 <CANSPI_Transmit+0x184>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	709a      	strb	r2, [r3, #2]
        idReg.tempEID0 = 0;
 800a1e6:	4b54      	ldr	r3, [pc, #336]	@ (800a338 <CANSPI_Transmit+0x184>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	70da      	strb	r2, [r3, #3]

        l_EcuStatus |= MCP2515_ReadStatus(p_CAN->UsedSPI, &ctrlStatus.ctrl_status);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4952      	ldr	r1, [pc, #328]	@ (800a33c <CANSPI_Transmit+0x188>)
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 fcc2 	bl	800ab7c <MCP2515_ReadStatus>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	73fb      	strb	r3, [r7, #15]

        /* Finding empty buffer */
        if (ctrlStatus.TXB0REQ != 1)
 800a202:	4b4e      	ldr	r3, [pc, #312]	@ (800a33c <CANSPI_Transmit+0x188>)
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	f003 0304 	and.w	r3, r3, #4
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d129      	bne.n	800a264 <CANSPI_Transmit+0xb0>
        {
            /* convert CAN ID for register */
            l_EcuStatus |= convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	6858      	ldr	r0, [r3, #4]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	4a47      	ldr	r2, [pc, #284]	@ (800a338 <CANSPI_Transmit+0x184>)
 800a21a:	4619      	mov	r1, r3
 800a21c:	f000 f9fb 	bl	800a616 <convertCANid2Reg>
 800a220:	4603      	mov	r3, r0
 800a222:	461a      	mov	r2, r3
 800a224:	7bfb      	ldrb	r3, [r7, #15]
 800a226:	4313      	orrs	r3, r2
 800a228:	73fb      	strb	r3, [r7, #15]

            /* Load data to Tx Buffer */
            l_EcuStatus |= MCP2515_LoadTxSequence(p_CAN->UsedSPI, MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), 
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6818      	ldr	r0, [r3, #0]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	7a1a      	ldrb	r2, [r3, #8]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	3309      	adds	r3, #9
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	4613      	mov	r3, r2
 800a23a:	4a3f      	ldr	r2, [pc, #252]	@ (800a338 <CANSPI_Transmit+0x184>)
 800a23c:	2140      	movs	r1, #64	@ 0x40
 800a23e:	f000 fc27 	bl	800aa90 <MCP2515_LoadTxSequence>
 800a242:	4603      	mov	r3, r0
 800a244:	461a      	mov	r2, r3
 800a246:	7bfb      	ldrb	r3, [r7, #15]
 800a248:	4313      	orrs	r3, r2
 800a24a:	73fb      	strb	r3, [r7, #15]
                                                  tempCanMsg->frame.dlc, &(tempCanMsg->frame.data[0]));

            /* Request to transmit */
            l_EcuStatus |= MCP2515_RequestToSend(p_CAN->UsedSPI, MCP2515_RTS_TX0);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2181      	movs	r1, #129	@ 0x81
 800a252:	4618      	mov	r0, r3
 800a254:	f000 fc68 	bl	800ab28 <MCP2515_RequestToSend>
 800a258:	4603      	mov	r3, r0
 800a25a:	461a      	mov	r2, r3
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
 800a25e:	4313      	orrs	r3, r2
 800a260:	73fb      	strb	r3, [r7, #15]
 800a262:	e063      	b.n	800a32c <CANSPI_Transmit+0x178>
        }
        else if (ctrlStatus.TXB1REQ != 1)
 800a264:	4b35      	ldr	r3, [pc, #212]	@ (800a33c <CANSPI_Transmit+0x188>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	f003 0310 	and.w	r3, r3, #16
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d129      	bne.n	800a2c6 <CANSPI_Transmit+0x112>
        {
            l_EcuStatus |= convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	6858      	ldr	r0, [r3, #4]
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	4a2f      	ldr	r2, [pc, #188]	@ (800a338 <CANSPI_Transmit+0x184>)
 800a27c:	4619      	mov	r1, r3
 800a27e:	f000 f9ca 	bl	800a616 <convertCANid2Reg>
 800a282:	4603      	mov	r3, r0
 800a284:	461a      	mov	r2, r3
 800a286:	7bfb      	ldrb	r3, [r7, #15]
 800a288:	4313      	orrs	r3, r2
 800a28a:	73fb      	strb	r3, [r7, #15]

            l_EcuStatus |= MCP2515_LoadTxSequence(p_CAN->UsedSPI, MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), 
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6818      	ldr	r0, [r3, #0]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	7a1a      	ldrb	r2, [r3, #8]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	3309      	adds	r3, #9
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	4613      	mov	r3, r2
 800a29c:	4a26      	ldr	r2, [pc, #152]	@ (800a338 <CANSPI_Transmit+0x184>)
 800a29e:	2142      	movs	r1, #66	@ 0x42
 800a2a0:	f000 fbf6 	bl	800aa90 <MCP2515_LoadTxSequence>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	7bfb      	ldrb	r3, [r7, #15]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	73fb      	strb	r3, [r7, #15]
                                                  tempCanMsg->frame.dlc, &(tempCanMsg->frame.data[0]));
            l_EcuStatus |= MCP2515_RequestToSend(p_CAN->UsedSPI, MCP2515_RTS_TX1);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2182      	movs	r1, #130	@ 0x82
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f000 fc37 	bl	800ab28 <MCP2515_RequestToSend>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	461a      	mov	r2, r3
 800a2be:	7bfb      	ldrb	r3, [r7, #15]
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	73fb      	strb	r3, [r7, #15]
 800a2c4:	e032      	b.n	800a32c <CANSPI_Transmit+0x178>
        }
        else if (ctrlStatus.TXB2REQ != 1)
 800a2c6:	4b1d      	ldr	r3, [pc, #116]	@ (800a33c <CANSPI_Transmit+0x188>)
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d129      	bne.n	800a328 <CANSPI_Transmit+0x174>
        {
            l_EcuStatus |= convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	6858      	ldr	r0, [r3, #4]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	4a16      	ldr	r2, [pc, #88]	@ (800a338 <CANSPI_Transmit+0x184>)
 800a2de:	4619      	mov	r1, r3
 800a2e0:	f000 f999 	bl	800a616 <convertCANid2Reg>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	73fb      	strb	r3, [r7, #15]

            l_EcuStatus |= MCP2515_LoadTxSequence(p_CAN->UsedSPI, MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), 
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6818      	ldr	r0, [r3, #0]
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	7a1a      	ldrb	r2, [r3, #8]
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	3309      	adds	r3, #9
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	4a0e      	ldr	r2, [pc, #56]	@ (800a338 <CANSPI_Transmit+0x184>)
 800a300:	2144      	movs	r1, #68	@ 0x44
 800a302:	f000 fbc5 	bl	800aa90 <MCP2515_LoadTxSequence>
 800a306:	4603      	mov	r3, r0
 800a308:	461a      	mov	r2, r3
 800a30a:	7bfb      	ldrb	r3, [r7, #15]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	73fb      	strb	r3, [r7, #15]
                                                  tempCanMsg->frame.dlc, &(tempCanMsg->frame.data[0]));
            l_EcuStatus |= MCP2515_RequestToSend(p_CAN->UsedSPI, MCP2515_RTS_TX2);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2184      	movs	r1, #132	@ 0x84
 800a316:	4618      	mov	r0, r3
 800a318:	f000 fc06 	bl	800ab28 <MCP2515_RequestToSend>
 800a31c:	4603      	mov	r3, r0
 800a31e:	461a      	mov	r2, r3
 800a320:	7bfb      	ldrb	r3, [r7, #15]
 800a322:	4313      	orrs	r3, r2
 800a324:	73fb      	strb	r3, [r7, #15]
 800a326:	e001      	b.n	800a32c <CANSPI_Transmit+0x178>
        }
        else
        {
            l_EcuStatus = ECU_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_EcuStatus;
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	20000c60 	.word	0x20000c60
 800a33c:	20000c58 	.word	0x20000c58

0800a340 <CANSPI_Receive>:

/* Receive CAN message */
ecu_status_t CANSPI_Receive(Can_t *p_CAN, uCAN_MSG *tempCanMsg)
{
 800a340:	b590      	push	{r4, r7, lr}
 800a342:	b08b      	sub	sp, #44	@ 0x2c
 800a344:	af02      	add	r7, sp, #8
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
    ecu_status_t l_EcuStatus = ECU_OK;
 800a34a:	2300      	movs	r3, #0
 800a34c:	77fb      	strb	r3, [r7, #31]
    if ((NULL == p_CAN) || (NULL == tempCanMsg))
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <CANSPI_Receive+0x1a>
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d102      	bne.n	800a360 <CANSPI_Receive+0x20>
    {
        l_EcuStatus = ECU_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	77fb      	strb	r3, [r7, #31]
 800a35e:	e0a8      	b.n	800a4b2 <CANSPI_Receive+0x172>
    else
    {
        rx_reg_t rxReg;
        ctrl_rx_status_t rxStatus;

        l_EcuStatus |= MCP2515_GetRxStatus(p_CAN->UsedSPI, &rxStatus.ctrl_rx_status);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f107 020c 	add.w	r2, r7, #12
 800a368:	4611      	mov	r1, r2
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 fc3c 	bl	800abe8 <MCP2515_GetRxStatus>
 800a370:	4603      	mov	r3, r0
 800a372:	461a      	mov	r2, r3
 800a374:	7ffb      	ldrb	r3, [r7, #31]
 800a376:	4313      	orrs	r3, r2
 800a378:	77fb      	strb	r3, [r7, #31]

        /* Check receive buffer */
        if (rxStatus.rxBuffer != 0)
 800a37a:	7b3b      	ldrb	r3, [r7, #12]
 800a37c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a380:	b2db      	uxtb	r3, r3
 800a382:	2b00      	cmp	r3, #0
 800a384:	f000 8093 	beq.w	800a4ae <CANSPI_Receive+0x16e>
        {
            /* finding buffer which has a message */
            if ((rxStatus.rxBuffer == MSG_IN_RXB0) | (rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 800a388:	7b3b      	ldrb	r3, [r7, #12]
 800a38a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	2b40      	cmp	r3, #64	@ 0x40
 800a392:	bf0c      	ite	eq
 800a394:	2301      	moveq	r3, #1
 800a396:	2300      	movne	r3, #0
 800a398:	b2da      	uxtb	r2, r3
 800a39a:	7b3b      	ldrb	r3, [r7, #12]
 800a39c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3a4:	bf0c      	ite	eq
 800a3a6:	2301      	moveq	r3, #1
 800a3a8:	2300      	movne	r3, #0
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d019      	beq.n	800a3e8 <CANSPI_Receive+0xa8>
            {
                l_EcuStatus |= MCP2515_ReadRxSequence(p_CAN->UsedSPI, MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, 
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6818      	ldr	r0, [r3, #0]
 800a3b8:	f107 0210 	add.w	r2, r7, #16
 800a3bc:	230d      	movs	r3, #13
 800a3be:	2190      	movs	r1, #144	@ 0x90
 800a3c0:	f000 faaa 	bl	800a918 <MCP2515_ReadRxSequence>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	7ffb      	ldrb	r3, [r7, #31]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	77fb      	strb	r3, [r7, #31]
                                                      sizeof(rxReg.rx_reg_array));
                #if CAN_RX_INTERRUPT == CAN_RX_INTERRUP_ENABLE
                l_EcuStatus |= MCP2515_BitModify(p_CAN->UsedSPI, MCP2515_CANINTF, 0xFF, 0x00);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6818      	ldr	r0, [r3, #0]
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	22ff      	movs	r2, #255	@ 0xff
 800a3d6:	212c      	movs	r1, #44	@ 0x2c
 800a3d8:	f000 fc3c 	bl	800ac54 <MCP2515_BitModify>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	461a      	mov	r2, r3
 800a3e0:	7ffb      	ldrb	r3, [r7, #31]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	77fb      	strb	r3, [r7, #31]
 800a3e6:	e01e      	b.n	800a426 <CANSPI_Receive+0xe6>
                #endif
            }
            else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 800a3e8:	7b3b      	ldrb	r3, [r7, #12]
 800a3ea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	2b80      	cmp	r3, #128	@ 0x80
 800a3f2:	d118      	bne.n	800a426 <CANSPI_Receive+0xe6>
            {
                l_EcuStatus |= MCP2515_ReadRxSequence(p_CAN->UsedSPI, MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, 
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	f107 0210 	add.w	r2, r7, #16
 800a3fc:	230d      	movs	r3, #13
 800a3fe:	2194      	movs	r1, #148	@ 0x94
 800a400:	f000 fa8a 	bl	800a918 <MCP2515_ReadRxSequence>
 800a404:	4603      	mov	r3, r0
 800a406:	461a      	mov	r2, r3
 800a408:	7ffb      	ldrb	r3, [r7, #31]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	77fb      	strb	r3, [r7, #31]
                                                      sizeof(rxReg.rx_reg_array));
                #if CAN_RX_INTERRUPT == CAN_RX_INTERRUP_ENABLE
                l_EcuStatus |= MCP2515_BitModify(p_CAN->UsedSPI, MCP2515_CANINTF, 0xFF, 0x00);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6818      	ldr	r0, [r3, #0]
 800a412:	2300      	movs	r3, #0
 800a414:	22ff      	movs	r2, #255	@ 0xff
 800a416:	212c      	movs	r1, #44	@ 0x2c
 800a418:	f000 fc1c 	bl	800ac54 <MCP2515_BitModify>
 800a41c:	4603      	mov	r3, r0
 800a41e:	461a      	mov	r2, r3
 800a420:	7ffb      	ldrb	r3, [r7, #31]
 800a422:	4313      	orrs	r3, r2
 800a424:	77fb      	strb	r3, [r7, #31]
                #endif
            }

            /* if the message is extended CAN type */
            if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800a426:	7b3b      	ldrb	r3, [r7, #12]
 800a428:	f003 0318 	and.w	r3, r3, #24
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	2b10      	cmp	r3, #16
 800a430:	d112      	bne.n	800a458 <CANSPI_Receive+0x118>
            {
                tempCanMsg->frame.idType = (uint8_t)dEXTENDED_CAN_MSG_ID_2_0B;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	2202      	movs	r2, #2
 800a436:	701a      	strb	r2, [r3, #0]
                l_EcuStatus |= convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, 
 800a438:	7cb8      	ldrb	r0, [r7, #18]
 800a43a:	7cf9      	ldrb	r1, [r7, #19]
 800a43c:	7c3a      	ldrb	r2, [r7, #16]
 800a43e:	7c7c      	ldrb	r4, [r7, #17]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	3304      	adds	r3, #4
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	4623      	mov	r3, r4
 800a448:	f000 f888 	bl	800a55c <convertReg2ExtendedCANid>
 800a44c:	4603      	mov	r3, r0
 800a44e:	461a      	mov	r2, r3
 800a450:	7ffb      	ldrb	r3, [r7, #31]
 800a452:	4313      	orrs	r3, r2
 800a454:	77fb      	strb	r3, [r7, #31]
 800a456:	e00e      	b.n	800a476 <CANSPI_Receive+0x136>
                                                        rxReg.RXBnSIDL, &tempCanMsg->frame.id);
            }
            else
            {
                /* Standard type */
                tempCanMsg->frame.idType = (uint8_t)dSTANDARD_CAN_MSG_ID_2_0B;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	2201      	movs	r2, #1
 800a45c:	701a      	strb	r2, [r3, #0]
                l_EcuStatus |= convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL, &tempCanMsg->frame.id);
 800a45e:	7c38      	ldrb	r0, [r7, #16]
 800a460:	7c79      	ldrb	r1, [r7, #17]
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	3304      	adds	r3, #4
 800a466:	461a      	mov	r2, r3
 800a468:	f000 f8b7 	bl	800a5da <convertReg2StandardCANid>
 800a46c:	4603      	mov	r3, r0
 800a46e:	461a      	mov	r2, r3
 800a470:	7ffb      	ldrb	r3, [r7, #31]
 800a472:	4313      	orrs	r3, r2
 800a474:	77fb      	strb	r3, [r7, #31]
            }

            tempCanMsg->frame.dlc = rxReg.RXBnDLC;
 800a476:	7d3a      	ldrb	r2, [r7, #20]
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	721a      	strb	r2, [r3, #8]
            tempCanMsg->frame.data[0] = rxReg.RXBnD0;
 800a47c:	7d7a      	ldrb	r2, [r7, #21]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	725a      	strb	r2, [r3, #9]
            tempCanMsg->frame.data[1] = rxReg.RXBnD1;
 800a482:	7dba      	ldrb	r2, [r7, #22]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	729a      	strb	r2, [r3, #10]
            tempCanMsg->frame.data[2] = rxReg.RXBnD2;
 800a488:	7dfa      	ldrb	r2, [r7, #23]
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	72da      	strb	r2, [r3, #11]
            tempCanMsg->frame.data[3] = rxReg.RXBnD3;
 800a48e:	7e3a      	ldrb	r2, [r7, #24]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	731a      	strb	r2, [r3, #12]
            tempCanMsg->frame.data[4] = rxReg.RXBnD4;
 800a494:	7e7a      	ldrb	r2, [r7, #25]
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	735a      	strb	r2, [r3, #13]
            tempCanMsg->frame.data[5] = rxReg.RXBnD5;
 800a49a:	7eba      	ldrb	r2, [r7, #26]
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	739a      	strb	r2, [r3, #14]
            tempCanMsg->frame.data[6] = rxReg.RXBnD6;
 800a4a0:	7efa      	ldrb	r2, [r7, #27]
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	73da      	strb	r2, [r3, #15]
            tempCanMsg->frame.data[7] = rxReg.RXBnD7;
 800a4a6:	7f3a      	ldrb	r2, [r7, #28]
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	741a      	strb	r2, [r3, #16]
 800a4ac:	e001      	b.n	800a4b2 <CANSPI_Receive+0x172>
        }
        else
        {
            l_EcuStatus = ECU_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	77fb      	strb	r3, [r7, #31]
        }
    }
    return l_EcuStatus;
 800a4b2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3724      	adds	r7, #36	@ 0x24
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd90      	pop	{r4, r7, pc}

0800a4bc <CANSPI_isBussOff>:
    return l_EcuStatus;
}

/* check BUS off */
ecu_status_t CANSPI_isBussOff(Can_t *p_CAN)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_CAN)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d102      	bne.n	800a4d4 <CANSPI_isBussOff+0x18>
    {
        l_EcuStatus = ECU_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	73fb      	strb	r3, [r7, #15]
 800a4d2:	e014      	b.n	800a4fe <CANSPI_isBussOff+0x42>
    }
    else
    {
        l_EcuStatus |= MCP2515_ReadByte(p_CAN->UsedSPI, MCP2515_EFLG, &errorStatus.error_flag_reg);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a0b      	ldr	r2, [pc, #44]	@ (800a508 <CANSPI_isBussOff+0x4c>)
 800a4da:	212d      	movs	r1, #45	@ 0x2d
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f000 f9d9 	bl	800a894 <MCP2515_ReadByte>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	73fb      	strb	r3, [r7, #15]

        if (errorStatus.TXBO == 1)
 800a4ec:	4b06      	ldr	r3, [pc, #24]	@ (800a508 <CANSPI_isBussOff+0x4c>)
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	f003 0320 	and.w	r3, r3, #32
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <CANSPI_isBussOff+0x42>
        {
            l_EcuStatus = ECU_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_EcuStatus;
 800a4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	20000c5c 	.word	0x20000c5c

0800a50c <CANSPI_isTxErrorPassive>:
    return l_EcuStatus;
}

/* check Tx Passive Error */
ecu_status_t CANSPI_isTxErrorPassive(Can_t *p_CAN)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_CAN)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d102      	bne.n	800a524 <CANSPI_isTxErrorPassive+0x18>
    {
        l_EcuStatus = ECU_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	73fb      	strb	r3, [r7, #15]
 800a522:	e014      	b.n	800a54e <CANSPI_isTxErrorPassive+0x42>
    }
    else
    {
        l_EcuStatus |= MCP2515_ReadByte(p_CAN->UsedSPI, MCP2515_EFLG, &errorStatus.error_flag_reg);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a0b      	ldr	r2, [pc, #44]	@ (800a558 <CANSPI_isTxErrorPassive+0x4c>)
 800a52a:	212d      	movs	r1, #45	@ 0x2d
 800a52c:	4618      	mov	r0, r3
 800a52e:	f000 f9b1 	bl	800a894 <MCP2515_ReadByte>
 800a532:	4603      	mov	r3, r0
 800a534:	461a      	mov	r2, r3
 800a536:	7bfb      	ldrb	r3, [r7, #15]
 800a538:	4313      	orrs	r3, r2
 800a53a:	73fb      	strb	r3, [r7, #15]

        if (errorStatus.TXEP == 1)
 800a53c:	4b06      	ldr	r3, [pc, #24]	@ (800a558 <CANSPI_isTxErrorPassive+0x4c>)
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	f003 0310 	and.w	r3, r3, #16
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <CANSPI_isTxErrorPassive+0x42>
        {
            l_EcuStatus = ECU_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_EcuStatus;
 800a54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	20000c5c 	.word	0x20000c5c

0800a55c <convertReg2ExtendedCANid>:

/* convert register value to extended CAN ID */
static ecu_status_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, 
                                             uint8_t tempRXBn_SIDL, uint32_t *p_ConvID)
{
 800a55c:	b490      	push	{r4, r7}
 800a55e:	b086      	sub	sp, #24
 800a560:	af00      	add	r7, sp, #0
 800a562:	4604      	mov	r4, r0
 800a564:	4608      	mov	r0, r1
 800a566:	4611      	mov	r1, r2
 800a568:	461a      	mov	r2, r3
 800a56a:	4623      	mov	r3, r4
 800a56c:	71fb      	strb	r3, [r7, #7]
 800a56e:	4603      	mov	r3, r0
 800a570:	71bb      	strb	r3, [r7, #6]
 800a572:	460b      	mov	r3, r1
 800a574:	717b      	strb	r3, [r7, #5]
 800a576:	4613      	mov	r3, r2
 800a578:	713b      	strb	r3, [r7, #4]
    uint32_t returnValue = 0;
 800a57a:	2300      	movs	r3, #0
 800a57c:	617b      	str	r3, [r7, #20]
    uint32_t ConvertedID = 0;
 800a57e:	2300      	movs	r3, #0
 800a580:	613b      	str	r3, [r7, #16]
    uint8_t CAN_standardLo_ID_lo2bits;
    uint8_t CAN_standardLo_ID_hi3bits;

    CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 800a582:	793b      	ldrb	r3, [r7, #4]
 800a584:	f003 0303 	and.w	r3, r3, #3
 800a588:	73fb      	strb	r3, [r7, #15]
    CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 800a58a:	793b      	ldrb	r3, [r7, #4]
 800a58c:	095b      	lsrs	r3, r3, #5
 800a58e:	73bb      	strb	r3, [r7, #14]
    ConvertedID = (tempRXBn_SIDH << 3);
 800a590:	797b      	ldrb	r3, [r7, #5]
 800a592:	00db      	lsls	r3, r3, #3
 800a594:	613b      	str	r3, [r7, #16]
    ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 800a596:	7bbb      	ldrb	r3, [r7, #14]
 800a598:	693a      	ldr	r2, [r7, #16]
 800a59a:	4413      	add	r3, r2
 800a59c:	613b      	str	r3, [r7, #16]
    ConvertedID = (ConvertedID << 2);
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	613b      	str	r3, [r7, #16]
    ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 800a5a4:	7bfb      	ldrb	r3, [r7, #15]
 800a5a6:	693a      	ldr	r2, [r7, #16]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	613b      	str	r3, [r7, #16]
    ConvertedID = (ConvertedID << 8);
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	021b      	lsls	r3, r3, #8
 800a5b0:	613b      	str	r3, [r7, #16]
    ConvertedID = ConvertedID + tempRXBn_EIDH;
 800a5b2:	79fb      	ldrb	r3, [r7, #7]
 800a5b4:	693a      	ldr	r2, [r7, #16]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	613b      	str	r3, [r7, #16]
    ConvertedID = (ConvertedID << 8);
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	021b      	lsls	r3, r3, #8
 800a5be:	613b      	str	r3, [r7, #16]
    ConvertedID = ConvertedID + tempRXBn_EIDL;
 800a5c0:	79bb      	ldrb	r3, [r7, #6]
 800a5c2:	693a      	ldr	r2, [r7, #16]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	613b      	str	r3, [r7, #16]
    returnValue = ConvertedID;
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	617b      	str	r3, [r7, #20]
    return (returnValue);
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	b2db      	uxtb	r3, r3
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3718      	adds	r7, #24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bc90      	pop	{r4, r7}
 800a5d8:	4770      	bx	lr

0800a5da <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static ecu_status_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL, uint32_t *p_ConvID)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	b085      	sub	sp, #20
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	603a      	str	r2, [r7, #0]
 800a5e4:	71fb      	strb	r3, [r7, #7]
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	71bb      	strb	r3, [r7, #6]
	ecu_status_t l_EcuStatus = ECU_OK;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	73fb      	strb	r3, [r7, #15]
    uint32_t ConvertedID;

    ConvertedID = (tempRXBn_SIDH << 3);
 800a5ee:	79fb      	ldrb	r3, [r7, #7]
 800a5f0:	00db      	lsls	r3, r3, #3
 800a5f2:	60bb      	str	r3, [r7, #8]
    ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 800a5f4:	79bb      	ldrb	r3, [r7, #6]
 800a5f6:	095b      	lsrs	r3, r3, #5
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	4413      	add	r3, r2
 800a600:	60bb      	str	r3, [r7, #8]
    *p_ConvID = ConvertedID;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	601a      	str	r2, [r3, #0]

    return (l_EcuStatus);
 800a608:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3714      	adds	r7, #20
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <convertCANid2Reg>:

/* convert CAN ID to register value */
static ecu_status_t convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 800a616:	b480      	push	{r7}
 800a618:	b087      	sub	sp, #28
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	60f8      	str	r0, [r7, #12]
 800a61e:	460b      	mov	r3, r1
 800a620:	607a      	str	r2, [r7, #4]
 800a622:	72fb      	strb	r3, [r7, #11]
	ecu_status_t l_EcuStatus = ECU_OK;
 800a624:	2300      	movs	r3, #0
 800a626:	75fb      	strb	r3, [r7, #23]
    uint8_t wipSIDL = 0;
 800a628:	2300      	movs	r3, #0
 800a62a:	75bb      	strb	r3, [r7, #22]

    if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 800a62c:	7afb      	ldrb	r3, [r7, #11]
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d12e      	bne.n	800a690 <convertCANid2Reg+0x7a>
    {
        // EID0
        passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	b2da      	uxtb	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	70da      	strb	r2, [r3, #3]
        tempPassedInID = tempPassedInID >> 8;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	0a1b      	lsrs	r3, r3, #8
 800a63e:	60fb      	str	r3, [r7, #12]

        // EID8
        passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	b2da      	uxtb	r2, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	709a      	strb	r2, [r3, #2]
        tempPassedInID = tempPassedInID >> 8;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	0a1b      	lsrs	r3, r3, #8
 800a64c:	60fb      	str	r3, [r7, #12]

        // SIDL
        wipSIDL = 0x03 & tempPassedInID;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	b2db      	uxtb	r3, r3
 800a652:	f003 0303 	and.w	r3, r3, #3
 800a656:	75bb      	strb	r3, [r7, #22]
        tempPassedInID = tempPassedInID << 3;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	00db      	lsls	r3, r3, #3
 800a65c:	60fb      	str	r3, [r7, #12]
        wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	b2db      	uxtb	r3, r3
 800a662:	f023 031f 	bic.w	r3, r3, #31
 800a666:	b2da      	uxtb	r2, r3
 800a668:	7dbb      	ldrb	r3, [r7, #22]
 800a66a:	4413      	add	r3, r2
 800a66c:	75bb      	strb	r3, [r7, #22]
        wipSIDL = wipSIDL + 0x08;
 800a66e:	7dbb      	ldrb	r3, [r7, #22]
 800a670:	3308      	adds	r3, #8
 800a672:	75bb      	strb	r3, [r7, #22]
        passedIdReg->tempSIDL = 0xEB & wipSIDL;
 800a674:	7dbb      	ldrb	r3, [r7, #22]
 800a676:	f023 0314 	bic.w	r3, r3, #20
 800a67a:	b2da      	uxtb	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	705a      	strb	r2, [r3, #1]

        // SIDH
        tempPassedInID = tempPassedInID >> 8;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	0a1b      	lsrs	r3, r3, #8
 800a684:	60fb      	str	r3, [r7, #12]
        passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	b2da      	uxtb	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	701a      	strb	r2, [r3, #0]
 800a68e:	e013      	b.n	800a6b8 <convertCANid2Reg+0xa2>
    }
    else
    {
        passedIdReg->tempEID8 = 0;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	709a      	strb	r2, [r3, #2]
        passedIdReg->tempEID0 = 0;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	70da      	strb	r2, [r3, #3]
        tempPassedInID = tempPassedInID << 5;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	015b      	lsls	r3, r3, #5
 800a6a0:	60fb      	str	r3, [r7, #12]
        passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	705a      	strb	r2, [r3, #1]
        tempPassedInID = tempPassedInID >> 8;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	0a1b      	lsrs	r3, r3, #8
 800a6ae:	60fb      	str	r3, [r7, #12]
        passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	b2da      	uxtb	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	701a      	strb	r2, [r3, #0]
    }
    return (l_EcuStatus);
 800a6b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	371c      	adds	r7, #28
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <control_receive_data>:
/***********************************************************************************************************************
*                                                  FUNCTION DECLARATION                                                *
***********************************************************************************************************************/

ecu_status_t control_receive_data(control_t *p_UsedController)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedController)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d102      	bne.n	800a6de <control_receive_data+0x18>
    {
        l_EcuStatus = ECU_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	73fb      	strb	r3, [r7, #15]
 800a6dc:	e00c      	b.n	800a6f8 <control_receive_data+0x32>
    }
    else
    {
    	l_EcuStatus |= HAL_UART_Receive_IT(p_UsedController->UsedUART , p_UsedController->Data , 9);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6818      	ldr	r0, [r3, #0]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	3304      	adds	r3, #4
 800a6e6:	2209      	movs	r2, #9
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	f7fe fbc2 	bl	8008e72 <HAL_UART_Receive_IT>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	73fb      	strb	r3, [r7, #15]
    }
	return l_EcuStatus;
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
	...

0800a704 <MCP2515_Initialize>:
static ecu_status_t SPI_Rx(SPI_HandleTypeDef *p_UsedSPI, uint8_t *p_Buffer);
static ecu_status_t SPI_RxBuffer(SPI_HandleTypeDef *p_UsedSPI, uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
ecu_status_t MCP2515_Initialize(SPI_HandleTypeDef *p_UsedSPI)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d102      	bne.n	800a71c <MCP2515_Initialize+0x18>
    {
        l_EcuStatus = ECU_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	73fb      	strb	r3, [r7, #15]
 800a71a:	e017      	b.n	800a74c <MCP2515_Initialize+0x48>
    }
    else
    {
        MCP2515_CS_HIGH();
 800a71c:	2201      	movs	r2, #1
 800a71e:	2110      	movs	r1, #16
 800a720:	480d      	ldr	r0, [pc, #52]	@ (800a758 <MCP2515_Initialize+0x54>)
 800a722:	f7fa ff61 	bl	80055e8 <HAL_GPIO_WritePin>

        uint8_t loop = 10;
 800a726:	230a      	movs	r3, #10
 800a728:	73bb      	strb	r3, [r7, #14]

        do
        {
            /* check SPI Ready */
            if (HAL_SPI_GetState(p_UsedSPI) == HAL_SPI_STATE_READY)
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7fd f8f2 	bl	8007914 <HAL_SPI_GetState>
 800a730:	4603      	mov	r3, r0
 800a732:	2b01      	cmp	r3, #1
 800a734:	d102      	bne.n	800a73c <MCP2515_Initialize+0x38>
            {
                l_EcuStatus = ECU_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	73fb      	strb	r3, [r7, #15]
                break;
 800a73a:	e007      	b.n	800a74c <MCP2515_Initialize+0x48>
            }
            else
            {
                loop--;
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
 800a73e:	3b01      	subs	r3, #1
 800a740:	73bb      	strb	r3, [r7, #14]
                l_EcuStatus = ECU_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	73fb      	strb	r3, [r7, #15]
            }
        } while (loop > 0);
 800a746:	7bbb      	ldrb	r3, [r7, #14]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1ee      	bne.n	800a72a <MCP2515_Initialize+0x26>
    }
    return l_EcuStatus;
 800a74c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	40020000 	.word	0x40020000

0800a75c <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
ecu_status_t MCP2515_SetConfigMode(SPI_HandleTypeDef *p_UsedSPI)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 800a764:	2300      	movs	r3, #0
 800a766:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d102      	bne.n	800a774 <MCP2515_SetConfigMode+0x18>
    {
        l_EcuStatus = ECU_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	73fb      	strb	r3, [r7, #15]
 800a772:	e029      	b.n	800a7c8 <MCP2515_SetConfigMode+0x6c>
    }
    else
    {
        /* configure CANCTRL Register */
        l_EcuStatus |= MCP2515_WriteByte(p_UsedSPI, MCP2515_CANCTRL, 0x80);
 800a774:	2280      	movs	r2, #128	@ 0x80
 800a776:	210f      	movs	r1, #15
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 f905 	bl	800a988 <MCP2515_WriteByte>
 800a77e:	4603      	mov	r3, r0
 800a780:	461a      	mov	r2, r3
 800a782:	7bfb      	ldrb	r3, [r7, #15]
 800a784:	4313      	orrs	r3, r2
 800a786:	73fb      	strb	r3, [r7, #15]

        uint8_t loop = 10;
 800a788:	230a      	movs	r3, #10
 800a78a:	73bb      	strb	r3, [r7, #14]

        do
        {
            /* confirm mode configuration */
            uint8_t temp = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	737b      	strb	r3, [r7, #13]
            l_EcuStatus |= MCP2515_ReadByte(p_UsedSPI, MCP2515_CANSTAT, &temp);
 800a790:	f107 030d 	add.w	r3, r7, #13
 800a794:	461a      	mov	r2, r3
 800a796:	210e      	movs	r1, #14
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 f87b 	bl	800a894 <MCP2515_ReadByte>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	73fb      	strb	r3, [r7, #15]
            if ((temp & 0xE0) == 0x80)
 800a7a8:	7b7b      	ldrb	r3, [r7, #13]
 800a7aa:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a7ae:	2b80      	cmp	r3, #128	@ 0x80
 800a7b0:	d102      	bne.n	800a7b8 <MCP2515_SetConfigMode+0x5c>
            {
                l_EcuStatus = ECU_OK;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	73fb      	strb	r3, [r7, #15]
 800a7b6:	e001      	b.n	800a7bc <MCP2515_SetConfigMode+0x60>
            }
            else
            {
                l_EcuStatus = ECU_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	73fb      	strb	r3, [r7, #15]
            }

            loop--;
 800a7bc:	7bbb      	ldrb	r3, [r7, #14]
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	73bb      	strb	r3, [r7, #14]
        } while (loop > 0);
 800a7c2:	7bbb      	ldrb	r3, [r7, #14]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d1e1      	bne.n	800a78c <MCP2515_SetConfigMode+0x30>
    }
    return l_EcuStatus;    
 800a7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
ecu_status_t MCP2515_SetNormalMode(SPI_HandleTypeDef *p_UsedSPI)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b084      	sub	sp, #16
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d102      	bne.n	800a7ea <MCP2515_SetNormalMode+0x18>
    {
        l_EcuStatus = ECU_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	73fb      	strb	r3, [r7, #15]
 800a7e8:	e029      	b.n	800a83e <MCP2515_SetNormalMode+0x6c>
    }
    else
    {
        /* configure CANCTRL Register */
        l_EcuStatus |= MCP2515_WriteByte(p_UsedSPI, MCP2515_CANCTRL, 0x00);
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	210f      	movs	r1, #15
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f8ca 	bl	800a988 <MCP2515_WriteByte>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	7bfb      	ldrb	r3, [r7, #15]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	73fb      	strb	r3, [r7, #15]

        uint8_t loop = 10;
 800a7fe:	230a      	movs	r3, #10
 800a800:	73bb      	strb	r3, [r7, #14]

        do
        {
            /* confirm mode configuration */
            uint8_t temp = 0;
 800a802:	2300      	movs	r3, #0
 800a804:	737b      	strb	r3, [r7, #13]
            l_EcuStatus |= MCP2515_ReadByte(p_UsedSPI, MCP2515_CANSTAT, &temp);
 800a806:	f107 030d 	add.w	r3, r7, #13
 800a80a:	461a      	mov	r2, r3
 800a80c:	210e      	movs	r1, #14
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f840 	bl	800a894 <MCP2515_ReadByte>
 800a814:	4603      	mov	r3, r0
 800a816:	461a      	mov	r2, r3
 800a818:	7bfb      	ldrb	r3, [r7, #15]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	73fb      	strb	r3, [r7, #15]
            if ((temp & 0xE0) == 0x00)
 800a81e:	7b7b      	ldrb	r3, [r7, #13]
 800a820:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d102      	bne.n	800a82e <MCP2515_SetNormalMode+0x5c>
            {
                l_EcuStatus = ECU_OK;
 800a828:	2300      	movs	r3, #0
 800a82a:	73fb      	strb	r3, [r7, #15]
 800a82c:	e001      	b.n	800a832 <MCP2515_SetNormalMode+0x60>
            }
            else
            {
                l_EcuStatus = ECU_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	73fb      	strb	r3, [r7, #15]
            }

            loop--;
 800a832:	7bbb      	ldrb	r3, [r7, #14]
 800a834:	3b01      	subs	r3, #1
 800a836:	73bb      	strb	r3, [r7, #14]
        } while (loop > 0);
 800a838:	7bbb      	ldrb	r3, [r7, #14]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1e1      	bne.n	800a802 <MCP2515_SetNormalMode+0x30>
    }
    return l_EcuStatus;    
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <MCP2515_Reset>:
    return l_EcuStatus;    
}

/* MCP2515 SPI-Reset */
ecu_status_t MCP2515_Reset(SPI_HandleTypeDef *p_UsedSPI)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d102      	bne.n	800a860 <MCP2515_Reset+0x18>
    {
        l_EcuStatus = ECU_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	73fb      	strb	r3, [r7, #15]
 800a85e:	e012      	b.n	800a886 <MCP2515_Reset+0x3e>
    }
    else
    {
        MCP2515_CS_LOW();
 800a860:	2200      	movs	r2, #0
 800a862:	2110      	movs	r1, #16
 800a864:	480a      	ldr	r0, [pc, #40]	@ (800a890 <MCP2515_Reset+0x48>)
 800a866:	f7fa febf 	bl	80055e8 <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, MCP2515_RESET);
 800a86a:	21c0      	movs	r1, #192	@ 0xc0
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fa3f 	bl	800acf0 <SPI_Tx>
 800a872:	4603      	mov	r3, r0
 800a874:	461a      	mov	r2, r3
 800a876:	7bfb      	ldrb	r3, [r7, #15]
 800a878:	4313      	orrs	r3, r2
 800a87a:	73fb      	strb	r3, [r7, #15]

        MCP2515_CS_HIGH();
 800a87c:	2201      	movs	r2, #1
 800a87e:	2110      	movs	r1, #16
 800a880:	4803      	ldr	r0, [pc, #12]	@ (800a890 <MCP2515_Reset+0x48>)
 800a882:	f7fa feb1 	bl	80055e8 <HAL_GPIO_WritePin>
    }
    return l_EcuStatus;
 800a886:	7bfb      	ldrb	r3, [r7, #15]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	40020000 	.word	0x40020000

0800a894 <MCP2515_ReadByte>:

/* read single byte */
ecu_status_t MCP2515_ReadByte (SPI_HandleTypeDef *p_UsedSPI,uint8_t address, uint8_t *buffer)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	460b      	mov	r3, r1
 800a89e:	607a      	str	r2, [r7, #4]
 800a8a0:	72fb      	strb	r3, [r7, #11]
    ecu_status_t l_EcuStatus = ECU_OK;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	75fb      	strb	r3, [r7, #23]
    if (NULL == p_UsedSPI)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d102      	bne.n	800a8b2 <MCP2515_ReadByte+0x1e>
    {
        l_EcuStatus = ECU_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	75fb      	strb	r3, [r7, #23]
 800a8b0:	e02a      	b.n	800a908 <MCP2515_ReadByte+0x74>
    }
    else
    {
        uint8_t retVal;

        MCP2515_CS_LOW();
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	2110      	movs	r1, #16
 800a8b6:	4817      	ldr	r0, [pc, #92]	@ (800a914 <MCP2515_ReadByte+0x80>)
 800a8b8:	f7fa fe96 	bl	80055e8 <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, MCP2515_READ);
 800a8bc:	2103      	movs	r1, #3
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f000 fa16 	bl	800acf0 <SPI_Tx>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	75fb      	strb	r3, [r7, #23]
        l_EcuStatus |= SPI_Tx(p_UsedSPI, address);
 800a8ce:	7afb      	ldrb	r3, [r7, #11]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f000 fa0c 	bl	800acf0 <SPI_Tx>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	461a      	mov	r2, r3
 800a8dc:	7dfb      	ldrb	r3, [r7, #23]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	75fb      	strb	r3, [r7, #23]
        l_EcuStatus |= SPI_Rx(p_UsedSPI, &retVal);
 800a8e2:	f107 0316 	add.w	r3, r7, #22
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f000 fa41 	bl	800ad70 <SPI_Rx>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	7dfb      	ldrb	r3, [r7, #23]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	75fb      	strb	r3, [r7, #23]

        MCP2515_CS_HIGH();
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	2110      	movs	r1, #16
 800a8fc:	4805      	ldr	r0, [pc, #20]	@ (800a914 <MCP2515_ReadByte+0x80>)
 800a8fe:	f7fa fe73 	bl	80055e8 <HAL_GPIO_WritePin>

        *buffer = retVal;
 800a902:	7dba      	ldrb	r2, [r7, #22]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	701a      	strb	r2, [r3, #0]
    }
    return l_EcuStatus;
 800a908:	7dfb      	ldrb	r3, [r7, #23]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3718      	adds	r7, #24
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	40020000 	.word	0x40020000

0800a918 <MCP2515_ReadRxSequence>:

/* read buffer */
ecu_status_t MCP2515_ReadRxSequence(SPI_HandleTypeDef *p_UsedSPI, uint8_t instruction, uint8_t *data, uint8_t length)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b086      	sub	sp, #24
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	607a      	str	r2, [r7, #4]
 800a922:	461a      	mov	r2, r3
 800a924:	460b      	mov	r3, r1
 800a926:	72fb      	strb	r3, [r7, #11]
 800a928:	4613      	mov	r3, r2
 800a92a:	72bb      	strb	r3, [r7, #10]
    ecu_status_t l_EcuStatus = ECU_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	75fb      	strb	r3, [r7, #23]
    if (NULL == p_UsedSPI)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d102      	bne.n	800a93c <MCP2515_ReadRxSequence+0x24>
    {
        l_EcuStatus = ECU_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	75fb      	strb	r3, [r7, #23]
 800a93a:	e01e      	b.n	800a97a <MCP2515_ReadRxSequence+0x62>
    }
    else
    {
        MCP2515_CS_LOW();
 800a93c:	2200      	movs	r2, #0
 800a93e:	2110      	movs	r1, #16
 800a940:	4810      	ldr	r0, [pc, #64]	@ (800a984 <MCP2515_ReadRxSequence+0x6c>)
 800a942:	f7fa fe51 	bl	80055e8 <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, instruction);
 800a946:	7afb      	ldrb	r3, [r7, #11]
 800a948:	4619      	mov	r1, r3
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f000 f9d0 	bl	800acf0 <SPI_Tx>
 800a950:	4603      	mov	r3, r0
 800a952:	461a      	mov	r2, r3
 800a954:	7dfb      	ldrb	r3, [r7, #23]
 800a956:	4313      	orrs	r3, r2
 800a958:	75fb      	strb	r3, [r7, #23]
        l_EcuStatus |= SPI_RxBuffer(p_UsedSPI, data, length);
 800a95a:	7abb      	ldrb	r3, [r7, #10]
 800a95c:	461a      	mov	r2, r3
 800a95e:	6879      	ldr	r1, [r7, #4]
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f000 fa2a 	bl	800adba <SPI_RxBuffer>
 800a966:	4603      	mov	r3, r0
 800a968:	461a      	mov	r2, r3
 800a96a:	7dfb      	ldrb	r3, [r7, #23]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	75fb      	strb	r3, [r7, #23]

        MCP2515_CS_HIGH();
 800a970:	2201      	movs	r2, #1
 800a972:	2110      	movs	r1, #16
 800a974:	4803      	ldr	r0, [pc, #12]	@ (800a984 <MCP2515_ReadRxSequence+0x6c>)
 800a976:	f7fa fe37 	bl	80055e8 <HAL_GPIO_WritePin>
    }
    return l_EcuStatus;
 800a97a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3718      	adds	r7, #24
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	40020000 	.word	0x40020000

0800a988 <MCP2515_WriteByte>:

/* write single byte */
ecu_status_t MCP2515_WriteByte(SPI_HandleTypeDef *p_UsedSPI, uint8_t address, uint8_t data)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	460b      	mov	r3, r1
 800a992:	70fb      	strb	r3, [r7, #3]
 800a994:	4613      	mov	r3, r2
 800a996:	70bb      	strb	r3, [r7, #2]
    ecu_status_t l_EcuStatus = ECU_OK;
 800a998:	2300      	movs	r3, #0
 800a99a:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d102      	bne.n	800a9a8 <MCP2515_WriteByte+0x20>
    {
        l_EcuStatus = ECU_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	73fb      	strb	r3, [r7, #15]
 800a9a6:	e026      	b.n	800a9f6 <MCP2515_WriteByte+0x6e>
    }
    else
    {
        MCP2515_CS_LOW();
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	2110      	movs	r1, #16
 800a9ac:	4814      	ldr	r0, [pc, #80]	@ (800aa00 <MCP2515_WriteByte+0x78>)
 800a9ae:	f7fa fe1b 	bl	80055e8 <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, MCP2515_WRITE);
 800a9b2:	2102      	movs	r1, #2
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 f99b 	bl	800acf0 <SPI_Tx>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	461a      	mov	r2, r3
 800a9be:	7bfb      	ldrb	r3, [r7, #15]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	73fb      	strb	r3, [r7, #15]
        l_EcuStatus |= SPI_Tx(p_UsedSPI, address);
 800a9c4:	78fb      	ldrb	r3, [r7, #3]
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f991 	bl	800acf0 <SPI_Tx>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	7bfb      	ldrb	r3, [r7, #15]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	73fb      	strb	r3, [r7, #15]
        l_EcuStatus |= SPI_Tx(p_UsedSPI, data);
 800a9d8:	78bb      	ldrb	r3, [r7, #2]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 f987 	bl	800acf0 <SPI_Tx>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	7bfb      	ldrb	r3, [r7, #15]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	73fb      	strb	r3, [r7, #15]

        MCP2515_CS_HIGH();
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	2110      	movs	r1, #16
 800a9f0:	4803      	ldr	r0, [pc, #12]	@ (800aa00 <MCP2515_WriteByte+0x78>)
 800a9f2:	f7fa fdf9 	bl	80055e8 <HAL_GPIO_WritePin>
    }
    return l_EcuStatus;
 800a9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	40020000 	.word	0x40020000

0800aa04 <MCP2515_WriteByteSequence>:
/* write buffer */
ecu_status_t MCP2515_WriteByteSequence(SPI_HandleTypeDef *p_UsedSPI, 
                                       uint8_t startAddress, 
                                       uint8_t endAddress, 
                                       uint8_t *data)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b086      	sub	sp, #24
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	607b      	str	r3, [r7, #4]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	72fb      	strb	r3, [r7, #11]
 800aa12:	4613      	mov	r3, r2
 800aa14:	72bb      	strb	r3, [r7, #10]
    ecu_status_t l_EcuStatus = ECU_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	75fb      	strb	r3, [r7, #23]
    if (NULL == p_UsedSPI)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d102      	bne.n	800aa26 <MCP2515_WriteByteSequence+0x22>
    {
        l_EcuStatus = ECU_ERROR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	75fb      	strb	r3, [r7, #23]
 800aa24:	e02c      	b.n	800aa80 <MCP2515_WriteByteSequence+0x7c>
    }
    else
    {
        MCP2515_CS_LOW();
 800aa26:	2200      	movs	r2, #0
 800aa28:	2110      	movs	r1, #16
 800aa2a:	4818      	ldr	r0, [pc, #96]	@ (800aa8c <MCP2515_WriteByteSequence+0x88>)
 800aa2c:	f7fa fddc 	bl	80055e8 <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, MCP2515_WRITE);
 800aa30:	2102      	movs	r1, #2
 800aa32:	68f8      	ldr	r0, [r7, #12]
 800aa34:	f000 f95c 	bl	800acf0 <SPI_Tx>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	7dfb      	ldrb	r3, [r7, #23]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	75fb      	strb	r3, [r7, #23]
        l_EcuStatus |= SPI_Tx(p_UsedSPI, startAddress);
 800aa42:	7afb      	ldrb	r3, [r7, #11]
 800aa44:	4619      	mov	r1, r3
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f000 f952 	bl	800acf0 <SPI_Tx>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	461a      	mov	r2, r3
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	75fb      	strb	r3, [r7, #23]
        l_EcuStatus |= SPI_TxBuffer(p_UsedSPI, data, (endAddress - startAddress + 1));
 800aa56:	7aba      	ldrb	r2, [r7, #10]
 800aa58:	7afb      	ldrb	r3, [r7, #11]
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	3301      	adds	r3, #1
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	461a      	mov	r2, r3
 800aa64:	6879      	ldr	r1, [r7, #4]
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f000 f961 	bl	800ad2e <SPI_TxBuffer>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	461a      	mov	r2, r3
 800aa70:	7dfb      	ldrb	r3, [r7, #23]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	75fb      	strb	r3, [r7, #23]

        MCP2515_CS_HIGH();
 800aa76:	2201      	movs	r2, #1
 800aa78:	2110      	movs	r1, #16
 800aa7a:	4804      	ldr	r0, [pc, #16]	@ (800aa8c <MCP2515_WriteByteSequence+0x88>)
 800aa7c:	f7fa fdb4 	bl	80055e8 <HAL_GPIO_WritePin>
    }
    return l_EcuStatus;
 800aa80:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3718      	adds	r7, #24
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	40020000 	.word	0x40020000

0800aa90 <MCP2515_LoadTxSequence>:
ecu_status_t MCP2515_LoadTxSequence(SPI_HandleTypeDef *p_UsedSPI, 
                                    uint8_t instruction, 
                                    uint8_t *idReg, 
                                    uint8_t dlc, 
                                    uint8_t *data)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	607a      	str	r2, [r7, #4]
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	72fb      	strb	r3, [r7, #11]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	72bb      	strb	r3, [r7, #10]
    ecu_status_t l_EcuStatus = ECU_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	75fb      	strb	r3, [r7, #23]
    if (NULL == p_UsedSPI)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d102      	bne.n	800aab4 <MCP2515_LoadTxSequence+0x24>
    {
        l_EcuStatus = ECU_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	75fb      	strb	r3, [r7, #23]
 800aab2:	e032      	b.n	800ab1a <MCP2515_LoadTxSequence+0x8a>
    }
    else
    {
        MCP2515_CS_LOW();
 800aab4:	2200      	movs	r2, #0
 800aab6:	2110      	movs	r1, #16
 800aab8:	481a      	ldr	r0, [pc, #104]	@ (800ab24 <MCP2515_LoadTxSequence+0x94>)
 800aaba:	f7fa fd95 	bl	80055e8 <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, instruction);
 800aabe:	7afb      	ldrb	r3, [r7, #11]
 800aac0:	4619      	mov	r1, r3
 800aac2:	68f8      	ldr	r0, [r7, #12]
 800aac4:	f000 f914 	bl	800acf0 <SPI_Tx>
 800aac8:	4603      	mov	r3, r0
 800aaca:	461a      	mov	r2, r3
 800aacc:	7dfb      	ldrb	r3, [r7, #23]
 800aace:	4313      	orrs	r3, r2
 800aad0:	75fb      	strb	r3, [r7, #23]
        l_EcuStatus |= SPI_TxBuffer(p_UsedSPI, idReg, 4);
 800aad2:	2204      	movs	r2, #4
 800aad4:	6879      	ldr	r1, [r7, #4]
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f000 f929 	bl	800ad2e <SPI_TxBuffer>
 800aadc:	4603      	mov	r3, r0
 800aade:	461a      	mov	r2, r3
 800aae0:	7dfb      	ldrb	r3, [r7, #23]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	75fb      	strb	r3, [r7, #23]
        l_EcuStatus |= SPI_Tx(p_UsedSPI, dlc);
 800aae6:	7abb      	ldrb	r3, [r7, #10]
 800aae8:	4619      	mov	r1, r3
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f000 f900 	bl	800acf0 <SPI_Tx>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	7dfb      	ldrb	r3, [r7, #23]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	75fb      	strb	r3, [r7, #23]
        l_EcuStatus |= SPI_TxBuffer(p_UsedSPI, data, dlc);
 800aafa:	7abb      	ldrb	r3, [r7, #10]
 800aafc:	461a      	mov	r2, r3
 800aafe:	6a39      	ldr	r1, [r7, #32]
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f000 f914 	bl	800ad2e <SPI_TxBuffer>
 800ab06:	4603      	mov	r3, r0
 800ab08:	461a      	mov	r2, r3
 800ab0a:	7dfb      	ldrb	r3, [r7, #23]
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	75fb      	strb	r3, [r7, #23]

        MCP2515_CS_HIGH();
 800ab10:	2201      	movs	r2, #1
 800ab12:	2110      	movs	r1, #16
 800ab14:	4803      	ldr	r0, [pc, #12]	@ (800ab24 <MCP2515_LoadTxSequence+0x94>)
 800ab16:	f7fa fd67 	bl	80055e8 <HAL_GPIO_WritePin>

    }
    return l_EcuStatus;
 800ab1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3718      	adds	r7, #24
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	40020000 	.word	0x40020000

0800ab28 <MCP2515_RequestToSend>:
    return l_EcuStatus;
}

/* request to send */
ecu_status_t MCP2515_RequestToSend(SPI_HandleTypeDef *p_UsedSPI, uint8_t instruction)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	460b      	mov	r3, r1
 800ab32:	70fb      	strb	r3, [r7, #3]
    ecu_status_t l_EcuStatus = ECU_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d102      	bne.n	800ab44 <MCP2515_RequestToSend+0x1c>
    {
        l_EcuStatus = ECU_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	73fb      	strb	r3, [r7, #15]
 800ab42:	e013      	b.n	800ab6c <MCP2515_RequestToSend+0x44>
    }
    else
    {
        MCP2515_CS_LOW();
 800ab44:	2200      	movs	r2, #0
 800ab46:	2110      	movs	r1, #16
 800ab48:	480b      	ldr	r0, [pc, #44]	@ (800ab78 <MCP2515_RequestToSend+0x50>)
 800ab4a:	f7fa fd4d 	bl	80055e8 <HAL_GPIO_WritePin>
 
        l_EcuStatus |= SPI_Tx(p_UsedSPI, instruction);
 800ab4e:	78fb      	ldrb	r3, [r7, #3]
 800ab50:	4619      	mov	r1, r3
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 f8cc 	bl	800acf0 <SPI_Tx>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	73fb      	strb	r3, [r7, #15]

        MCP2515_CS_HIGH();
 800ab62:	2201      	movs	r2, #1
 800ab64:	2110      	movs	r1, #16
 800ab66:	4804      	ldr	r0, [pc, #16]	@ (800ab78 <MCP2515_RequestToSend+0x50>)
 800ab68:	f7fa fd3e 	bl	80055e8 <HAL_GPIO_WritePin>
    }
    return l_EcuStatus;
 800ab6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	40020000 	.word	0x40020000

0800ab7c <MCP2515_ReadStatus>:

/* read status */
ecu_status_t MCP2515_ReadStatus(SPI_HandleTypeDef *p_UsedSPI, uint8_t *p_Buffer)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
    ecu_status_t l_EcuStatus = ECU_OK;
 800ab86:	2300      	movs	r3, #0
 800ab88:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d102      	bne.n	800ab96 <MCP2515_ReadStatus+0x1a>
    {
        l_EcuStatus = ECU_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	73fb      	strb	r3, [r7, #15]
 800ab94:	e020      	b.n	800abd8 <MCP2515_ReadStatus+0x5c>
    }
    else
    {
        uint8_t retVal;

        MCP2515_CS_LOW();
 800ab96:	2200      	movs	r2, #0
 800ab98:	2110      	movs	r1, #16
 800ab9a:	4812      	ldr	r0, [pc, #72]	@ (800abe4 <MCP2515_ReadStatus+0x68>)
 800ab9c:	f7fa fd24 	bl	80055e8 <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, MCP2515_READ_STATUS);
 800aba0:	21a0      	movs	r1, #160	@ 0xa0
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 f8a4 	bl	800acf0 <SPI_Tx>
 800aba8:	4603      	mov	r3, r0
 800abaa:	461a      	mov	r2, r3
 800abac:	7bfb      	ldrb	r3, [r7, #15]
 800abae:	4313      	orrs	r3, r2
 800abb0:	73fb      	strb	r3, [r7, #15]
        l_EcuStatus |= SPI_Rx(p_UsedSPI, &retVal);
 800abb2:	f107 030e 	add.w	r3, r7, #14
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 f8d9 	bl	800ad70 <SPI_Rx>
 800abbe:	4603      	mov	r3, r0
 800abc0:	461a      	mov	r2, r3
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	73fb      	strb	r3, [r7, #15]

        MCP2515_CS_HIGH();
 800abc8:	2201      	movs	r2, #1
 800abca:	2110      	movs	r1, #16
 800abcc:	4805      	ldr	r0, [pc, #20]	@ (800abe4 <MCP2515_ReadStatus+0x68>)
 800abce:	f7fa fd0b 	bl	80055e8 <HAL_GPIO_WritePin>

        *p_Buffer = retVal;
 800abd2:	7bba      	ldrb	r2, [r7, #14]
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	701a      	strb	r2, [r3, #0]
    }
    return l_EcuStatus;
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	40020000 	.word	0x40020000

0800abe8 <MCP2515_GetRxStatus>:

/* read RX STATUS register */
ecu_status_t MCP2515_GetRxStatus(SPI_HandleTypeDef *p_UsedSPI, uint8_t *p_Buffer)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
    ecu_status_t l_EcuStatus = ECU_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d102      	bne.n	800ac02 <MCP2515_GetRxStatus+0x1a>
    {
        l_EcuStatus = ECU_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	73fb      	strb	r3, [r7, #15]
 800ac00:	e020      	b.n	800ac44 <MCP2515_GetRxStatus+0x5c>
    }
    else
    {
        uint8_t retVal;

        MCP2515_CS_LOW();
 800ac02:	2200      	movs	r2, #0
 800ac04:	2110      	movs	r1, #16
 800ac06:	4812      	ldr	r0, [pc, #72]	@ (800ac50 <MCP2515_GetRxStatus+0x68>)
 800ac08:	f7fa fcee 	bl	80055e8 <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, MCP2515_RX_STATUS);
 800ac0c:	21b0      	movs	r1, #176	@ 0xb0
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 f86e 	bl	800acf0 <SPI_Tx>
 800ac14:	4603      	mov	r3, r0
 800ac16:	461a      	mov	r2, r3
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	73fb      	strb	r3, [r7, #15]
        l_EcuStatus |= SPI_Rx(p_UsedSPI, &retVal);
 800ac1e:	f107 030e 	add.w	r3, r7, #14
 800ac22:	4619      	mov	r1, r3
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 f8a3 	bl	800ad70 <SPI_Rx>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	7bfb      	ldrb	r3, [r7, #15]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	73fb      	strb	r3, [r7, #15]

        MCP2515_CS_HIGH();
 800ac34:	2201      	movs	r2, #1
 800ac36:	2110      	movs	r1, #16
 800ac38:	4805      	ldr	r0, [pc, #20]	@ (800ac50 <MCP2515_GetRxStatus+0x68>)
 800ac3a:	f7fa fcd5 	bl	80055e8 <HAL_GPIO_WritePin>

        *p_Buffer = retVal;
 800ac3e:	7bba      	ldrb	r2, [r7, #14]
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	701a      	strb	r2, [r3, #0]
    }
    return l_EcuStatus;
 800ac44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	40020000 	.word	0x40020000

0800ac54 <MCP2515_BitModify>:

/* Use when changing register value */
ecu_status_t MCP2515_BitModify(SPI_HandleTypeDef *p_UsedSPI, uint8_t address, uint8_t mask, uint8_t data)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	4608      	mov	r0, r1
 800ac5e:	4611      	mov	r1, r2
 800ac60:	461a      	mov	r2, r3
 800ac62:	4603      	mov	r3, r0
 800ac64:	70fb      	strb	r3, [r7, #3]
 800ac66:	460b      	mov	r3, r1
 800ac68:	70bb      	strb	r3, [r7, #2]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	707b      	strb	r3, [r7, #1]
    ecu_status_t l_EcuStatus = ECU_OK;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d102      	bne.n	800ac7e <MCP2515_BitModify+0x2a>
    {
        l_EcuStatus = ECU_ERROR;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	73fb      	strb	r3, [r7, #15]
 800ac7c:	e030      	b.n	800ace0 <MCP2515_BitModify+0x8c>
    }
    else
    {
        MCP2515_CS_LOW();
 800ac7e:	2200      	movs	r2, #0
 800ac80:	2110      	movs	r1, #16
 800ac82:	481a      	ldr	r0, [pc, #104]	@ (800acec <MCP2515_BitModify+0x98>)
 800ac84:	f7fa fcb0 	bl	80055e8 <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, MCP2515_BIT_MOD);
 800ac88:	2105      	movs	r1, #5
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f830 	bl	800acf0 <SPI_Tx>
 800ac90:	4603      	mov	r3, r0
 800ac92:	461a      	mov	r2, r3
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	73fb      	strb	r3, [r7, #15]
        l_EcuStatus |= SPI_Tx(p_UsedSPI, address);
 800ac9a:	78fb      	ldrb	r3, [r7, #3]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f826 	bl	800acf0 <SPI_Tx>
 800aca4:	4603      	mov	r3, r0
 800aca6:	461a      	mov	r2, r3
 800aca8:	7bfb      	ldrb	r3, [r7, #15]
 800acaa:	4313      	orrs	r3, r2
 800acac:	73fb      	strb	r3, [r7, #15]
        l_EcuStatus |= SPI_Tx(p_UsedSPI, mask);
 800acae:	78bb      	ldrb	r3, [r7, #2]
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 f81c 	bl	800acf0 <SPI_Tx>
 800acb8:	4603      	mov	r3, r0
 800acba:	461a      	mov	r2, r3
 800acbc:	7bfb      	ldrb	r3, [r7, #15]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	73fb      	strb	r3, [r7, #15]
        l_EcuStatus |= SPI_Tx(p_UsedSPI, data);
 800acc2:	787b      	ldrb	r3, [r7, #1]
 800acc4:	4619      	mov	r1, r3
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f812 	bl	800acf0 <SPI_Tx>
 800accc:	4603      	mov	r3, r0
 800acce:	461a      	mov	r2, r3
 800acd0:	7bfb      	ldrb	r3, [r7, #15]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	73fb      	strb	r3, [r7, #15]

        MCP2515_CS_HIGH();
 800acd6:	2201      	movs	r2, #1
 800acd8:	2110      	movs	r1, #16
 800acda:	4804      	ldr	r0, [pc, #16]	@ (800acec <MCP2515_BitModify+0x98>)
 800acdc:	f7fa fc84 	bl	80055e8 <HAL_GPIO_WritePin>
    }
    return l_EcuStatus;
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	40020000 	.word	0x40020000

0800acf0 <SPI_Tx>:

/* SPI Tx wrapper function  */
static ecu_status_t SPI_Tx(SPI_HandleTypeDef *p_UsedSPI, uint8_t data)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	460b      	mov	r3, r1
 800acfa:	70fb      	strb	r3, [r7, #3]
    ecu_status_t l_EcuStatus = ECU_OK;
 800acfc:	2300      	movs	r3, #0
 800acfe:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d102      	bne.n	800ad0c <SPI_Tx+0x1c>
    {
        l_EcuStatus = ECU_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	73fb      	strb	r3, [r7, #15]
 800ad0a:	e00b      	b.n	800ad24 <SPI_Tx+0x34>
    }
    else
    {
        if (HAL_SPI_Transmit(p_UsedSPI, &data, 1, SPI_TIMEOUT) != HAL_OK)
 800ad0c:	1cf9      	adds	r1, r7, #3
 800ad0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad12:	2201      	movs	r2, #1
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7fc f9f7 	bl	8007108 <HAL_SPI_Transmit>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d001      	beq.n	800ad24 <SPI_Tx+0x34>
        {
            l_EcuStatus = ECU_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_EcuStatus;
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static ecu_status_t SPI_TxBuffer(SPI_HandleTypeDef *p_UsedSPI, uint8_t *buffer, uint8_t length)
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b086      	sub	sp, #24
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	60f8      	str	r0, [r7, #12]
 800ad36:	60b9      	str	r1, [r7, #8]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	71fb      	strb	r3, [r7, #7]
    ecu_status_t l_EcuStatus = ECU_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	75fb      	strb	r3, [r7, #23]
    if (NULL == p_UsedSPI)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d102      	bne.n	800ad4c <SPI_TxBuffer+0x1e>
    {
        l_EcuStatus = ECU_ERROR;
 800ad46:	2301      	movs	r3, #1
 800ad48:	75fb      	strb	r3, [r7, #23]
 800ad4a:	e00c      	b.n	800ad66 <SPI_TxBuffer+0x38>
    }
    else
    {
        if (HAL_SPI_Transmit(p_UsedSPI, buffer, length, SPI_TIMEOUT) != HAL_OK)
 800ad4c:	79fb      	ldrb	r3, [r7, #7]
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	f04f 33ff 	mov.w	r3, #4294967295
 800ad54:	68b9      	ldr	r1, [r7, #8]
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f7fc f9d6 	bl	8007108 <HAL_SPI_Transmit>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d001      	beq.n	800ad66 <SPI_TxBuffer+0x38>
        {
            l_EcuStatus = ECU_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	75fb      	strb	r3, [r7, #23]
        }
    }
    return l_EcuStatus;
 800ad66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <SPI_Rx>:

/* SPI Rx wrapper function */
static ecu_status_t SPI_Rx(SPI_HandleTypeDef *p_UsedSPI, uint8_t *p_Buffer)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
    ecu_status_t l_EcuStatus = ECU_OK;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d102      	bne.n	800ad8a <SPI_Rx+0x1a>
    {
        l_EcuStatus = ECU_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	73fb      	strb	r3, [r7, #15]
 800ad88:	e012      	b.n	800adb0 <SPI_Rx+0x40>
    }
    else
    {
        uint8_t retVal = 0;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	73bb      	strb	r3, [r7, #14]
        if (HAL_SPI_Receive(p_UsedSPI, &retVal, 1, SPI_TIMEOUT) != HAL_OK)
 800ad8e:	f107 010e 	add.w	r1, r7, #14
 800ad92:	f04f 33ff 	mov.w	r3, #4294967295
 800ad96:	2201      	movs	r2, #1
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f7fc faf9 	bl	8007390 <HAL_SPI_Receive>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <SPI_Rx+0x3a>
        {
            l_EcuStatus = ECU_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	73fb      	strb	r3, [r7, #15]
 800ada8:	e002      	b.n	800adb0 <SPI_Rx+0x40>
        }
        else
        {
            *p_Buffer = retVal;
 800adaa:	7bba      	ldrb	r2, [r7, #14]
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	701a      	strb	r2, [r3, #0]
        }
    }
    return l_EcuStatus;
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static ecu_status_t SPI_RxBuffer(SPI_HandleTypeDef *p_UsedSPI, uint8_t *buffer, uint8_t length)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b086      	sub	sp, #24
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	60f8      	str	r0, [r7, #12]
 800adc2:	60b9      	str	r1, [r7, #8]
 800adc4:	4613      	mov	r3, r2
 800adc6:	71fb      	strb	r3, [r7, #7]
    ecu_status_t l_EcuStatus = ECU_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	75fb      	strb	r3, [r7, #23]
    if (NULL == p_UsedSPI)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d102      	bne.n	800add8 <SPI_RxBuffer+0x1e>
    {
        l_EcuStatus = ECU_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	75fb      	strb	r3, [r7, #23]
 800add6:	e00c      	b.n	800adf2 <SPI_RxBuffer+0x38>
    }
    else
    {
        if (HAL_SPI_Receive(p_UsedSPI, buffer, length, SPI_TIMEOUT) != HAL_OK)
 800add8:	79fb      	ldrb	r3, [r7, #7]
 800adda:	b29a      	uxth	r2, r3
 800addc:	f04f 33ff 	mov.w	r3, #4294967295
 800ade0:	68b9      	ldr	r1, [r7, #8]
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f7fc fad4 	bl	8007390 <HAL_SPI_Receive>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d001      	beq.n	800adf2 <SPI_RxBuffer+0x38>
        {
            l_EcuStatus = ECU_ERROR;
 800adee:	2301      	movs	r3, #1
 800adf0:	75fb      	strb	r3, [r7, #23]
        }
    }
    return l_EcuStatus;
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3718      	adds	r7, #24
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <logic_set>:
 * 
 * @param p_Logic pointer to the device
 * @return ecu_status_t status of operation
 */
ecu_status_t logic_set(logic_t *p_Logic)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
	ecu_status_t l_EcuStatus = ECU_OK;
 800ae04:	2300      	movs	r3, #0
 800ae06:	73fb      	strb	r3, [r7, #15]
	if (NULL == p_Logic)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d102      	bne.n	800ae14 <logic_set+0x18>
	{
	    l_EcuStatus = ECU_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	73fb      	strb	r3, [r7, #15]
 800ae12:	e007      	b.n	800ae24 <logic_set+0x28>
	}
	else
	{
		HAL_GPIO_WritePin(p_Logic->logic_Port , p_Logic->logic_pin , GPIO_PIN_SET);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6818      	ldr	r0, [r3, #0]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	889b      	ldrh	r3, [r3, #4]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	4619      	mov	r1, r3
 800ae20:	f7fa fbe2 	bl	80055e8 <HAL_GPIO_WritePin>
	}
	return l_EcuStatus;
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <logic_reset>:
 * 
 * @param p_Logic pointer to the device
 * @return ecu_status_t status of operation
 */
ecu_status_t logic_reset(logic_t *p_Logic)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b084      	sub	sp, #16
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
	ecu_status_t l_EcuStatus = ECU_OK;
 800ae36:	2300      	movs	r3, #0
 800ae38:	73fb      	strb	r3, [r7, #15]
	if (NULL == p_Logic)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d102      	bne.n	800ae46 <logic_reset+0x18>
	{
		l_EcuStatus = ECU_ERROR;
 800ae40:	2301      	movs	r3, #1
 800ae42:	73fb      	strb	r3, [r7, #15]
 800ae44:	e007      	b.n	800ae56 <logic_reset+0x28>
	}
	else
	{
		HAL_GPIO_WritePin(p_Logic->logic_Port , p_Logic->logic_pin , GPIO_PIN_RESET);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6818      	ldr	r0, [r3, #0]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	889b      	ldrh	r3, [r3, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	4619      	mov	r1, r3
 800ae52:	f7fa fbc9 	bl	80055e8 <HAL_GPIO_WritePin>
	}
	return l_EcuStatus;
 800ae56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <monitoring_send_data>:
 * 
 * @param p_MonitorOBJ object to the data and size of the data
 * @return ecu_status_t 
 */
ecu_status_t monitoring_send_data(monitoring_t *p_MonitorOBJ)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73fb      	strb	r3, [r7, #15]
    if ((NULL == p_MonitorOBJ)              ||
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d003      	beq.n	800ae7a <monitoring_send_data+0x1a>
        (NULL == p_MonitorOBJ->UsedUART))
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
    if ((NULL == p_MonitorOBJ)              ||
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d102      	bne.n	800ae80 <monitoring_send_data+0x20>
    {
        l_EcuStatus = ECU_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	73fb      	strb	r3, [r7, #15]
 800ae7e:	e016      	b.n	800aeae <monitoring_send_data+0x4e>
    }
    else
    {
        if(p_MonitorOBJ->MonitorUpdateData_CALLBACK != NULL)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d002      	beq.n	800ae8e <monitoring_send_data+0x2e>
        {
            p_MonitorOBJ->MonitorUpdateData_CALLBACK();
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	4798      	blx	r3
        }
        /* Send the data */
        l_EcuStatus |= HAL_UART_Transmit(p_MonitorOBJ->UsedUART, p_MonitorOBJ->Data.SendData, p_MonitorOBJ->Size, HAL_MAX_DELAY);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6818      	ldr	r0, [r3, #0]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6899      	ldr	r1, [r3, #8]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	7b1b      	ldrb	r3, [r3, #12]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aea0:	f7fd ff5c 	bl	8008d5c <HAL_UART_Transmit>
 800aea4:	4603      	mov	r3, r0
 800aea6:	461a      	mov	r2, r3
 800aea8:	7bfb      	ldrb	r3, [r7, #15]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	73fb      	strb	r3, [r7, #15]
    }
    return l_EcuStatus;
 800aeae:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <MPU6050_Init>:

/***********************************************************************************************************************
*                                                  FUNCTION Implementation                                                *
***********************************************************************************************************************/
ecu_status_t MPU6050_Init(I2C_HandleTypeDef *I2Cx,MPU6050_t *DataStruct)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b088      	sub	sp, #32
 800aebc:	af04      	add	r7, sp, #16
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
	I2C_INT=I2Cx;
 800aec2:	4a4c      	ldr	r2, [pc, #304]	@ (800aff4 <MPU6050_Init+0x13c>)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6013      	str	r3, [r2, #0]
	MPU_INT=DataStruct;
 800aec8:	4a4b      	ldr	r2, [pc, #300]	@ (800aff8 <MPU6050_Init+0x140>)
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	6013      	str	r3, [r2, #0]
    uint8_t check;
    uint8_t Data;
    ecu_status_t l_EcuStatus=ECU_OK;
 800aece:	2300      	movs	r3, #0
 800aed0:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(DataStruct->GPIOx , DataStruct->GPIO_Pin , GPIO_PIN_RESET);
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aeda:	2200      	movs	r2, #0
 800aedc:	4619      	mov	r1, r3
 800aede:	f7fa fb83 	bl	80055e8 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800aee2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800aee6:	f7fa f81b 	bl	8004f20 <HAL_Delay>
    HAL_GPIO_WritePin(DataStruct->GPIOx , DataStruct->GPIO_Pin , GPIO_PIN_SET);
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aef2:	2201      	movs	r2, #1
 800aef4:	4619      	mov	r1, r3
 800aef6:	f7fa fb77 	bl	80055e8 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800aefa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800aefe:	f7fa f80f 	bl	8004f20 <HAL_Delay>
    // Check device ID WHO_AM_I
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR_REG, WHO_AM_I_REG, 1, &check, 1, 100);
 800af02:	2364      	movs	r3, #100	@ 0x64
 800af04:	9302      	str	r3, [sp, #8]
 800af06:	2301      	movs	r3, #1
 800af08:	9301      	str	r3, [sp, #4]
 800af0a:	f107 030e 	add.w	r3, r7, #14
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	2301      	movs	r3, #1
 800af12:	2275      	movs	r2, #117	@ 0x75
 800af14:	21d0      	movs	r1, #208	@ 0xd0
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f7fa fdd6 	bl	8005ac8 <HAL_I2C_Mem_Read>
    if ((check == 0x68)&&(NULL!=I2Cx)&&(NULL!=DataStruct)) // 0x68 will be returned by the sensor if everything goes well
 800af1c:	7bbb      	ldrb	r3, [r7, #14]
 800af1e:	2b68      	cmp	r3, #104	@ 0x68
 800af20:	d160      	bne.n	800afe4 <MPU6050_Init+0x12c>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d05d      	beq.n	800afe4 <MPU6050_Init+0x12c>
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d05a      	beq.n	800afe4 <MPU6050_Init+0x12c>
    {
        // Power management register 0x6B: Wake the sensor up
        Data = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR_REG, PWR_MGMT_1_REG, 1, &Data, 1, 100);
 800af32:	2364      	movs	r3, #100	@ 0x64
 800af34:	9302      	str	r3, [sp, #8]
 800af36:	2301      	movs	r3, #1
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	f107 030d 	add.w	r3, r7, #13
 800af3e:	9300      	str	r3, [sp, #0]
 800af40:	2301      	movs	r3, #1
 800af42:	226b      	movs	r2, #107	@ 0x6b
 800af44:	21d0      	movs	r1, #208	@ 0xd0
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7fa fcc4 	bl	80058d4 <HAL_I2C_Mem_Write>

        // Set DATA RATE to 31.25Hz(8000/(1+255)) by writing to SMPLRT_DIV register
        Data = 0x07;
 800af4c:	2307      	movs	r3, #7
 800af4e:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR_REG, SMPLRT_DIV_REG, 1, &Data, 1, 100);
 800af50:	2364      	movs	r3, #100	@ 0x64
 800af52:	9302      	str	r3, [sp, #8]
 800af54:	2301      	movs	r3, #1
 800af56:	9301      	str	r3, [sp, #4]
 800af58:	f107 030d 	add.w	r3, r7, #13
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	2301      	movs	r3, #1
 800af60:	2219      	movs	r2, #25
 800af62:	21d0      	movs	r1, #208	@ 0xd0
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7fa fcb5 	bl	80058d4 <HAL_I2C_Mem_Write>
        // Set accelerometer configuration in ACCEL_CONFIG Register (+-2g)
        Data = 0x00;
 800af6a:	2300      	movs	r3, #0
 800af6c:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR_REG, ACCEL_CONFIG_REG, 1, &Data, 1, 100);
 800af6e:	2364      	movs	r3, #100	@ 0x64
 800af70:	9302      	str	r3, [sp, #8]
 800af72:	2301      	movs	r3, #1
 800af74:	9301      	str	r3, [sp, #4]
 800af76:	f107 030d 	add.w	r3, r7, #13
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	2301      	movs	r3, #1
 800af7e:	221c      	movs	r2, #28
 800af80:	21d0      	movs	r1, #208	@ 0xd0
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7fa fca6 	bl	80058d4 <HAL_I2C_Mem_Write>
        // Set gyroscope configuration in GYRO_CONFIG Register (-+250 degree per s)
        Data = 0x00;
 800af88:	2300      	movs	r3, #0
 800af8a:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR_REG, GYRO_CONFIG_REG, 1, &Data, 1, 100);
 800af8c:	2364      	movs	r3, #100	@ 0x64
 800af8e:	9302      	str	r3, [sp, #8]
 800af90:	2301      	movs	r3, #1
 800af92:	9301      	str	r3, [sp, #4]
 800af94:	f107 030d 	add.w	r3, r7, #13
 800af98:	9300      	str	r3, [sp, #0]
 800af9a:	2301      	movs	r3, #1
 800af9c:	221b      	movs	r2, #27
 800af9e:	21d0      	movs	r1, #208	@ 0xd0
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f7fa fc97 	bl	80058d4 <HAL_I2C_Mem_Write>
        Data = 0x90; // Clear interrupt for any register read (active high interrupt)
 800afa6:	2390      	movs	r3, #144	@ 0x90
 800afa8:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR_REG,INT_CFG_REG, 1, &Data, 1, 100);
 800afaa:	2364      	movs	r3, #100	@ 0x64
 800afac:	9302      	str	r3, [sp, #8]
 800afae:	2301      	movs	r3, #1
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	f107 030d 	add.w	r3, r7, #13
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	2301      	movs	r3, #1
 800afba:	2237      	movs	r2, #55	@ 0x37
 800afbc:	21d0      	movs	r1, #208	@ 0xd0
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7fa fc88 	bl	80058d4 <HAL_I2C_Mem_Write>
        Data = 0x01; // Enable Data Ready Interrupt (INT_ENABLE register: 0x38)
 800afc4:	2301      	movs	r3, #1
 800afc6:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR_REG,INT_ENABLE_REG,1, &Data, 1, 100);
 800afc8:	2364      	movs	r3, #100	@ 0x64
 800afca:	9302      	str	r3, [sp, #8]
 800afcc:	2301      	movs	r3, #1
 800afce:	9301      	str	r3, [sp, #4]
 800afd0:	f107 030d 	add.w	r3, r7, #13
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	2301      	movs	r3, #1
 800afd8:	2238      	movs	r2, #56	@ 0x38
 800afda:	21d0      	movs	r1, #208	@ 0xd0
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7fa fc79 	bl	80058d4 <HAL_I2C_Mem_Write>
 800afe2:	e001      	b.n	800afe8 <MPU6050_Init+0x130>
    }
    else
    {
    	l_EcuStatus=ECU_ERROR;
 800afe4:	2301      	movs	r3, #1
 800afe6:	73fb      	strb	r3, [r7, #15]
    }
    return l_EcuStatus;
 800afe8:	7bfb      	ldrb	r3, [r7, #15]

}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	20000c84 	.word	0x20000c84
 800aff8:	20000c88 	.word	0x20000c88
 800affc:	00000000 	.word	0x00000000

0800b000 <MPU6050_Read_All>:
		}
	return l_EcuStatus;
}

ecu_status_t MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 800b000:	b5b0      	push	{r4, r5, r7, lr}
 800b002:	b092      	sub	sp, #72	@ 0x48
 800b004:	af04      	add	r7, sp, #16
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
	ecu_status_t l_EcuStatus=ECU_OK;
 800b00a:	2300      	movs	r3, #0
 800b00c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if ((NULL!=I2Cx)&&(NULL!=DataStruct)){
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 8350 	beq.w	800b6b8 <MPU6050_Read_All+0x6b8>
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f000 834c 	beq.w	800b6b8 <MPU6050_Read_All+0x6b8>
	float new_temp;
    uint8_t Rec_Data[14];
    int16_t temp;
    // Read 14 BYTES of data starting from ACCEL_XOUT_H register
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR_REG, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, 100);
 800b020:	2364      	movs	r3, #100	@ 0x64
 800b022:	9302      	str	r3, [sp, #8]
 800b024:	230e      	movs	r3, #14
 800b026:	9301      	str	r3, [sp, #4]
 800b028:	f107 030c 	add.w	r3, r7, #12
 800b02c:	9300      	str	r3, [sp, #0]
 800b02e:	2301      	movs	r3, #1
 800b030:	223b      	movs	r2, #59	@ 0x3b
 800b032:	21d0      	movs	r1, #208	@ 0xd0
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f7fa fd47 	bl	8005ac8 <HAL_I2C_Mem_Read>
    Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800b03a:	7b3b      	ldrb	r3, [r7, #12]
 800b03c:	021b      	lsls	r3, r3, #8
 800b03e:	b21a      	sxth	r2, r3
 800b040:	7b7b      	ldrb	r3, [r7, #13]
 800b042:	b21b      	sxth	r3, r3
 800b044:	4313      	orrs	r3, r2
 800b046:	b21a      	sxth	r2, r3
 800b048:	4b61      	ldr	r3, [pc, #388]	@ (800b1d0 <MPU6050_Read_All+0x1d0>)
 800b04a:	801a      	strh	r2, [r3, #0]
    Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800b04c:	7bbb      	ldrb	r3, [r7, #14]
 800b04e:	021b      	lsls	r3, r3, #8
 800b050:	b21a      	sxth	r2, r3
 800b052:	7bfb      	ldrb	r3, [r7, #15]
 800b054:	b21b      	sxth	r3, r3
 800b056:	4313      	orrs	r3, r2
 800b058:	b21a      	sxth	r2, r3
 800b05a:	4b5e      	ldr	r3, [pc, #376]	@ (800b1d4 <MPU6050_Read_All+0x1d4>)
 800b05c:	801a      	strh	r2, [r3, #0]
    Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800b05e:	7c3b      	ldrb	r3, [r7, #16]
 800b060:	021b      	lsls	r3, r3, #8
 800b062:	b21a      	sxth	r2, r3
 800b064:	7c7b      	ldrb	r3, [r7, #17]
 800b066:	b21b      	sxth	r3, r3
 800b068:	4313      	orrs	r3, r2
 800b06a:	b21a      	sxth	r2, r3
 800b06c:	4b5a      	ldr	r3, [pc, #360]	@ (800b1d8 <MPU6050_Read_All+0x1d8>)
 800b06e:	801a      	strh	r2, [r3, #0]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800b070:	7cbb      	ldrb	r3, [r7, #18]
 800b072:	021b      	lsls	r3, r3, #8
 800b074:	b21a      	sxth	r2, r3
 800b076:	7cfb      	ldrb	r3, [r7, #19]
 800b078:	b21b      	sxth	r3, r3
 800b07a:	4313      	orrs	r3, r2
 800b07c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800b07e:	7d3b      	ldrb	r3, [r7, #20]
 800b080:	021b      	lsls	r3, r3, #8
 800b082:	b21a      	sxth	r2, r3
 800b084:	7d7b      	ldrb	r3, [r7, #21]
 800b086:	b21b      	sxth	r3, r3
 800b088:	4313      	orrs	r3, r2
 800b08a:	b21a      	sxth	r2, r3
 800b08c:	4b53      	ldr	r3, [pc, #332]	@ (800b1dc <MPU6050_Read_All+0x1dc>)
 800b08e:	801a      	strh	r2, [r3, #0]
    Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800b090:	7dbb      	ldrb	r3, [r7, #22]
 800b092:	021b      	lsls	r3, r3, #8
 800b094:	b21a      	sxth	r2, r3
 800b096:	7dfb      	ldrb	r3, [r7, #23]
 800b098:	b21b      	sxth	r3, r3
 800b09a:	4313      	orrs	r3, r2
 800b09c:	b21a      	sxth	r2, r3
 800b09e:	4b50      	ldr	r3, [pc, #320]	@ (800b1e0 <MPU6050_Read_All+0x1e0>)
 800b0a0:	801a      	strh	r2, [r3, #0]
    Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800b0a2:	7e3b      	ldrb	r3, [r7, #24]
 800b0a4:	021b      	lsls	r3, r3, #8
 800b0a6:	b21a      	sxth	r2, r3
 800b0a8:	7e7b      	ldrb	r3, [r7, #25]
 800b0aa:	b21b      	sxth	r3, r3
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	b21a      	sxth	r2, r3
 800b0b0:	4b4c      	ldr	r3, [pc, #304]	@ (800b1e4 <MPU6050_Read_All+0x1e4>)
 800b0b2:	801a      	strh	r2, [r3, #0]
    DataStruct->Ax = Accel_X_RAW / 16384.0 + 0.06;
 800b0b4:	4b46      	ldr	r3, [pc, #280]	@ (800b1d0 <MPU6050_Read_All+0x1d0>)
 800b0b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7f5 f9e2 	bl	8000484 <__aeabi_i2d>
 800b0c0:	f04f 0200 	mov.w	r2, #0
 800b0c4:	4b48      	ldr	r3, [pc, #288]	@ (800b1e8 <MPU6050_Read_All+0x1e8>)
 800b0c6:	f7f5 fb71 	bl	80007ac <__aeabi_ddiv>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	a337      	add	r3, pc, #220	@ (adr r3, 800b1b0 <MPU6050_Read_All+0x1b0>)
 800b0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d8:	f7f5 f888 	bl	80001ec <__adddf3>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	4610      	mov	r0, r2
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	f7f5 fce8 	bl	8000ab8 <__aeabi_d2f>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	605a      	str	r2, [r3, #4]
    DataStruct->Ay = Accel_Y_RAW / 16384.0 + 0.02;
 800b0ee:	4b39      	ldr	r3, [pc, #228]	@ (800b1d4 <MPU6050_Read_All+0x1d4>)
 800b0f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7f5 f9c5 	bl	8000484 <__aeabi_i2d>
 800b0fa:	f04f 0200 	mov.w	r2, #0
 800b0fe:	4b3a      	ldr	r3, [pc, #232]	@ (800b1e8 <MPU6050_Read_All+0x1e8>)
 800b100:	f7f5 fb54 	bl	80007ac <__aeabi_ddiv>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4610      	mov	r0, r2
 800b10a:	4619      	mov	r1, r3
 800b10c:	a32a      	add	r3, pc, #168	@ (adr r3, 800b1b8 <MPU6050_Read_All+0x1b8>)
 800b10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b112:	f7f5 f86b 	bl	80001ec <__adddf3>
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	4610      	mov	r0, r2
 800b11c:	4619      	mov	r1, r3
 800b11e:	f7f5 fccb 	bl	8000ab8 <__aeabi_d2f>
 800b122:	4602      	mov	r2, r0
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	609a      	str	r2, [r3, #8]
    DataStruct->Az = Accel_Z_RAW / 16384.0 + 0.014;
 800b128:	4b2b      	ldr	r3, [pc, #172]	@ (800b1d8 <MPU6050_Read_All+0x1d8>)
 800b12a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b12e:	4618      	mov	r0, r3
 800b130:	f7f5 f9a8 	bl	8000484 <__aeabi_i2d>
 800b134:	f04f 0200 	mov.w	r2, #0
 800b138:	4b2b      	ldr	r3, [pc, #172]	@ (800b1e8 <MPU6050_Read_All+0x1e8>)
 800b13a:	f7f5 fb37 	bl	80007ac <__aeabi_ddiv>
 800b13e:	4602      	mov	r2, r0
 800b140:	460b      	mov	r3, r1
 800b142:	4610      	mov	r0, r2
 800b144:	4619      	mov	r1, r3
 800b146:	a31e      	add	r3, pc, #120	@ (adr r3, 800b1c0 <MPU6050_Read_All+0x1c0>)
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	f7f5 f84e 	bl	80001ec <__adddf3>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	4610      	mov	r0, r2
 800b156:	4619      	mov	r1, r3
 800b158:	f7f5 fcae 	bl	8000ab8 <__aeabi_d2f>
 800b15c:	4602      	mov	r2, r0
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	60da      	str	r2, [r3, #12]
    new_temp= (float)((int16_t)temp / (float)340.0 + (float)36.53);
 800b162:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800b166:	ee07 3a90 	vmov	s15, r3
 800b16a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b16e:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800b1ec <MPU6050_Read_All+0x1ec>
 800b172:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b176:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800b1f0 <MPU6050_Read_All+0x1f0>
 800b17a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b17e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    old_temp=(fabs(new_temp-old_temp)>TEMPERATURE_THRESHOLD)?new_temp:old_temp;
 800b182:	4b1c      	ldr	r3, [pc, #112]	@ (800b1f4 <MPU6050_Read_All+0x1f4>)
 800b184:	edd3 7a00 	vldr	s15, [r3]
 800b188:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b18c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b190:	eef0 7ae7 	vabs.f32	s15, s15
 800b194:	ee17 0a90 	vmov	r0, s15
 800b198:	f7f5 f986 	bl	80004a8 <__aeabi_f2d>
 800b19c:	a30a      	add	r3, pc, #40	@ (adr r3, 800b1c8 <MPU6050_Read_All+0x1c8>)
 800b19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a2:	f7f5 fc69 	bl	8000a78 <__aeabi_dcmpgt>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d025      	beq.n	800b1f8 <MPU6050_Read_All+0x1f8>
 800b1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ae:	e025      	b.n	800b1fc <MPU6050_Read_All+0x1fc>
 800b1b0:	eb851eb8 	.word	0xeb851eb8
 800b1b4:	3faeb851 	.word	0x3faeb851
 800b1b8:	47ae147b 	.word	0x47ae147b
 800b1bc:	3f947ae1 	.word	0x3f947ae1
 800b1c0:	3126e979 	.word	0x3126e979
 800b1c4:	3f8cac08 	.word	0x3f8cac08
 800b1c8:	33333333 	.word	0x33333333
 800b1cc:	3fd33333 	.word	0x3fd33333
 800b1d0:	20000c9c 	.word	0x20000c9c
 800b1d4:	20000c9e 	.word	0x20000c9e
 800b1d8:	20000ca0 	.word	0x20000ca0
 800b1dc:	20000ca2 	.word	0x20000ca2
 800b1e0:	20000ca4 	.word	0x20000ca4
 800b1e4:	20000ca6 	.word	0x20000ca6
 800b1e8:	40d00000 	.word	0x40d00000
 800b1ec:	43aa0000 	.word	0x43aa0000
 800b1f0:	42121eb8 	.word	0x42121eb8
 800b1f4:	20000c8c 	.word	0x20000c8c
 800b1f8:	4bb7      	ldr	r3, [pc, #732]	@ (800b4d8 <MPU6050_Read_All+0x4d8>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4ab6      	ldr	r2, [pc, #728]	@ (800b4d8 <MPU6050_Read_All+0x4d8>)
 800b1fe:	6013      	str	r3, [r2, #0]
    DataStruct->Temperature=((uint16_t)(old_temp*100))/100.0;
 800b200:	4bb5      	ldr	r3, [pc, #724]	@ (800b4d8 <MPU6050_Read_All+0x4d8>)
 800b202:	edd3 7a00 	vldr	s15, [r3]
 800b206:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 800b4dc <MPU6050_Read_All+0x4dc>
 800b20a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b20e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b212:	ee17 3a90 	vmov	r3, s15
 800b216:	b29b      	uxth	r3, r3
 800b218:	4618      	mov	r0, r3
 800b21a:	f7f5 f933 	bl	8000484 <__aeabi_i2d>
 800b21e:	f04f 0200 	mov.w	r2, #0
 800b222:	4baf      	ldr	r3, [pc, #700]	@ (800b4e0 <MPU6050_Read_All+0x4e0>)
 800b224:	f7f5 fac2 	bl	80007ac <__aeabi_ddiv>
 800b228:	4602      	mov	r2, r0
 800b22a:	460b      	mov	r3, r1
 800b22c:	4610      	mov	r0, r2
 800b22e:	4619      	mov	r1, r3
 800b230:	f7f5 fc42 	bl	8000ab8 <__aeabi_d2f>
 800b234:	4602      	mov	r2, r0
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	601a      	str	r2, [r3, #0]
    DataStruct->Gx = Gyro_X_RAW / 131.0;
 800b23a:	4baa      	ldr	r3, [pc, #680]	@ (800b4e4 <MPU6050_Read_All+0x4e4>)
 800b23c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b240:	4618      	mov	r0, r3
 800b242:	f7f5 f91f 	bl	8000484 <__aeabi_i2d>
 800b246:	a39c      	add	r3, pc, #624	@ (adr r3, 800b4b8 <MPU6050_Read_All+0x4b8>)
 800b248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24c:	f7f5 faae 	bl	80007ac <__aeabi_ddiv>
 800b250:	4602      	mov	r2, r0
 800b252:	460b      	mov	r3, r1
 800b254:	4610      	mov	r0, r2
 800b256:	4619      	mov	r1, r3
 800b258:	f7f5 fc2e 	bl	8000ab8 <__aeabi_d2f>
 800b25c:	4602      	mov	r2, r0
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	611a      	str	r2, [r3, #16]
    DataStruct->Gy = Gyro_Y_RAW / 131.0;
 800b262:	4ba1      	ldr	r3, [pc, #644]	@ (800b4e8 <MPU6050_Read_All+0x4e8>)
 800b264:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b268:	4618      	mov	r0, r3
 800b26a:	f7f5 f90b 	bl	8000484 <__aeabi_i2d>
 800b26e:	a392      	add	r3, pc, #584	@ (adr r3, 800b4b8 <MPU6050_Read_All+0x4b8>)
 800b270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b274:	f7f5 fa9a 	bl	80007ac <__aeabi_ddiv>
 800b278:	4602      	mov	r2, r0
 800b27a:	460b      	mov	r3, r1
 800b27c:	4610      	mov	r0, r2
 800b27e:	4619      	mov	r1, r3
 800b280:	f7f5 fc1a 	bl	8000ab8 <__aeabi_d2f>
 800b284:	4602      	mov	r2, r0
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	615a      	str	r2, [r3, #20]
    DataStruct->Gz = Gyro_Z_RAW / 131.0;
 800b28a:	4b98      	ldr	r3, [pc, #608]	@ (800b4ec <MPU6050_Read_All+0x4ec>)
 800b28c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b290:	4618      	mov	r0, r3
 800b292:	f7f5 f8f7 	bl	8000484 <__aeabi_i2d>
 800b296:	a388      	add	r3, pc, #544	@ (adr r3, 800b4b8 <MPU6050_Read_All+0x4b8>)
 800b298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29c:	f7f5 fa86 	bl	80007ac <__aeabi_ddiv>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	4610      	mov	r0, r2
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	f7f5 fc06 	bl	8000ab8 <__aeabi_d2f>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	619a      	str	r2, [r3, #24]
    // Kalman angle solve
    float_t dt = (float_t)(HAL_GetTick() - timer) / 1000.0;
 800b2b2:	f7f9 fe29 	bl	8004f08 <HAL_GetTick>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	4b8d      	ldr	r3, [pc, #564]	@ (800b4f0 <MPU6050_Read_All+0x4f0>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	1ad3      	subs	r3, r2, r3
 800b2be:	ee07 3a90 	vmov	s15, r3
 800b2c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2c6:	ee17 0a90 	vmov	r0, s15
 800b2ca:	f7f5 f8ed 	bl	80004a8 <__aeabi_f2d>
 800b2ce:	f04f 0200 	mov.w	r2, #0
 800b2d2:	4b88      	ldr	r3, [pc, #544]	@ (800b4f4 <MPU6050_Read_All+0x4f4>)
 800b2d4:	f7f5 fa6a 	bl	80007ac <__aeabi_ddiv>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	460b      	mov	r3, r1
 800b2dc:	4610      	mov	r0, r2
 800b2de:	4619      	mov	r1, r3
 800b2e0:	f7f5 fbea 	bl	8000ab8 <__aeabi_d2f>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	627b      	str	r3, [r7, #36]	@ 0x24
    timer = HAL_GetTick();
 800b2e8:	f7f9 fe0e 	bl	8004f08 <HAL_GetTick>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	4a80      	ldr	r2, [pc, #512]	@ (800b4f0 <MPU6050_Read_All+0x4f0>)
 800b2f0:	6013      	str	r3, [r2, #0]
    // Roll Calculation
    float_t roll_sqrt = sqrt(
    Accel_X_RAW * Accel_X_RAW + Accel_Z_RAW * Accel_Z_RAW);
 800b2f2:	4b81      	ldr	r3, [pc, #516]	@ (800b4f8 <MPU6050_Read_All+0x4f8>)
 800b2f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	4b7f      	ldr	r3, [pc, #508]	@ (800b4f8 <MPU6050_Read_All+0x4f8>)
 800b2fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b300:	fb03 f202 	mul.w	r2, r3, r2
 800b304:	4b7d      	ldr	r3, [pc, #500]	@ (800b4fc <MPU6050_Read_All+0x4fc>)
 800b306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b30a:	4619      	mov	r1, r3
 800b30c:	4b7b      	ldr	r3, [pc, #492]	@ (800b4fc <MPU6050_Read_All+0x4fc>)
 800b30e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b312:	fb01 f303 	mul.w	r3, r1, r3
 800b316:	4413      	add	r3, r2
    float_t roll_sqrt = sqrt(
 800b318:	4618      	mov	r0, r3
 800b31a:	f7f5 f8b3 	bl	8000484 <__aeabi_i2d>
 800b31e:	4602      	mov	r2, r0
 800b320:	460b      	mov	r3, r1
 800b322:	ec43 2b10 	vmov	d0, r2, r3
 800b326:	f004 ff75 	bl	8010214 <sqrt>
 800b32a:	ec53 2b10 	vmov	r2, r3, d0
 800b32e:	4610      	mov	r0, r2
 800b330:	4619      	mov	r1, r3
 800b332:	f7f5 fbc1 	bl	8000ab8 <__aeabi_d2f>
 800b336:	4603      	mov	r3, r0
 800b338:	623b      	str	r3, [r7, #32]
    float_t roll;
    if (roll_sqrt != 0.0)
 800b33a:	edd7 7a08 	vldr	s15, [r7, #32]
 800b33e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b346:	d024      	beq.n	800b392 <MPU6050_Read_All+0x392>
    {
        roll = atan(Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800b348:	4b6d      	ldr	r3, [pc, #436]	@ (800b500 <MPU6050_Read_All+0x500>)
 800b34a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b356:	edd7 7a08 	vldr	s15, [r7, #32]
 800b35a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b35e:	ee16 0a90 	vmov	r0, s13
 800b362:	f7f5 f8a1 	bl	80004a8 <__aeabi_f2d>
 800b366:	4602      	mov	r2, r0
 800b368:	460b      	mov	r3, r1
 800b36a:	ec43 2b10 	vmov	d0, r2, r3
 800b36e:	f004 ff7f 	bl	8010270 <atan>
 800b372:	ec51 0b10 	vmov	r0, r1, d0
 800b376:	a352      	add	r3, pc, #328	@ (adr r3, 800b4c0 <MPU6050_Read_All+0x4c0>)
 800b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37c:	f7f5 f8ec 	bl	8000558 <__aeabi_dmul>
 800b380:	4602      	mov	r2, r0
 800b382:	460b      	mov	r3, r1
 800b384:	4610      	mov	r0, r2
 800b386:	4619      	mov	r1, r3
 800b388:	f7f5 fb96 	bl	8000ab8 <__aeabi_d2f>
 800b38c:	4603      	mov	r3, r0
 800b38e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b390:	e002      	b.n	800b398 <MPU6050_Read_All+0x398>
    }
    else
    {
        roll = 0.0;
 800b392:	f04f 0300 	mov.w	r3, #0
 800b396:	633b      	str	r3, [r7, #48]	@ 0x30
    }
    // Pitch Calculation
    float_t pitch = atan2(-Accel_X_RAW, Accel_Z_RAW) * RAD_TO_DEG;
 800b398:	4b57      	ldr	r3, [pc, #348]	@ (800b4f8 <MPU6050_Read_All+0x4f8>)
 800b39a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b39e:	425b      	negs	r3, r3
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7f5 f86f 	bl	8000484 <__aeabi_i2d>
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	460d      	mov	r5, r1
 800b3aa:	4b54      	ldr	r3, [pc, #336]	@ (800b4fc <MPU6050_Read_All+0x4fc>)
 800b3ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7f5 f867 	bl	8000484 <__aeabi_i2d>
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	ec43 2b11 	vmov	d1, r2, r3
 800b3be:	ec45 4b10 	vmov	d0, r4, r5
 800b3c2:	f004 ff25 	bl	8010210 <atan2>
 800b3c6:	ec51 0b10 	vmov	r0, r1, d0
 800b3ca:	a33d      	add	r3, pc, #244	@ (adr r3, 800b4c0 <MPU6050_Read_All+0x4c0>)
 800b3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d0:	f7f5 f8c2 	bl	8000558 <__aeabi_dmul>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	4610      	mov	r0, r2
 800b3da:	4619      	mov	r1, r3
 800b3dc:	f7f5 fb6c 	bl	8000ab8 <__aeabi_d2f>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	61fb      	str	r3, [r7, #28]
    if ((pitch < -90 && KalmanAngleY > 90) || (pitch > 90 && KalmanAngleY < -90))
 800b3e4:	edd7 7a07 	vldr	s15, [r7, #28]
 800b3e8:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800b504 <MPU6050_Read_All+0x504>
 800b3ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3f4:	d509      	bpl.n	800b40a <MPU6050_Read_All+0x40a>
 800b3f6:	4b44      	ldr	r3, [pc, #272]	@ (800b508 <MPU6050_Read_All+0x508>)
 800b3f8:	edd3 7a00 	vldr	s15, [r3]
 800b3fc:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800b50c <MPU6050_Read_All+0x50c>
 800b400:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b408:	dc12      	bgt.n	800b430 <MPU6050_Read_All+0x430>
 800b40a:	edd7 7a07 	vldr	s15, [r7, #28]
 800b40e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800b50c <MPU6050_Read_All+0x50c>
 800b412:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b41a:	dd7d      	ble.n	800b518 <MPU6050_Read_All+0x518>
 800b41c:	4b3a      	ldr	r3, [pc, #232]	@ (800b508 <MPU6050_Read_All+0x508>)
 800b41e:	edd3 7a00 	vldr	s15, [r3]
 800b422:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800b504 <MPU6050_Read_All+0x504>
 800b426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b42e:	d573      	bpl.n	800b518 <MPU6050_Read_All+0x518>
    {
        KalmanY.angle = pitch;
 800b430:	4a37      	ldr	r2, [pc, #220]	@ (800b510 <MPU6050_Read_All+0x510>)
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	60d3      	str	r3, [r2, #12]
        KalmanAngleY =pitch-OFFSET_IN_PITCH;
 800b436:	69f8      	ldr	r0, [r7, #28]
 800b438:	f7f5 f836 	bl	80004a8 <__aeabi_f2d>
 800b43c:	a322      	add	r3, pc, #136	@ (adr r3, 800b4c8 <MPU6050_Read_All+0x4c8>)
 800b43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b442:	f7f4 fed1 	bl	80001e8 <__aeabi_dsub>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	4610      	mov	r0, r2
 800b44c:	4619      	mov	r1, r3
 800b44e:	f7f5 fb33 	bl	8000ab8 <__aeabi_d2f>
 800b452:	4603      	mov	r3, r0
 800b454:	4a2c      	ldr	r2, [pc, #176]	@ (800b508 <MPU6050_Read_All+0x508>)
 800b456:	6013      	str	r3, [r2, #0]
        old_pitch = (fabs(KalmanAngleY-old_pitch) > ROLL_PITCH_THRESHOLD) ? KalmanAngleY:old_pitch;
 800b458:	4b2b      	ldr	r3, [pc, #172]	@ (800b508 <MPU6050_Read_All+0x508>)
 800b45a:	ed93 7a00 	vldr	s14, [r3]
 800b45e:	4b2d      	ldr	r3, [pc, #180]	@ (800b514 <MPU6050_Read_All+0x514>)
 800b460:	edd3 7a00 	vldr	s15, [r3]
 800b464:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b468:	eef0 7ae7 	vabs.f32	s15, s15
 800b46c:	ee17 0a90 	vmov	r0, s15
 800b470:	f7f5 f81a 	bl	80004a8 <__aeabi_f2d>
 800b474:	a316      	add	r3, pc, #88	@ (adr r3, 800b4d0 <MPU6050_Read_All+0x4d0>)
 800b476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47a:	f7f5 fafd 	bl	8000a78 <__aeabi_dcmpgt>
 800b47e:	4603      	mov	r3, r0
 800b480:	2b00      	cmp	r3, #0
 800b482:	d002      	beq.n	800b48a <MPU6050_Read_All+0x48a>
 800b484:	4b20      	ldr	r3, [pc, #128]	@ (800b508 <MPU6050_Read_All+0x508>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	e001      	b.n	800b48e <MPU6050_Read_All+0x48e>
 800b48a:	4b22      	ldr	r3, [pc, #136]	@ (800b514 <MPU6050_Read_All+0x514>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a21      	ldr	r2, [pc, #132]	@ (800b514 <MPU6050_Read_All+0x514>)
 800b490:	6013      	str	r3, [r2, #0]
        DataStruct->Pitch=(__int16_t)(old_pitch);
 800b492:	4b20      	ldr	r3, [pc, #128]	@ (800b514 <MPU6050_Read_All+0x514>)
 800b494:	edd3 7a00 	vldr	s15, [r3]
 800b498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b49c:	ee17 3a90 	vmov	r3, s15
 800b4a0:	b21b      	sxth	r3, r3
 800b4a2:	ee07 3a90 	vmov	s15, r3
 800b4a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	edc3 7a08 	vstr	s15, [r3, #32]
 800b4b0:	e07d      	b.n	800b5ae <MPU6050_Read_All+0x5ae>
 800b4b2:	bf00      	nop
 800b4b4:	f3af 8000 	nop.w
 800b4b8:	00000000 	.word	0x00000000
 800b4bc:	40606000 	.word	0x40606000
 800b4c0:	1a63c1f8 	.word	0x1a63c1f8
 800b4c4:	404ca5dc 	.word	0x404ca5dc
 800b4c8:	9999999a 	.word	0x9999999a
 800b4cc:	400d9999 	.word	0x400d9999
 800b4d0:	9999999a 	.word	0x9999999a
 800b4d4:	3fc99999 	.word	0x3fc99999
 800b4d8:	20000c8c 	.word	0x20000c8c
 800b4dc:	42c80000 	.word	0x42c80000
 800b4e0:	40590000 	.word	0x40590000
 800b4e4:	20000ca2 	.word	0x20000ca2
 800b4e8:	20000ca4 	.word	0x20000ca4
 800b4ec:	20000ca6 	.word	0x20000ca6
 800b4f0:	20000cb0 	.word	0x20000cb0
 800b4f4:	408f4000 	.word	0x408f4000
 800b4f8:	20000c9c 	.word	0x20000c9c
 800b4fc:	20000ca0 	.word	0x20000ca0
 800b500:	20000c9e 	.word	0x20000c9e
 800b504:	c2b40000 	.word	0xc2b40000
 800b508:	20000cac 	.word	0x20000cac
 800b50c:	42b40000 	.word	0x42b40000
 800b510:	200005b4 	.word	0x200005b4
 800b514:	20000c94 	.word	0x20000c94
    }
    else
    {
        KalmanAngleY =Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt)-OFFSET_IN_PITCH;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	edd3 7a05 	vldr	s15, [r3, #20]
 800b51e:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 800b522:	eef0 0a67 	vmov.f32	s1, s15
 800b526:	ed97 0a07 	vldr	s0, [r7, #28]
 800b52a:	486f      	ldr	r0, [pc, #444]	@ (800b6e8 <MPU6050_Read_All+0x6e8>)
 800b52c:	f000 f8ec 	bl	800b708 <Kalman_getAngle>
 800b530:	ee10 3a10 	vmov	r3, s0
 800b534:	4618      	mov	r0, r3
 800b536:	f7f4 ffb7 	bl	80004a8 <__aeabi_f2d>
 800b53a:	a365      	add	r3, pc, #404	@ (adr r3, 800b6d0 <MPU6050_Read_All+0x6d0>)
 800b53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b540:	f7f4 fe52 	bl	80001e8 <__aeabi_dsub>
 800b544:	4602      	mov	r2, r0
 800b546:	460b      	mov	r3, r1
 800b548:	4610      	mov	r0, r2
 800b54a:	4619      	mov	r1, r3
 800b54c:	f7f5 fab4 	bl	8000ab8 <__aeabi_d2f>
 800b550:	4603      	mov	r3, r0
 800b552:	4a66      	ldr	r2, [pc, #408]	@ (800b6ec <MPU6050_Read_All+0x6ec>)
 800b554:	6013      	str	r3, [r2, #0]
        old_pitch = (fabs(KalmanAngleY-old_pitch) > ROLL_PITCH_THRESHOLD) ? KalmanAngleY:old_pitch;
 800b556:	4b65      	ldr	r3, [pc, #404]	@ (800b6ec <MPU6050_Read_All+0x6ec>)
 800b558:	ed93 7a00 	vldr	s14, [r3]
 800b55c:	4b64      	ldr	r3, [pc, #400]	@ (800b6f0 <MPU6050_Read_All+0x6f0>)
 800b55e:	edd3 7a00 	vldr	s15, [r3]
 800b562:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b566:	eef0 7ae7 	vabs.f32	s15, s15
 800b56a:	ee17 0a90 	vmov	r0, s15
 800b56e:	f7f4 ff9b 	bl	80004a8 <__aeabi_f2d>
 800b572:	a359      	add	r3, pc, #356	@ (adr r3, 800b6d8 <MPU6050_Read_All+0x6d8>)
 800b574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b578:	f7f5 fa7e 	bl	8000a78 <__aeabi_dcmpgt>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d002      	beq.n	800b588 <MPU6050_Read_All+0x588>
 800b582:	4b5a      	ldr	r3, [pc, #360]	@ (800b6ec <MPU6050_Read_All+0x6ec>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	e001      	b.n	800b58c <MPU6050_Read_All+0x58c>
 800b588:	4b59      	ldr	r3, [pc, #356]	@ (800b6f0 <MPU6050_Read_All+0x6f0>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a58      	ldr	r2, [pc, #352]	@ (800b6f0 <MPU6050_Read_All+0x6f0>)
 800b58e:	6013      	str	r3, [r2, #0]
        DataStruct->Pitch=(__int16_t)(old_pitch);
 800b590:	4b57      	ldr	r3, [pc, #348]	@ (800b6f0 <MPU6050_Read_All+0x6f0>)
 800b592:	edd3 7a00 	vldr	s15, [r3]
 800b596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b59a:	ee17 3a90 	vmov	r3, s15
 800b59e:	b21b      	sxth	r3, r3
 800b5a0:	ee07 3a90 	vmov	s15, r3
 800b5a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    if (fabs(KalmanAngleY) > 90){
 800b5ae:	4b4f      	ldr	r3, [pc, #316]	@ (800b6ec <MPU6050_Read_All+0x6ec>)
 800b5b0:	edd3 7a00 	vldr	s15, [r3]
 800b5b4:	eef0 7ae7 	vabs.f32	s15, s15
 800b5b8:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800b6f4 <MPU6050_Read_All+0x6f4>
 800b5bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c4:	dd07      	ble.n	800b5d6 <MPU6050_Read_All+0x5d6>
        DataStruct->Gx = -DataStruct->Gx;
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	edd3 7a04 	vldr	s15, [r3, #16]
 800b5cc:	eef1 7a67 	vneg.f32	s15, s15
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	edc3 7a04 	vstr	s15, [r3, #16]
    }
    	KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	edd3 7a04 	vldr	s15, [r3, #16]
 800b5dc:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 800b5e0:	eef0 0a67 	vmov.f32	s1, s15
 800b5e4:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 800b5e8:	4843      	ldr	r0, [pc, #268]	@ (800b6f8 <MPU6050_Read_All+0x6f8>)
 800b5ea:	f000 f88d 	bl	800b708 <Kalman_getAngle>
 800b5ee:	eef0 7a40 	vmov.f32	s15, s0
 800b5f2:	4b42      	ldr	r3, [pc, #264]	@ (800b6fc <MPU6050_Read_All+0x6fc>)
 800b5f4:	edc3 7a00 	vstr	s15, [r3]
    	old_roll = (fabs(KalmanAngleX-old_roll) > ROLL_PITCH_THRESHOLD) ? KalmanAngleX:old_roll;
 800b5f8:	4b40      	ldr	r3, [pc, #256]	@ (800b6fc <MPU6050_Read_All+0x6fc>)
 800b5fa:	ed93 7a00 	vldr	s14, [r3]
 800b5fe:	4b40      	ldr	r3, [pc, #256]	@ (800b700 <MPU6050_Read_All+0x700>)
 800b600:	edd3 7a00 	vldr	s15, [r3]
 800b604:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b608:	eef0 7ae7 	vabs.f32	s15, s15
 800b60c:	ee17 0a90 	vmov	r0, s15
 800b610:	f7f4 ff4a 	bl	80004a8 <__aeabi_f2d>
 800b614:	a330      	add	r3, pc, #192	@ (adr r3, 800b6d8 <MPU6050_Read_All+0x6d8>)
 800b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61a:	f7f5 fa2d 	bl	8000a78 <__aeabi_dcmpgt>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <MPU6050_Read_All+0x62a>
 800b624:	4b35      	ldr	r3, [pc, #212]	@ (800b6fc <MPU6050_Read_All+0x6fc>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	e001      	b.n	800b62e <MPU6050_Read_All+0x62e>
 800b62a:	4b35      	ldr	r3, [pc, #212]	@ (800b700 <MPU6050_Read_All+0x700>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a34      	ldr	r2, [pc, #208]	@ (800b700 <MPU6050_Read_All+0x700>)
 800b630:	6013      	str	r3, [r2, #0]
    	DataStruct->Roll=(__int16_t)(old_roll);
 800b632:	4b33      	ldr	r3, [pc, #204]	@ (800b700 <MPU6050_Read_All+0x700>)
 800b634:	edd3 7a00 	vldr	s15, [r3]
 800b638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b63c:	ee17 3a90 	vmov	r3, s15
 800b640:	b21b      	sxth	r3, r3
 800b642:	ee07 3a90 	vmov	s15, r3
 800b646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	edc3 7a07 	vstr	s15, [r3, #28]


    // Yaw Calculation with Threshold (0.8 degrees per trial)
    if (fabs(DataStruct->Gz * dt) > YAW_THRESHOLD) // Only integrate if increase in yaw (DataStruct->Gz * dt) is larger than yaw_threshold
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	ed93 7a06 	vldr	s14, [r3, #24]
 800b656:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b65e:	eef0 7ae7 	vabs.f32	s15, s15
 800b662:	ee17 0a90 	vmov	r0, s15
 800b666:	f7f4 ff1f 	bl	80004a8 <__aeabi_f2d>
 800b66a:	a31d      	add	r3, pc, #116	@ (adr r3, 800b6e0 <MPU6050_Read_All+0x6e0>)
 800b66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b670:	f7f5 fa02 	bl	8000a78 <__aeabi_dcmpgt>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d00e      	beq.n	800b698 <MPU6050_Read_All+0x698>
    	old_yaw += DataStruct->Gz * dt;
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	ed93 7a06 	vldr	s14, [r3, #24]
 800b680:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b684:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b688:	4b1e      	ldr	r3, [pc, #120]	@ (800b704 <MPU6050_Read_All+0x704>)
 800b68a:	edd3 7a00 	vldr	s15, [r3]
 800b68e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b692:	4b1c      	ldr	r3, [pc, #112]	@ (800b704 <MPU6050_Read_All+0x704>)
 800b694:	edc3 7a00 	vstr	s15, [r3]
    DataStruct->Yaw=(__int16_t)(old_yaw);
 800b698:	4b1a      	ldr	r3, [pc, #104]	@ (800b704 <MPU6050_Read_All+0x704>)
 800b69a:	edd3 7a00 	vldr	s15, [r3]
 800b69e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6a2:	ee17 3a90 	vmov	r3, s15
 800b6a6:	b21b      	sxth	r3, r3
 800b6a8:	ee07 3a90 	vmov	s15, r3
 800b6ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	if ((NULL!=I2Cx)&&(NULL!=DataStruct)){
 800b6b6:	e002      	b.n	800b6be <MPU6050_Read_All+0x6be>
    }
	else
	{
		l_EcuStatus=ECU_ERROR;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	}
	return l_EcuStatus;
 800b6be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3738      	adds	r7, #56	@ 0x38
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bdb0      	pop	{r4, r5, r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	f3af 8000 	nop.w
 800b6d0:	9999999a 	.word	0x9999999a
 800b6d4:	400d9999 	.word	0x400d9999
 800b6d8:	9999999a 	.word	0x9999999a
 800b6dc:	3fc99999 	.word	0x3fc99999
 800b6e0:	9999999a 	.word	0x9999999a
 800b6e4:	3f999999 	.word	0x3f999999
 800b6e8:	200005b4 	.word	0x200005b4
 800b6ec:	20000cac 	.word	0x20000cac
 800b6f0:	20000c94 	.word	0x20000c94
 800b6f4:	42b40000 	.word	0x42b40000
 800b6f8:	20000590 	.word	0x20000590
 800b6fc:	20000ca8 	.word	0x20000ca8
 800b700:	20000c90 	.word	0x20000c90
 800b704:	20000c98 	.word	0x20000c98

0800b708 <Kalman_getAngle>:



float_t Kalman_getAngle(Kalman_t *Kalman, float_t newAngle, float_t newRate, float_t dt)
{
 800b708:	b480      	push	{r7}
 800b70a:	b08d      	sub	sp, #52	@ 0x34
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	ed87 0a02 	vstr	s0, [r7, #8]
 800b714:	edc7 0a01 	vstr	s1, [r7, #4]
 800b718:	ed87 1a00 	vstr	s2, [r7]
    float_t rate = newRate - Kalman->bias;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	edd3 7a04 	vldr	s15, [r3, #16]
 800b722:	ed97 7a01 	vldr	s14, [r7, #4]
 800b726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b72a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    Kalman->angle += dt * rate;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	ed93 7a03 	vldr	s14, [r3, #12]
 800b734:	edd7 6a00 	vldr	s13, [r7]
 800b738:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800b73c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b740:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	edc3 7a03 	vstr	s15, [r3, #12]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	ed93 7a05 	vldr	s14, [r3, #20]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	edd3 6a08 	vldr	s13, [r3, #32]
 800b756:	edd7 7a00 	vldr	s15, [r7]
 800b75a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	edd3 7a06 	vldr	s15, [r3, #24]
 800b764:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	edd3 7a07 	vldr	s15, [r3, #28]
 800b76e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	edd3 7a00 	vldr	s15, [r3]
 800b778:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b77c:	edd7 7a00 	vldr	s15, [r7]
 800b780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b784:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	edc3 7a05 	vstr	s15, [r3, #20]
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	ed93 7a06 	vldr	s14, [r3, #24]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	edd3 6a08 	vldr	s13, [r3, #32]
 800b79a:	edd7 7a00 	vldr	s15, [r7]
 800b79e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b7a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	edc3 7a06 	vstr	s15, [r3, #24]
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	ed93 7a07 	vldr	s14, [r3, #28]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	edd3 6a08 	vldr	s13, [r3, #32]
 800b7b8:	edd7 7a00 	vldr	s15, [r7]
 800b7bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b7c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	edc3 7a07 	vstr	s15, [r3, #28]
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	ed93 7a08 	vldr	s14, [r3, #32]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	edd3 6a01 	vldr	s13, [r3, #4]
 800b7d6:	edd7 7a00 	vldr	s15, [r7]
 800b7da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b7de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	edc3 7a08 	vstr	s15, [r3, #32]

    float_t S = Kalman->P[0][0] + Kalman->R_measure;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	ed93 7a05 	vldr	s14, [r3, #20]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	edd3 7a02 	vldr	s15, [r3, #8]
 800b7f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7f8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float_t K[2];
    K[0] = Kalman->P[0][0] / S;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	edd3 6a05 	vldr	s13, [r3, #20]
 800b802:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b80a:	edc7 7a05 	vstr	s15, [r7, #20]
    K[1] = Kalman->P[1][0] / S;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	edd3 6a07 	vldr	s13, [r3, #28]
 800b814:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b81c:	edc7 7a06 	vstr	s15, [r7, #24]

    float_t y = newAngle - Kalman->angle;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	edd3 7a03 	vldr	s15, [r3, #12]
 800b826:	ed97 7a02 	vldr	s14, [r7, #8]
 800b82a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b82e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    Kalman->angle += K[0] * y;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	ed93 7a03 	vldr	s14, [r3, #12]
 800b838:	edd7 6a05 	vldr	s13, [r7, #20]
 800b83c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b844:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	edc3 7a03 	vstr	s15, [r3, #12]
    Kalman->bias += K[1] * y;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	ed93 7a04 	vldr	s14, [r3, #16]
 800b854:	edd7 6a06 	vldr	s13, [r7, #24]
 800b858:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800b85c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b860:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	edc3 7a04 	vstr	s15, [r3, #16]

    float_t P00_temp = Kalman->P[0][0];
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	695b      	ldr	r3, [r3, #20]
 800b86e:	623b      	str	r3, [r7, #32]
    float_t P01_temp = Kalman->P[0][1];
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	61fb      	str	r3, [r7, #28]

    Kalman->P[0][0] -= K[0] * P00_temp;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	ed93 7a05 	vldr	s14, [r3, #20]
 800b87c:	edd7 6a05 	vldr	s13, [r7, #20]
 800b880:	edd7 7a08 	vldr	s15, [r7, #32]
 800b884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	edc3 7a05 	vstr	s15, [r3, #20]
    Kalman->P[0][1] -= K[0] * P01_temp;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	ed93 7a06 	vldr	s14, [r3, #24]
 800b898:	edd7 6a05 	vldr	s13, [r7, #20]
 800b89c:	edd7 7a07 	vldr	s15, [r7, #28]
 800b8a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b8a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	edc3 7a06 	vstr	s15, [r3, #24]
    Kalman->P[1][0] -= K[1] * P00_temp;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	ed93 7a07 	vldr	s14, [r3, #28]
 800b8b4:	edd7 6a06 	vldr	s13, [r7, #24]
 800b8b8:	edd7 7a08 	vldr	s15, [r7, #32]
 800b8bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b8c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	edc3 7a07 	vstr	s15, [r3, #28]
    Kalman->P[1][1] -= K[1] * P01_temp;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	ed93 7a08 	vldr	s14, [r3, #32]
 800b8d0:	edd7 6a06 	vldr	s13, [r7, #24]
 800b8d4:	edd7 7a07 	vldr	s15, [r7, #28]
 800b8d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b8dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	edc3 7a08 	vstr	s15, [r3, #32]

    return Kalman->angle;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	ee07 3a90 	vmov	s15, r3
};
 800b8ee:	eeb0 0a67 	vmov.f32	s0, s15
 800b8f2:	3734      	adds	r7, #52	@ 0x34
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <delay_us>:
 *
 * @note    This function has been modified to handle timer overflow(to safely deal with 16 bit timers).
 *          However, it does not account for multiple overflows.
 *          Ensure that p_US is at least 10 µs, and the timer period is not less than 10 µs.
 */
void delay_us(TIM_HandleTypeDef *p_Htim, uint16_t p_US) {
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	460b      	mov	r3, r1
 800b906:	807b      	strh	r3, [r7, #2]
    uint32_t l_Temp = __HAL_TIM_GET_COUNTER(p_Htim);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b90e:	60fb      	str	r3, [r7, #12]
    l_Temp += p_US;
 800b910:	887b      	ldrh	r3, [r7, #2]
 800b912:	68fa      	ldr	r2, [r7, #12]
 800b914:	4413      	add	r3, r2
 800b916:	60fb      	str	r3, [r7, #12]
    if(l_Temp < p_Htim->Init.Period)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d207      	bcs.n	800b932 <delay_us+0x36>
    	while (__HAL_TIM_GET_COUNTER(p_Htim) < l_Temp);
 800b922:	bf00      	nop
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d8f9      	bhi.n	800b924 <delay_us+0x28>
    else
    {
    	while (__HAL_TIM_GET_COUNTER(p_Htim) != p_Htim->Init.Period );
    	while (__HAL_TIM_GET_COUNTER(p_Htim)< l_Temp-p_Htim->Init.Period);
    }
}
 800b930:	e011      	b.n	800b956 <delay_us+0x5a>
    	while (__HAL_TIM_GET_COUNTER(p_Htim) != p_Htim->Init.Period );
 800b932:	bf00      	nop
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d1f8      	bne.n	800b934 <delay_us+0x38>
    	while (__HAL_TIM_GET_COUNTER(p_Htim)< l_Temp-p_Htim->Init.Period);
 800b942:	bf00      	nop
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	68f9      	ldr	r1, [r7, #12]
 800b950:	1acb      	subs	r3, r1, r3
 800b952:	429a      	cmp	r2, r3
 800b954:	d3f6      	bcc.n	800b944 <delay_us+0x48>
}
 800b956:	bf00      	nop
 800b958:	3714      	adds	r7, #20
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr
	...

0800b964 <Ultrasonic_Init>:
 * @param   p_NumSensors Number of Sensors to initialize.
 * @param   ...         Variable arguments, each of type UltrasonicSensor*.
 * @example EcuStatus |= Ultrasonic_Init(4,&sensor_1,&sensor_2,&sensor_3,&sensor_4);
 * @return  ecu_status_t status of operation
 */
ecu_status_t Ultrasonic_Init(int p_NumSensors, ...) {
 800b964:	b40f      	push	{r0, r1, r2, r3}
 800b966:	b580      	push	{r7, lr}
 800b968:	b084      	sub	sp, #16
 800b96a:	af00      	add	r7, sp, #0
    ecu_status_t l_EcuStatus = ECU_OK;
 800b96c:	2300      	movs	r3, #0
 800b96e:	73fb      	strb	r3, [r7, #15]
    va_list l_Args;
    va_start(l_Args, p_NumSensors);
 800b970:	f107 031c 	add.w	r3, r7, #28
 800b974:	603b      	str	r3, [r7, #0]

    for (int i = 0; i < p_NumSensors; i++) {
 800b976:	2300      	movs	r3, #0
 800b978:	60bb      	str	r3, [r7, #8]
 800b97a:	e02e      	b.n	800b9da <Ultrasonic_Init+0x76>
        UltrasonicSensor* sensor = va_arg(l_Args, UltrasonicSensor*);
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	1d1a      	adds	r2, r3, #4
 800b980:	603a      	str	r2, [r7, #0]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	607b      	str	r3, [r7, #4]
        if (NULL == sensor)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d102      	bne.n	800b992 <Ultrasonic_Init+0x2e>
        {
            l_EcuStatus = ECU_ERROR;
 800b98c:	2301      	movs	r3, #1
 800b98e:	73fb      	strb	r3, [r7, #15]
            break;
 800b990:	e027      	b.n	800b9e2 <Ultrasonic_Init+0x7e>
        }
        HAL_TIM_RegisterCallback(sensor->htim,HAL_TIM_IC_CAPTURE_CB_ID,USER_TIM_IC_CALLBACK);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	4a17      	ldr	r2, [pc, #92]	@ (800b9f4 <Ultrasonic_Init+0x90>)
 800b998:	2112      	movs	r1, #18
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fc fd92 	bl	80084c4 <HAL_TIM_RegisterCallback>
        HAL_TIM_RegisterCallback(sensor->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID,USER_TIM_OVERFLOW_CALLBACK);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	4a14      	ldr	r2, [pc, #80]	@ (800b9f8 <Ultrasonic_Init+0x94>)
 800b9a6:	210e      	movs	r1, #14
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7fc fd8b 	bl	80084c4 <HAL_TIM_RegisterCallback>
        HAL_TIM_IC_Start_IT(sensor->htim, sensor->Channel);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	689a      	ldr	r2, [r3, #8]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	7b1b      	ldrb	r3, [r3, #12]
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	f7fc fa1f 	bl	8007dfc <HAL_TIM_IC_Start_IT>
        HAL_TIM_Base_Start_IT(sensor->htim);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fc f95c 	bl	8007c80 <HAL_TIM_Base_Start_IT>
        Distance[i] = sensor->Distance;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	691a      	ldr	r2, [r3, #16]
 800b9cc:	490b      	ldr	r1, [pc, #44]	@ (800b9fc <Ultrasonic_Init+0x98>)
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < p_NumSensors; i++) {
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	60bb      	str	r3, [r7, #8]
 800b9da:	68ba      	ldr	r2, [r7, #8]
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	dbcc      	blt.n	800b97c <Ultrasonic_Init+0x18>
    }

    va_end(l_Args);
    return l_EcuStatus;
 800b9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9ee:	b004      	add	sp, #16
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	0800bb01 	.word	0x0800bb01
 800b9f8:	0800bd0d 	.word	0x0800bd0d
 800b9fc:	20000cd4 	.word	0x20000cd4

0800ba00 <Ultrasonic_ReadDistance>:
 * 					or   Ultrasonic_ReadDistance(3,2,&sensor_2,&sensor_3,&sensor_4);
 * 					or   Ultrasonic_ReadDistance(2,3,&sensor_3,&sensor_4);
 * 					or   Ultrasonic_ReadDistance(1,4,&sensor_4);
 * @return ecu_status_t status of the operation
 */
ecu_status_t Ultrasonic_ReadDistance(int p_NumSensors,int index, ...) {
 800ba00:	b40e      	push	{r1, r2, r3}
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b087      	sub	sp, #28
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	75fb      	strb	r3, [r7, #23]
    va_list l_Args;
    va_start(l_Args, p_NumSensors);
 800ba0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ba12:	60fb      	str	r3, [r7, #12]
    SensorsToGetDistance = p_NumSensors;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	b2da      	uxtb	r2, r3
 800ba18:	4b36      	ldr	r3, [pc, #216]	@ (800baf4 <Ultrasonic_ReadDistance+0xf4>)
 800ba1a:	701a      	strb	r2, [r3, #0]
    int i=index-1;
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	613b      	str	r3, [r7, #16]
    /* Store all sensor pointers */
    for (i;i <(index-1+p_NumSensors);i++)
 800ba22:	e013      	b.n	800ba4c <Ultrasonic_ReadDistance+0x4c>
    {
        Sensors[i] = va_arg(l_Args, UltrasonicSensor*);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	1d1a      	adds	r2, r3, #4
 800ba28:	60fa      	str	r2, [r7, #12]
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	4932      	ldr	r1, [pc, #200]	@ (800baf8 <Ultrasonic_ReadDistance+0xf8>)
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (NULL == Sensors[i])
 800ba34:	4a30      	ldr	r2, [pc, #192]	@ (800baf8 <Ultrasonic_ReadDistance+0xf8>)
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d102      	bne.n	800ba46 <Ultrasonic_ReadDistance+0x46>
        {
            l_EcuStatus = ECU_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	75fb      	strb	r3, [r7, #23]
            break;
 800ba44:	e009      	b.n	800ba5a <Ultrasonic_ReadDistance+0x5a>
    for (i;i <(index-1+p_NumSensors);i++)
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	613b      	str	r3, [r7, #16]
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4e:	1e5a      	subs	r2, r3, #1
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4413      	add	r3, r2
 800ba54:	693a      	ldr	r2, [r7, #16]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	dbe4      	blt.n	800ba24 <Ultrasonic_ReadDistance+0x24>
        }
    }
    va_end(l_Args);

    if (l_EcuStatus != ECU_ERROR)
 800ba5a:	7dfb      	ldrb	r3, [r7, #23]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d041      	beq.n	800bae4 <Ultrasonic_ReadDistance+0xe4>
    {
        /* Set TRIG pins high for all Sensors */
        for (i=index-1;i < (index-1+p_NumSensors); i++) {
 800ba60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba62:	3b01      	subs	r3, #1
 800ba64:	613b      	str	r3, [r7, #16]
 800ba66:	e010      	b.n	800ba8a <Ultrasonic_ReadDistance+0x8a>
            HAL_GPIO_WritePin(Sensors[i]->TRIG_PORT, Sensors[i]->TRIG_PIN, GPIO_PIN_SET);
 800ba68:	4a23      	ldr	r2, [pc, #140]	@ (800baf8 <Ultrasonic_ReadDistance+0xf8>)
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba70:	6818      	ldr	r0, [r3, #0]
 800ba72:	4a21      	ldr	r2, [pc, #132]	@ (800baf8 <Ultrasonic_ReadDistance+0xf8>)
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba7a:	889b      	ldrh	r3, [r3, #4]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	4619      	mov	r1, r3
 800ba80:	f7f9 fdb2 	bl	80055e8 <HAL_GPIO_WritePin>
        for (i=index-1;i < (index-1+p_NumSensors); i++) {
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	3301      	adds	r3, #1
 800ba88:	613b      	str	r3, [r7, #16]
 800ba8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8c:	1e5a      	subs	r2, r3, #1
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	4413      	add	r3, r2
 800ba92:	693a      	ldr	r2, [r7, #16]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	dbe7      	blt.n	800ba68 <Ultrasonic_ReadDistance+0x68>
        }

        delay_us(Sensors[index-1]->htim,15);
 800ba98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	4a16      	ldr	r2, [pc, #88]	@ (800baf8 <Ultrasonic_ReadDistance+0xf8>)
 800ba9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	210f      	movs	r1, #15
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7ff ff28 	bl	800b8fc <delay_us>

        /* Set TRIG pins low for all Sensors */
        for (i=index-1;i < (index-1+p_NumSensors); i++) {
 800baac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baae:	3b01      	subs	r3, #1
 800bab0:	613b      	str	r3, [r7, #16]
 800bab2:	e010      	b.n	800bad6 <Ultrasonic_ReadDistance+0xd6>
            HAL_GPIO_WritePin(Sensors[i]->TRIG_PORT, Sensors[i]->TRIG_PIN, GPIO_PIN_RESET);
 800bab4:	4a10      	ldr	r2, [pc, #64]	@ (800baf8 <Ultrasonic_ReadDistance+0xf8>)
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800babc:	6818      	ldr	r0, [r3, #0]
 800babe:	4a0e      	ldr	r2, [pc, #56]	@ (800baf8 <Ultrasonic_ReadDistance+0xf8>)
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bac6:	889b      	ldrh	r3, [r3, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	4619      	mov	r1, r3
 800bacc:	f7f9 fd8c 	bl	80055e8 <HAL_GPIO_WritePin>
        for (i=index-1;i < (index-1+p_NumSensors); i++) {
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	3301      	adds	r3, #1
 800bad4:	613b      	str	r3, [r7, #16]
 800bad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad8:	1e5a      	subs	r2, r3, #1
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4413      	add	r3, r2
 800bade:	693a      	ldr	r2, [r7, #16]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	dbe7      	blt.n	800bab4 <Ultrasonic_ReadDistance+0xb4>
        }
    }
    return l_EcuStatus;
 800bae4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	371c      	adds	r7, #28
 800baea:	46bd      	mov	sp, r7
 800baec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800baf0:	b003      	add	sp, #12
 800baf2:	4770      	bx	lr
 800baf4:	20000618 	.word	0x20000618
 800baf8:	20000cb4 	.word	0x20000cb4
 800bafc:	00000000 	.word	0x00000000

0800bb00 <USER_TIM_IC_CALLBACK>:

/**
 * @brief   Callback function for input capture event to calculate Distance.
 * @param   htim Pointer to the timer handle where the input capture occurred.
 */
void USER_TIM_IC_CALLBACK(TIM_HandleTypeDef *htim) {
 800bb00:	b590      	push	{r4, r7, lr}
 800bb02:	b085      	sub	sp, #20
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
    static uint8_t l_Expression_1 = 0;
    static uint8_t l_Expression_2 = 0;
    static uint8_t l_Expression_3 = 0;
    static uint8_t l_Expression_4 = 0;

    for (uint8_t l_Counter = 0; l_Counter < TOTOAL_NUMBER_OF_ULTRASONIC; l_Counter++) {
 800bb08:	2300      	movs	r3, #0
 800bb0a:	73fb      	strb	r3, [r7, #15]
 800bb0c:	e0df      	b.n	800bcce <USER_TIM_IC_CALLBACK+0x1ce>
        if ((Sensors[l_Counter]->htim) == htim) {
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
 800bb10:	4a75      	ldr	r2, [pc, #468]	@ (800bce8 <USER_TIM_IC_CALLBACK+0x1e8>)
 800bb12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	f040 80d4 	bne.w	800bcc8 <USER_TIM_IC_CALLBACK+0x1c8>
            l_Expression_1 = (((Sensors[l_Counter]->Channel) == TIM_CHANNEL_1) && 
 800bb20:	7bfb      	ldrb	r3, [r7, #15]
 800bb22:	4a71      	ldr	r2, [pc, #452]	@ (800bce8 <USER_TIM_IC_CALLBACK+0x1e8>)
 800bb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb28:	7b1b      	ldrb	r3, [r3, #12]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d105      	bne.n	800bb3a <USER_TIM_IC_CALLBACK+0x3a>
                                   (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1));
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	7f1b      	ldrb	r3, [r3, #28]
            l_Expression_1 = (((Sensors[l_Counter]->Channel) == TIM_CHANNEL_1) && 
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d101      	bne.n	800bb3a <USER_TIM_IC_CALLBACK+0x3a>
 800bb36:	2301      	movs	r3, #1
 800bb38:	e000      	b.n	800bb3c <USER_TIM_IC_CALLBACK+0x3c>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	b2da      	uxtb	r2, r3
 800bb3e:	4b6b      	ldr	r3, [pc, #428]	@ (800bcec <USER_TIM_IC_CALLBACK+0x1ec>)
 800bb40:	701a      	strb	r2, [r3, #0]
            l_Expression_2 = (((Sensors[l_Counter]->Channel) == TIM_CHANNEL_2) && 
 800bb42:	7bfb      	ldrb	r3, [r7, #15]
 800bb44:	4a68      	ldr	r2, [pc, #416]	@ (800bce8 <USER_TIM_IC_CALLBACK+0x1e8>)
 800bb46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb4a:	7b1b      	ldrb	r3, [r3, #12]
 800bb4c:	2b04      	cmp	r3, #4
 800bb4e:	d105      	bne.n	800bb5c <USER_TIM_IC_CALLBACK+0x5c>
                                   (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2));
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	7f1b      	ldrb	r3, [r3, #28]
            l_Expression_2 = (((Sensors[l_Counter]->Channel) == TIM_CHANNEL_2) && 
 800bb54:	2b02      	cmp	r3, #2
 800bb56:	d101      	bne.n	800bb5c <USER_TIM_IC_CALLBACK+0x5c>
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e000      	b.n	800bb5e <USER_TIM_IC_CALLBACK+0x5e>
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	4b63      	ldr	r3, [pc, #396]	@ (800bcf0 <USER_TIM_IC_CALLBACK+0x1f0>)
 800bb62:	701a      	strb	r2, [r3, #0]
            l_Expression_3 = (((Sensors[l_Counter]->Channel) == TIM_CHANNEL_3) && 
 800bb64:	7bfb      	ldrb	r3, [r7, #15]
 800bb66:	4a60      	ldr	r2, [pc, #384]	@ (800bce8 <USER_TIM_IC_CALLBACK+0x1e8>)
 800bb68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb6c:	7b1b      	ldrb	r3, [r3, #12]
 800bb6e:	2b08      	cmp	r3, #8
 800bb70:	d105      	bne.n	800bb7e <USER_TIM_IC_CALLBACK+0x7e>
                                   (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3));
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	7f1b      	ldrb	r3, [r3, #28]
            l_Expression_3 = (((Sensors[l_Counter]->Channel) == TIM_CHANNEL_3) && 
 800bb76:	2b04      	cmp	r3, #4
 800bb78:	d101      	bne.n	800bb7e <USER_TIM_IC_CALLBACK+0x7e>
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e000      	b.n	800bb80 <USER_TIM_IC_CALLBACK+0x80>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	4b5c      	ldr	r3, [pc, #368]	@ (800bcf4 <USER_TIM_IC_CALLBACK+0x1f4>)
 800bb84:	701a      	strb	r2, [r3, #0]
            l_Expression_4 = (((Sensors[l_Counter]->Channel) == TIM_CHANNEL_4) && 
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
 800bb88:	4a57      	ldr	r2, [pc, #348]	@ (800bce8 <USER_TIM_IC_CALLBACK+0x1e8>)
 800bb8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb8e:	7b1b      	ldrb	r3, [r3, #12]
 800bb90:	2b0c      	cmp	r3, #12
 800bb92:	d105      	bne.n	800bba0 <USER_TIM_IC_CALLBACK+0xa0>
                                   (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4));
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	7f1b      	ldrb	r3, [r3, #28]
            l_Expression_4 = (((Sensors[l_Counter]->Channel) == TIM_CHANNEL_4) && 
 800bb98:	2b08      	cmp	r3, #8
 800bb9a:	d101      	bne.n	800bba0 <USER_TIM_IC_CALLBACK+0xa0>
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e000      	b.n	800bba2 <USER_TIM_IC_CALLBACK+0xa2>
 800bba0:	2300      	movs	r3, #0
 800bba2:	b2da      	uxtb	r2, r3
 800bba4:	4b54      	ldr	r3, [pc, #336]	@ (800bcf8 <USER_TIM_IC_CALLBACK+0x1f8>)
 800bba6:	701a      	strb	r2, [r3, #0]

            if (l_Expression_1 || l_Expression_2 || l_Expression_3 || l_Expression_4) {
 800bba8:	4b50      	ldr	r3, [pc, #320]	@ (800bcec <USER_TIM_IC_CALLBACK+0x1ec>)
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10b      	bne.n	800bbc8 <USER_TIM_IC_CALLBACK+0xc8>
 800bbb0:	4b4f      	ldr	r3, [pc, #316]	@ (800bcf0 <USER_TIM_IC_CALLBACK+0x1f0>)
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d107      	bne.n	800bbc8 <USER_TIM_IC_CALLBACK+0xc8>
 800bbb8:	4b4e      	ldr	r3, [pc, #312]	@ (800bcf4 <USER_TIM_IC_CALLBACK+0x1f4>)
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d103      	bne.n	800bbc8 <USER_TIM_IC_CALLBACK+0xc8>
 800bbc0:	4b4d      	ldr	r3, [pc, #308]	@ (800bcf8 <USER_TIM_IC_CALLBACK+0x1f8>)
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d07f      	beq.n	800bcc8 <USER_TIM_IC_CALLBACK+0x1c8>
                if (INITIAL == FirstVal[l_Counter]) {
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
 800bbca:	4a4c      	ldr	r2, [pc, #304]	@ (800bcfc <USER_TIM_IC_CALLBACK+0x1fc>)
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	4413      	add	r3, r2
 800bbd0:	edd3 7a00 	vldr	s15, [r3]
 800bbd4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bbd8:	eef4 7a47 	vcmp.f32	s15, s14
 800bbdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe0:	d11a      	bne.n	800bc18 <USER_TIM_IC_CALLBACK+0x118>
                    OverFlow[l_Counter]    = 0;
 800bbe2:	7bfb      	ldrb	r3, [r7, #15]
 800bbe4:	4a46      	ldr	r2, [pc, #280]	@ (800bd00 <USER_TIM_IC_CALLBACK+0x200>)
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	4413      	add	r3, r2
 800bbea:	f04f 0200 	mov.w	r2, #0
 800bbee:	601a      	str	r2, [r3, #0]
                    FirstVal[l_Counter]    = (float)HAL_TIM_ReadCapturedValue(htim, Sensors[l_Counter]->Channel);
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
 800bbf2:	4a3d      	ldr	r2, [pc, #244]	@ (800bce8 <USER_TIM_IC_CALLBACK+0x1e8>)
 800bbf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbf8:	7b1b      	ldrb	r3, [r3, #12]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7fc fbc3 	bl	8008388 <HAL_TIM_ReadCapturedValue>
 800bc02:	ee07 0a90 	vmov	s15, r0
 800bc06:	7bfb      	ldrb	r3, [r7, #15]
 800bc08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc0c:	4a3b      	ldr	r2, [pc, #236]	@ (800bcfc <USER_TIM_IC_CALLBACK+0x1fc>)
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	4413      	add	r3, r2
 800bc12:	edc3 7a00 	vstr	s15, [r3]
 800bc16:	e057      	b.n	800bcc8 <USER_TIM_IC_CALLBACK+0x1c8>
                } else {
                    SecondVal[l_Counter]   = (float)HAL_TIM_ReadCapturedValue(htim, Sensors[l_Counter]->Channel);
 800bc18:	7bfb      	ldrb	r3, [r7, #15]
 800bc1a:	4a33      	ldr	r2, [pc, #204]	@ (800bce8 <USER_TIM_IC_CALLBACK+0x1e8>)
 800bc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc20:	7b1b      	ldrb	r3, [r3, #12]
 800bc22:	4619      	mov	r1, r3
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f7fc fbaf 	bl	8008388 <HAL_TIM_ReadCapturedValue>
 800bc2a:	ee07 0a90 	vmov	s15, r0
 800bc2e:	7bfb      	ldrb	r3, [r7, #15]
 800bc30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc34:	4a33      	ldr	r2, [pc, #204]	@ (800bd04 <USER_TIM_IC_CALLBACK+0x204>)
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	4413      	add	r3, r2
 800bc3a:	edc3 7a00 	vstr	s15, [r3]
                    *(Distance[l_Counter]) = (OverFlow[l_Counter]*((Sensors[l_Counter]->htim)->Init.Period)+(SecondVal[l_Counter] - FirstVal[l_Counter]))*0.017;
 800bc3e:	7bfb      	ldrb	r3, [r7, #15]
 800bc40:	4a2f      	ldr	r2, [pc, #188]	@ (800bd00 <USER_TIM_IC_CALLBACK+0x200>)
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4413      	add	r3, r2
 800bc46:	ed93 7a00 	vldr	s14, [r3]
 800bc4a:	7bfb      	ldrb	r3, [r7, #15]
 800bc4c:	4a26      	ldr	r2, [pc, #152]	@ (800bce8 <USER_TIM_IC_CALLBACK+0x1e8>)
 800bc4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	ee07 3a90 	vmov	s15, r3
 800bc5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc62:	7bfb      	ldrb	r3, [r7, #15]
 800bc64:	4a27      	ldr	r2, [pc, #156]	@ (800bd04 <USER_TIM_IC_CALLBACK+0x204>)
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	edd3 6a00 	vldr	s13, [r3]
 800bc6e:	7bfb      	ldrb	r3, [r7, #15]
 800bc70:	4a22      	ldr	r2, [pc, #136]	@ (800bcfc <USER_TIM_IC_CALLBACK+0x1fc>)
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4413      	add	r3, r2
 800bc76:	edd3 7a00 	vldr	s15, [r3]
 800bc7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800bc7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc82:	ee17 0a90 	vmov	r0, s15
 800bc86:	f7f4 fc0f 	bl	80004a8 <__aeabi_f2d>
 800bc8a:	a315      	add	r3, pc, #84	@ (adr r3, 800bce0 <USER_TIM_IC_CALLBACK+0x1e0>)
 800bc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc90:	f7f4 fc62 	bl	8000558 <__aeabi_dmul>
 800bc94:	4602      	mov	r2, r0
 800bc96:	460b      	mov	r3, r1
 800bc98:	4610      	mov	r0, r2
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	7bfb      	ldrb	r3, [r7, #15]
 800bc9e:	4a1a      	ldr	r2, [pc, #104]	@ (800bd08 <USER_TIM_IC_CALLBACK+0x208>)
 800bca0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bca4:	f7f4 ff08 	bl	8000ab8 <__aeabi_d2f>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	6023      	str	r3, [r4, #0]
                    FirstVal[l_Counter]    = INITIAL;
 800bcac:	7bfb      	ldrb	r3, [r7, #15]
 800bcae:	4a13      	ldr	r2, [pc, #76]	@ (800bcfc <USER_TIM_IC_CALLBACK+0x1fc>)
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	4413      	add	r3, r2
 800bcb4:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800bcb8:	601a      	str	r2, [r3, #0]
                    OverFlow[l_Counter]    = INITIAL;
 800bcba:	7bfb      	ldrb	r3, [r7, #15]
 800bcbc:	4a10      	ldr	r2, [pc, #64]	@ (800bd00 <USER_TIM_IC_CALLBACK+0x200>)
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	4413      	add	r3, r2
 800bcc2:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800bcc6:	601a      	str	r2, [r3, #0]
    for (uint8_t l_Counter = 0; l_Counter < TOTOAL_NUMBER_OF_ULTRASONIC; l_Counter++) {
 800bcc8:	7bfb      	ldrb	r3, [r7, #15]
 800bcca:	3301      	adds	r3, #1
 800bccc:	73fb      	strb	r3, [r7, #15]
 800bcce:	7bfb      	ldrb	r3, [r7, #15]
 800bcd0:	2b07      	cmp	r3, #7
 800bcd2:	f67f af1c 	bls.w	800bb0e <USER_TIM_IC_CALLBACK+0xe>
                }
            }
        }
    }
}
 800bcd6:	bf00      	nop
 800bcd8:	bf00      	nop
 800bcda:	3714      	adds	r7, #20
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd90      	pop	{r4, r7, pc}
 800bce0:	b020c49c 	.word	0xb020c49c
 800bce4:	3f916872 	.word	0x3f916872
 800bce8:	20000cb4 	.word	0x20000cb4
 800bcec:	20000d14 	.word	0x20000d14
 800bcf0:	20000d15 	.word	0x20000d15
 800bcf4:	20000d16 	.word	0x20000d16
 800bcf8:	20000d17 	.word	0x20000d17
 800bcfc:	200005d8 	.word	0x200005d8
 800bd00:	200005f8 	.word	0x200005f8
 800bd04:	20000cf4 	.word	0x20000cf4
 800bd08:	20000cd4 	.word	0x20000cd4

0800bd0c <USER_TIM_OVERFLOW_CALLBACK>:
/**
 * @brief   Callback function for calculate timer overflows.
 * @param   htim Pointer to the timer handle where the overflow occurred.
 */
void USER_TIM_OVERFLOW_CALLBACK(TIM_HandleTypeDef *htim) {
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
		static uint8_t l_Expression_1 = 0;
	    static uint8_t l_Expression_2 = 0;
	    static uint8_t l_Expression_3 = 0;
	    static uint8_t l_Expression_4 = 0;
	for (uint8_t l_Counter = 0; l_Counter < TOTOAL_NUMBER_OF_ULTRASONIC; l_Counter++) {
 800bd14:	2300      	movs	r3, #0
 800bd16:	73fb      	strb	r3, [r7, #15]
 800bd18:	e07e      	b.n	800be18 <USER_TIM_OVERFLOW_CALLBACK+0x10c>
		l_Expression_1=((Sensors[l_Counter]->htim->Instance==TIM2)&&(htim->Instance == TIM2));
 800bd1a:	7bfb      	ldrb	r3, [r7, #15]
 800bd1c:	4a44      	ldr	r2, [pc, #272]	@ (800be30 <USER_TIM_OVERFLOW_CALLBACK+0x124>)
 800bd1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd2a:	d106      	bne.n	800bd3a <USER_TIM_OVERFLOW_CALLBACK+0x2e>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd34:	d101      	bne.n	800bd3a <USER_TIM_OVERFLOW_CALLBACK+0x2e>
 800bd36:	2301      	movs	r3, #1
 800bd38:	e000      	b.n	800bd3c <USER_TIM_OVERFLOW_CALLBACK+0x30>
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	b2da      	uxtb	r2, r3
 800bd3e:	4b3d      	ldr	r3, [pc, #244]	@ (800be34 <USER_TIM_OVERFLOW_CALLBACK+0x128>)
 800bd40:	701a      	strb	r2, [r3, #0]
		l_Expression_2=((Sensors[l_Counter]->htim->Instance==TIM3)&&(htim->Instance == TIM3));
 800bd42:	7bfb      	ldrb	r3, [r7, #15]
 800bd44:	4a3a      	ldr	r2, [pc, #232]	@ (800be30 <USER_TIM_OVERFLOW_CALLBACK+0x124>)
 800bd46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a3a      	ldr	r2, [pc, #232]	@ (800be38 <USER_TIM_OVERFLOW_CALLBACK+0x12c>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d106      	bne.n	800bd62 <USER_TIM_OVERFLOW_CALLBACK+0x56>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a37      	ldr	r2, [pc, #220]	@ (800be38 <USER_TIM_OVERFLOW_CALLBACK+0x12c>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d101      	bne.n	800bd62 <USER_TIM_OVERFLOW_CALLBACK+0x56>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e000      	b.n	800bd64 <USER_TIM_OVERFLOW_CALLBACK+0x58>
 800bd62:	2300      	movs	r3, #0
 800bd64:	b2da      	uxtb	r2, r3
 800bd66:	4b35      	ldr	r3, [pc, #212]	@ (800be3c <USER_TIM_OVERFLOW_CALLBACK+0x130>)
 800bd68:	701a      	strb	r2, [r3, #0]
		l_Expression_3=((Sensors[l_Counter]->htim->Instance==TIM4)&&(htim->Instance == TIM4));
 800bd6a:	7bfb      	ldrb	r3, [r7, #15]
 800bd6c:	4a30      	ldr	r2, [pc, #192]	@ (800be30 <USER_TIM_OVERFLOW_CALLBACK+0x124>)
 800bd6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a32      	ldr	r2, [pc, #200]	@ (800be40 <USER_TIM_OVERFLOW_CALLBACK+0x134>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d106      	bne.n	800bd8a <USER_TIM_OVERFLOW_CALLBACK+0x7e>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a2f      	ldr	r2, [pc, #188]	@ (800be40 <USER_TIM_OVERFLOW_CALLBACK+0x134>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d101      	bne.n	800bd8a <USER_TIM_OVERFLOW_CALLBACK+0x7e>
 800bd86:	2301      	movs	r3, #1
 800bd88:	e000      	b.n	800bd8c <USER_TIM_OVERFLOW_CALLBACK+0x80>
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	b2da      	uxtb	r2, r3
 800bd8e:	4b2d      	ldr	r3, [pc, #180]	@ (800be44 <USER_TIM_OVERFLOW_CALLBACK+0x138>)
 800bd90:	701a      	strb	r2, [r3, #0]
		l_Expression_4=((Sensors[l_Counter]->htim->Instance==TIM5)&&(htim->Instance == TIM5));
 800bd92:	7bfb      	ldrb	r3, [r7, #15]
 800bd94:	4a26      	ldr	r2, [pc, #152]	@ (800be30 <USER_TIM_OVERFLOW_CALLBACK+0x124>)
 800bd96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4a2a      	ldr	r2, [pc, #168]	@ (800be48 <USER_TIM_OVERFLOW_CALLBACK+0x13c>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d106      	bne.n	800bdb2 <USER_TIM_OVERFLOW_CALLBACK+0xa6>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a27      	ldr	r2, [pc, #156]	@ (800be48 <USER_TIM_OVERFLOW_CALLBACK+0x13c>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d101      	bne.n	800bdb2 <USER_TIM_OVERFLOW_CALLBACK+0xa6>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e000      	b.n	800bdb4 <USER_TIM_OVERFLOW_CALLBACK+0xa8>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	b2da      	uxtb	r2, r3
 800bdb6:	4b25      	ldr	r3, [pc, #148]	@ (800be4c <USER_TIM_OVERFLOW_CALLBACK+0x140>)
 800bdb8:	701a      	strb	r2, [r3, #0]
			if(l_Expression_1||l_Expression_2||l_Expression_3||l_Expression_4){
 800bdba:	4b1e      	ldr	r3, [pc, #120]	@ (800be34 <USER_TIM_OVERFLOW_CALLBACK+0x128>)
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d10b      	bne.n	800bdda <USER_TIM_OVERFLOW_CALLBACK+0xce>
 800bdc2:	4b1e      	ldr	r3, [pc, #120]	@ (800be3c <USER_TIM_OVERFLOW_CALLBACK+0x130>)
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d107      	bne.n	800bdda <USER_TIM_OVERFLOW_CALLBACK+0xce>
 800bdca:	4b1e      	ldr	r3, [pc, #120]	@ (800be44 <USER_TIM_OVERFLOW_CALLBACK+0x138>)
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d103      	bne.n	800bdda <USER_TIM_OVERFLOW_CALLBACK+0xce>
 800bdd2:	4b1e      	ldr	r3, [pc, #120]	@ (800be4c <USER_TIM_OVERFLOW_CALLBACK+0x140>)
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d01b      	beq.n	800be12 <USER_TIM_OVERFLOW_CALLBACK+0x106>
				if ((OverFlow[l_Counter]!=INITIAL)){
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
 800bddc:	4a1c      	ldr	r2, [pc, #112]	@ (800be50 <USER_TIM_OVERFLOW_CALLBACK+0x144>)
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4413      	add	r3, r2
 800bde2:	edd3 7a00 	vldr	s15, [r3]
 800bde6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bdea:	eef4 7a47 	vcmp.f32	s15, s14
 800bdee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdf2:	d00e      	beq.n	800be12 <USER_TIM_OVERFLOW_CALLBACK+0x106>
					OverFlow[l_Counter]++;
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
 800bdf6:	4916      	ldr	r1, [pc, #88]	@ (800be50 <USER_TIM_OVERFLOW_CALLBACK+0x144>)
 800bdf8:	009a      	lsls	r2, r3, #2
 800bdfa:	440a      	add	r2, r1
 800bdfc:	edd2 7a00 	vldr	s15, [r2]
 800be00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be04:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be08:	4a11      	ldr	r2, [pc, #68]	@ (800be50 <USER_TIM_OVERFLOW_CALLBACK+0x144>)
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	4413      	add	r3, r2
 800be0e:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t l_Counter = 0; l_Counter < TOTOAL_NUMBER_OF_ULTRASONIC; l_Counter++) {
 800be12:	7bfb      	ldrb	r3, [r7, #15]
 800be14:	3301      	adds	r3, #1
 800be16:	73fb      	strb	r3, [r7, #15]
 800be18:	7bfb      	ldrb	r3, [r7, #15]
 800be1a:	2b07      	cmp	r3, #7
 800be1c:	f67f af7d 	bls.w	800bd1a <USER_TIM_OVERFLOW_CALLBACK+0xe>
				}
			}
	    }

}
 800be20:	bf00      	nop
 800be22:	bf00      	nop
 800be24:	3714      	adds	r7, #20
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	20000cb4 	.word	0x20000cb4
 800be34:	20000d18 	.word	0x20000d18
 800be38:	40000400 	.word	0x40000400
 800be3c:	20000d19 	.word	0x20000d19
 800be40:	40000800 	.word	0x40000800
 800be44:	20000d1a 	.word	0x20000d1a
 800be48:	40000c00 	.word	0x40000c00
 800be4c:	20000d1b 	.word	0x20000d1b
 800be50:	200005f8 	.word	0x200005f8

0800be54 <__NVIC_SetPriority>:
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	4603      	mov	r3, r0
 800be5c:	6039      	str	r1, [r7, #0]
 800be5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800be60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be64:	2b00      	cmp	r3, #0
 800be66:	db0a      	blt.n	800be7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	b2da      	uxtb	r2, r3
 800be6c:	490c      	ldr	r1, [pc, #48]	@ (800bea0 <__NVIC_SetPriority+0x4c>)
 800be6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be72:	0112      	lsls	r2, r2, #4
 800be74:	b2d2      	uxtb	r2, r2
 800be76:	440b      	add	r3, r1
 800be78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800be7c:	e00a      	b.n	800be94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	b2da      	uxtb	r2, r3
 800be82:	4908      	ldr	r1, [pc, #32]	@ (800bea4 <__NVIC_SetPriority+0x50>)
 800be84:	79fb      	ldrb	r3, [r7, #7]
 800be86:	f003 030f 	and.w	r3, r3, #15
 800be8a:	3b04      	subs	r3, #4
 800be8c:	0112      	lsls	r2, r2, #4
 800be8e:	b2d2      	uxtb	r2, r2
 800be90:	440b      	add	r3, r1
 800be92:	761a      	strb	r2, [r3, #24]
}
 800be94:	bf00      	nop
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	e000e100 	.word	0xe000e100
 800bea4:	e000ed00 	.word	0xe000ed00

0800bea8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bea8:	b580      	push	{r7, lr}
 800beaa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800beac:	4b05      	ldr	r3, [pc, #20]	@ (800bec4 <SysTick_Handler+0x1c>)
 800beae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800beb0:	f002 fb46 	bl	800e540 <xTaskGetSchedulerState>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d001      	beq.n	800bebe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800beba:	f003 fafd 	bl	800f4b8 <xPortSysTickHandler>
  }
}
 800bebe:	bf00      	nop
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	e000e010 	.word	0xe000e010

0800bec8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bec8:	b580      	push	{r7, lr}
 800beca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800becc:	2100      	movs	r1, #0
 800bece:	f06f 0004 	mvn.w	r0, #4
 800bed2:	f7ff ffbf 	bl	800be54 <__NVIC_SetPriority>
#endif
}
 800bed6:	bf00      	nop
 800bed8:	bd80      	pop	{r7, pc}
	...

0800bedc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bee2:	f3ef 8305 	mrs	r3, IPSR
 800bee6:	603b      	str	r3, [r7, #0]
  return(result);
 800bee8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800beea:	2b00      	cmp	r3, #0
 800beec:	d003      	beq.n	800bef6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800beee:	f06f 0305 	mvn.w	r3, #5
 800bef2:	607b      	str	r3, [r7, #4]
 800bef4:	e00c      	b.n	800bf10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bef6:	4b0a      	ldr	r3, [pc, #40]	@ (800bf20 <osKernelInitialize+0x44>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d105      	bne.n	800bf0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800befe:	4b08      	ldr	r3, [pc, #32]	@ (800bf20 <osKernelInitialize+0x44>)
 800bf00:	2201      	movs	r2, #1
 800bf02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bf04:	2300      	movs	r3, #0
 800bf06:	607b      	str	r3, [r7, #4]
 800bf08:	e002      	b.n	800bf10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bf0a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bf10:	687b      	ldr	r3, [r7, #4]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	370c      	adds	r7, #12
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr
 800bf1e:	bf00      	nop
 800bf20:	20000d1c 	.word	0x20000d1c

0800bf24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf2a:	f3ef 8305 	mrs	r3, IPSR
 800bf2e:	603b      	str	r3, [r7, #0]
  return(result);
 800bf30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d003      	beq.n	800bf3e <osKernelStart+0x1a>
    stat = osErrorISR;
 800bf36:	f06f 0305 	mvn.w	r3, #5
 800bf3a:	607b      	str	r3, [r7, #4]
 800bf3c:	e010      	b.n	800bf60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bf3e:	4b0b      	ldr	r3, [pc, #44]	@ (800bf6c <osKernelStart+0x48>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d109      	bne.n	800bf5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bf46:	f7ff ffbf 	bl	800bec8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bf4a:	4b08      	ldr	r3, [pc, #32]	@ (800bf6c <osKernelStart+0x48>)
 800bf4c:	2202      	movs	r2, #2
 800bf4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bf50:	f001 fea8 	bl	800dca4 <vTaskStartScheduler>
      stat = osOK;
 800bf54:	2300      	movs	r3, #0
 800bf56:	607b      	str	r3, [r7, #4]
 800bf58:	e002      	b.n	800bf60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bf5a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bf60:	687b      	ldr	r3, [r7, #4]
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	20000d1c 	.word	0x20000d1c

0800bf70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b08e      	sub	sp, #56	@ 0x38
 800bf74:	af04      	add	r7, sp, #16
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf80:	f3ef 8305 	mrs	r3, IPSR
 800bf84:	617b      	str	r3, [r7, #20]
  return(result);
 800bf86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d17e      	bne.n	800c08a <osThreadNew+0x11a>
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d07b      	beq.n	800c08a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bf92:	2380      	movs	r3, #128	@ 0x80
 800bf94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bf96:	2318      	movs	r3, #24
 800bf98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bf9e:	f04f 33ff 	mov.w	r3, #4294967295
 800bfa2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d045      	beq.n	800c036 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d002      	beq.n	800bfb8 <osThreadNew+0x48>
        name = attr->name;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	699b      	ldr	r3, [r3, #24]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d002      	beq.n	800bfc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	699b      	ldr	r3, [r3, #24]
 800bfc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d008      	beq.n	800bfde <osThreadNew+0x6e>
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	2b38      	cmp	r3, #56	@ 0x38
 800bfd0:	d805      	bhi.n	800bfde <osThreadNew+0x6e>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	f003 0301 	and.w	r3, r3, #1
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d001      	beq.n	800bfe2 <osThreadNew+0x72>
        return (NULL);
 800bfde:	2300      	movs	r3, #0
 800bfe0:	e054      	b.n	800c08c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	695b      	ldr	r3, [r3, #20]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d003      	beq.n	800bff2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	695b      	ldr	r3, [r3, #20]
 800bfee:	089b      	lsrs	r3, r3, #2
 800bff0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d00e      	beq.n	800c018 <osThreadNew+0xa8>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	2b5f      	cmp	r3, #95	@ 0x5f
 800c000:	d90a      	bls.n	800c018 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c006:	2b00      	cmp	r3, #0
 800c008:	d006      	beq.n	800c018 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	695b      	ldr	r3, [r3, #20]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d002      	beq.n	800c018 <osThreadNew+0xa8>
        mem = 1;
 800c012:	2301      	movs	r3, #1
 800c014:	61bb      	str	r3, [r7, #24]
 800c016:	e010      	b.n	800c03a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10c      	bne.n	800c03a <osThreadNew+0xca>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d108      	bne.n	800c03a <osThreadNew+0xca>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	691b      	ldr	r3, [r3, #16]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d104      	bne.n	800c03a <osThreadNew+0xca>
          mem = 0;
 800c030:	2300      	movs	r3, #0
 800c032:	61bb      	str	r3, [r7, #24]
 800c034:	e001      	b.n	800c03a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c036:	2300      	movs	r3, #0
 800c038:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d110      	bne.n	800c062 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c048:	9202      	str	r2, [sp, #8]
 800c04a:	9301      	str	r3, [sp, #4]
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	9300      	str	r3, [sp, #0]
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	6a3a      	ldr	r2, [r7, #32]
 800c054:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c056:	68f8      	ldr	r0, [r7, #12]
 800c058:	f001 fb3e 	bl	800d6d8 <xTaskCreateStatic>
 800c05c:	4603      	mov	r3, r0
 800c05e:	613b      	str	r3, [r7, #16]
 800c060:	e013      	b.n	800c08a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d110      	bne.n	800c08a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c068:	6a3b      	ldr	r3, [r7, #32]
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	f107 0310 	add.w	r3, r7, #16
 800c070:	9301      	str	r3, [sp, #4]
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	9300      	str	r3, [sp, #0]
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c07a:	68f8      	ldr	r0, [r7, #12]
 800c07c:	f001 fb8c 	bl	800d798 <xTaskCreate>
 800c080:	4603      	mov	r3, r0
 800c082:	2b01      	cmp	r3, #1
 800c084:	d001      	beq.n	800c08a <osThreadNew+0x11a>
            hTask = NULL;
 800c086:	2300      	movs	r3, #0
 800c088:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c08a:	693b      	ldr	r3, [r7, #16]
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3728      	adds	r7, #40	@ 0x28
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800c094:	b580      	push	{r7, lr}
 800c096:	b086      	sub	sp, #24
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0a0:	f3ef 8305 	mrs	r3, IPSR
 800c0a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d003      	beq.n	800c0b4 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800c0ac:	f06f 0305 	mvn.w	r3, #5
 800c0b0:	617b      	str	r3, [r7, #20]
 800c0b2:	e00b      	b.n	800c0cc <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d103      	bne.n	800c0c2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800c0ba:	f06f 0303 	mvn.w	r3, #3
 800c0be:	617b      	str	r3, [r7, #20]
 800c0c0:	e004      	b.n	800c0cc <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800c0c6:	6938      	ldr	r0, [r7, #16]
 800c0c8:	f001 fce4 	bl	800da94 <vTaskSuspend>
  }

  return (stat);
 800c0cc:	697b      	ldr	r3, [r7, #20]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3718      	adds	r7, #24
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b086      	sub	sp, #24
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0e2:	f3ef 8305 	mrs	r3, IPSR
 800c0e6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d003      	beq.n	800c0f6 <osThreadResume+0x20>
    stat = osErrorISR;
 800c0ee:	f06f 0305 	mvn.w	r3, #5
 800c0f2:	617b      	str	r3, [r7, #20]
 800c0f4:	e00b      	b.n	800c10e <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d103      	bne.n	800c104 <osThreadResume+0x2e>
    stat = osErrorParameter;
 800c0fc:	f06f 0303 	mvn.w	r3, #3
 800c100:	617b      	str	r3, [r7, #20]
 800c102:	e004      	b.n	800c10e <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800c104:	2300      	movs	r3, #0
 800c106:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800c108:	6938      	ldr	r0, [r7, #16]
 800c10a:	f001 fd6b 	bl	800dbe4 <vTaskResume>
  }

  return (stat);
 800c10e:	697b      	ldr	r3, [r7, #20]
}
 800c110:	4618      	mov	r0, r3
 800c112:	3718      	adds	r7, #24
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c120:	f3ef 8305 	mrs	r3, IPSR
 800c124:	60bb      	str	r3, [r7, #8]
  return(result);
 800c126:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d003      	beq.n	800c134 <osDelay+0x1c>
    stat = osErrorISR;
 800c12c:	f06f 0305 	mvn.w	r3, #5
 800c130:	60fb      	str	r3, [r7, #12]
 800c132:	e007      	b.n	800c144 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c134:	2300      	movs	r3, #0
 800c136:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d002      	beq.n	800c144 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f001 fc72 	bl	800da28 <vTaskDelay>
    }
  }

  return (stat);
 800c144:	68fb      	ldr	r3, [r7, #12]
}
 800c146:	4618      	mov	r0, r3
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800c14e:	b580      	push	{r7, lr}
 800c150:	b084      	sub	sp, #16
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f002 ffcc 	bl	800f0f4 <pvTimerGetTimerID>
 800c15c:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d005      	beq.n	800c170 <TimerCallback+0x22>
    callb->func (callb->arg);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	6852      	ldr	r2, [r2, #4]
 800c16c:	4610      	mov	r0, r2
 800c16e:	4798      	blx	r3
  }
}
 800c170:	bf00      	nop
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800c178:	b580      	push	{r7, lr}
 800c17a:	b08c      	sub	sp, #48	@ 0x30
 800c17c:	af02      	add	r7, sp, #8
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	607a      	str	r2, [r7, #4]
 800c182:	603b      	str	r3, [r7, #0]
 800c184:	460b      	mov	r3, r1
 800c186:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800c188:	2300      	movs	r3, #0
 800c18a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c18c:	f3ef 8305 	mrs	r3, IPSR
 800c190:	613b      	str	r3, [r7, #16]
  return(result);
 800c192:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800c194:	2b00      	cmp	r3, #0
 800c196:	d163      	bne.n	800c260 <osTimerNew+0xe8>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d060      	beq.n	800c260 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800c19e:	2008      	movs	r0, #8
 800c1a0:	f003 fa1c 	bl	800f5dc <pvPortMalloc>
 800c1a4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d059      	beq.n	800c260 <osTimerNew+0xe8>
      callb->func = func;
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800c1b8:	7afb      	ldrb	r3, [r7, #11]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d102      	bne.n	800c1c4 <osTimerNew+0x4c>
        reload = pdFALSE;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	61fb      	str	r3, [r7, #28]
 800c1c2:	e001      	b.n	800c1c8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800c1c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1cc:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d01c      	beq.n	800c212 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d002      	beq.n	800c1e6 <osTimerNew+0x6e>
          name = attr->name;
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d006      	beq.n	800c1fc <osTimerNew+0x84>
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	2b2b      	cmp	r3, #43	@ 0x2b
 800c1f4:	d902      	bls.n	800c1fc <osTimerNew+0x84>
          mem = 1;
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	61bb      	str	r3, [r7, #24]
 800c1fa:	e00c      	b.n	800c216 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d108      	bne.n	800c216 <osTimerNew+0x9e>
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d104      	bne.n	800c216 <osTimerNew+0x9e>
            mem = 0;
 800c20c:	2300      	movs	r3, #0
 800c20e:	61bb      	str	r3, [r7, #24]
 800c210:	e001      	b.n	800c216 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800c212:	2300      	movs	r3, #0
 800c214:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d10c      	bne.n	800c236 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	9301      	str	r3, [sp, #4]
 800c222:	4b12      	ldr	r3, [pc, #72]	@ (800c26c <osTimerNew+0xf4>)
 800c224:	9300      	str	r3, [sp, #0]
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	69fa      	ldr	r2, [r7, #28]
 800c22a:	2101      	movs	r1, #1
 800c22c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c22e:	f002 fbd4 	bl	800e9da <xTimerCreateStatic>
 800c232:	6238      	str	r0, [r7, #32]
 800c234:	e00b      	b.n	800c24e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d108      	bne.n	800c24e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800c23c:	4b0b      	ldr	r3, [pc, #44]	@ (800c26c <osTimerNew+0xf4>)
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	69fa      	ldr	r2, [r7, #28]
 800c244:	2101      	movs	r1, #1
 800c246:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c248:	f002 fba6 	bl	800e998 <xTimerCreate>
 800c24c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800c24e:	6a3b      	ldr	r3, [r7, #32]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d105      	bne.n	800c260 <osTimerNew+0xe8>
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d002      	beq.n	800c260 <osTimerNew+0xe8>
        vPortFree (callb);
 800c25a:	6978      	ldr	r0, [r7, #20]
 800c25c:	f003 fa8c 	bl	800f778 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800c260:	6a3b      	ldr	r3, [r7, #32]
}
 800c262:	4618      	mov	r0, r3
 800c264:	3728      	adds	r7, #40	@ 0x28
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	0800c14f 	.word	0x0800c14f

0800c270 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c270:	b580      	push	{r7, lr}
 800c272:	b08a      	sub	sp, #40	@ 0x28
 800c274:	af02      	add	r7, sp, #8
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c27c:	2300      	movs	r3, #0
 800c27e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c280:	f3ef 8305 	mrs	r3, IPSR
 800c284:	613b      	str	r3, [r7, #16]
  return(result);
 800c286:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d175      	bne.n	800c378 <osSemaphoreNew+0x108>
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d072      	beq.n	800c378 <osSemaphoreNew+0x108>
 800c292:	68ba      	ldr	r2, [r7, #8]
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	429a      	cmp	r2, r3
 800c298:	d86e      	bhi.n	800c378 <osSemaphoreNew+0x108>
    mem = -1;
 800c29a:	f04f 33ff 	mov.w	r3, #4294967295
 800c29e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d015      	beq.n	800c2d2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	689b      	ldr	r3, [r3, #8]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d006      	beq.n	800c2bc <osSemaphoreNew+0x4c>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	2b4f      	cmp	r3, #79	@ 0x4f
 800c2b4:	d902      	bls.n	800c2bc <osSemaphoreNew+0x4c>
        mem = 1;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	61bb      	str	r3, [r7, #24]
 800c2ba:	e00c      	b.n	800c2d6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d108      	bne.n	800c2d6 <osSemaphoreNew+0x66>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d104      	bne.n	800c2d6 <osSemaphoreNew+0x66>
          mem = 0;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	61bb      	str	r3, [r7, #24]
 800c2d0:	e001      	b.n	800c2d6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2dc:	d04c      	beq.n	800c378 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d128      	bne.n	800c336 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d10a      	bne.n	800c300 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	2203      	movs	r2, #3
 800c2f0:	9200      	str	r2, [sp, #0]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	2001      	movs	r0, #1
 800c2f8:	f000 fa2c 	bl	800c754 <xQueueGenericCreateStatic>
 800c2fc:	61f8      	str	r0, [r7, #28]
 800c2fe:	e005      	b.n	800c30c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c300:	2203      	movs	r2, #3
 800c302:	2100      	movs	r1, #0
 800c304:	2001      	movs	r0, #1
 800c306:	f000 faa2 	bl	800c84e <xQueueGenericCreate>
 800c30a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d022      	beq.n	800c358 <osSemaphoreNew+0xe8>
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d01f      	beq.n	800c358 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c318:	2300      	movs	r3, #0
 800c31a:	2200      	movs	r2, #0
 800c31c:	2100      	movs	r1, #0
 800c31e:	69f8      	ldr	r0, [r7, #28]
 800c320:	f000 fb62 	bl	800c9e8 <xQueueGenericSend>
 800c324:	4603      	mov	r3, r0
 800c326:	2b01      	cmp	r3, #1
 800c328:	d016      	beq.n	800c358 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c32a:	69f8      	ldr	r0, [r7, #28]
 800c32c:	f001 f800 	bl	800d330 <vQueueDelete>
            hSemaphore = NULL;
 800c330:	2300      	movs	r3, #0
 800c332:	61fb      	str	r3, [r7, #28]
 800c334:	e010      	b.n	800c358 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d108      	bne.n	800c34e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	461a      	mov	r2, r3
 800c342:	68b9      	ldr	r1, [r7, #8]
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	f000 fae0 	bl	800c90a <xQueueCreateCountingSemaphoreStatic>
 800c34a:	61f8      	str	r0, [r7, #28]
 800c34c:	e004      	b.n	800c358 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c34e:	68b9      	ldr	r1, [r7, #8]
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f000 fb13 	bl	800c97c <xQueueCreateCountingSemaphore>
 800c356:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00c      	beq.n	800c378 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d003      	beq.n	800c36c <osSemaphoreNew+0xfc>
          name = attr->name;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	617b      	str	r3, [r7, #20]
 800c36a:	e001      	b.n	800c370 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c36c:	2300      	movs	r3, #0
 800c36e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c370:	6979      	ldr	r1, [r7, #20]
 800c372:	69f8      	ldr	r0, [r7, #28]
 800c374:	f001 f928 	bl	800d5c8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c378:	69fb      	ldr	r3, [r7, #28]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3720      	adds	r7, #32
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
	...

0800c384 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c384:	b580      	push	{r7, lr}
 800c386:	b086      	sub	sp, #24
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c392:	2300      	movs	r3, #0
 800c394:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d103      	bne.n	800c3a4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c39c:	f06f 0303 	mvn.w	r3, #3
 800c3a0:	617b      	str	r3, [r7, #20]
 800c3a2:	e039      	b.n	800c418 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3a4:	f3ef 8305 	mrs	r3, IPSR
 800c3a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d022      	beq.n	800c3f6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d003      	beq.n	800c3be <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c3b6:	f06f 0303 	mvn.w	r3, #3
 800c3ba:	617b      	str	r3, [r7, #20]
 800c3bc:	e02c      	b.n	800c418 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c3c2:	f107 0308 	add.w	r3, r7, #8
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	6938      	ldr	r0, [r7, #16]
 800c3cc:	f000 ff2e 	bl	800d22c <xQueueReceiveFromISR>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d003      	beq.n	800c3de <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c3d6:	f06f 0302 	mvn.w	r3, #2
 800c3da:	617b      	str	r3, [r7, #20]
 800c3dc:	e01c      	b.n	800c418 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d019      	beq.n	800c418 <osSemaphoreAcquire+0x94>
 800c3e4:	4b0f      	ldr	r3, [pc, #60]	@ (800c424 <osSemaphoreAcquire+0xa0>)
 800c3e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3ea:	601a      	str	r2, [r3, #0]
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	f3bf 8f6f 	isb	sy
 800c3f4:	e010      	b.n	800c418 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c3f6:	6839      	ldr	r1, [r7, #0]
 800c3f8:	6938      	ldr	r0, [r7, #16]
 800c3fa:	f000 fe07 	bl	800d00c <xQueueSemaphoreTake>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b01      	cmp	r3, #1
 800c402:	d009      	beq.n	800c418 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d003      	beq.n	800c412 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c40a:	f06f 0301 	mvn.w	r3, #1
 800c40e:	617b      	str	r3, [r7, #20]
 800c410:	e002      	b.n	800c418 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c412:	f06f 0302 	mvn.w	r3, #2
 800c416:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c418:	697b      	ldr	r3, [r7, #20]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3718      	adds	r7, #24
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	e000ed04 	.word	0xe000ed04

0800c428 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c428:	b580      	push	{r7, lr}
 800c42a:	b086      	sub	sp, #24
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c434:	2300      	movs	r3, #0
 800c436:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d103      	bne.n	800c446 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c43e:	f06f 0303 	mvn.w	r3, #3
 800c442:	617b      	str	r3, [r7, #20]
 800c444:	e02c      	b.n	800c4a0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c446:	f3ef 8305 	mrs	r3, IPSR
 800c44a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c44c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d01a      	beq.n	800c488 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c452:	2300      	movs	r3, #0
 800c454:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c456:	f107 0308 	add.w	r3, r7, #8
 800c45a:	4619      	mov	r1, r3
 800c45c:	6938      	ldr	r0, [r7, #16]
 800c45e:	f000 fc63 	bl	800cd28 <xQueueGiveFromISR>
 800c462:	4603      	mov	r3, r0
 800c464:	2b01      	cmp	r3, #1
 800c466:	d003      	beq.n	800c470 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c468:	f06f 0302 	mvn.w	r3, #2
 800c46c:	617b      	str	r3, [r7, #20]
 800c46e:	e017      	b.n	800c4a0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d014      	beq.n	800c4a0 <osSemaphoreRelease+0x78>
 800c476:	4b0d      	ldr	r3, [pc, #52]	@ (800c4ac <osSemaphoreRelease+0x84>)
 800c478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c47c:	601a      	str	r2, [r3, #0]
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	f3bf 8f6f 	isb	sy
 800c486:	e00b      	b.n	800c4a0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c488:	2300      	movs	r3, #0
 800c48a:	2200      	movs	r2, #0
 800c48c:	2100      	movs	r1, #0
 800c48e:	6938      	ldr	r0, [r7, #16]
 800c490:	f000 faaa 	bl	800c9e8 <xQueueGenericSend>
 800c494:	4603      	mov	r3, r0
 800c496:	2b01      	cmp	r3, #1
 800c498:	d002      	beq.n	800c4a0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c49a:	f06f 0302 	mvn.w	r3, #2
 800c49e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c4a0:	697b      	ldr	r3, [r7, #20]
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3718      	adds	r7, #24
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	e000ed04 	.word	0xe000ed04

0800c4b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c4b0:	b480      	push	{r7}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	4a07      	ldr	r2, [pc, #28]	@ (800c4dc <vApplicationGetIdleTaskMemory+0x2c>)
 800c4c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	4a06      	ldr	r2, [pc, #24]	@ (800c4e0 <vApplicationGetIdleTaskMemory+0x30>)
 800c4c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2280      	movs	r2, #128	@ 0x80
 800c4cc:	601a      	str	r2, [r3, #0]
}
 800c4ce:	bf00      	nop
 800c4d0:	3714      	adds	r7, #20
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop
 800c4dc:	20000d20 	.word	0x20000d20
 800c4e0:	20000d80 	.word	0x20000d80

0800c4e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	4a07      	ldr	r2, [pc, #28]	@ (800c510 <vApplicationGetTimerTaskMemory+0x2c>)
 800c4f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	4a06      	ldr	r2, [pc, #24]	@ (800c514 <vApplicationGetTimerTaskMemory+0x30>)
 800c4fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c502:	601a      	str	r2, [r3, #0]
}
 800c504:	bf00      	nop
 800c506:	3714      	adds	r7, #20
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr
 800c510:	20000f80 	.word	0x20000f80
 800c514:	20000fe0 	.word	0x20000fe0

0800c518 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f103 0208 	add.w	r2, r3, #8
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f04f 32ff 	mov.w	r2, #4294967295
 800c530:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f103 0208 	add.w	r2, r3, #8
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f103 0208 	add.w	r2, r3, #8
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c54c:	bf00      	nop
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c566:	bf00      	nop
 800c568:	370c      	adds	r7, #12
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr

0800c572 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c572:	b480      	push	{r7}
 800c574:	b085      	sub	sp, #20
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
 800c57a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	689a      	ldr	r2, [r3, #8]
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	683a      	ldr	r2, [r7, #0]
 800c596:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	1c5a      	adds	r2, r3, #1
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	601a      	str	r2, [r3, #0]
}
 800c5ae:	bf00      	nop
 800c5b0:	3714      	adds	r7, #20
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr

0800c5ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5ba:	b480      	push	{r7}
 800c5bc:	b085      	sub	sp, #20
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5d0:	d103      	bne.n	800c5da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	60fb      	str	r3, [r7, #12]
 800c5d8:	e00c      	b.n	800c5f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	3308      	adds	r3, #8
 800c5de:	60fb      	str	r3, [r7, #12]
 800c5e0:	e002      	b.n	800c5e8 <vListInsert+0x2e>
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	60fb      	str	r3, [r7, #12]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	68ba      	ldr	r2, [r7, #8]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d2f6      	bcs.n	800c5e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	685a      	ldr	r2, [r3, #4]
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	683a      	ldr	r2, [r7, #0]
 800c602:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	68fa      	ldr	r2, [r7, #12]
 800c608:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	683a      	ldr	r2, [r7, #0]
 800c60e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	1c5a      	adds	r2, r3, #1
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	601a      	str	r2, [r3, #0]
}
 800c620:	bf00      	nop
 800c622:	3714      	adds	r7, #20
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c62c:	b480      	push	{r7}
 800c62e:	b085      	sub	sp, #20
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	691b      	ldr	r3, [r3, #16]
 800c638:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	6892      	ldr	r2, [r2, #8]
 800c642:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	6852      	ldr	r2, [r2, #4]
 800c64c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	429a      	cmp	r2, r3
 800c656:	d103      	bne.n	800c660 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	689a      	ldr	r2, [r3, #8]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	1e5a      	subs	r2, r3, #1
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
}
 800c674:	4618      	mov	r0, r3
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d10b      	bne.n	800c6ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c698:	f383 8811 	msr	BASEPRI, r3
 800c69c:	f3bf 8f6f 	isb	sy
 800c6a0:	f3bf 8f4f 	dsb	sy
 800c6a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c6a6:	bf00      	nop
 800c6a8:	bf00      	nop
 800c6aa:	e7fd      	b.n	800c6a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c6ac:	f002 fe74 	bl	800f398 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6b8:	68f9      	ldr	r1, [r7, #12]
 800c6ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c6bc:	fb01 f303 	mul.w	r3, r1, r3
 800c6c0:	441a      	add	r2, r3
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6dc:	3b01      	subs	r3, #1
 800c6de:	68f9      	ldr	r1, [r7, #12]
 800c6e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c6e2:	fb01 f303 	mul.w	r3, r1, r3
 800c6e6:	441a      	add	r2, r3
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	22ff      	movs	r2, #255	@ 0xff
 800c6f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	22ff      	movs	r2, #255	@ 0xff
 800c6f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d114      	bne.n	800c72c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	691b      	ldr	r3, [r3, #16]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d01a      	beq.n	800c740 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	3310      	adds	r3, #16
 800c70e:	4618      	mov	r0, r3
 800c710:	f001 fd56 	bl	800e1c0 <xTaskRemoveFromEventList>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d012      	beq.n	800c740 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c71a:	4b0d      	ldr	r3, [pc, #52]	@ (800c750 <xQueueGenericReset+0xd0>)
 800c71c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c720:	601a      	str	r2, [r3, #0]
 800c722:	f3bf 8f4f 	dsb	sy
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	e009      	b.n	800c740 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	3310      	adds	r3, #16
 800c730:	4618      	mov	r0, r3
 800c732:	f7ff fef1 	bl	800c518 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	3324      	adds	r3, #36	@ 0x24
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7ff feec 	bl	800c518 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c740:	f002 fe5c 	bl	800f3fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c744:	2301      	movs	r3, #1
}
 800c746:	4618      	mov	r0, r3
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	e000ed04 	.word	0xe000ed04

0800c754 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c754:	b580      	push	{r7, lr}
 800c756:	b08e      	sub	sp, #56	@ 0x38
 800c758:	af02      	add	r7, sp, #8
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	607a      	str	r2, [r7, #4]
 800c760:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d10b      	bne.n	800c780 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c76c:	f383 8811 	msr	BASEPRI, r3
 800c770:	f3bf 8f6f 	isb	sy
 800c774:	f3bf 8f4f 	dsb	sy
 800c778:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c77a:	bf00      	nop
 800c77c:	bf00      	nop
 800c77e:	e7fd      	b.n	800c77c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d10b      	bne.n	800c79e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c78a:	f383 8811 	msr	BASEPRI, r3
 800c78e:	f3bf 8f6f 	isb	sy
 800c792:	f3bf 8f4f 	dsb	sy
 800c796:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c798:	bf00      	nop
 800c79a:	bf00      	nop
 800c79c:	e7fd      	b.n	800c79a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d002      	beq.n	800c7aa <xQueueGenericCreateStatic+0x56>
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d001      	beq.n	800c7ae <xQueueGenericCreateStatic+0x5a>
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e000      	b.n	800c7b0 <xQueueGenericCreateStatic+0x5c>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d10b      	bne.n	800c7cc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b8:	f383 8811 	msr	BASEPRI, r3
 800c7bc:	f3bf 8f6f 	isb	sy
 800c7c0:	f3bf 8f4f 	dsb	sy
 800c7c4:	623b      	str	r3, [r7, #32]
}
 800c7c6:	bf00      	nop
 800c7c8:	bf00      	nop
 800c7ca:	e7fd      	b.n	800c7c8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d102      	bne.n	800c7d8 <xQueueGenericCreateStatic+0x84>
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d101      	bne.n	800c7dc <xQueueGenericCreateStatic+0x88>
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e000      	b.n	800c7de <xQueueGenericCreateStatic+0x8a>
 800c7dc:	2300      	movs	r3, #0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d10b      	bne.n	800c7fa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	61fb      	str	r3, [r7, #28]
}
 800c7f4:	bf00      	nop
 800c7f6:	bf00      	nop
 800c7f8:	e7fd      	b.n	800c7f6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c7fa:	2350      	movs	r3, #80	@ 0x50
 800c7fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	2b50      	cmp	r3, #80	@ 0x50
 800c802:	d00b      	beq.n	800c81c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	61bb      	str	r3, [r7, #24]
}
 800c816:	bf00      	nop
 800c818:	bf00      	nop
 800c81a:	e7fd      	b.n	800c818 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c81c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00d      	beq.n	800c844 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c82a:	2201      	movs	r2, #1
 800c82c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c830:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	4613      	mov	r3, r2
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	68b9      	ldr	r1, [r7, #8]
 800c83e:	68f8      	ldr	r0, [r7, #12]
 800c840:	f000 f840 	bl	800c8c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c846:	4618      	mov	r0, r3
 800c848:	3730      	adds	r7, #48	@ 0x30
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}

0800c84e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c84e:	b580      	push	{r7, lr}
 800c850:	b08a      	sub	sp, #40	@ 0x28
 800c852:	af02      	add	r7, sp, #8
 800c854:	60f8      	str	r0, [r7, #12]
 800c856:	60b9      	str	r1, [r7, #8]
 800c858:	4613      	mov	r3, r2
 800c85a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d10b      	bne.n	800c87a <xQueueGenericCreate+0x2c>
	__asm volatile
 800c862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c866:	f383 8811 	msr	BASEPRI, r3
 800c86a:	f3bf 8f6f 	isb	sy
 800c86e:	f3bf 8f4f 	dsb	sy
 800c872:	613b      	str	r3, [r7, #16]
}
 800c874:	bf00      	nop
 800c876:	bf00      	nop
 800c878:	e7fd      	b.n	800c876 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	68ba      	ldr	r2, [r7, #8]
 800c87e:	fb02 f303 	mul.w	r3, r2, r3
 800c882:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	3350      	adds	r3, #80	@ 0x50
 800c888:	4618      	mov	r0, r3
 800c88a:	f002 fea7 	bl	800f5dc <pvPortMalloc>
 800c88e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d011      	beq.n	800c8ba <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	3350      	adds	r3, #80	@ 0x50
 800c89e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c8a8:	79fa      	ldrb	r2, [r7, #7]
 800c8aa:	69bb      	ldr	r3, [r7, #24]
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	697a      	ldr	r2, [r7, #20]
 800c8b2:	68b9      	ldr	r1, [r7, #8]
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	f000 f805 	bl	800c8c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c8ba:	69bb      	ldr	r3, [r7, #24]
	}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3720      	adds	r7, #32
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
 800c8d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d103      	bne.n	800c8e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c8d8:	69bb      	ldr	r3, [r7, #24]
 800c8da:	69ba      	ldr	r2, [r7, #24]
 800c8dc:	601a      	str	r2, [r3, #0]
 800c8de:	e002      	b.n	800c8e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c8e6:	69bb      	ldr	r3, [r7, #24]
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	68ba      	ldr	r2, [r7, #8]
 800c8f0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c8f2:	2101      	movs	r1, #1
 800c8f4:	69b8      	ldr	r0, [r7, #24]
 800c8f6:	f7ff fec3 	bl	800c680 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	78fa      	ldrb	r2, [r7, #3]
 800c8fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c902:	bf00      	nop
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b08a      	sub	sp, #40	@ 0x28
 800c90e:	af02      	add	r7, sp, #8
 800c910:	60f8      	str	r0, [r7, #12]
 800c912:	60b9      	str	r1, [r7, #8]
 800c914:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d10b      	bne.n	800c934 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800c91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c920:	f383 8811 	msr	BASEPRI, r3
 800c924:	f3bf 8f6f 	isb	sy
 800c928:	f3bf 8f4f 	dsb	sy
 800c92c:	61bb      	str	r3, [r7, #24]
}
 800c92e:	bf00      	nop
 800c930:	bf00      	nop
 800c932:	e7fd      	b.n	800c930 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d90b      	bls.n	800c954 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800c93c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	617b      	str	r3, [r7, #20]
}
 800c94e:	bf00      	nop
 800c950:	bf00      	nop
 800c952:	e7fd      	b.n	800c950 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c954:	2302      	movs	r3, #2
 800c956:	9300      	str	r3, [sp, #0]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	2100      	movs	r1, #0
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	f7ff fef8 	bl	800c754 <xQueueGenericCreateStatic>
 800c964:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d002      	beq.n	800c972 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	68ba      	ldr	r2, [r7, #8]
 800c970:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c972:	69fb      	ldr	r3, [r7, #28]
	}
 800c974:	4618      	mov	r0, r3
 800c976:	3720      	adds	r7, #32
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b086      	sub	sp, #24
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d10b      	bne.n	800c9a4 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800c98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c990:	f383 8811 	msr	BASEPRI, r3
 800c994:	f3bf 8f6f 	isb	sy
 800c998:	f3bf 8f4f 	dsb	sy
 800c99c:	613b      	str	r3, [r7, #16]
}
 800c99e:	bf00      	nop
 800c9a0:	bf00      	nop
 800c9a2:	e7fd      	b.n	800c9a0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c9a4:	683a      	ldr	r2, [r7, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d90b      	bls.n	800c9c4 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800c9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b0:	f383 8811 	msr	BASEPRI, r3
 800c9b4:	f3bf 8f6f 	isb	sy
 800c9b8:	f3bf 8f4f 	dsb	sy
 800c9bc:	60fb      	str	r3, [r7, #12]
}
 800c9be:	bf00      	nop
 800c9c0:	bf00      	nop
 800c9c2:	e7fd      	b.n	800c9c0 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c9c4:	2202      	movs	r2, #2
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7ff ff40 	bl	800c84e <xQueueGenericCreate>
 800c9ce:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d002      	beq.n	800c9dc <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	683a      	ldr	r2, [r7, #0]
 800c9da:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c9dc:	697b      	ldr	r3, [r7, #20]
	}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3718      	adds	r7, #24
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
	...

0800c9e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08e      	sub	sp, #56	@ 0x38
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	607a      	str	r2, [r7, #4]
 800c9f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d10b      	bne.n	800ca1c <xQueueGenericSend+0x34>
	__asm volatile
 800ca04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca08:	f383 8811 	msr	BASEPRI, r3
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ca16:	bf00      	nop
 800ca18:	bf00      	nop
 800ca1a:	e7fd      	b.n	800ca18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d103      	bne.n	800ca2a <xQueueGenericSend+0x42>
 800ca22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d101      	bne.n	800ca2e <xQueueGenericSend+0x46>
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	e000      	b.n	800ca30 <xQueueGenericSend+0x48>
 800ca2e:	2300      	movs	r3, #0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d10b      	bne.n	800ca4c <xQueueGenericSend+0x64>
	__asm volatile
 800ca34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca38:	f383 8811 	msr	BASEPRI, r3
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f3bf 8f4f 	dsb	sy
 800ca44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ca46:	bf00      	nop
 800ca48:	bf00      	nop
 800ca4a:	e7fd      	b.n	800ca48 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	2b02      	cmp	r3, #2
 800ca50:	d103      	bne.n	800ca5a <xQueueGenericSend+0x72>
 800ca52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d101      	bne.n	800ca5e <xQueueGenericSend+0x76>
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e000      	b.n	800ca60 <xQueueGenericSend+0x78>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d10b      	bne.n	800ca7c <xQueueGenericSend+0x94>
	__asm volatile
 800ca64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca68:	f383 8811 	msr	BASEPRI, r3
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	623b      	str	r3, [r7, #32]
}
 800ca76:	bf00      	nop
 800ca78:	bf00      	nop
 800ca7a:	e7fd      	b.n	800ca78 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca7c:	f001 fd60 	bl	800e540 <xTaskGetSchedulerState>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d102      	bne.n	800ca8c <xQueueGenericSend+0xa4>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d101      	bne.n	800ca90 <xQueueGenericSend+0xa8>
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	e000      	b.n	800ca92 <xQueueGenericSend+0xaa>
 800ca90:	2300      	movs	r3, #0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d10b      	bne.n	800caae <xQueueGenericSend+0xc6>
	__asm volatile
 800ca96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca9a:	f383 8811 	msr	BASEPRI, r3
 800ca9e:	f3bf 8f6f 	isb	sy
 800caa2:	f3bf 8f4f 	dsb	sy
 800caa6:	61fb      	str	r3, [r7, #28]
}
 800caa8:	bf00      	nop
 800caaa:	bf00      	nop
 800caac:	e7fd      	b.n	800caaa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800caae:	f002 fc73 	bl	800f398 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800caba:	429a      	cmp	r2, r3
 800cabc:	d302      	bcc.n	800cac4 <xQueueGenericSend+0xdc>
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	2b02      	cmp	r3, #2
 800cac2:	d129      	bne.n	800cb18 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cac4:	683a      	ldr	r2, [r7, #0]
 800cac6:	68b9      	ldr	r1, [r7, #8]
 800cac8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800caca:	f000 fc6d 	bl	800d3a8 <prvCopyDataToQueue>
 800cace:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d010      	beq.n	800cafa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cada:	3324      	adds	r3, #36	@ 0x24
 800cadc:	4618      	mov	r0, r3
 800cade:	f001 fb6f 	bl	800e1c0 <xTaskRemoveFromEventList>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d013      	beq.n	800cb10 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cae8:	4b3f      	ldr	r3, [pc, #252]	@ (800cbe8 <xQueueGenericSend+0x200>)
 800caea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800caee:	601a      	str	r2, [r3, #0]
 800caf0:	f3bf 8f4f 	dsb	sy
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	e00a      	b.n	800cb10 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d007      	beq.n	800cb10 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cb00:	4b39      	ldr	r3, [pc, #228]	@ (800cbe8 <xQueueGenericSend+0x200>)
 800cb02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb06:	601a      	str	r2, [r3, #0]
 800cb08:	f3bf 8f4f 	dsb	sy
 800cb0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cb10:	f002 fc74 	bl	800f3fc <vPortExitCritical>
				return pdPASS;
 800cb14:	2301      	movs	r3, #1
 800cb16:	e063      	b.n	800cbe0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d103      	bne.n	800cb26 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb1e:	f002 fc6d 	bl	800f3fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cb22:	2300      	movs	r3, #0
 800cb24:	e05c      	b.n	800cbe0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d106      	bne.n	800cb3a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb2c:	f107 0314 	add.w	r3, r7, #20
 800cb30:	4618      	mov	r0, r3
 800cb32:	f001 fba9 	bl	800e288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb36:	2301      	movs	r3, #1
 800cb38:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb3a:	f002 fc5f 	bl	800f3fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb3e:	f001 f919 	bl	800dd74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb42:	f002 fc29 	bl	800f398 <vPortEnterCritical>
 800cb46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb4c:	b25b      	sxtb	r3, r3
 800cb4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb52:	d103      	bne.n	800cb5c <xQueueGenericSend+0x174>
 800cb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb56:	2200      	movs	r2, #0
 800cb58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb62:	b25b      	sxtb	r3, r3
 800cb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb68:	d103      	bne.n	800cb72 <xQueueGenericSend+0x18a>
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cb72:	f002 fc43 	bl	800f3fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb76:	1d3a      	adds	r2, r7, #4
 800cb78:	f107 0314 	add.w	r3, r7, #20
 800cb7c:	4611      	mov	r1, r2
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f001 fb98 	bl	800e2b4 <xTaskCheckForTimeOut>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d124      	bne.n	800cbd4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cb8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cb8c:	f000 fd04 	bl	800d598 <prvIsQueueFull>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d018      	beq.n	800cbc8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cb96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb98:	3310      	adds	r3, #16
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	4611      	mov	r1, r2
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f001 fabc 	bl	800e11c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cba4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cba6:	f000 fc8f 	bl	800d4c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cbaa:	f001 f8f1 	bl	800dd90 <xTaskResumeAll>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	f47f af7c 	bne.w	800caae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cbb6:	4b0c      	ldr	r3, [pc, #48]	@ (800cbe8 <xQueueGenericSend+0x200>)
 800cbb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbbc:	601a      	str	r2, [r3, #0]
 800cbbe:	f3bf 8f4f 	dsb	sy
 800cbc2:	f3bf 8f6f 	isb	sy
 800cbc6:	e772      	b.n	800caae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cbc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cbca:	f000 fc7d 	bl	800d4c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cbce:	f001 f8df 	bl	800dd90 <xTaskResumeAll>
 800cbd2:	e76c      	b.n	800caae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cbd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cbd6:	f000 fc77 	bl	800d4c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cbda:	f001 f8d9 	bl	800dd90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cbde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3738      	adds	r7, #56	@ 0x38
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	e000ed04 	.word	0xe000ed04

0800cbec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b090      	sub	sp, #64	@ 0x40
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
 800cbf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cbfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d10b      	bne.n	800cc1c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cc04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc08:	f383 8811 	msr	BASEPRI, r3
 800cc0c:	f3bf 8f6f 	isb	sy
 800cc10:	f3bf 8f4f 	dsb	sy
 800cc14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cc16:	bf00      	nop
 800cc18:	bf00      	nop
 800cc1a:	e7fd      	b.n	800cc18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d103      	bne.n	800cc2a <xQueueGenericSendFromISR+0x3e>
 800cc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d101      	bne.n	800cc2e <xQueueGenericSendFromISR+0x42>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e000      	b.n	800cc30 <xQueueGenericSendFromISR+0x44>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d10b      	bne.n	800cc4c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cc34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cc46:	bf00      	nop
 800cc48:	bf00      	nop
 800cc4a:	e7fd      	b.n	800cc48 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	2b02      	cmp	r3, #2
 800cc50:	d103      	bne.n	800cc5a <xQueueGenericSendFromISR+0x6e>
 800cc52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d101      	bne.n	800cc5e <xQueueGenericSendFromISR+0x72>
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	e000      	b.n	800cc60 <xQueueGenericSendFromISR+0x74>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d10b      	bne.n	800cc7c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800cc64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc68:	f383 8811 	msr	BASEPRI, r3
 800cc6c:	f3bf 8f6f 	isb	sy
 800cc70:	f3bf 8f4f 	dsb	sy
 800cc74:	623b      	str	r3, [r7, #32]
}
 800cc76:	bf00      	nop
 800cc78:	bf00      	nop
 800cc7a:	e7fd      	b.n	800cc78 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc7c:	f002 fc6c 	bl	800f558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cc80:	f3ef 8211 	mrs	r2, BASEPRI
 800cc84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc88:	f383 8811 	msr	BASEPRI, r3
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	61fa      	str	r2, [r7, #28]
 800cc96:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cc98:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc9a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d302      	bcc.n	800ccae <xQueueGenericSendFromISR+0xc2>
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	2b02      	cmp	r3, #2
 800ccac:	d12f      	bne.n	800cd0e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ccae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ccb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ccbe:	683a      	ldr	r2, [r7, #0]
 800ccc0:	68b9      	ldr	r1, [r7, #8]
 800ccc2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ccc4:	f000 fb70 	bl	800d3a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ccc8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800cccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccd0:	d112      	bne.n	800ccf8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d016      	beq.n	800cd08 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccdc:	3324      	adds	r3, #36	@ 0x24
 800ccde:	4618      	mov	r0, r3
 800cce0:	f001 fa6e 	bl	800e1c0 <xTaskRemoveFromEventList>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d00e      	beq.n	800cd08 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d00b      	beq.n	800cd08 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	601a      	str	r2, [r3, #0]
 800ccf6:	e007      	b.n	800cd08 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ccf8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	b25a      	sxtb	r2, r3
 800cd02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cd08:	2301      	movs	r3, #1
 800cd0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800cd0c:	e001      	b.n	800cd12 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd14:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cd1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3740      	adds	r7, #64	@ 0x40
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b08e      	sub	sp, #56	@ 0x38
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cd36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10b      	bne.n	800cd54 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cd3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd40:	f383 8811 	msr	BASEPRI, r3
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	623b      	str	r3, [r7, #32]
}
 800cd4e:	bf00      	nop
 800cd50:	bf00      	nop
 800cd52:	e7fd      	b.n	800cd50 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cd54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d00b      	beq.n	800cd74 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800cd5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd60:	f383 8811 	msr	BASEPRI, r3
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	61fb      	str	r3, [r7, #28]
}
 800cd6e:	bf00      	nop
 800cd70:	bf00      	nop
 800cd72:	e7fd      	b.n	800cd70 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d103      	bne.n	800cd84 <xQueueGiveFromISR+0x5c>
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d101      	bne.n	800cd88 <xQueueGiveFromISR+0x60>
 800cd84:	2301      	movs	r3, #1
 800cd86:	e000      	b.n	800cd8a <xQueueGiveFromISR+0x62>
 800cd88:	2300      	movs	r3, #0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d10b      	bne.n	800cda6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800cd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd92:	f383 8811 	msr	BASEPRI, r3
 800cd96:	f3bf 8f6f 	isb	sy
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	61bb      	str	r3, [r7, #24]
}
 800cda0:	bf00      	nop
 800cda2:	bf00      	nop
 800cda4:	e7fd      	b.n	800cda2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cda6:	f002 fbd7 	bl	800f558 <vPortValidateInterruptPriority>
	__asm volatile
 800cdaa:	f3ef 8211 	mrs	r2, BASEPRI
 800cdae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	617a      	str	r2, [r7, #20]
 800cdc0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cdc2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d22b      	bcs.n	800ce2e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cddc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cde0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde2:	1c5a      	adds	r2, r3, #1
 800cde4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cde8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cdec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf0:	d112      	bne.n	800ce18 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d016      	beq.n	800ce28 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdfc:	3324      	adds	r3, #36	@ 0x24
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f001 f9de 	bl	800e1c0 <xTaskRemoveFromEventList>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00e      	beq.n	800ce28 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00b      	beq.n	800ce28 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	2201      	movs	r2, #1
 800ce14:	601a      	str	r2, [r3, #0]
 800ce16:	e007      	b.n	800ce28 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	b25a      	sxtb	r2, r3
 800ce22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce2c:	e001      	b.n	800ce32 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce34:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f383 8811 	msr	BASEPRI, r3
}
 800ce3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3738      	adds	r7, #56	@ 0x38
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b08c      	sub	sp, #48	@ 0x30
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce54:	2300      	movs	r3, #0
 800ce56:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d10b      	bne.n	800ce7a <xQueueReceive+0x32>
	__asm volatile
 800ce62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce66:	f383 8811 	msr	BASEPRI, r3
 800ce6a:	f3bf 8f6f 	isb	sy
 800ce6e:	f3bf 8f4f 	dsb	sy
 800ce72:	623b      	str	r3, [r7, #32]
}
 800ce74:	bf00      	nop
 800ce76:	bf00      	nop
 800ce78:	e7fd      	b.n	800ce76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d103      	bne.n	800ce88 <xQueueReceive+0x40>
 800ce80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d101      	bne.n	800ce8c <xQueueReceive+0x44>
 800ce88:	2301      	movs	r3, #1
 800ce8a:	e000      	b.n	800ce8e <xQueueReceive+0x46>
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d10b      	bne.n	800ceaa <xQueueReceive+0x62>
	__asm volatile
 800ce92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce96:	f383 8811 	msr	BASEPRI, r3
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	61fb      	str	r3, [r7, #28]
}
 800cea4:	bf00      	nop
 800cea6:	bf00      	nop
 800cea8:	e7fd      	b.n	800cea6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ceaa:	f001 fb49 	bl	800e540 <xTaskGetSchedulerState>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d102      	bne.n	800ceba <xQueueReceive+0x72>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d101      	bne.n	800cebe <xQueueReceive+0x76>
 800ceba:	2301      	movs	r3, #1
 800cebc:	e000      	b.n	800cec0 <xQueueReceive+0x78>
 800cebe:	2300      	movs	r3, #0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d10b      	bne.n	800cedc <xQueueReceive+0x94>
	__asm volatile
 800cec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	61bb      	str	r3, [r7, #24]
}
 800ced6:	bf00      	nop
 800ced8:	bf00      	nop
 800ceda:	e7fd      	b.n	800ced8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cedc:	f002 fa5c 	bl	800f398 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cee4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d01f      	beq.n	800cf2c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ceec:	68b9      	ldr	r1, [r7, #8]
 800ceee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cef0:	f000 fac4 	bl	800d47c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef6:	1e5a      	subs	r2, r3, #1
 800cef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cefa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cefc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cefe:	691b      	ldr	r3, [r3, #16]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d00f      	beq.n	800cf24 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf06:	3310      	adds	r3, #16
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f001 f959 	bl	800e1c0 <xTaskRemoveFromEventList>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d007      	beq.n	800cf24 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf14:	4b3c      	ldr	r3, [pc, #240]	@ (800d008 <xQueueReceive+0x1c0>)
 800cf16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf1a:	601a      	str	r2, [r3, #0]
 800cf1c:	f3bf 8f4f 	dsb	sy
 800cf20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf24:	f002 fa6a 	bl	800f3fc <vPortExitCritical>
				return pdPASS;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	e069      	b.n	800d000 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d103      	bne.n	800cf3a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf32:	f002 fa63 	bl	800f3fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf36:	2300      	movs	r3, #0
 800cf38:	e062      	b.n	800d000 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d106      	bne.n	800cf4e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf40:	f107 0310 	add.w	r3, r7, #16
 800cf44:	4618      	mov	r0, r3
 800cf46:	f001 f99f 	bl	800e288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf4e:	f002 fa55 	bl	800f3fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf52:	f000 ff0f 	bl	800dd74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf56:	f002 fa1f 	bl	800f398 <vPortEnterCritical>
 800cf5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf60:	b25b      	sxtb	r3, r3
 800cf62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf66:	d103      	bne.n	800cf70 <xQueueReceive+0x128>
 800cf68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf76:	b25b      	sxtb	r3, r3
 800cf78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7c:	d103      	bne.n	800cf86 <xQueueReceive+0x13e>
 800cf7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf80:	2200      	movs	r2, #0
 800cf82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf86:	f002 fa39 	bl	800f3fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf8a:	1d3a      	adds	r2, r7, #4
 800cf8c:	f107 0310 	add.w	r3, r7, #16
 800cf90:	4611      	mov	r1, r2
 800cf92:	4618      	mov	r0, r3
 800cf94:	f001 f98e 	bl	800e2b4 <xTaskCheckForTimeOut>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d123      	bne.n	800cfe6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfa0:	f000 fae4 	bl	800d56c <prvIsQueueEmpty>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d017      	beq.n	800cfda <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfac:	3324      	adds	r3, #36	@ 0x24
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f001 f8b2 	bl	800e11c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfba:	f000 fa85 	bl	800d4c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cfbe:	f000 fee7 	bl	800dd90 <xTaskResumeAll>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d189      	bne.n	800cedc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cfc8:	4b0f      	ldr	r3, [pc, #60]	@ (800d008 <xQueueReceive+0x1c0>)
 800cfca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfce:	601a      	str	r2, [r3, #0]
 800cfd0:	f3bf 8f4f 	dsb	sy
 800cfd4:	f3bf 8f6f 	isb	sy
 800cfd8:	e780      	b.n	800cedc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cfda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfdc:	f000 fa74 	bl	800d4c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cfe0:	f000 fed6 	bl	800dd90 <xTaskResumeAll>
 800cfe4:	e77a      	b.n	800cedc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cfe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfe8:	f000 fa6e 	bl	800d4c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cfec:	f000 fed0 	bl	800dd90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cff0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cff2:	f000 fabb 	bl	800d56c <prvIsQueueEmpty>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	f43f af6f 	beq.w	800cedc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cffe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d000:	4618      	mov	r0, r3
 800d002:	3730      	adds	r7, #48	@ 0x30
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	e000ed04 	.word	0xe000ed04

0800d00c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b08e      	sub	sp, #56	@ 0x38
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d016:	2300      	movs	r3, #0
 800d018:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d01e:	2300      	movs	r3, #0
 800d020:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10b      	bne.n	800d040 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02c:	f383 8811 	msr	BASEPRI, r3
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	f3bf 8f4f 	dsb	sy
 800d038:	623b      	str	r3, [r7, #32]
}
 800d03a:	bf00      	nop
 800d03c:	bf00      	nop
 800d03e:	e7fd      	b.n	800d03c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d044:	2b00      	cmp	r3, #0
 800d046:	d00b      	beq.n	800d060 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d04c:	f383 8811 	msr	BASEPRI, r3
 800d050:	f3bf 8f6f 	isb	sy
 800d054:	f3bf 8f4f 	dsb	sy
 800d058:	61fb      	str	r3, [r7, #28]
}
 800d05a:	bf00      	nop
 800d05c:	bf00      	nop
 800d05e:	e7fd      	b.n	800d05c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d060:	f001 fa6e 	bl	800e540 <xTaskGetSchedulerState>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d102      	bne.n	800d070 <xQueueSemaphoreTake+0x64>
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d101      	bne.n	800d074 <xQueueSemaphoreTake+0x68>
 800d070:	2301      	movs	r3, #1
 800d072:	e000      	b.n	800d076 <xQueueSemaphoreTake+0x6a>
 800d074:	2300      	movs	r3, #0
 800d076:	2b00      	cmp	r3, #0
 800d078:	d10b      	bne.n	800d092 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d07e:	f383 8811 	msr	BASEPRI, r3
 800d082:	f3bf 8f6f 	isb	sy
 800d086:	f3bf 8f4f 	dsb	sy
 800d08a:	61bb      	str	r3, [r7, #24]
}
 800d08c:	bf00      	nop
 800d08e:	bf00      	nop
 800d090:	e7fd      	b.n	800d08e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d092:	f002 f981 	bl	800f398 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d09a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d024      	beq.n	800d0ec <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0a4:	1e5a      	subs	r2, r3, #1
 800d0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d104      	bne.n	800d0bc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d0b2:	f001 fbbf 	bl	800e834 <pvTaskIncrementMutexHeldCount>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0be:	691b      	ldr	r3, [r3, #16]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00f      	beq.n	800d0e4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c6:	3310      	adds	r3, #16
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f001 f879 	bl	800e1c0 <xTaskRemoveFromEventList>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d007      	beq.n	800d0e4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d0d4:	4b54      	ldr	r3, [pc, #336]	@ (800d228 <xQueueSemaphoreTake+0x21c>)
 800d0d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0da:	601a      	str	r2, [r3, #0]
 800d0dc:	f3bf 8f4f 	dsb	sy
 800d0e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d0e4:	f002 f98a 	bl	800f3fc <vPortExitCritical>
				return pdPASS;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e098      	b.n	800d21e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d112      	bne.n	800d118 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00b      	beq.n	800d110 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0fc:	f383 8811 	msr	BASEPRI, r3
 800d100:	f3bf 8f6f 	isb	sy
 800d104:	f3bf 8f4f 	dsb	sy
 800d108:	617b      	str	r3, [r7, #20]
}
 800d10a:	bf00      	nop
 800d10c:	bf00      	nop
 800d10e:	e7fd      	b.n	800d10c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d110:	f002 f974 	bl	800f3fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d114:	2300      	movs	r3, #0
 800d116:	e082      	b.n	800d21e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d106      	bne.n	800d12c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d11e:	f107 030c 	add.w	r3, r7, #12
 800d122:	4618      	mov	r0, r3
 800d124:	f001 f8b0 	bl	800e288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d128:	2301      	movs	r3, #1
 800d12a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d12c:	f002 f966 	bl	800f3fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d130:	f000 fe20 	bl	800dd74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d134:	f002 f930 	bl	800f398 <vPortEnterCritical>
 800d138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d13a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d13e:	b25b      	sxtb	r3, r3
 800d140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d144:	d103      	bne.n	800d14e <xQueueSemaphoreTake+0x142>
 800d146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d148:	2200      	movs	r2, #0
 800d14a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d150:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d154:	b25b      	sxtb	r3, r3
 800d156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d15a:	d103      	bne.n	800d164 <xQueueSemaphoreTake+0x158>
 800d15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d15e:	2200      	movs	r2, #0
 800d160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d164:	f002 f94a 	bl	800f3fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d168:	463a      	mov	r2, r7
 800d16a:	f107 030c 	add.w	r3, r7, #12
 800d16e:	4611      	mov	r1, r2
 800d170:	4618      	mov	r0, r3
 800d172:	f001 f89f 	bl	800e2b4 <xTaskCheckForTimeOut>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d132      	bne.n	800d1e2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d17c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d17e:	f000 f9f5 	bl	800d56c <prvIsQueueEmpty>
 800d182:	4603      	mov	r3, r0
 800d184:	2b00      	cmp	r3, #0
 800d186:	d026      	beq.n	800d1d6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d109      	bne.n	800d1a4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d190:	f002 f902 	bl	800f398 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	4618      	mov	r0, r3
 800d19a:	f001 f9ef 	bl	800e57c <xTaskPriorityInherit>
 800d19e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d1a0:	f002 f92c 	bl	800f3fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a6:	3324      	adds	r3, #36	@ 0x24
 800d1a8:	683a      	ldr	r2, [r7, #0]
 800d1aa:	4611      	mov	r1, r2
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f000 ffb5 	bl	800e11c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1b4:	f000 f988 	bl	800d4c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1b8:	f000 fdea 	bl	800dd90 <xTaskResumeAll>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	f47f af67 	bne.w	800d092 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d1c4:	4b18      	ldr	r3, [pc, #96]	@ (800d228 <xQueueSemaphoreTake+0x21c>)
 800d1c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1ca:	601a      	str	r2, [r3, #0]
 800d1cc:	f3bf 8f4f 	dsb	sy
 800d1d0:	f3bf 8f6f 	isb	sy
 800d1d4:	e75d      	b.n	800d092 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d1d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1d8:	f000 f976 	bl	800d4c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1dc:	f000 fdd8 	bl	800dd90 <xTaskResumeAll>
 800d1e0:	e757      	b.n	800d092 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d1e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1e4:	f000 f970 	bl	800d4c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1e8:	f000 fdd2 	bl	800dd90 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1ee:	f000 f9bd 	bl	800d56c <prvIsQueueEmpty>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	f43f af4c 	beq.w	800d092 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d00d      	beq.n	800d21c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d200:	f002 f8ca 	bl	800f398 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d204:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d206:	f000 f8b7 	bl	800d378 <prvGetDisinheritPriorityAfterTimeout>
 800d20a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d212:	4618      	mov	r0, r3
 800d214:	f001 fa8a 	bl	800e72c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d218:	f002 f8f0 	bl	800f3fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d21c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3738      	adds	r7, #56	@ 0x38
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	e000ed04 	.word	0xe000ed04

0800d22c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b08e      	sub	sp, #56	@ 0x38
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d10b      	bne.n	800d25a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d246:	f383 8811 	msr	BASEPRI, r3
 800d24a:	f3bf 8f6f 	isb	sy
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	623b      	str	r3, [r7, #32]
}
 800d254:	bf00      	nop
 800d256:	bf00      	nop
 800d258:	e7fd      	b.n	800d256 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d103      	bne.n	800d268 <xQueueReceiveFromISR+0x3c>
 800d260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d264:	2b00      	cmp	r3, #0
 800d266:	d101      	bne.n	800d26c <xQueueReceiveFromISR+0x40>
 800d268:	2301      	movs	r3, #1
 800d26a:	e000      	b.n	800d26e <xQueueReceiveFromISR+0x42>
 800d26c:	2300      	movs	r3, #0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d10b      	bne.n	800d28a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d276:	f383 8811 	msr	BASEPRI, r3
 800d27a:	f3bf 8f6f 	isb	sy
 800d27e:	f3bf 8f4f 	dsb	sy
 800d282:	61fb      	str	r3, [r7, #28]
}
 800d284:	bf00      	nop
 800d286:	bf00      	nop
 800d288:	e7fd      	b.n	800d286 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d28a:	f002 f965 	bl	800f558 <vPortValidateInterruptPriority>
	__asm volatile
 800d28e:	f3ef 8211 	mrs	r2, BASEPRI
 800d292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d296:	f383 8811 	msr	BASEPRI, r3
 800d29a:	f3bf 8f6f 	isb	sy
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	61ba      	str	r2, [r7, #24]
 800d2a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d2a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d02f      	beq.n	800d316 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d2bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2c0:	68b9      	ldr	r1, [r7, #8]
 800d2c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2c4:	f000 f8da 	bl	800d47c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ca:	1e5a      	subs	r2, r3, #1
 800d2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d2d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d8:	d112      	bne.n	800d300 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2dc:	691b      	ldr	r3, [r3, #16]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d016      	beq.n	800d310 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e4:	3310      	adds	r3, #16
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f000 ff6a 	bl	800e1c0 <xTaskRemoveFromEventList>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d00e      	beq.n	800d310 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d00b      	beq.n	800d310 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	601a      	str	r2, [r3, #0]
 800d2fe:	e007      	b.n	800d310 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d304:	3301      	adds	r3, #1
 800d306:	b2db      	uxtb	r3, r3
 800d308:	b25a      	sxtb	r2, r3
 800d30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d310:	2301      	movs	r3, #1
 800d312:	637b      	str	r3, [r7, #52]	@ 0x34
 800d314:	e001      	b.n	800d31a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d316:	2300      	movs	r3, #0
 800d318:	637b      	str	r3, [r7, #52]	@ 0x34
 800d31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d31c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	f383 8811 	msr	BASEPRI, r3
}
 800d324:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3738      	adds	r7, #56	@ 0x38
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d10b      	bne.n	800d35a <vQueueDelete+0x2a>
	__asm volatile
 800d342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d346:	f383 8811 	msr	BASEPRI, r3
 800d34a:	f3bf 8f6f 	isb	sy
 800d34e:	f3bf 8f4f 	dsb	sy
 800d352:	60bb      	str	r3, [r7, #8]
}
 800d354:	bf00      	nop
 800d356:	bf00      	nop
 800d358:	e7fd      	b.n	800d356 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	f000 f95e 	bl	800d61c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d366:	2b00      	cmp	r3, #0
 800d368:	d102      	bne.n	800d370 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800d36a:	68f8      	ldr	r0, [r7, #12]
 800d36c:	f002 fa04 	bl	800f778 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d370:	bf00      	nop
 800d372:	3710      	adds	r7, #16
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d378:	b480      	push	{r7}
 800d37a:	b085      	sub	sp, #20
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d384:	2b00      	cmp	r3, #0
 800d386:	d006      	beq.n	800d396 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d392:	60fb      	str	r3, [r7, #12]
 800d394:	e001      	b.n	800d39a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d396:	2300      	movs	r3, #0
 800d398:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d39a:	68fb      	ldr	r3, [r7, #12]
	}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3714      	adds	r7, #20
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr

0800d3a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b086      	sub	sp, #24
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d10d      	bne.n	800d3e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d14d      	bne.n	800d46a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	689b      	ldr	r3, [r3, #8]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f001 f93a 	bl	800e64c <xTaskPriorityDisinherit>
 800d3d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	609a      	str	r2, [r3, #8]
 800d3e0:	e043      	b.n	800d46a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d119      	bne.n	800d41c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6858      	ldr	r0, [r3, #4]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	68b9      	ldr	r1, [r7, #8]
 800d3f4:	f002 fefe 	bl	80101f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	685a      	ldr	r2, [r3, #4]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d400:	441a      	add	r2, r3
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	685a      	ldr	r2, [r3, #4]
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	689b      	ldr	r3, [r3, #8]
 800d40e:	429a      	cmp	r2, r3
 800d410:	d32b      	bcc.n	800d46a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	605a      	str	r2, [r3, #4]
 800d41a:	e026      	b.n	800d46a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	68d8      	ldr	r0, [r3, #12]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d424:	461a      	mov	r2, r3
 800d426:	68b9      	ldr	r1, [r7, #8]
 800d428:	f002 fee4 	bl	80101f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	68da      	ldr	r2, [r3, #12]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d434:	425b      	negs	r3, r3
 800d436:	441a      	add	r2, r3
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	68da      	ldr	r2, [r3, #12]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	429a      	cmp	r2, r3
 800d446:	d207      	bcs.n	800d458 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	689a      	ldr	r2, [r3, #8]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d450:	425b      	negs	r3, r3
 800d452:	441a      	add	r2, r3
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2b02      	cmp	r3, #2
 800d45c:	d105      	bne.n	800d46a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d002      	beq.n	800d46a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	3b01      	subs	r3, #1
 800d468:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	1c5a      	adds	r2, r3, #1
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d472:	697b      	ldr	r3, [r7, #20]
}
 800d474:	4618      	mov	r0, r3
 800d476:	3718      	adds	r7, #24
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d018      	beq.n	800d4c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	68da      	ldr	r2, [r3, #12]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d496:	441a      	add	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	68da      	ldr	r2, [r3, #12]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	689b      	ldr	r3, [r3, #8]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d303      	bcc.n	800d4b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	68d9      	ldr	r1, [r3, #12]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	6838      	ldr	r0, [r7, #0]
 800d4bc:	f002 fe9a 	bl	80101f4 <memcpy>
	}
}
 800d4c0:	bf00      	nop
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d4d0:	f001 ff62 	bl	800f398 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d4da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4dc:	e011      	b.n	800d502 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d012      	beq.n	800d50c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	3324      	adds	r3, #36	@ 0x24
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f000 fe68 	bl	800e1c0 <xTaskRemoveFromEventList>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d001      	beq.n	800d4fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d4f6:	f000 ff41 	bl	800e37c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d4fa:	7bfb      	ldrb	r3, [r7, #15]
 800d4fc:	3b01      	subs	r3, #1
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d506:	2b00      	cmp	r3, #0
 800d508:	dce9      	bgt.n	800d4de <prvUnlockQueue+0x16>
 800d50a:	e000      	b.n	800d50e <prvUnlockQueue+0x46>
					break;
 800d50c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	22ff      	movs	r2, #255	@ 0xff
 800d512:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d516:	f001 ff71 	bl	800f3fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d51a:	f001 ff3d 	bl	800f398 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d524:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d526:	e011      	b.n	800d54c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	691b      	ldr	r3, [r3, #16]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d012      	beq.n	800d556 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	3310      	adds	r3, #16
 800d534:	4618      	mov	r0, r3
 800d536:	f000 fe43 	bl	800e1c0 <xTaskRemoveFromEventList>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d001      	beq.n	800d544 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d540:	f000 ff1c 	bl	800e37c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d544:	7bbb      	ldrb	r3, [r7, #14]
 800d546:	3b01      	subs	r3, #1
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d54c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d550:	2b00      	cmp	r3, #0
 800d552:	dce9      	bgt.n	800d528 <prvUnlockQueue+0x60>
 800d554:	e000      	b.n	800d558 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d556:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	22ff      	movs	r2, #255	@ 0xff
 800d55c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d560:	f001 ff4c 	bl	800f3fc <vPortExitCritical>
}
 800d564:	bf00      	nop
 800d566:	3710      	adds	r7, #16
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d574:	f001 ff10 	bl	800f398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d102      	bne.n	800d586 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d580:	2301      	movs	r3, #1
 800d582:	60fb      	str	r3, [r7, #12]
 800d584:	e001      	b.n	800d58a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d586:	2300      	movs	r3, #0
 800d588:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d58a:	f001 ff37 	bl	800f3fc <vPortExitCritical>

	return xReturn;
 800d58e:	68fb      	ldr	r3, [r7, #12]
}
 800d590:	4618      	mov	r0, r3
 800d592:	3710      	adds	r7, #16
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5a0:	f001 fefa 	bl	800f398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d102      	bne.n	800d5b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	60fb      	str	r3, [r7, #12]
 800d5b4:	e001      	b.n	800d5ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5ba:	f001 ff1f 	bl	800f3fc <vPortExitCritical>

	return xReturn;
 800d5be:	68fb      	ldr	r3, [r7, #12]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b085      	sub	sp, #20
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	60fb      	str	r3, [r7, #12]
 800d5d6:	e014      	b.n	800d602 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d5d8:	4a0f      	ldr	r2, [pc, #60]	@ (800d618 <vQueueAddToRegistry+0x50>)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d10b      	bne.n	800d5fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d5e4:	490c      	ldr	r1, [pc, #48]	@ (800d618 <vQueueAddToRegistry+0x50>)
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	683a      	ldr	r2, [r7, #0]
 800d5ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d5ee:	4a0a      	ldr	r2, [pc, #40]	@ (800d618 <vQueueAddToRegistry+0x50>)
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	00db      	lsls	r3, r3, #3
 800d5f4:	4413      	add	r3, r2
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d5fa:	e006      	b.n	800d60a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	3301      	adds	r3, #1
 800d600:	60fb      	str	r3, [r7, #12]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2b07      	cmp	r3, #7
 800d606:	d9e7      	bls.n	800d5d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d608:	bf00      	nop
 800d60a:	bf00      	nop
 800d60c:	3714      	adds	r7, #20
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr
 800d616:	bf00      	nop
 800d618:	200013e0 	.word	0x200013e0

0800d61c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d61c:	b480      	push	{r7}
 800d61e:	b085      	sub	sp, #20
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d624:	2300      	movs	r3, #0
 800d626:	60fb      	str	r3, [r7, #12]
 800d628:	e016      	b.n	800d658 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d62a:	4a10      	ldr	r2, [pc, #64]	@ (800d66c <vQueueUnregisterQueue+0x50>)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	00db      	lsls	r3, r3, #3
 800d630:	4413      	add	r3, r2
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	429a      	cmp	r2, r3
 800d638:	d10b      	bne.n	800d652 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d63a:	4a0c      	ldr	r2, [pc, #48]	@ (800d66c <vQueueUnregisterQueue+0x50>)
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2100      	movs	r1, #0
 800d640:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d644:	4a09      	ldr	r2, [pc, #36]	@ (800d66c <vQueueUnregisterQueue+0x50>)
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	00db      	lsls	r3, r3, #3
 800d64a:	4413      	add	r3, r2
 800d64c:	2200      	movs	r2, #0
 800d64e:	605a      	str	r2, [r3, #4]
				break;
 800d650:	e006      	b.n	800d660 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	3301      	adds	r3, #1
 800d656:	60fb      	str	r3, [r7, #12]
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2b07      	cmp	r3, #7
 800d65c:	d9e5      	bls.n	800d62a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d65e:	bf00      	nop
 800d660:	bf00      	nop
 800d662:	3714      	adds	r7, #20
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr
 800d66c:	200013e0 	.word	0x200013e0

0800d670 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d670:	b580      	push	{r7, lr}
 800d672:	b086      	sub	sp, #24
 800d674:	af00      	add	r7, sp, #0
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d680:	f001 fe8a 	bl	800f398 <vPortEnterCritical>
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d68a:	b25b      	sxtb	r3, r3
 800d68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d690:	d103      	bne.n	800d69a <vQueueWaitForMessageRestricted+0x2a>
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	2200      	movs	r2, #0
 800d696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d6a0:	b25b      	sxtb	r3, r3
 800d6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6a6:	d103      	bne.n	800d6b0 <vQueueWaitForMessageRestricted+0x40>
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d6b0:	f001 fea4 	bl	800f3fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d106      	bne.n	800d6ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	3324      	adds	r3, #36	@ 0x24
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	68b9      	ldr	r1, [r7, #8]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f000 fd4f 	bl	800e168 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d6ca:	6978      	ldr	r0, [r7, #20]
 800d6cc:	f7ff fefc 	bl	800d4c8 <prvUnlockQueue>
	}
 800d6d0:	bf00      	nop
 800d6d2:	3718      	adds	r7, #24
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b08e      	sub	sp, #56	@ 0x38
 800d6dc:	af04      	add	r7, sp, #16
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	60b9      	str	r1, [r7, #8]
 800d6e2:	607a      	str	r2, [r7, #4]
 800d6e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d6e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d10b      	bne.n	800d704 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d6ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	623b      	str	r3, [r7, #32]
}
 800d6fe:	bf00      	nop
 800d700:	bf00      	nop
 800d702:	e7fd      	b.n	800d700 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d706:	2b00      	cmp	r3, #0
 800d708:	d10b      	bne.n	800d722 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d70e:	f383 8811 	msr	BASEPRI, r3
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	f3bf 8f4f 	dsb	sy
 800d71a:	61fb      	str	r3, [r7, #28]
}
 800d71c:	bf00      	nop
 800d71e:	bf00      	nop
 800d720:	e7fd      	b.n	800d71e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d722:	2360      	movs	r3, #96	@ 0x60
 800d724:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	2b60      	cmp	r3, #96	@ 0x60
 800d72a:	d00b      	beq.n	800d744 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d730:	f383 8811 	msr	BASEPRI, r3
 800d734:	f3bf 8f6f 	isb	sy
 800d738:	f3bf 8f4f 	dsb	sy
 800d73c:	61bb      	str	r3, [r7, #24]
}
 800d73e:	bf00      	nop
 800d740:	bf00      	nop
 800d742:	e7fd      	b.n	800d740 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d744:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d01e      	beq.n	800d78a <xTaskCreateStatic+0xb2>
 800d74c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d01b      	beq.n	800d78a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d754:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d758:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d75a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75e:	2202      	movs	r2, #2
 800d760:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d764:	2300      	movs	r3, #0
 800d766:	9303      	str	r3, [sp, #12]
 800d768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d76a:	9302      	str	r3, [sp, #8]
 800d76c:	f107 0314 	add.w	r3, r7, #20
 800d770:	9301      	str	r3, [sp, #4]
 800d772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d774:	9300      	str	r3, [sp, #0]
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	687a      	ldr	r2, [r7, #4]
 800d77a:	68b9      	ldr	r1, [r7, #8]
 800d77c:	68f8      	ldr	r0, [r7, #12]
 800d77e:	f000 f850 	bl	800d822 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d782:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d784:	f000 f8e0 	bl	800d948 <prvAddNewTaskToReadyList>
 800d788:	e001      	b.n	800d78e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d78a:	2300      	movs	r3, #0
 800d78c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d78e:	697b      	ldr	r3, [r7, #20]
	}
 800d790:	4618      	mov	r0, r3
 800d792:	3728      	adds	r7, #40	@ 0x28
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b08c      	sub	sp, #48	@ 0x30
 800d79c:	af04      	add	r7, sp, #16
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	60b9      	str	r1, [r7, #8]
 800d7a2:	603b      	str	r3, [r7, #0]
 800d7a4:	4613      	mov	r3, r2
 800d7a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d7a8:	88fb      	ldrh	r3, [r7, #6]
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f001 ff15 	bl	800f5dc <pvPortMalloc>
 800d7b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d00e      	beq.n	800d7d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d7ba:	2060      	movs	r0, #96	@ 0x60
 800d7bc:	f001 ff0e 	bl	800f5dc <pvPortMalloc>
 800d7c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d003      	beq.n	800d7d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	697a      	ldr	r2, [r7, #20]
 800d7cc:	631a      	str	r2, [r3, #48]	@ 0x30
 800d7ce:	e005      	b.n	800d7dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d7d0:	6978      	ldr	r0, [r7, #20]
 800d7d2:	f001 ffd1 	bl	800f778 <vPortFree>
 800d7d6:	e001      	b.n	800d7dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d017      	beq.n	800d812 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d7ea:	88fa      	ldrh	r2, [r7, #6]
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	9303      	str	r3, [sp, #12]
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	9302      	str	r3, [sp, #8]
 800d7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7f6:	9301      	str	r3, [sp, #4]
 800d7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7fa:	9300      	str	r3, [sp, #0]
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	68b9      	ldr	r1, [r7, #8]
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f000 f80e 	bl	800d822 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d806:	69f8      	ldr	r0, [r7, #28]
 800d808:	f000 f89e 	bl	800d948 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d80c:	2301      	movs	r3, #1
 800d80e:	61bb      	str	r3, [r7, #24]
 800d810:	e002      	b.n	800d818 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d812:	f04f 33ff 	mov.w	r3, #4294967295
 800d816:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d818:	69bb      	ldr	r3, [r7, #24]
	}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3720      	adds	r7, #32
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}

0800d822 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d822:	b580      	push	{r7, lr}
 800d824:	b088      	sub	sp, #32
 800d826:	af00      	add	r7, sp, #0
 800d828:	60f8      	str	r0, [r7, #12]
 800d82a:	60b9      	str	r1, [r7, #8]
 800d82c:	607a      	str	r2, [r7, #4]
 800d82e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d832:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	461a      	mov	r2, r3
 800d83a:	21a5      	movs	r1, #165	@ 0xa5
 800d83c:	f002 fc96 	bl	801016c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d842:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d84a:	3b01      	subs	r3, #1
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	4413      	add	r3, r2
 800d850:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	f023 0307 	bic.w	r3, r3, #7
 800d858:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	f003 0307 	and.w	r3, r3, #7
 800d860:	2b00      	cmp	r3, #0
 800d862:	d00b      	beq.n	800d87c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d868:	f383 8811 	msr	BASEPRI, r3
 800d86c:	f3bf 8f6f 	isb	sy
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	617b      	str	r3, [r7, #20]
}
 800d876:	bf00      	nop
 800d878:	bf00      	nop
 800d87a:	e7fd      	b.n	800d878 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800d87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d87e:	69ba      	ldr	r2, [r7, #24]
 800d880:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d01f      	beq.n	800d8c8 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d888:	2300      	movs	r3, #0
 800d88a:	61fb      	str	r3, [r7, #28]
 800d88c:	e012      	b.n	800d8b4 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d88e:	68ba      	ldr	r2, [r7, #8]
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	4413      	add	r3, r2
 800d894:	7819      	ldrb	r1, [r3, #0]
 800d896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	4413      	add	r3, r2
 800d89c:	3334      	adds	r3, #52	@ 0x34
 800d89e:	460a      	mov	r2, r1
 800d8a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d8a2:	68ba      	ldr	r2, [r7, #8]
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	4413      	add	r3, r2
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d006      	beq.n	800d8bc <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8ae:	69fb      	ldr	r3, [r7, #28]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	61fb      	str	r3, [r7, #28]
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	2b0f      	cmp	r3, #15
 800d8b8:	d9e9      	bls.n	800d88e <prvInitialiseNewTask+0x6c>
 800d8ba:	e000      	b.n	800d8be <prvInitialiseNewTask+0x9c>
			{
				break;
 800d8bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d8c6:	e003      	b.n	800d8d0 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8d2:	2b37      	cmp	r3, #55	@ 0x37
 800d8d4:	d901      	bls.n	800d8da <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d8d6:	2337      	movs	r3, #55	@ 0x37
 800d8d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8de:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d8e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8e4:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800d8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ee:	3304      	adds	r3, #4
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7fe fe31 	bl	800c558 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f8:	3318      	adds	r3, #24
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7fe fe2c 	bl	800c558 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d904:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d908:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d90e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d914:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d918:	2200      	movs	r2, #0
 800d91a:	659a      	str	r2, [r3, #88]	@ 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d91e:	2200      	movs	r2, #0
 800d920:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d924:	683a      	ldr	r2, [r7, #0]
 800d926:	68f9      	ldr	r1, [r7, #12]
 800d928:	69b8      	ldr	r0, [r7, #24]
 800d92a:	f001 fc05 	bl	800f138 <pxPortInitialiseStack>
 800d92e:	4602      	mov	r2, r0
 800d930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d932:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d936:	2b00      	cmp	r3, #0
 800d938:	d002      	beq.n	800d940 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d93c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d93e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d940:	bf00      	nop
 800d942:	3720      	adds	r7, #32
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d950:	f001 fd22 	bl	800f398 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d954:	4b2d      	ldr	r3, [pc, #180]	@ (800da0c <prvAddNewTaskToReadyList+0xc4>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	3301      	adds	r3, #1
 800d95a:	4a2c      	ldr	r2, [pc, #176]	@ (800da0c <prvAddNewTaskToReadyList+0xc4>)
 800d95c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d95e:	4b2c      	ldr	r3, [pc, #176]	@ (800da10 <prvAddNewTaskToReadyList+0xc8>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d109      	bne.n	800d97a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d966:	4a2a      	ldr	r2, [pc, #168]	@ (800da10 <prvAddNewTaskToReadyList+0xc8>)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d96c:	4b27      	ldr	r3, [pc, #156]	@ (800da0c <prvAddNewTaskToReadyList+0xc4>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2b01      	cmp	r3, #1
 800d972:	d110      	bne.n	800d996 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d974:	f000 fd26 	bl	800e3c4 <prvInitialiseTaskLists>
 800d978:	e00d      	b.n	800d996 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d97a:	4b26      	ldr	r3, [pc, #152]	@ (800da14 <prvAddNewTaskToReadyList+0xcc>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d109      	bne.n	800d996 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d982:	4b23      	ldr	r3, [pc, #140]	@ (800da10 <prvAddNewTaskToReadyList+0xc8>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d802      	bhi.n	800d996 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d990:	4a1f      	ldr	r2, [pc, #124]	@ (800da10 <prvAddNewTaskToReadyList+0xc8>)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d996:	4b20      	ldr	r3, [pc, #128]	@ (800da18 <prvAddNewTaskToReadyList+0xd0>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	3301      	adds	r3, #1
 800d99c:	4a1e      	ldr	r2, [pc, #120]	@ (800da18 <prvAddNewTaskToReadyList+0xd0>)
 800d99e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d9a0:	4b1d      	ldr	r3, [pc, #116]	@ (800da18 <prvAddNewTaskToReadyList+0xd0>)
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9ac:	4b1b      	ldr	r3, [pc, #108]	@ (800da1c <prvAddNewTaskToReadyList+0xd4>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d903      	bls.n	800d9bc <prvAddNewTaskToReadyList+0x74>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b8:	4a18      	ldr	r2, [pc, #96]	@ (800da1c <prvAddNewTaskToReadyList+0xd4>)
 800d9ba:	6013      	str	r3, [r2, #0]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9c0:	4613      	mov	r3, r2
 800d9c2:	009b      	lsls	r3, r3, #2
 800d9c4:	4413      	add	r3, r2
 800d9c6:	009b      	lsls	r3, r3, #2
 800d9c8:	4a15      	ldr	r2, [pc, #84]	@ (800da20 <prvAddNewTaskToReadyList+0xd8>)
 800d9ca:	441a      	add	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	3304      	adds	r3, #4
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	4610      	mov	r0, r2
 800d9d4:	f7fe fdcd 	bl	800c572 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d9d8:	f001 fd10 	bl	800f3fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d9dc:	4b0d      	ldr	r3, [pc, #52]	@ (800da14 <prvAddNewTaskToReadyList+0xcc>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00e      	beq.n	800da02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d9e4:	4b0a      	ldr	r3, [pc, #40]	@ (800da10 <prvAddNewTaskToReadyList+0xc8>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d207      	bcs.n	800da02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d9f2:	4b0c      	ldr	r3, [pc, #48]	@ (800da24 <prvAddNewTaskToReadyList+0xdc>)
 800d9f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9f8:	601a      	str	r2, [r3, #0]
 800d9fa:	f3bf 8f4f 	dsb	sy
 800d9fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da02:	bf00      	nop
 800da04:	3708      	adds	r7, #8
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	bf00      	nop
 800da0c:	200018f4 	.word	0x200018f4
 800da10:	20001420 	.word	0x20001420
 800da14:	20001900 	.word	0x20001900
 800da18:	20001910 	.word	0x20001910
 800da1c:	200018fc 	.word	0x200018fc
 800da20:	20001424 	.word	0x20001424
 800da24:	e000ed04 	.word	0xe000ed04

0800da28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800da30:	2300      	movs	r3, #0
 800da32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d018      	beq.n	800da6c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800da3a:	4b14      	ldr	r3, [pc, #80]	@ (800da8c <vTaskDelay+0x64>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00b      	beq.n	800da5a <vTaskDelay+0x32>
	__asm volatile
 800da42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da46:	f383 8811 	msr	BASEPRI, r3
 800da4a:	f3bf 8f6f 	isb	sy
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	60bb      	str	r3, [r7, #8]
}
 800da54:	bf00      	nop
 800da56:	bf00      	nop
 800da58:	e7fd      	b.n	800da56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800da5a:	f000 f98b 	bl	800dd74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800da5e:	2100      	movs	r1, #0
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 fefb 	bl	800e85c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800da66:	f000 f993 	bl	800dd90 <xTaskResumeAll>
 800da6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d107      	bne.n	800da82 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800da72:	4b07      	ldr	r3, [pc, #28]	@ (800da90 <vTaskDelay+0x68>)
 800da74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da78:	601a      	str	r2, [r3, #0]
 800da7a:	f3bf 8f4f 	dsb	sy
 800da7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da82:	bf00      	nop
 800da84:	3710      	adds	r7, #16
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	2000191c 	.word	0x2000191c
 800da90:	e000ed04 	.word	0xe000ed04

0800da94 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800da9c:	f001 fc7c 	bl	800f398 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d102      	bne.n	800daac <vTaskSuspend+0x18>
 800daa6:	4b30      	ldr	r3, [pc, #192]	@ (800db68 <vTaskSuspend+0xd4>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	e000      	b.n	800daae <vTaskSuspend+0x1a>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	3304      	adds	r3, #4
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7fe fdb9 	bl	800c62c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d004      	beq.n	800dacc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	3318      	adds	r3, #24
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7fe fdb0 	bl	800c62c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	3304      	adds	r3, #4
 800dad0:	4619      	mov	r1, r3
 800dad2:	4826      	ldr	r0, [pc, #152]	@ (800db6c <vTaskSuspend+0xd8>)
 800dad4:	f7fe fd4d 	bl	800c572 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d103      	bne.n	800daec <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2200      	movs	r2, #0
 800dae8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800daec:	f001 fc86 	bl	800f3fc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800daf0:	4b1f      	ldr	r3, [pc, #124]	@ (800db70 <vTaskSuspend+0xdc>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d005      	beq.n	800db04 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800daf8:	f001 fc4e 	bl	800f398 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800dafc:	f000 fd00 	bl	800e500 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800db00:	f001 fc7c 	bl	800f3fc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800db04:	4b18      	ldr	r3, [pc, #96]	@ (800db68 <vTaskSuspend+0xd4>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	68fa      	ldr	r2, [r7, #12]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d128      	bne.n	800db60 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800db0e:	4b18      	ldr	r3, [pc, #96]	@ (800db70 <vTaskSuspend+0xdc>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d018      	beq.n	800db48 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800db16:	4b17      	ldr	r3, [pc, #92]	@ (800db74 <vTaskSuspend+0xe0>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00b      	beq.n	800db36 <vTaskSuspend+0xa2>
	__asm volatile
 800db1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db22:	f383 8811 	msr	BASEPRI, r3
 800db26:	f3bf 8f6f 	isb	sy
 800db2a:	f3bf 8f4f 	dsb	sy
 800db2e:	60bb      	str	r3, [r7, #8]
}
 800db30:	bf00      	nop
 800db32:	bf00      	nop
 800db34:	e7fd      	b.n	800db32 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800db36:	4b10      	ldr	r3, [pc, #64]	@ (800db78 <vTaskSuspend+0xe4>)
 800db38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db3c:	601a      	str	r2, [r3, #0]
 800db3e:	f3bf 8f4f 	dsb	sy
 800db42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db46:	e00b      	b.n	800db60 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800db48:	4b08      	ldr	r3, [pc, #32]	@ (800db6c <vTaskSuspend+0xd8>)
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	4b0b      	ldr	r3, [pc, #44]	@ (800db7c <vTaskSuspend+0xe8>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	429a      	cmp	r2, r3
 800db52:	d103      	bne.n	800db5c <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800db54:	4b04      	ldr	r3, [pc, #16]	@ (800db68 <vTaskSuspend+0xd4>)
 800db56:	2200      	movs	r2, #0
 800db58:	601a      	str	r2, [r3, #0]
	}
 800db5a:	e001      	b.n	800db60 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800db5c:	f000 fa80 	bl	800e060 <vTaskSwitchContext>
	}
 800db60:	bf00      	nop
 800db62:	3710      	adds	r7, #16
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}
 800db68:	20001420 	.word	0x20001420
 800db6c:	200018e0 	.word	0x200018e0
 800db70:	20001900 	.word	0x20001900
 800db74:	2000191c 	.word	0x2000191c
 800db78:	e000ed04 	.word	0xe000ed04
 800db7c:	200018f4 	.word	0x200018f4

0800db80 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800db80:	b480      	push	{r7}
 800db82:	b087      	sub	sp, #28
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800db88:	2300      	movs	r3, #0
 800db8a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d10b      	bne.n	800dbae <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800db96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db9a:	f383 8811 	msr	BASEPRI, r3
 800db9e:	f3bf 8f6f 	isb	sy
 800dba2:	f3bf 8f4f 	dsb	sy
 800dba6:	60fb      	str	r3, [r7, #12]
}
 800dba8:	bf00      	nop
 800dbaa:	bf00      	nop
 800dbac:	e7fd      	b.n	800dbaa <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	695b      	ldr	r3, [r3, #20]
 800dbb2:	4a0a      	ldr	r2, [pc, #40]	@ (800dbdc <prvTaskIsTaskSuspended+0x5c>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d10a      	bne.n	800dbce <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbbc:	4a08      	ldr	r2, [pc, #32]	@ (800dbe0 <prvTaskIsTaskSuspended+0x60>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d005      	beq.n	800dbce <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d101      	bne.n	800dbce <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dbce:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	371c      	adds	r7, #28
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr
 800dbdc:	200018e0 	.word	0x200018e0
 800dbe0:	200018b4 	.word	0x200018b4

0800dbe4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d10b      	bne.n	800dc0e <vTaskResume+0x2a>
	__asm volatile
 800dbf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbfa:	f383 8811 	msr	BASEPRI, r3
 800dbfe:	f3bf 8f6f 	isb	sy
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	60bb      	str	r3, [r7, #8]
}
 800dc08:	bf00      	nop
 800dc0a:	bf00      	nop
 800dc0c:	e7fd      	b.n	800dc0a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800dc0e:	4b21      	ldr	r3, [pc, #132]	@ (800dc94 <vTaskResume+0xb0>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	68fa      	ldr	r2, [r7, #12]
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d038      	beq.n	800dc8a <vTaskResume+0xa6>
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d035      	beq.n	800dc8a <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800dc1e:	f001 fbbb 	bl	800f398 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800dc22:	68f8      	ldr	r0, [r7, #12]
 800dc24:	f7ff ffac 	bl	800db80 <prvTaskIsTaskSuspended>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d02b      	beq.n	800dc86 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	3304      	adds	r3, #4
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fe fcfa 	bl	800c62c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc3c:	4b16      	ldr	r3, [pc, #88]	@ (800dc98 <vTaskResume+0xb4>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d903      	bls.n	800dc4c <vTaskResume+0x68>
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc48:	4a13      	ldr	r2, [pc, #76]	@ (800dc98 <vTaskResume+0xb4>)
 800dc4a:	6013      	str	r3, [r2, #0]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc50:	4613      	mov	r3, r2
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	4413      	add	r3, r2
 800dc56:	009b      	lsls	r3, r3, #2
 800dc58:	4a10      	ldr	r2, [pc, #64]	@ (800dc9c <vTaskResume+0xb8>)
 800dc5a:	441a      	add	r2, r3
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	3304      	adds	r3, #4
 800dc60:	4619      	mov	r1, r3
 800dc62:	4610      	mov	r0, r2
 800dc64:	f7fe fc85 	bl	800c572 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc6c:	4b09      	ldr	r3, [pc, #36]	@ (800dc94 <vTaskResume+0xb0>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d307      	bcc.n	800dc86 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800dc76:	4b0a      	ldr	r3, [pc, #40]	@ (800dca0 <vTaskResume+0xbc>)
 800dc78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc7c:	601a      	str	r2, [r3, #0]
 800dc7e:	f3bf 8f4f 	dsb	sy
 800dc82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800dc86:	f001 fbb9 	bl	800f3fc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc8a:	bf00      	nop
 800dc8c:	3710      	adds	r7, #16
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	20001420 	.word	0x20001420
 800dc98:	200018fc 	.word	0x200018fc
 800dc9c:	20001424 	.word	0x20001424
 800dca0:	e000ed04 	.word	0xe000ed04

0800dca4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b08a      	sub	sp, #40	@ 0x28
 800dca8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dcb2:	463a      	mov	r2, r7
 800dcb4:	1d39      	adds	r1, r7, #4
 800dcb6:	f107 0308 	add.w	r3, r7, #8
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fe fbf8 	bl	800c4b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dcc0:	6839      	ldr	r1, [r7, #0]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	68ba      	ldr	r2, [r7, #8]
 800dcc6:	9202      	str	r2, [sp, #8]
 800dcc8:	9301      	str	r3, [sp, #4]
 800dcca:	2300      	movs	r3, #0
 800dccc:	9300      	str	r3, [sp, #0]
 800dcce:	2300      	movs	r3, #0
 800dcd0:	460a      	mov	r2, r1
 800dcd2:	4922      	ldr	r1, [pc, #136]	@ (800dd5c <vTaskStartScheduler+0xb8>)
 800dcd4:	4822      	ldr	r0, [pc, #136]	@ (800dd60 <vTaskStartScheduler+0xbc>)
 800dcd6:	f7ff fcff 	bl	800d6d8 <xTaskCreateStatic>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	4a21      	ldr	r2, [pc, #132]	@ (800dd64 <vTaskStartScheduler+0xc0>)
 800dcde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dce0:	4b20      	ldr	r3, [pc, #128]	@ (800dd64 <vTaskStartScheduler+0xc0>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d002      	beq.n	800dcee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dce8:	2301      	movs	r3, #1
 800dcea:	617b      	str	r3, [r7, #20]
 800dcec:	e001      	b.n	800dcf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d102      	bne.n	800dcfe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dcf8:	f000 fe04 	bl	800e904 <xTimerCreateTimerTask>
 800dcfc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	d116      	bne.n	800dd32 <vTaskStartScheduler+0x8e>
	__asm volatile
 800dd04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
 800dd14:	613b      	str	r3, [r7, #16]
}
 800dd16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dd18:	4b13      	ldr	r3, [pc, #76]	@ (800dd68 <vTaskStartScheduler+0xc4>)
 800dd1a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dd20:	4b12      	ldr	r3, [pc, #72]	@ (800dd6c <vTaskStartScheduler+0xc8>)
 800dd22:	2201      	movs	r2, #1
 800dd24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dd26:	4b12      	ldr	r3, [pc, #72]	@ (800dd70 <vTaskStartScheduler+0xcc>)
 800dd28:	2200      	movs	r2, #0
 800dd2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dd2c:	f001 fa90 	bl	800f250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dd30:	e00f      	b.n	800dd52 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd38:	d10b      	bne.n	800dd52 <vTaskStartScheduler+0xae>
	__asm volatile
 800dd3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd3e:	f383 8811 	msr	BASEPRI, r3
 800dd42:	f3bf 8f6f 	isb	sy
 800dd46:	f3bf 8f4f 	dsb	sy
 800dd4a:	60fb      	str	r3, [r7, #12]
}
 800dd4c:	bf00      	nop
 800dd4e:	bf00      	nop
 800dd50:	e7fd      	b.n	800dd4e <vTaskStartScheduler+0xaa>
}
 800dd52:	bf00      	nop
 800dd54:	3718      	adds	r7, #24
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	08010ca8 	.word	0x08010ca8
 800dd60:	0800e395 	.word	0x0800e395
 800dd64:	20001918 	.word	0x20001918
 800dd68:	20001914 	.word	0x20001914
 800dd6c:	20001900 	.word	0x20001900
 800dd70:	200018f8 	.word	0x200018f8

0800dd74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dd74:	b480      	push	{r7}
 800dd76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dd78:	4b04      	ldr	r3, [pc, #16]	@ (800dd8c <vTaskSuspendAll+0x18>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	4a03      	ldr	r2, [pc, #12]	@ (800dd8c <vTaskSuspendAll+0x18>)
 800dd80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dd82:	bf00      	nop
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr
 800dd8c:	2000191c 	.word	0x2000191c

0800dd90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dd96:	2300      	movs	r3, #0
 800dd98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dd9e:	4b42      	ldr	r3, [pc, #264]	@ (800dea8 <xTaskResumeAll+0x118>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d10b      	bne.n	800ddbe <xTaskResumeAll+0x2e>
	__asm volatile
 800dda6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddaa:	f383 8811 	msr	BASEPRI, r3
 800ddae:	f3bf 8f6f 	isb	sy
 800ddb2:	f3bf 8f4f 	dsb	sy
 800ddb6:	603b      	str	r3, [r7, #0]
}
 800ddb8:	bf00      	nop
 800ddba:	bf00      	nop
 800ddbc:	e7fd      	b.n	800ddba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ddbe:	f001 faeb 	bl	800f398 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ddc2:	4b39      	ldr	r3, [pc, #228]	@ (800dea8 <xTaskResumeAll+0x118>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	3b01      	subs	r3, #1
 800ddc8:	4a37      	ldr	r2, [pc, #220]	@ (800dea8 <xTaskResumeAll+0x118>)
 800ddca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddcc:	4b36      	ldr	r3, [pc, #216]	@ (800dea8 <xTaskResumeAll+0x118>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d162      	bne.n	800de9a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ddd4:	4b35      	ldr	r3, [pc, #212]	@ (800deac <xTaskResumeAll+0x11c>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d05e      	beq.n	800de9a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dddc:	e02f      	b.n	800de3e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddde:	4b34      	ldr	r3, [pc, #208]	@ (800deb0 <xTaskResumeAll+0x120>)
 800dde0:	68db      	ldr	r3, [r3, #12]
 800dde2:	68db      	ldr	r3, [r3, #12]
 800dde4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	3318      	adds	r3, #24
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7fe fc1e 	bl	800c62c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	3304      	adds	r3, #4
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fe fc19 	bl	800c62c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddfe:	4b2d      	ldr	r3, [pc, #180]	@ (800deb4 <xTaskResumeAll+0x124>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	429a      	cmp	r2, r3
 800de04:	d903      	bls.n	800de0e <xTaskResumeAll+0x7e>
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de0a:	4a2a      	ldr	r2, [pc, #168]	@ (800deb4 <xTaskResumeAll+0x124>)
 800de0c:	6013      	str	r3, [r2, #0]
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de12:	4613      	mov	r3, r2
 800de14:	009b      	lsls	r3, r3, #2
 800de16:	4413      	add	r3, r2
 800de18:	009b      	lsls	r3, r3, #2
 800de1a:	4a27      	ldr	r2, [pc, #156]	@ (800deb8 <xTaskResumeAll+0x128>)
 800de1c:	441a      	add	r2, r3
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	3304      	adds	r3, #4
 800de22:	4619      	mov	r1, r3
 800de24:	4610      	mov	r0, r2
 800de26:	f7fe fba4 	bl	800c572 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de2e:	4b23      	ldr	r3, [pc, #140]	@ (800debc <xTaskResumeAll+0x12c>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de34:	429a      	cmp	r2, r3
 800de36:	d302      	bcc.n	800de3e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800de38:	4b21      	ldr	r3, [pc, #132]	@ (800dec0 <xTaskResumeAll+0x130>)
 800de3a:	2201      	movs	r2, #1
 800de3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de3e:	4b1c      	ldr	r3, [pc, #112]	@ (800deb0 <xTaskResumeAll+0x120>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d1cb      	bne.n	800ddde <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d001      	beq.n	800de50 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800de4c:	f000 fb58 	bl	800e500 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800de50:	4b1c      	ldr	r3, [pc, #112]	@ (800dec4 <xTaskResumeAll+0x134>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d010      	beq.n	800de7e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de5c:	f000 f846 	bl	800deec <xTaskIncrementTick>
 800de60:	4603      	mov	r3, r0
 800de62:	2b00      	cmp	r3, #0
 800de64:	d002      	beq.n	800de6c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800de66:	4b16      	ldr	r3, [pc, #88]	@ (800dec0 <xTaskResumeAll+0x130>)
 800de68:	2201      	movs	r2, #1
 800de6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	3b01      	subs	r3, #1
 800de70:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d1f1      	bne.n	800de5c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800de78:	4b12      	ldr	r3, [pc, #72]	@ (800dec4 <xTaskResumeAll+0x134>)
 800de7a:	2200      	movs	r2, #0
 800de7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800de7e:	4b10      	ldr	r3, [pc, #64]	@ (800dec0 <xTaskResumeAll+0x130>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d009      	beq.n	800de9a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800de86:	2301      	movs	r3, #1
 800de88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800de8a:	4b0f      	ldr	r3, [pc, #60]	@ (800dec8 <xTaskResumeAll+0x138>)
 800de8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de90:	601a      	str	r2, [r3, #0]
 800de92:	f3bf 8f4f 	dsb	sy
 800de96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de9a:	f001 faaf 	bl	800f3fc <vPortExitCritical>

	return xAlreadyYielded;
 800de9e:	68bb      	ldr	r3, [r7, #8]
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3710      	adds	r7, #16
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	2000191c 	.word	0x2000191c
 800deac:	200018f4 	.word	0x200018f4
 800deb0:	200018b4 	.word	0x200018b4
 800deb4:	200018fc 	.word	0x200018fc
 800deb8:	20001424 	.word	0x20001424
 800debc:	20001420 	.word	0x20001420
 800dec0:	20001908 	.word	0x20001908
 800dec4:	20001904 	.word	0x20001904
 800dec8:	e000ed04 	.word	0xe000ed04

0800decc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ded2:	4b05      	ldr	r3, [pc, #20]	@ (800dee8 <xTaskGetTickCount+0x1c>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ded8:	687b      	ldr	r3, [r7, #4]
}
 800deda:	4618      	mov	r0, r3
 800dedc:	370c      	adds	r7, #12
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr
 800dee6:	bf00      	nop
 800dee8:	200018f8 	.word	0x200018f8

0800deec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b086      	sub	sp, #24
 800def0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800def2:	2300      	movs	r3, #0
 800def4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800def6:	4b4f      	ldr	r3, [pc, #316]	@ (800e034 <xTaskIncrementTick+0x148>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	f040 8090 	bne.w	800e020 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800df00:	4b4d      	ldr	r3, [pc, #308]	@ (800e038 <xTaskIncrementTick+0x14c>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	3301      	adds	r3, #1
 800df06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800df08:	4a4b      	ldr	r2, [pc, #300]	@ (800e038 <xTaskIncrementTick+0x14c>)
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d121      	bne.n	800df58 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800df14:	4b49      	ldr	r3, [pc, #292]	@ (800e03c <xTaskIncrementTick+0x150>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d00b      	beq.n	800df36 <xTaskIncrementTick+0x4a>
	__asm volatile
 800df1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df22:	f383 8811 	msr	BASEPRI, r3
 800df26:	f3bf 8f6f 	isb	sy
 800df2a:	f3bf 8f4f 	dsb	sy
 800df2e:	603b      	str	r3, [r7, #0]
}
 800df30:	bf00      	nop
 800df32:	bf00      	nop
 800df34:	e7fd      	b.n	800df32 <xTaskIncrementTick+0x46>
 800df36:	4b41      	ldr	r3, [pc, #260]	@ (800e03c <xTaskIncrementTick+0x150>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	60fb      	str	r3, [r7, #12]
 800df3c:	4b40      	ldr	r3, [pc, #256]	@ (800e040 <xTaskIncrementTick+0x154>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4a3e      	ldr	r2, [pc, #248]	@ (800e03c <xTaskIncrementTick+0x150>)
 800df42:	6013      	str	r3, [r2, #0]
 800df44:	4a3e      	ldr	r2, [pc, #248]	@ (800e040 <xTaskIncrementTick+0x154>)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6013      	str	r3, [r2, #0]
 800df4a:	4b3e      	ldr	r3, [pc, #248]	@ (800e044 <xTaskIncrementTick+0x158>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	3301      	adds	r3, #1
 800df50:	4a3c      	ldr	r2, [pc, #240]	@ (800e044 <xTaskIncrementTick+0x158>)
 800df52:	6013      	str	r3, [r2, #0]
 800df54:	f000 fad4 	bl	800e500 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800df58:	4b3b      	ldr	r3, [pc, #236]	@ (800e048 <xTaskIncrementTick+0x15c>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	693a      	ldr	r2, [r7, #16]
 800df5e:	429a      	cmp	r2, r3
 800df60:	d349      	bcc.n	800dff6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df62:	4b36      	ldr	r3, [pc, #216]	@ (800e03c <xTaskIncrementTick+0x150>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d104      	bne.n	800df76 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df6c:	4b36      	ldr	r3, [pc, #216]	@ (800e048 <xTaskIncrementTick+0x15c>)
 800df6e:	f04f 32ff 	mov.w	r2, #4294967295
 800df72:	601a      	str	r2, [r3, #0]
					break;
 800df74:	e03f      	b.n	800dff6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df76:	4b31      	ldr	r3, [pc, #196]	@ (800e03c <xTaskIncrementTick+0x150>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800df86:	693a      	ldr	r2, [r7, #16]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d203      	bcs.n	800df96 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800df8e:	4a2e      	ldr	r2, [pc, #184]	@ (800e048 <xTaskIncrementTick+0x15c>)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800df94:	e02f      	b.n	800dff6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	3304      	adds	r3, #4
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7fe fb46 	bl	800c62c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d004      	beq.n	800dfb2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	3318      	adds	r3, #24
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7fe fb3d 	bl	800c62c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfb6:	4b25      	ldr	r3, [pc, #148]	@ (800e04c <xTaskIncrementTick+0x160>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d903      	bls.n	800dfc6 <xTaskIncrementTick+0xda>
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfc2:	4a22      	ldr	r2, [pc, #136]	@ (800e04c <xTaskIncrementTick+0x160>)
 800dfc4:	6013      	str	r3, [r2, #0]
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfca:	4613      	mov	r3, r2
 800dfcc:	009b      	lsls	r3, r3, #2
 800dfce:	4413      	add	r3, r2
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	4a1f      	ldr	r2, [pc, #124]	@ (800e050 <xTaskIncrementTick+0x164>)
 800dfd4:	441a      	add	r2, r3
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	3304      	adds	r3, #4
 800dfda:	4619      	mov	r1, r3
 800dfdc:	4610      	mov	r0, r2
 800dfde:	f7fe fac8 	bl	800c572 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfe6:	4b1b      	ldr	r3, [pc, #108]	@ (800e054 <xTaskIncrementTick+0x168>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d3b8      	bcc.n	800df62 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dff0:	2301      	movs	r3, #1
 800dff2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dff4:	e7b5      	b.n	800df62 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dff6:	4b17      	ldr	r3, [pc, #92]	@ (800e054 <xTaskIncrementTick+0x168>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dffc:	4914      	ldr	r1, [pc, #80]	@ (800e050 <xTaskIncrementTick+0x164>)
 800dffe:	4613      	mov	r3, r2
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	4413      	add	r3, r2
 800e004:	009b      	lsls	r3, r3, #2
 800e006:	440b      	add	r3, r1
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d901      	bls.n	800e012 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e00e:	2301      	movs	r3, #1
 800e010:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e012:	4b11      	ldr	r3, [pc, #68]	@ (800e058 <xTaskIncrementTick+0x16c>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d007      	beq.n	800e02a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e01a:	2301      	movs	r3, #1
 800e01c:	617b      	str	r3, [r7, #20]
 800e01e:	e004      	b.n	800e02a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e020:	4b0e      	ldr	r3, [pc, #56]	@ (800e05c <xTaskIncrementTick+0x170>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	3301      	adds	r3, #1
 800e026:	4a0d      	ldr	r2, [pc, #52]	@ (800e05c <xTaskIncrementTick+0x170>)
 800e028:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e02a:	697b      	ldr	r3, [r7, #20]
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3718      	adds	r7, #24
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	2000191c 	.word	0x2000191c
 800e038:	200018f8 	.word	0x200018f8
 800e03c:	200018ac 	.word	0x200018ac
 800e040:	200018b0 	.word	0x200018b0
 800e044:	2000190c 	.word	0x2000190c
 800e048:	20001914 	.word	0x20001914
 800e04c:	200018fc 	.word	0x200018fc
 800e050:	20001424 	.word	0x20001424
 800e054:	20001420 	.word	0x20001420
 800e058:	20001908 	.word	0x20001908
 800e05c:	20001904 	.word	0x20001904

0800e060 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e060:	b480      	push	{r7}
 800e062:	b085      	sub	sp, #20
 800e064:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e066:	4b28      	ldr	r3, [pc, #160]	@ (800e108 <vTaskSwitchContext+0xa8>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d003      	beq.n	800e076 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e06e:	4b27      	ldr	r3, [pc, #156]	@ (800e10c <vTaskSwitchContext+0xac>)
 800e070:	2201      	movs	r2, #1
 800e072:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e074:	e042      	b.n	800e0fc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800e076:	4b25      	ldr	r3, [pc, #148]	@ (800e10c <vTaskSwitchContext+0xac>)
 800e078:	2200      	movs	r2, #0
 800e07a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e07c:	4b24      	ldr	r3, [pc, #144]	@ (800e110 <vTaskSwitchContext+0xb0>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	60fb      	str	r3, [r7, #12]
 800e082:	e011      	b.n	800e0a8 <vTaskSwitchContext+0x48>
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d10b      	bne.n	800e0a2 <vTaskSwitchContext+0x42>
	__asm volatile
 800e08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e08e:	f383 8811 	msr	BASEPRI, r3
 800e092:	f3bf 8f6f 	isb	sy
 800e096:	f3bf 8f4f 	dsb	sy
 800e09a:	607b      	str	r3, [r7, #4]
}
 800e09c:	bf00      	nop
 800e09e:	bf00      	nop
 800e0a0:	e7fd      	b.n	800e09e <vTaskSwitchContext+0x3e>
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	3b01      	subs	r3, #1
 800e0a6:	60fb      	str	r3, [r7, #12]
 800e0a8:	491a      	ldr	r1, [pc, #104]	@ (800e114 <vTaskSwitchContext+0xb4>)
 800e0aa:	68fa      	ldr	r2, [r7, #12]
 800e0ac:	4613      	mov	r3, r2
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	4413      	add	r3, r2
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	440b      	add	r3, r1
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d0e3      	beq.n	800e084 <vTaskSwitchContext+0x24>
 800e0bc:	68fa      	ldr	r2, [r7, #12]
 800e0be:	4613      	mov	r3, r2
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	4413      	add	r3, r2
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	4a13      	ldr	r2, [pc, #76]	@ (800e114 <vTaskSwitchContext+0xb4>)
 800e0c8:	4413      	add	r3, r2
 800e0ca:	60bb      	str	r3, [r7, #8]
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	685a      	ldr	r2, [r3, #4]
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	605a      	str	r2, [r3, #4]
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	685a      	ldr	r2, [r3, #4]
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	3308      	adds	r3, #8
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d104      	bne.n	800e0ec <vTaskSwitchContext+0x8c>
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	685a      	ldr	r2, [r3, #4]
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	605a      	str	r2, [r3, #4]
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	4a09      	ldr	r2, [pc, #36]	@ (800e118 <vTaskSwitchContext+0xb8>)
 800e0f4:	6013      	str	r3, [r2, #0]
 800e0f6:	4a06      	ldr	r2, [pc, #24]	@ (800e110 <vTaskSwitchContext+0xb0>)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	6013      	str	r3, [r2, #0]
}
 800e0fc:	bf00      	nop
 800e0fe:	3714      	adds	r7, #20
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr
 800e108:	2000191c 	.word	0x2000191c
 800e10c:	20001908 	.word	0x20001908
 800e110:	200018fc 	.word	0x200018fc
 800e114:	20001424 	.word	0x20001424
 800e118:	20001420 	.word	0x20001420

0800e11c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d10b      	bne.n	800e144 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e130:	f383 8811 	msr	BASEPRI, r3
 800e134:	f3bf 8f6f 	isb	sy
 800e138:	f3bf 8f4f 	dsb	sy
 800e13c:	60fb      	str	r3, [r7, #12]
}
 800e13e:	bf00      	nop
 800e140:	bf00      	nop
 800e142:	e7fd      	b.n	800e140 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e144:	4b07      	ldr	r3, [pc, #28]	@ (800e164 <vTaskPlaceOnEventList+0x48>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	3318      	adds	r3, #24
 800e14a:	4619      	mov	r1, r3
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f7fe fa34 	bl	800c5ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e152:	2101      	movs	r1, #1
 800e154:	6838      	ldr	r0, [r7, #0]
 800e156:	f000 fb81 	bl	800e85c <prvAddCurrentTaskToDelayedList>
}
 800e15a:	bf00      	nop
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	20001420 	.word	0x20001420

0800e168 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b086      	sub	sp, #24
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	60b9      	str	r1, [r7, #8]
 800e172:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d10b      	bne.n	800e192 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e17e:	f383 8811 	msr	BASEPRI, r3
 800e182:	f3bf 8f6f 	isb	sy
 800e186:	f3bf 8f4f 	dsb	sy
 800e18a:	617b      	str	r3, [r7, #20]
}
 800e18c:	bf00      	nop
 800e18e:	bf00      	nop
 800e190:	e7fd      	b.n	800e18e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e192:	4b0a      	ldr	r3, [pc, #40]	@ (800e1bc <vTaskPlaceOnEventListRestricted+0x54>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	3318      	adds	r3, #24
 800e198:	4619      	mov	r1, r3
 800e19a:	68f8      	ldr	r0, [r7, #12]
 800e19c:	f7fe f9e9 	bl	800c572 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d002      	beq.n	800e1ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e1aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e1ac:	6879      	ldr	r1, [r7, #4]
 800e1ae:	68b8      	ldr	r0, [r7, #8]
 800e1b0:	f000 fb54 	bl	800e85c <prvAddCurrentTaskToDelayedList>
	}
 800e1b4:	bf00      	nop
 800e1b6:	3718      	adds	r7, #24
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}
 800e1bc:	20001420 	.word	0x20001420

0800e1c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b086      	sub	sp, #24
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	68db      	ldr	r3, [r3, #12]
 800e1cc:	68db      	ldr	r3, [r3, #12]
 800e1ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d10b      	bne.n	800e1ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1da:	f383 8811 	msr	BASEPRI, r3
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	f3bf 8f4f 	dsb	sy
 800e1e6:	60fb      	str	r3, [r7, #12]
}
 800e1e8:	bf00      	nop
 800e1ea:	bf00      	nop
 800e1ec:	e7fd      	b.n	800e1ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	3318      	adds	r3, #24
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7fe fa1a 	bl	800c62c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1f8:	4b1d      	ldr	r3, [pc, #116]	@ (800e270 <xTaskRemoveFromEventList+0xb0>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d11d      	bne.n	800e23c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	3304      	adds	r3, #4
 800e204:	4618      	mov	r0, r3
 800e206:	f7fe fa11 	bl	800c62c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e20e:	4b19      	ldr	r3, [pc, #100]	@ (800e274 <xTaskRemoveFromEventList+0xb4>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	429a      	cmp	r2, r3
 800e214:	d903      	bls.n	800e21e <xTaskRemoveFromEventList+0x5e>
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e21a:	4a16      	ldr	r2, [pc, #88]	@ (800e274 <xTaskRemoveFromEventList+0xb4>)
 800e21c:	6013      	str	r3, [r2, #0]
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e222:	4613      	mov	r3, r2
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	4413      	add	r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4a13      	ldr	r2, [pc, #76]	@ (800e278 <xTaskRemoveFromEventList+0xb8>)
 800e22c:	441a      	add	r2, r3
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	3304      	adds	r3, #4
 800e232:	4619      	mov	r1, r3
 800e234:	4610      	mov	r0, r2
 800e236:	f7fe f99c 	bl	800c572 <vListInsertEnd>
 800e23a:	e005      	b.n	800e248 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	3318      	adds	r3, #24
 800e240:	4619      	mov	r1, r3
 800e242:	480e      	ldr	r0, [pc, #56]	@ (800e27c <xTaskRemoveFromEventList+0xbc>)
 800e244:	f7fe f995 	bl	800c572 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e24c:	4b0c      	ldr	r3, [pc, #48]	@ (800e280 <xTaskRemoveFromEventList+0xc0>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e252:	429a      	cmp	r2, r3
 800e254:	d905      	bls.n	800e262 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e256:	2301      	movs	r3, #1
 800e258:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e25a:	4b0a      	ldr	r3, [pc, #40]	@ (800e284 <xTaskRemoveFromEventList+0xc4>)
 800e25c:	2201      	movs	r2, #1
 800e25e:	601a      	str	r2, [r3, #0]
 800e260:	e001      	b.n	800e266 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e262:	2300      	movs	r3, #0
 800e264:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e266:	697b      	ldr	r3, [r7, #20]
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3718      	adds	r7, #24
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}
 800e270:	2000191c 	.word	0x2000191c
 800e274:	200018fc 	.word	0x200018fc
 800e278:	20001424 	.word	0x20001424
 800e27c:	200018b4 	.word	0x200018b4
 800e280:	20001420 	.word	0x20001420
 800e284:	20001908 	.word	0x20001908

0800e288 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e290:	4b06      	ldr	r3, [pc, #24]	@ (800e2ac <vTaskInternalSetTimeOutState+0x24>)
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e298:	4b05      	ldr	r3, [pc, #20]	@ (800e2b0 <vTaskInternalSetTimeOutState+0x28>)
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	605a      	str	r2, [r3, #4]
}
 800e2a0:	bf00      	nop
 800e2a2:	370c      	adds	r7, #12
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr
 800e2ac:	2000190c 	.word	0x2000190c
 800e2b0:	200018f8 	.word	0x200018f8

0800e2b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b088      	sub	sp, #32
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d10b      	bne.n	800e2dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c8:	f383 8811 	msr	BASEPRI, r3
 800e2cc:	f3bf 8f6f 	isb	sy
 800e2d0:	f3bf 8f4f 	dsb	sy
 800e2d4:	613b      	str	r3, [r7, #16]
}
 800e2d6:	bf00      	nop
 800e2d8:	bf00      	nop
 800e2da:	e7fd      	b.n	800e2d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d10b      	bne.n	800e2fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e6:	f383 8811 	msr	BASEPRI, r3
 800e2ea:	f3bf 8f6f 	isb	sy
 800e2ee:	f3bf 8f4f 	dsb	sy
 800e2f2:	60fb      	str	r3, [r7, #12]
}
 800e2f4:	bf00      	nop
 800e2f6:	bf00      	nop
 800e2f8:	e7fd      	b.n	800e2f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e2fa:	f001 f84d 	bl	800f398 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e2fe:	4b1d      	ldr	r3, [pc, #116]	@ (800e374 <xTaskCheckForTimeOut+0xc0>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	69ba      	ldr	r2, [r7, #24]
 800e30a:	1ad3      	subs	r3, r2, r3
 800e30c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e316:	d102      	bne.n	800e31e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e318:	2300      	movs	r3, #0
 800e31a:	61fb      	str	r3, [r7, #28]
 800e31c:	e023      	b.n	800e366 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	4b15      	ldr	r3, [pc, #84]	@ (800e378 <xTaskCheckForTimeOut+0xc4>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	429a      	cmp	r2, r3
 800e328:	d007      	beq.n	800e33a <xTaskCheckForTimeOut+0x86>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	69ba      	ldr	r2, [r7, #24]
 800e330:	429a      	cmp	r2, r3
 800e332:	d302      	bcc.n	800e33a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e334:	2301      	movs	r3, #1
 800e336:	61fb      	str	r3, [r7, #28]
 800e338:	e015      	b.n	800e366 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	697a      	ldr	r2, [r7, #20]
 800e340:	429a      	cmp	r2, r3
 800e342:	d20b      	bcs.n	800e35c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	1ad2      	subs	r2, r2, r3
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f7ff ff99 	bl	800e288 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e356:	2300      	movs	r3, #0
 800e358:	61fb      	str	r3, [r7, #28]
 800e35a:	e004      	b.n	800e366 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	2200      	movs	r2, #0
 800e360:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e362:	2301      	movs	r3, #1
 800e364:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e366:	f001 f849 	bl	800f3fc <vPortExitCritical>

	return xReturn;
 800e36a:	69fb      	ldr	r3, [r7, #28]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3720      	adds	r7, #32
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	200018f8 	.word	0x200018f8
 800e378:	2000190c 	.word	0x2000190c

0800e37c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e37c:	b480      	push	{r7}
 800e37e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e380:	4b03      	ldr	r3, [pc, #12]	@ (800e390 <vTaskMissedYield+0x14>)
 800e382:	2201      	movs	r2, #1
 800e384:	601a      	str	r2, [r3, #0]
}
 800e386:	bf00      	nop
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr
 800e390:	20001908 	.word	0x20001908

0800e394 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e39c:	f000 f852 	bl	800e444 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e3a0:	4b06      	ldr	r3, [pc, #24]	@ (800e3bc <prvIdleTask+0x28>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d9f9      	bls.n	800e39c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e3a8:	4b05      	ldr	r3, [pc, #20]	@ (800e3c0 <prvIdleTask+0x2c>)
 800e3aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3ae:	601a      	str	r2, [r3, #0]
 800e3b0:	f3bf 8f4f 	dsb	sy
 800e3b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e3b8:	e7f0      	b.n	800e39c <prvIdleTask+0x8>
 800e3ba:	bf00      	nop
 800e3bc:	20001424 	.word	0x20001424
 800e3c0:	e000ed04 	.word	0xe000ed04

0800e3c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	607b      	str	r3, [r7, #4]
 800e3ce:	e00c      	b.n	800e3ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	009b      	lsls	r3, r3, #2
 800e3d6:	4413      	add	r3, r2
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	4a12      	ldr	r2, [pc, #72]	@ (800e424 <prvInitialiseTaskLists+0x60>)
 800e3dc:	4413      	add	r3, r2
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7fe f89a 	bl	800c518 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	607b      	str	r3, [r7, #4]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2b37      	cmp	r3, #55	@ 0x37
 800e3ee:	d9ef      	bls.n	800e3d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e3f0:	480d      	ldr	r0, [pc, #52]	@ (800e428 <prvInitialiseTaskLists+0x64>)
 800e3f2:	f7fe f891 	bl	800c518 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e3f6:	480d      	ldr	r0, [pc, #52]	@ (800e42c <prvInitialiseTaskLists+0x68>)
 800e3f8:	f7fe f88e 	bl	800c518 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e3fc:	480c      	ldr	r0, [pc, #48]	@ (800e430 <prvInitialiseTaskLists+0x6c>)
 800e3fe:	f7fe f88b 	bl	800c518 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e402:	480c      	ldr	r0, [pc, #48]	@ (800e434 <prvInitialiseTaskLists+0x70>)
 800e404:	f7fe f888 	bl	800c518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e408:	480b      	ldr	r0, [pc, #44]	@ (800e438 <prvInitialiseTaskLists+0x74>)
 800e40a:	f7fe f885 	bl	800c518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e40e:	4b0b      	ldr	r3, [pc, #44]	@ (800e43c <prvInitialiseTaskLists+0x78>)
 800e410:	4a05      	ldr	r2, [pc, #20]	@ (800e428 <prvInitialiseTaskLists+0x64>)
 800e412:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e414:	4b0a      	ldr	r3, [pc, #40]	@ (800e440 <prvInitialiseTaskLists+0x7c>)
 800e416:	4a05      	ldr	r2, [pc, #20]	@ (800e42c <prvInitialiseTaskLists+0x68>)
 800e418:	601a      	str	r2, [r3, #0]
}
 800e41a:	bf00      	nop
 800e41c:	3708      	adds	r7, #8
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}
 800e422:	bf00      	nop
 800e424:	20001424 	.word	0x20001424
 800e428:	20001884 	.word	0x20001884
 800e42c:	20001898 	.word	0x20001898
 800e430:	200018b4 	.word	0x200018b4
 800e434:	200018c8 	.word	0x200018c8
 800e438:	200018e0 	.word	0x200018e0
 800e43c:	200018ac 	.word	0x200018ac
 800e440:	200018b0 	.word	0x200018b0

0800e444 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e44a:	e019      	b.n	800e480 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e44c:	f000 ffa4 	bl	800f398 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e450:	4b10      	ldr	r3, [pc, #64]	@ (800e494 <prvCheckTasksWaitingTermination+0x50>)
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	68db      	ldr	r3, [r3, #12]
 800e456:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	3304      	adds	r3, #4
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7fe f8e5 	bl	800c62c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e462:	4b0d      	ldr	r3, [pc, #52]	@ (800e498 <prvCheckTasksWaitingTermination+0x54>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	3b01      	subs	r3, #1
 800e468:	4a0b      	ldr	r2, [pc, #44]	@ (800e498 <prvCheckTasksWaitingTermination+0x54>)
 800e46a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e46c:	4b0b      	ldr	r3, [pc, #44]	@ (800e49c <prvCheckTasksWaitingTermination+0x58>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	3b01      	subs	r3, #1
 800e472:	4a0a      	ldr	r2, [pc, #40]	@ (800e49c <prvCheckTasksWaitingTermination+0x58>)
 800e474:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e476:	f000 ffc1 	bl	800f3fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f000 f810 	bl	800e4a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e480:	4b06      	ldr	r3, [pc, #24]	@ (800e49c <prvCheckTasksWaitingTermination+0x58>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d1e1      	bne.n	800e44c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e488:	bf00      	nop
 800e48a:	bf00      	nop
 800e48c:	3708      	adds	r7, #8
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	200018c8 	.word	0x200018c8
 800e498:	200018f4 	.word	0x200018f4
 800e49c:	200018dc 	.word	0x200018dc

0800e4a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d108      	bne.n	800e4c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f001 f95e 	bl	800f778 <vPortFree>
				vPortFree( pxTCB );
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f001 f95b 	bl	800f778 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4c2:	e019      	b.n	800e4f8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d103      	bne.n	800e4d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f001 f952 	bl	800f778 <vPortFree>
	}
 800e4d4:	e010      	b.n	800e4f8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e4dc:	2b02      	cmp	r3, #2
 800e4de:	d00b      	beq.n	800e4f8 <prvDeleteTCB+0x58>
	__asm volatile
 800e4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4e4:	f383 8811 	msr	BASEPRI, r3
 800e4e8:	f3bf 8f6f 	isb	sy
 800e4ec:	f3bf 8f4f 	dsb	sy
 800e4f0:	60fb      	str	r3, [r7, #12]
}
 800e4f2:	bf00      	nop
 800e4f4:	bf00      	nop
 800e4f6:	e7fd      	b.n	800e4f4 <prvDeleteTCB+0x54>
	}
 800e4f8:	bf00      	nop
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e500:	b480      	push	{r7}
 800e502:	b083      	sub	sp, #12
 800e504:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e506:	4b0c      	ldr	r3, [pc, #48]	@ (800e538 <prvResetNextTaskUnblockTime+0x38>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d104      	bne.n	800e51a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e510:	4b0a      	ldr	r3, [pc, #40]	@ (800e53c <prvResetNextTaskUnblockTime+0x3c>)
 800e512:	f04f 32ff 	mov.w	r2, #4294967295
 800e516:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e518:	e008      	b.n	800e52c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e51a:	4b07      	ldr	r3, [pc, #28]	@ (800e538 <prvResetNextTaskUnblockTime+0x38>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	68db      	ldr	r3, [r3, #12]
 800e522:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	4a04      	ldr	r2, [pc, #16]	@ (800e53c <prvResetNextTaskUnblockTime+0x3c>)
 800e52a:	6013      	str	r3, [r2, #0]
}
 800e52c:	bf00      	nop
 800e52e:	370c      	adds	r7, #12
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr
 800e538:	200018ac 	.word	0x200018ac
 800e53c:	20001914 	.word	0x20001914

0800e540 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e540:	b480      	push	{r7}
 800e542:	b083      	sub	sp, #12
 800e544:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e546:	4b0b      	ldr	r3, [pc, #44]	@ (800e574 <xTaskGetSchedulerState+0x34>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d102      	bne.n	800e554 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e54e:	2301      	movs	r3, #1
 800e550:	607b      	str	r3, [r7, #4]
 800e552:	e008      	b.n	800e566 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e554:	4b08      	ldr	r3, [pc, #32]	@ (800e578 <xTaskGetSchedulerState+0x38>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d102      	bne.n	800e562 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e55c:	2302      	movs	r3, #2
 800e55e:	607b      	str	r3, [r7, #4]
 800e560:	e001      	b.n	800e566 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e562:	2300      	movs	r3, #0
 800e564:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e566:	687b      	ldr	r3, [r7, #4]
	}
 800e568:	4618      	mov	r0, r3
 800e56a:	370c      	adds	r7, #12
 800e56c:	46bd      	mov	sp, r7
 800e56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e572:	4770      	bx	lr
 800e574:	20001900 	.word	0x20001900
 800e578:	2000191c 	.word	0x2000191c

0800e57c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e588:	2300      	movs	r3, #0
 800e58a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d051      	beq.n	800e636 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e596:	4b2a      	ldr	r3, [pc, #168]	@ (800e640 <xTaskPriorityInherit+0xc4>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d241      	bcs.n	800e624 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	699b      	ldr	r3, [r3, #24]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	db06      	blt.n	800e5b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5a8:	4b25      	ldr	r3, [pc, #148]	@ (800e640 <xTaskPriorityInherit+0xc4>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	6959      	ldr	r1, [r3, #20]
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5be:	4613      	mov	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	4413      	add	r3, r2
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	4a1f      	ldr	r2, [pc, #124]	@ (800e644 <xTaskPriorityInherit+0xc8>)
 800e5c8:	4413      	add	r3, r2
 800e5ca:	4299      	cmp	r1, r3
 800e5cc:	d122      	bne.n	800e614 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	3304      	adds	r3, #4
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fe f82a 	bl	800c62c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e5d8:	4b19      	ldr	r3, [pc, #100]	@ (800e640 <xTaskPriorityInherit+0xc4>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5e6:	4b18      	ldr	r3, [pc, #96]	@ (800e648 <xTaskPriorityInherit+0xcc>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d903      	bls.n	800e5f6 <xTaskPriorityInherit+0x7a>
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5f2:	4a15      	ldr	r2, [pc, #84]	@ (800e648 <xTaskPriorityInherit+0xcc>)
 800e5f4:	6013      	str	r3, [r2, #0]
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5fa:	4613      	mov	r3, r2
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	4413      	add	r3, r2
 800e600:	009b      	lsls	r3, r3, #2
 800e602:	4a10      	ldr	r2, [pc, #64]	@ (800e644 <xTaskPriorityInherit+0xc8>)
 800e604:	441a      	add	r2, r3
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	3304      	adds	r3, #4
 800e60a:	4619      	mov	r1, r3
 800e60c:	4610      	mov	r0, r2
 800e60e:	f7fd ffb0 	bl	800c572 <vListInsertEnd>
 800e612:	e004      	b.n	800e61e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e614:	4b0a      	ldr	r3, [pc, #40]	@ (800e640 <xTaskPriorityInherit+0xc4>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e61e:	2301      	movs	r3, #1
 800e620:	60fb      	str	r3, [r7, #12]
 800e622:	e008      	b.n	800e636 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e628:	4b05      	ldr	r3, [pc, #20]	@ (800e640 <xTaskPriorityInherit+0xc4>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e62e:	429a      	cmp	r2, r3
 800e630:	d201      	bcs.n	800e636 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e632:	2301      	movs	r3, #1
 800e634:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e636:	68fb      	ldr	r3, [r7, #12]
	}
 800e638:	4618      	mov	r0, r3
 800e63a:	3710      	adds	r7, #16
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}
 800e640:	20001420 	.word	0x20001420
 800e644:	20001424 	.word	0x20001424
 800e648:	200018fc 	.word	0x200018fc

0800e64c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b086      	sub	sp, #24
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e658:	2300      	movs	r3, #0
 800e65a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d058      	beq.n	800e714 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e662:	4b2f      	ldr	r3, [pc, #188]	@ (800e720 <xTaskPriorityDisinherit+0xd4>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	693a      	ldr	r2, [r7, #16]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d00b      	beq.n	800e684 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e670:	f383 8811 	msr	BASEPRI, r3
 800e674:	f3bf 8f6f 	isb	sy
 800e678:	f3bf 8f4f 	dsb	sy
 800e67c:	60fb      	str	r3, [r7, #12]
}
 800e67e:	bf00      	nop
 800e680:	bf00      	nop
 800e682:	e7fd      	b.n	800e680 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d10b      	bne.n	800e6a4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e690:	f383 8811 	msr	BASEPRI, r3
 800e694:	f3bf 8f6f 	isb	sy
 800e698:	f3bf 8f4f 	dsb	sy
 800e69c:	60bb      	str	r3, [r7, #8]
}
 800e69e:	bf00      	nop
 800e6a0:	bf00      	nop
 800e6a2:	e7fd      	b.n	800e6a0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6a8:	1e5a      	subs	r2, r3, #1
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d02c      	beq.n	800e714 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d128      	bne.n	800e714 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	3304      	adds	r3, #4
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7fd ffb0 	bl	800c62c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6e4:	4b0f      	ldr	r3, [pc, #60]	@ (800e724 <xTaskPriorityDisinherit+0xd8>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d903      	bls.n	800e6f4 <xTaskPriorityDisinherit+0xa8>
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6f0:	4a0c      	ldr	r2, [pc, #48]	@ (800e724 <xTaskPriorityDisinherit+0xd8>)
 800e6f2:	6013      	str	r3, [r2, #0]
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	009b      	lsls	r3, r3, #2
 800e6fc:	4413      	add	r3, r2
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	4a09      	ldr	r2, [pc, #36]	@ (800e728 <xTaskPriorityDisinherit+0xdc>)
 800e702:	441a      	add	r2, r3
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	3304      	adds	r3, #4
 800e708:	4619      	mov	r1, r3
 800e70a:	4610      	mov	r0, r2
 800e70c:	f7fd ff31 	bl	800c572 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e710:	2301      	movs	r3, #1
 800e712:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e714:	697b      	ldr	r3, [r7, #20]
	}
 800e716:	4618      	mov	r0, r3
 800e718:	3718      	adds	r7, #24
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	bf00      	nop
 800e720:	20001420 	.word	0x20001420
 800e724:	200018fc 	.word	0x200018fc
 800e728:	20001424 	.word	0x20001424

0800e72c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b088      	sub	sp, #32
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e73a:	2301      	movs	r3, #1
 800e73c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d06c      	beq.n	800e81e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d10b      	bne.n	800e764 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e750:	f383 8811 	msr	BASEPRI, r3
 800e754:	f3bf 8f6f 	isb	sy
 800e758:	f3bf 8f4f 	dsb	sy
 800e75c:	60fb      	str	r3, [r7, #12]
}
 800e75e:	bf00      	nop
 800e760:	bf00      	nop
 800e762:	e7fd      	b.n	800e760 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e768:	683a      	ldr	r2, [r7, #0]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d902      	bls.n	800e774 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	61fb      	str	r3, [r7, #28]
 800e772:	e002      	b.n	800e77a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e778:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e77e:	69fa      	ldr	r2, [r7, #28]
 800e780:	429a      	cmp	r2, r3
 800e782:	d04c      	beq.n	800e81e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e784:	69bb      	ldr	r3, [r7, #24]
 800e786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e788:	697a      	ldr	r2, [r7, #20]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d147      	bne.n	800e81e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e78e:	4b26      	ldr	r3, [pc, #152]	@ (800e828 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	69ba      	ldr	r2, [r7, #24]
 800e794:	429a      	cmp	r2, r3
 800e796:	d10b      	bne.n	800e7b0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e79c:	f383 8811 	msr	BASEPRI, r3
 800e7a0:	f3bf 8f6f 	isb	sy
 800e7a4:	f3bf 8f4f 	dsb	sy
 800e7a8:	60bb      	str	r3, [r7, #8]
}
 800e7aa:	bf00      	nop
 800e7ac:	bf00      	nop
 800e7ae:	e7fd      	b.n	800e7ac <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e7b0:	69bb      	ldr	r3, [r7, #24]
 800e7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7b4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	69fa      	ldr	r2, [r7, #28]
 800e7ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e7bc:	69bb      	ldr	r3, [r7, #24]
 800e7be:	699b      	ldr	r3, [r3, #24]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	db04      	blt.n	800e7ce <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e7ca:	69bb      	ldr	r3, [r7, #24]
 800e7cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	6959      	ldr	r1, [r3, #20]
 800e7d2:	693a      	ldr	r2, [r7, #16]
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	009b      	lsls	r3, r3, #2
 800e7d8:	4413      	add	r3, r2
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	4a13      	ldr	r2, [pc, #76]	@ (800e82c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e7de:	4413      	add	r3, r2
 800e7e0:	4299      	cmp	r1, r3
 800e7e2:	d11c      	bne.n	800e81e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	3304      	adds	r3, #4
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7fd ff1f 	bl	800c62c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e7ee:	69bb      	ldr	r3, [r7, #24]
 800e7f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7f2:	4b0f      	ldr	r3, [pc, #60]	@ (800e830 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d903      	bls.n	800e802 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800e7fa:	69bb      	ldr	r3, [r7, #24]
 800e7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7fe:	4a0c      	ldr	r2, [pc, #48]	@ (800e830 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e800:	6013      	str	r3, [r2, #0]
 800e802:	69bb      	ldr	r3, [r7, #24]
 800e804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e806:	4613      	mov	r3, r2
 800e808:	009b      	lsls	r3, r3, #2
 800e80a:	4413      	add	r3, r2
 800e80c:	009b      	lsls	r3, r3, #2
 800e80e:	4a07      	ldr	r2, [pc, #28]	@ (800e82c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e810:	441a      	add	r2, r3
 800e812:	69bb      	ldr	r3, [r7, #24]
 800e814:	3304      	adds	r3, #4
 800e816:	4619      	mov	r1, r3
 800e818:	4610      	mov	r0, r2
 800e81a:	f7fd feaa 	bl	800c572 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e81e:	bf00      	nop
 800e820:	3720      	adds	r7, #32
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	20001420 	.word	0x20001420
 800e82c:	20001424 	.word	0x20001424
 800e830:	200018fc 	.word	0x200018fc

0800e834 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e834:	b480      	push	{r7}
 800e836:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e838:	4b07      	ldr	r3, [pc, #28]	@ (800e858 <pvTaskIncrementMutexHeldCount+0x24>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d004      	beq.n	800e84a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e840:	4b05      	ldr	r3, [pc, #20]	@ (800e858 <pvTaskIncrementMutexHeldCount+0x24>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e846:	3201      	adds	r2, #1
 800e848:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 800e84a:	4b03      	ldr	r3, [pc, #12]	@ (800e858 <pvTaskIncrementMutexHeldCount+0x24>)
 800e84c:	681b      	ldr	r3, [r3, #0]
	}
 800e84e:	4618      	mov	r0, r3
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr
 800e858:	20001420 	.word	0x20001420

0800e85c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e866:	4b21      	ldr	r3, [pc, #132]	@ (800e8ec <prvAddCurrentTaskToDelayedList+0x90>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e86c:	4b20      	ldr	r3, [pc, #128]	@ (800e8f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	3304      	adds	r3, #4
 800e872:	4618      	mov	r0, r3
 800e874:	f7fd feda 	bl	800c62c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e87e:	d10a      	bne.n	800e896 <prvAddCurrentTaskToDelayedList+0x3a>
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d007      	beq.n	800e896 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e886:	4b1a      	ldr	r3, [pc, #104]	@ (800e8f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	3304      	adds	r3, #4
 800e88c:	4619      	mov	r1, r3
 800e88e:	4819      	ldr	r0, [pc, #100]	@ (800e8f4 <prvAddCurrentTaskToDelayedList+0x98>)
 800e890:	f7fd fe6f 	bl	800c572 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e894:	e026      	b.n	800e8e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e896:	68fa      	ldr	r2, [r7, #12]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	4413      	add	r3, r2
 800e89c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e89e:	4b14      	ldr	r3, [pc, #80]	@ (800e8f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	68ba      	ldr	r2, [r7, #8]
 800e8a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e8a6:	68ba      	ldr	r2, [r7, #8]
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d209      	bcs.n	800e8c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8ae:	4b12      	ldr	r3, [pc, #72]	@ (800e8f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	4b0f      	ldr	r3, [pc, #60]	@ (800e8f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	3304      	adds	r3, #4
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	4610      	mov	r0, r2
 800e8bc:	f7fd fe7d 	bl	800c5ba <vListInsert>
}
 800e8c0:	e010      	b.n	800e8e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8c2:	4b0e      	ldr	r3, [pc, #56]	@ (800e8fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	4b0a      	ldr	r3, [pc, #40]	@ (800e8f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	3304      	adds	r3, #4
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	4610      	mov	r0, r2
 800e8d0:	f7fd fe73 	bl	800c5ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e8d4:	4b0a      	ldr	r3, [pc, #40]	@ (800e900 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	68ba      	ldr	r2, [r7, #8]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d202      	bcs.n	800e8e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e8de:	4a08      	ldr	r2, [pc, #32]	@ (800e900 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	6013      	str	r3, [r2, #0]
}
 800e8e4:	bf00      	nop
 800e8e6:	3710      	adds	r7, #16
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	200018f8 	.word	0x200018f8
 800e8f0:	20001420 	.word	0x20001420
 800e8f4:	200018e0 	.word	0x200018e0
 800e8f8:	200018b0 	.word	0x200018b0
 800e8fc:	200018ac 	.word	0x200018ac
 800e900:	20001914 	.word	0x20001914

0800e904 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b08a      	sub	sp, #40	@ 0x28
 800e908:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e90a:	2300      	movs	r3, #0
 800e90c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e90e:	f000 fbb1 	bl	800f074 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e912:	4b1d      	ldr	r3, [pc, #116]	@ (800e988 <xTimerCreateTimerTask+0x84>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d021      	beq.n	800e95e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e91a:	2300      	movs	r3, #0
 800e91c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e91e:	2300      	movs	r3, #0
 800e920:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e922:	1d3a      	adds	r2, r7, #4
 800e924:	f107 0108 	add.w	r1, r7, #8
 800e928:	f107 030c 	add.w	r3, r7, #12
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7fd fdd9 	bl	800c4e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e932:	6879      	ldr	r1, [r7, #4]
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	68fa      	ldr	r2, [r7, #12]
 800e938:	9202      	str	r2, [sp, #8]
 800e93a:	9301      	str	r3, [sp, #4]
 800e93c:	2302      	movs	r3, #2
 800e93e:	9300      	str	r3, [sp, #0]
 800e940:	2300      	movs	r3, #0
 800e942:	460a      	mov	r2, r1
 800e944:	4911      	ldr	r1, [pc, #68]	@ (800e98c <xTimerCreateTimerTask+0x88>)
 800e946:	4812      	ldr	r0, [pc, #72]	@ (800e990 <xTimerCreateTimerTask+0x8c>)
 800e948:	f7fe fec6 	bl	800d6d8 <xTaskCreateStatic>
 800e94c:	4603      	mov	r3, r0
 800e94e:	4a11      	ldr	r2, [pc, #68]	@ (800e994 <xTimerCreateTimerTask+0x90>)
 800e950:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e952:	4b10      	ldr	r3, [pc, #64]	@ (800e994 <xTimerCreateTimerTask+0x90>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d001      	beq.n	800e95e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e95a:	2301      	movs	r3, #1
 800e95c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d10b      	bne.n	800e97c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e968:	f383 8811 	msr	BASEPRI, r3
 800e96c:	f3bf 8f6f 	isb	sy
 800e970:	f3bf 8f4f 	dsb	sy
 800e974:	613b      	str	r3, [r7, #16]
}
 800e976:	bf00      	nop
 800e978:	bf00      	nop
 800e97a:	e7fd      	b.n	800e978 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e97c:	697b      	ldr	r3, [r7, #20]
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3718      	adds	r7, #24
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	20001950 	.word	0x20001950
 800e98c:	08010cb0 	.word	0x08010cb0
 800e990:	0800ec0d 	.word	0x0800ec0d
 800e994:	20001954 	.word	0x20001954

0800e998 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b088      	sub	sp, #32
 800e99c:	af02      	add	r7, sp, #8
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	607a      	str	r2, [r7, #4]
 800e9a4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800e9a6:	202c      	movs	r0, #44	@ 0x2c
 800e9a8:	f000 fe18 	bl	800f5dc <pvPortMalloc>
 800e9ac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d00d      	beq.n	800e9d0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	9301      	str	r3, [sp, #4]
 800e9c0:	6a3b      	ldr	r3, [r7, #32]
 800e9c2:	9300      	str	r3, [sp, #0]
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	68b9      	ldr	r1, [r7, #8]
 800e9ca:	68f8      	ldr	r0, [r7, #12]
 800e9cc:	f000 f845 	bl	800ea5a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800e9d0:	697b      	ldr	r3, [r7, #20]
	}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3718      	adds	r7, #24
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}

0800e9da <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800e9da:	b580      	push	{r7, lr}
 800e9dc:	b08a      	sub	sp, #40	@ 0x28
 800e9de:	af02      	add	r7, sp, #8
 800e9e0:	60f8      	str	r0, [r7, #12]
 800e9e2:	60b9      	str	r1, [r7, #8]
 800e9e4:	607a      	str	r2, [r7, #4]
 800e9e6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800e9e8:	232c      	movs	r3, #44	@ 0x2c
 800e9ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	2b2c      	cmp	r3, #44	@ 0x2c
 800e9f0:	d00b      	beq.n	800ea0a <xTimerCreateStatic+0x30>
	__asm volatile
 800e9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9f6:	f383 8811 	msr	BASEPRI, r3
 800e9fa:	f3bf 8f6f 	isb	sy
 800e9fe:	f3bf 8f4f 	dsb	sy
 800ea02:	61bb      	str	r3, [r7, #24]
}
 800ea04:	bf00      	nop
 800ea06:	bf00      	nop
 800ea08:	e7fd      	b.n	800ea06 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ea0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800ea0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d10b      	bne.n	800ea2a <xTimerCreateStatic+0x50>
	__asm volatile
 800ea12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea16:	f383 8811 	msr	BASEPRI, r3
 800ea1a:	f3bf 8f6f 	isb	sy
 800ea1e:	f3bf 8f4f 	dsb	sy
 800ea22:	617b      	str	r3, [r7, #20]
}
 800ea24:	bf00      	nop
 800ea26:	bf00      	nop
 800ea28:	e7fd      	b.n	800ea26 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800ea2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea2c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800ea2e:	69fb      	ldr	r3, [r7, #28]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d00d      	beq.n	800ea50 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	2202      	movs	r2, #2
 800ea38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	9301      	str	r3, [sp, #4]
 800ea40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea42:	9300      	str	r3, [sp, #0]
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	68b9      	ldr	r1, [r7, #8]
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	f000 f805 	bl	800ea5a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ea50:	69fb      	ldr	r3, [r7, #28]
	}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3720      	adds	r7, #32
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}

0800ea5a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ea5a:	b580      	push	{r7, lr}
 800ea5c:	b086      	sub	sp, #24
 800ea5e:	af00      	add	r7, sp, #0
 800ea60:	60f8      	str	r0, [r7, #12]
 800ea62:	60b9      	str	r1, [r7, #8]
 800ea64:	607a      	str	r2, [r7, #4]
 800ea66:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d10b      	bne.n	800ea86 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800ea6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea72:	f383 8811 	msr	BASEPRI, r3
 800ea76:	f3bf 8f6f 	isb	sy
 800ea7a:	f3bf 8f4f 	dsb	sy
 800ea7e:	617b      	str	r3, [r7, #20]
}
 800ea80:	bf00      	nop
 800ea82:	bf00      	nop
 800ea84:	e7fd      	b.n	800ea82 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ea86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d01e      	beq.n	800eaca <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ea8c:	f000 faf2 	bl	800f074 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ea90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea92:	68fa      	ldr	r2, [r7, #12]
 800ea94:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ea96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea98:	68ba      	ldr	r2, [r7, #8]
 800ea9a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ea9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea9e:	683a      	ldr	r2, [r7, #0]
 800eaa0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800eaa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa4:	6a3a      	ldr	r2, [r7, #32]
 800eaa6:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800eaa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaaa:	3304      	adds	r3, #4
 800eaac:	4618      	mov	r0, r3
 800eaae:	f7fd fd53 	bl	800c558 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d008      	beq.n	800eaca <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800eab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eabe:	f043 0304 	orr.w	r3, r3, #4
 800eac2:	b2da      	uxtb	r2, r3
 800eac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800eaca:	bf00      	nop
 800eacc:	3718      	adds	r7, #24
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
	...

0800ead4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b08a      	sub	sp, #40	@ 0x28
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	607a      	str	r2, [r7, #4]
 800eae0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800eae2:	2300      	movs	r3, #0
 800eae4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d10b      	bne.n	800eb04 <xTimerGenericCommand+0x30>
	__asm volatile
 800eaec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaf0:	f383 8811 	msr	BASEPRI, r3
 800eaf4:	f3bf 8f6f 	isb	sy
 800eaf8:	f3bf 8f4f 	dsb	sy
 800eafc:	623b      	str	r3, [r7, #32]
}
 800eafe:	bf00      	nop
 800eb00:	bf00      	nop
 800eb02:	e7fd      	b.n	800eb00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eb04:	4b19      	ldr	r3, [pc, #100]	@ (800eb6c <xTimerGenericCommand+0x98>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d02a      	beq.n	800eb62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	2b05      	cmp	r3, #5
 800eb1c:	dc18      	bgt.n	800eb50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eb1e:	f7ff fd0f 	bl	800e540 <xTaskGetSchedulerState>
 800eb22:	4603      	mov	r3, r0
 800eb24:	2b02      	cmp	r3, #2
 800eb26:	d109      	bne.n	800eb3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eb28:	4b10      	ldr	r3, [pc, #64]	@ (800eb6c <xTimerGenericCommand+0x98>)
 800eb2a:	6818      	ldr	r0, [r3, #0]
 800eb2c:	f107 0110 	add.w	r1, r7, #16
 800eb30:	2300      	movs	r3, #0
 800eb32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb34:	f7fd ff58 	bl	800c9e8 <xQueueGenericSend>
 800eb38:	6278      	str	r0, [r7, #36]	@ 0x24
 800eb3a:	e012      	b.n	800eb62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eb3c:	4b0b      	ldr	r3, [pc, #44]	@ (800eb6c <xTimerGenericCommand+0x98>)
 800eb3e:	6818      	ldr	r0, [r3, #0]
 800eb40:	f107 0110 	add.w	r1, r7, #16
 800eb44:	2300      	movs	r3, #0
 800eb46:	2200      	movs	r2, #0
 800eb48:	f7fd ff4e 	bl	800c9e8 <xQueueGenericSend>
 800eb4c:	6278      	str	r0, [r7, #36]	@ 0x24
 800eb4e:	e008      	b.n	800eb62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eb50:	4b06      	ldr	r3, [pc, #24]	@ (800eb6c <xTimerGenericCommand+0x98>)
 800eb52:	6818      	ldr	r0, [r3, #0]
 800eb54:	f107 0110 	add.w	r1, r7, #16
 800eb58:	2300      	movs	r3, #0
 800eb5a:	683a      	ldr	r2, [r7, #0]
 800eb5c:	f7fe f846 	bl	800cbec <xQueueGenericSendFromISR>
 800eb60:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eb62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3728      	adds	r7, #40	@ 0x28
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}
 800eb6c:	20001950 	.word	0x20001950

0800eb70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b088      	sub	sp, #32
 800eb74:	af02      	add	r7, sp, #8
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb7a:	4b23      	ldr	r3, [pc, #140]	@ (800ec08 <prvProcessExpiredTimer+0x98>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	3304      	adds	r3, #4
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fd fd4f 	bl	800c62c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb94:	f003 0304 	and.w	r3, r3, #4
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d023      	beq.n	800ebe4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	699a      	ldr	r2, [r3, #24]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	18d1      	adds	r1, r2, r3
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	683a      	ldr	r2, [r7, #0]
 800eba8:	6978      	ldr	r0, [r7, #20]
 800ebaa:	f000 f8d5 	bl	800ed58 <prvInsertTimerInActiveList>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d020      	beq.n	800ebf6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	2300      	movs	r3, #0
 800ebba:	687a      	ldr	r2, [r7, #4]
 800ebbc:	2100      	movs	r1, #0
 800ebbe:	6978      	ldr	r0, [r7, #20]
 800ebc0:	f7ff ff88 	bl	800ead4 <xTimerGenericCommand>
 800ebc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d114      	bne.n	800ebf6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ebcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebd0:	f383 8811 	msr	BASEPRI, r3
 800ebd4:	f3bf 8f6f 	isb	sy
 800ebd8:	f3bf 8f4f 	dsb	sy
 800ebdc:	60fb      	str	r3, [r7, #12]
}
 800ebde:	bf00      	nop
 800ebe0:	bf00      	nop
 800ebe2:	e7fd      	b.n	800ebe0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebea:	f023 0301 	bic.w	r3, r3, #1
 800ebee:	b2da      	uxtb	r2, r3
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	6a1b      	ldr	r3, [r3, #32]
 800ebfa:	6978      	ldr	r0, [r7, #20]
 800ebfc:	4798      	blx	r3
}
 800ebfe:	bf00      	nop
 800ec00:	3718      	adds	r7, #24
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	20001948 	.word	0x20001948

0800ec0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec14:	f107 0308 	add.w	r3, r7, #8
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f000 f859 	bl	800ecd0 <prvGetNextExpireTime>
 800ec1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	4619      	mov	r1, r3
 800ec24:	68f8      	ldr	r0, [r7, #12]
 800ec26:	f000 f805 	bl	800ec34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ec2a:	f000 f8d7 	bl	800eddc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec2e:	bf00      	nop
 800ec30:	e7f0      	b.n	800ec14 <prvTimerTask+0x8>
	...

0800ec34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b084      	sub	sp, #16
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
 800ec3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ec3e:	f7ff f899 	bl	800dd74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec42:	f107 0308 	add.w	r3, r7, #8
 800ec46:	4618      	mov	r0, r3
 800ec48:	f000 f866 	bl	800ed18 <prvSampleTimeNow>
 800ec4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d130      	bne.n	800ecb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d10a      	bne.n	800ec70 <prvProcessTimerOrBlockTask+0x3c>
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d806      	bhi.n	800ec70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ec62:	f7ff f895 	bl	800dd90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ec66:	68f9      	ldr	r1, [r7, #12]
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f7ff ff81 	bl	800eb70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ec6e:	e024      	b.n	800ecba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d008      	beq.n	800ec88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ec76:	4b13      	ldr	r3, [pc, #76]	@ (800ecc4 <prvProcessTimerOrBlockTask+0x90>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d101      	bne.n	800ec84 <prvProcessTimerOrBlockTask+0x50>
 800ec80:	2301      	movs	r3, #1
 800ec82:	e000      	b.n	800ec86 <prvProcessTimerOrBlockTask+0x52>
 800ec84:	2300      	movs	r3, #0
 800ec86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ec88:	4b0f      	ldr	r3, [pc, #60]	@ (800ecc8 <prvProcessTimerOrBlockTask+0x94>)
 800ec8a:	6818      	ldr	r0, [r3, #0]
 800ec8c:	687a      	ldr	r2, [r7, #4]
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	1ad3      	subs	r3, r2, r3
 800ec92:	683a      	ldr	r2, [r7, #0]
 800ec94:	4619      	mov	r1, r3
 800ec96:	f7fe fceb 	bl	800d670 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ec9a:	f7ff f879 	bl	800dd90 <xTaskResumeAll>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d10a      	bne.n	800ecba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eca4:	4b09      	ldr	r3, [pc, #36]	@ (800eccc <prvProcessTimerOrBlockTask+0x98>)
 800eca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecaa:	601a      	str	r2, [r3, #0]
 800ecac:	f3bf 8f4f 	dsb	sy
 800ecb0:	f3bf 8f6f 	isb	sy
}
 800ecb4:	e001      	b.n	800ecba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ecb6:	f7ff f86b 	bl	800dd90 <xTaskResumeAll>
}
 800ecba:	bf00      	nop
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	2000194c 	.word	0x2000194c
 800ecc8:	20001950 	.word	0x20001950
 800eccc:	e000ed04 	.word	0xe000ed04

0800ecd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b085      	sub	sp, #20
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ecd8:	4b0e      	ldr	r3, [pc, #56]	@ (800ed14 <prvGetNextExpireTime+0x44>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d101      	bne.n	800ece6 <prvGetNextExpireTime+0x16>
 800ece2:	2201      	movs	r2, #1
 800ece4:	e000      	b.n	800ece8 <prvGetNextExpireTime+0x18>
 800ece6:	2200      	movs	r2, #0
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d105      	bne.n	800ed00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ecf4:	4b07      	ldr	r3, [pc, #28]	@ (800ed14 <prvGetNextExpireTime+0x44>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	68db      	ldr	r3, [r3, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	60fb      	str	r3, [r7, #12]
 800ecfe:	e001      	b.n	800ed04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ed00:	2300      	movs	r3, #0
 800ed02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ed04:	68fb      	ldr	r3, [r7, #12]
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3714      	adds	r7, #20
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr
 800ed12:	bf00      	nop
 800ed14:	20001948 	.word	0x20001948

0800ed18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ed20:	f7ff f8d4 	bl	800decc <xTaskGetTickCount>
 800ed24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ed26:	4b0b      	ldr	r3, [pc, #44]	@ (800ed54 <prvSampleTimeNow+0x3c>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	68fa      	ldr	r2, [r7, #12]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d205      	bcs.n	800ed3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ed30:	f000 f93a 	bl	800efa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2201      	movs	r2, #1
 800ed38:	601a      	str	r2, [r3, #0]
 800ed3a:	e002      	b.n	800ed42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ed42:	4a04      	ldr	r2, [pc, #16]	@ (800ed54 <prvSampleTimeNow+0x3c>)
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ed48:	68fb      	ldr	r3, [r7, #12]
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	20001958 	.word	0x20001958

0800ed58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b086      	sub	sp, #24
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	60f8      	str	r0, [r7, #12]
 800ed60:	60b9      	str	r1, [r7, #8]
 800ed62:	607a      	str	r2, [r7, #4]
 800ed64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ed66:	2300      	movs	r3, #0
 800ed68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	68ba      	ldr	r2, [r7, #8]
 800ed6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	68fa      	ldr	r2, [r7, #12]
 800ed74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ed76:	68ba      	ldr	r2, [r7, #8]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d812      	bhi.n	800eda4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed7e:	687a      	ldr	r2, [r7, #4]
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	1ad2      	subs	r2, r2, r3
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	699b      	ldr	r3, [r3, #24]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d302      	bcc.n	800ed92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	617b      	str	r3, [r7, #20]
 800ed90:	e01b      	b.n	800edca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ed92:	4b10      	ldr	r3, [pc, #64]	@ (800edd4 <prvInsertTimerInActiveList+0x7c>)
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	3304      	adds	r3, #4
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	4610      	mov	r0, r2
 800ed9e:	f7fd fc0c 	bl	800c5ba <vListInsert>
 800eda2:	e012      	b.n	800edca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d206      	bcs.n	800edba <prvInsertTimerInActiveList+0x62>
 800edac:	68ba      	ldr	r2, [r7, #8]
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d302      	bcc.n	800edba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800edb4:	2301      	movs	r3, #1
 800edb6:	617b      	str	r3, [r7, #20]
 800edb8:	e007      	b.n	800edca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edba:	4b07      	ldr	r3, [pc, #28]	@ (800edd8 <prvInsertTimerInActiveList+0x80>)
 800edbc:	681a      	ldr	r2, [r3, #0]
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	3304      	adds	r3, #4
 800edc2:	4619      	mov	r1, r3
 800edc4:	4610      	mov	r0, r2
 800edc6:	f7fd fbf8 	bl	800c5ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800edca:	697b      	ldr	r3, [r7, #20]
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3718      	adds	r7, #24
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	2000194c 	.word	0x2000194c
 800edd8:	20001948 	.word	0x20001948

0800eddc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b08e      	sub	sp, #56	@ 0x38
 800ede0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ede2:	e0ce      	b.n	800ef82 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	da19      	bge.n	800ee1e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800edea:	1d3b      	adds	r3, r7, #4
 800edec:	3304      	adds	r3, #4
 800edee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800edf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d10b      	bne.n	800ee0e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800edf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edfa:	f383 8811 	msr	BASEPRI, r3
 800edfe:	f3bf 8f6f 	isb	sy
 800ee02:	f3bf 8f4f 	dsb	sy
 800ee06:	61fb      	str	r3, [r7, #28]
}
 800ee08:	bf00      	nop
 800ee0a:	bf00      	nop
 800ee0c:	e7fd      	b.n	800ee0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ee0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee14:	6850      	ldr	r0, [r2, #4]
 800ee16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee18:	6892      	ldr	r2, [r2, #8]
 800ee1a:	4611      	mov	r1, r2
 800ee1c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	f2c0 80ae 	blt.w	800ef82 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ee2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee2c:	695b      	ldr	r3, [r3, #20]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d004      	beq.n	800ee3c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee34:	3304      	adds	r3, #4
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fd fbf8 	bl	800c62c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee3c:	463b      	mov	r3, r7
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7ff ff6a 	bl	800ed18 <prvSampleTimeNow>
 800ee44:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2b09      	cmp	r3, #9
 800ee4a:	f200 8097 	bhi.w	800ef7c <prvProcessReceivedCommands+0x1a0>
 800ee4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ee54 <prvProcessReceivedCommands+0x78>)
 800ee50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee54:	0800ee7d 	.word	0x0800ee7d
 800ee58:	0800ee7d 	.word	0x0800ee7d
 800ee5c:	0800ee7d 	.word	0x0800ee7d
 800ee60:	0800eef3 	.word	0x0800eef3
 800ee64:	0800ef07 	.word	0x0800ef07
 800ee68:	0800ef53 	.word	0x0800ef53
 800ee6c:	0800ee7d 	.word	0x0800ee7d
 800ee70:	0800ee7d 	.word	0x0800ee7d
 800ee74:	0800eef3 	.word	0x0800eef3
 800ee78:	0800ef07 	.word	0x0800ef07
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee82:	f043 0301 	orr.w	r3, r3, #1
 800ee86:	b2da      	uxtb	r2, r3
 800ee88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ee8e:	68ba      	ldr	r2, [r7, #8]
 800ee90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee92:	699b      	ldr	r3, [r3, #24]
 800ee94:	18d1      	adds	r1, r2, r3
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee9c:	f7ff ff5c 	bl	800ed58 <prvInsertTimerInActiveList>
 800eea0:	4603      	mov	r3, r0
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d06c      	beq.n	800ef80 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eea8:	6a1b      	ldr	r3, [r3, #32]
 800eeaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eeac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eeae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eeb4:	f003 0304 	and.w	r3, r3, #4
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d061      	beq.n	800ef80 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eebc:	68ba      	ldr	r2, [r7, #8]
 800eebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eec0:	699b      	ldr	r3, [r3, #24]
 800eec2:	441a      	add	r2, r3
 800eec4:	2300      	movs	r3, #0
 800eec6:	9300      	str	r3, [sp, #0]
 800eec8:	2300      	movs	r3, #0
 800eeca:	2100      	movs	r1, #0
 800eecc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eece:	f7ff fe01 	bl	800ead4 <xTimerGenericCommand>
 800eed2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eed4:	6a3b      	ldr	r3, [r7, #32]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d152      	bne.n	800ef80 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800eeda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eede:	f383 8811 	msr	BASEPRI, r3
 800eee2:	f3bf 8f6f 	isb	sy
 800eee6:	f3bf 8f4f 	dsb	sy
 800eeea:	61bb      	str	r3, [r7, #24]
}
 800eeec:	bf00      	nop
 800eeee:	bf00      	nop
 800eef0:	e7fd      	b.n	800eeee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eef4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eef8:	f023 0301 	bic.w	r3, r3, #1
 800eefc:	b2da      	uxtb	r2, r3
 800eefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ef04:	e03d      	b.n	800ef82 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ef06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef0c:	f043 0301 	orr.w	r3, r3, #1
 800ef10:	b2da      	uxtb	r2, r3
 800ef12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ef18:	68ba      	ldr	r2, [r7, #8]
 800ef1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ef1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef20:	699b      	ldr	r3, [r3, #24]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d10b      	bne.n	800ef3e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ef26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef2a:	f383 8811 	msr	BASEPRI, r3
 800ef2e:	f3bf 8f6f 	isb	sy
 800ef32:	f3bf 8f4f 	dsb	sy
 800ef36:	617b      	str	r3, [r7, #20]
}
 800ef38:	bf00      	nop
 800ef3a:	bf00      	nop
 800ef3c:	e7fd      	b.n	800ef3a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ef3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef40:	699a      	ldr	r2, [r3, #24]
 800ef42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef44:	18d1      	adds	r1, r2, r3
 800ef46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef4c:	f7ff ff04 	bl	800ed58 <prvInsertTimerInActiveList>
					break;
 800ef50:	e017      	b.n	800ef82 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ef52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef58:	f003 0302 	and.w	r3, r3, #2
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d103      	bne.n	800ef68 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ef60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef62:	f000 fc09 	bl	800f778 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ef66:	e00c      	b.n	800ef82 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef6e:	f023 0301 	bic.w	r3, r3, #1
 800ef72:	b2da      	uxtb	r2, r3
 800ef74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ef7a:	e002      	b.n	800ef82 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ef7c:	bf00      	nop
 800ef7e:	e000      	b.n	800ef82 <prvProcessReceivedCommands+0x1a6>
					break;
 800ef80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef82:	4b08      	ldr	r3, [pc, #32]	@ (800efa4 <prvProcessReceivedCommands+0x1c8>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	1d39      	adds	r1, r7, #4
 800ef88:	2200      	movs	r2, #0
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7fd ff5c 	bl	800ce48 <xQueueReceive>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	f47f af26 	bne.w	800ede4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ef98:	bf00      	nop
 800ef9a:	bf00      	nop
 800ef9c:	3730      	adds	r7, #48	@ 0x30
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	20001950 	.word	0x20001950

0800efa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b088      	sub	sp, #32
 800efac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efae:	e049      	b.n	800f044 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efb0:	4b2e      	ldr	r3, [pc, #184]	@ (800f06c <prvSwitchTimerLists+0xc4>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efba:	4b2c      	ldr	r3, [pc, #176]	@ (800f06c <prvSwitchTimerLists+0xc4>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	68db      	ldr	r3, [r3, #12]
 800efc0:	68db      	ldr	r3, [r3, #12]
 800efc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	3304      	adds	r3, #4
 800efc8:	4618      	mov	r0, r3
 800efca:	f7fd fb2f 	bl	800c62c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	6a1b      	ldr	r3, [r3, #32]
 800efd2:	68f8      	ldr	r0, [r7, #12]
 800efd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800efdc:	f003 0304 	and.w	r3, r3, #4
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d02f      	beq.n	800f044 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	699b      	ldr	r3, [r3, #24]
 800efe8:	693a      	ldr	r2, [r7, #16]
 800efea:	4413      	add	r3, r2
 800efec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800efee:	68ba      	ldr	r2, [r7, #8]
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d90e      	bls.n	800f014 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	68ba      	ldr	r2, [r7, #8]
 800effa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	68fa      	ldr	r2, [r7, #12]
 800f000:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f002:	4b1a      	ldr	r3, [pc, #104]	@ (800f06c <prvSwitchTimerLists+0xc4>)
 800f004:	681a      	ldr	r2, [r3, #0]
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	3304      	adds	r3, #4
 800f00a:	4619      	mov	r1, r3
 800f00c:	4610      	mov	r0, r2
 800f00e:	f7fd fad4 	bl	800c5ba <vListInsert>
 800f012:	e017      	b.n	800f044 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f014:	2300      	movs	r3, #0
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	2300      	movs	r3, #0
 800f01a:	693a      	ldr	r2, [r7, #16]
 800f01c:	2100      	movs	r1, #0
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f7ff fd58 	bl	800ead4 <xTimerGenericCommand>
 800f024:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d10b      	bne.n	800f044 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f030:	f383 8811 	msr	BASEPRI, r3
 800f034:	f3bf 8f6f 	isb	sy
 800f038:	f3bf 8f4f 	dsb	sy
 800f03c:	603b      	str	r3, [r7, #0]
}
 800f03e:	bf00      	nop
 800f040:	bf00      	nop
 800f042:	e7fd      	b.n	800f040 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f044:	4b09      	ldr	r3, [pc, #36]	@ (800f06c <prvSwitchTimerLists+0xc4>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d1b0      	bne.n	800efb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f04e:	4b07      	ldr	r3, [pc, #28]	@ (800f06c <prvSwitchTimerLists+0xc4>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f054:	4b06      	ldr	r3, [pc, #24]	@ (800f070 <prvSwitchTimerLists+0xc8>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	4a04      	ldr	r2, [pc, #16]	@ (800f06c <prvSwitchTimerLists+0xc4>)
 800f05a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f05c:	4a04      	ldr	r2, [pc, #16]	@ (800f070 <prvSwitchTimerLists+0xc8>)
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	6013      	str	r3, [r2, #0]
}
 800f062:	bf00      	nop
 800f064:	3718      	adds	r7, #24
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	20001948 	.word	0x20001948
 800f070:	2000194c 	.word	0x2000194c

0800f074 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f07a:	f000 f98d 	bl	800f398 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f07e:	4b15      	ldr	r3, [pc, #84]	@ (800f0d4 <prvCheckForValidListAndQueue+0x60>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d120      	bne.n	800f0c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f086:	4814      	ldr	r0, [pc, #80]	@ (800f0d8 <prvCheckForValidListAndQueue+0x64>)
 800f088:	f7fd fa46 	bl	800c518 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f08c:	4813      	ldr	r0, [pc, #76]	@ (800f0dc <prvCheckForValidListAndQueue+0x68>)
 800f08e:	f7fd fa43 	bl	800c518 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f092:	4b13      	ldr	r3, [pc, #76]	@ (800f0e0 <prvCheckForValidListAndQueue+0x6c>)
 800f094:	4a10      	ldr	r2, [pc, #64]	@ (800f0d8 <prvCheckForValidListAndQueue+0x64>)
 800f096:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f098:	4b12      	ldr	r3, [pc, #72]	@ (800f0e4 <prvCheckForValidListAndQueue+0x70>)
 800f09a:	4a10      	ldr	r2, [pc, #64]	@ (800f0dc <prvCheckForValidListAndQueue+0x68>)
 800f09c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f09e:	2300      	movs	r3, #0
 800f0a0:	9300      	str	r3, [sp, #0]
 800f0a2:	4b11      	ldr	r3, [pc, #68]	@ (800f0e8 <prvCheckForValidListAndQueue+0x74>)
 800f0a4:	4a11      	ldr	r2, [pc, #68]	@ (800f0ec <prvCheckForValidListAndQueue+0x78>)
 800f0a6:	2110      	movs	r1, #16
 800f0a8:	200a      	movs	r0, #10
 800f0aa:	f7fd fb53 	bl	800c754 <xQueueGenericCreateStatic>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	4a08      	ldr	r2, [pc, #32]	@ (800f0d4 <prvCheckForValidListAndQueue+0x60>)
 800f0b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f0b4:	4b07      	ldr	r3, [pc, #28]	@ (800f0d4 <prvCheckForValidListAndQueue+0x60>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d005      	beq.n	800f0c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f0bc:	4b05      	ldr	r3, [pc, #20]	@ (800f0d4 <prvCheckForValidListAndQueue+0x60>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	490b      	ldr	r1, [pc, #44]	@ (800f0f0 <prvCheckForValidListAndQueue+0x7c>)
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fe fa80 	bl	800d5c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0c8:	f000 f998 	bl	800f3fc <vPortExitCritical>
}
 800f0cc:	bf00      	nop
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	20001950 	.word	0x20001950
 800f0d8:	20001920 	.word	0x20001920
 800f0dc:	20001934 	.word	0x20001934
 800f0e0:	20001948 	.word	0x20001948
 800f0e4:	2000194c 	.word	0x2000194c
 800f0e8:	200019fc 	.word	0x200019fc
 800f0ec:	2000195c 	.word	0x2000195c
 800f0f0:	08010cb8 	.word	0x08010cb8

0800f0f4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b086      	sub	sp, #24
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d10b      	bne.n	800f11e <pvTimerGetTimerID+0x2a>
	__asm volatile
 800f106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f10a:	f383 8811 	msr	BASEPRI, r3
 800f10e:	f3bf 8f6f 	isb	sy
 800f112:	f3bf 8f4f 	dsb	sy
 800f116:	60fb      	str	r3, [r7, #12]
}
 800f118:	bf00      	nop
 800f11a:	bf00      	nop
 800f11c:	e7fd      	b.n	800f11a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800f11e:	f000 f93b 	bl	800f398 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	69db      	ldr	r3, [r3, #28]
 800f126:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f128:	f000 f968 	bl	800f3fc <vPortExitCritical>

	return pvReturn;
 800f12c:	693b      	ldr	r3, [r7, #16]
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3718      	adds	r7, #24
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
	...

0800f138 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f138:	b480      	push	{r7}
 800f13a:	b085      	sub	sp, #20
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	60b9      	str	r1, [r7, #8]
 800f142:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	3b04      	subs	r3, #4
 800f148:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f150:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	3b04      	subs	r3, #4
 800f156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	f023 0201 	bic.w	r2, r3, #1
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	3b04      	subs	r3, #4
 800f166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f168:	4a0c      	ldr	r2, [pc, #48]	@ (800f19c <pxPortInitialiseStack+0x64>)
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	3b14      	subs	r3, #20
 800f172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f174:	687a      	ldr	r2, [r7, #4]
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	3b04      	subs	r3, #4
 800f17e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f06f 0202 	mvn.w	r2, #2
 800f186:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	3b20      	subs	r3, #32
 800f18c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f18e:	68fb      	ldr	r3, [r7, #12]
}
 800f190:	4618      	mov	r0, r3
 800f192:	3714      	adds	r7, #20
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr
 800f19c:	0800f1a1 	.word	0x0800f1a1

0800f1a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b085      	sub	sp, #20
 800f1a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f1aa:	4b13      	ldr	r3, [pc, #76]	@ (800f1f8 <prvTaskExitError+0x58>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b2:	d00b      	beq.n	800f1cc <prvTaskExitError+0x2c>
	__asm volatile
 800f1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1b8:	f383 8811 	msr	BASEPRI, r3
 800f1bc:	f3bf 8f6f 	isb	sy
 800f1c0:	f3bf 8f4f 	dsb	sy
 800f1c4:	60fb      	str	r3, [r7, #12]
}
 800f1c6:	bf00      	nop
 800f1c8:	bf00      	nop
 800f1ca:	e7fd      	b.n	800f1c8 <prvTaskExitError+0x28>
	__asm volatile
 800f1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1d0:	f383 8811 	msr	BASEPRI, r3
 800f1d4:	f3bf 8f6f 	isb	sy
 800f1d8:	f3bf 8f4f 	dsb	sy
 800f1dc:	60bb      	str	r3, [r7, #8]
}
 800f1de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f1e0:	bf00      	nop
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d0fc      	beq.n	800f1e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f1e8:	bf00      	nop
 800f1ea:	bf00      	nop
 800f1ec:	3714      	adds	r7, #20
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr
 800f1f6:	bf00      	nop
 800f1f8:	2000061c 	.word	0x2000061c
 800f1fc:	00000000 	.word	0x00000000

0800f200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f200:	4b07      	ldr	r3, [pc, #28]	@ (800f220 <pxCurrentTCBConst2>)
 800f202:	6819      	ldr	r1, [r3, #0]
 800f204:	6808      	ldr	r0, [r1, #0]
 800f206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f20a:	f380 8809 	msr	PSP, r0
 800f20e:	f3bf 8f6f 	isb	sy
 800f212:	f04f 0000 	mov.w	r0, #0
 800f216:	f380 8811 	msr	BASEPRI, r0
 800f21a:	4770      	bx	lr
 800f21c:	f3af 8000 	nop.w

0800f220 <pxCurrentTCBConst2>:
 800f220:	20001420 	.word	0x20001420
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f224:	bf00      	nop
 800f226:	bf00      	nop

0800f228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f228:	4808      	ldr	r0, [pc, #32]	@ (800f24c <prvPortStartFirstTask+0x24>)
 800f22a:	6800      	ldr	r0, [r0, #0]
 800f22c:	6800      	ldr	r0, [r0, #0]
 800f22e:	f380 8808 	msr	MSP, r0
 800f232:	f04f 0000 	mov.w	r0, #0
 800f236:	f380 8814 	msr	CONTROL, r0
 800f23a:	b662      	cpsie	i
 800f23c:	b661      	cpsie	f
 800f23e:	f3bf 8f4f 	dsb	sy
 800f242:	f3bf 8f6f 	isb	sy
 800f246:	df00      	svc	0
 800f248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f24a:	bf00      	nop
 800f24c:	e000ed08 	.word	0xe000ed08

0800f250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b086      	sub	sp, #24
 800f254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f256:	4b47      	ldr	r3, [pc, #284]	@ (800f374 <xPortStartScheduler+0x124>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	4a47      	ldr	r2, [pc, #284]	@ (800f378 <xPortStartScheduler+0x128>)
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d10b      	bne.n	800f278 <xPortStartScheduler+0x28>
	__asm volatile
 800f260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f264:	f383 8811 	msr	BASEPRI, r3
 800f268:	f3bf 8f6f 	isb	sy
 800f26c:	f3bf 8f4f 	dsb	sy
 800f270:	613b      	str	r3, [r7, #16]
}
 800f272:	bf00      	nop
 800f274:	bf00      	nop
 800f276:	e7fd      	b.n	800f274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f278:	4b3e      	ldr	r3, [pc, #248]	@ (800f374 <xPortStartScheduler+0x124>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	4a3f      	ldr	r2, [pc, #252]	@ (800f37c <xPortStartScheduler+0x12c>)
 800f27e:	4293      	cmp	r3, r2
 800f280:	d10b      	bne.n	800f29a <xPortStartScheduler+0x4a>
	__asm volatile
 800f282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f286:	f383 8811 	msr	BASEPRI, r3
 800f28a:	f3bf 8f6f 	isb	sy
 800f28e:	f3bf 8f4f 	dsb	sy
 800f292:	60fb      	str	r3, [r7, #12]
}
 800f294:	bf00      	nop
 800f296:	bf00      	nop
 800f298:	e7fd      	b.n	800f296 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f29a:	4b39      	ldr	r3, [pc, #228]	@ (800f380 <xPortStartScheduler+0x130>)
 800f29c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	22ff      	movs	r2, #255	@ 0xff
 800f2aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	b2db      	uxtb	r3, r3
 800f2b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f2b4:	78fb      	ldrb	r3, [r7, #3]
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f2bc:	b2da      	uxtb	r2, r3
 800f2be:	4b31      	ldr	r3, [pc, #196]	@ (800f384 <xPortStartScheduler+0x134>)
 800f2c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f2c2:	4b31      	ldr	r3, [pc, #196]	@ (800f388 <xPortStartScheduler+0x138>)
 800f2c4:	2207      	movs	r2, #7
 800f2c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f2c8:	e009      	b.n	800f2de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f2ca:	4b2f      	ldr	r3, [pc, #188]	@ (800f388 <xPortStartScheduler+0x138>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	3b01      	subs	r3, #1
 800f2d0:	4a2d      	ldr	r2, [pc, #180]	@ (800f388 <xPortStartScheduler+0x138>)
 800f2d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f2d4:	78fb      	ldrb	r3, [r7, #3]
 800f2d6:	b2db      	uxtb	r3, r3
 800f2d8:	005b      	lsls	r3, r3, #1
 800f2da:	b2db      	uxtb	r3, r3
 800f2dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f2de:	78fb      	ldrb	r3, [r7, #3]
 800f2e0:	b2db      	uxtb	r3, r3
 800f2e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f2e6:	2b80      	cmp	r3, #128	@ 0x80
 800f2e8:	d0ef      	beq.n	800f2ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f2ea:	4b27      	ldr	r3, [pc, #156]	@ (800f388 <xPortStartScheduler+0x138>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f1c3 0307 	rsb	r3, r3, #7
 800f2f2:	2b04      	cmp	r3, #4
 800f2f4:	d00b      	beq.n	800f30e <xPortStartScheduler+0xbe>
	__asm volatile
 800f2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2fa:	f383 8811 	msr	BASEPRI, r3
 800f2fe:	f3bf 8f6f 	isb	sy
 800f302:	f3bf 8f4f 	dsb	sy
 800f306:	60bb      	str	r3, [r7, #8]
}
 800f308:	bf00      	nop
 800f30a:	bf00      	nop
 800f30c:	e7fd      	b.n	800f30a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f30e:	4b1e      	ldr	r3, [pc, #120]	@ (800f388 <xPortStartScheduler+0x138>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	021b      	lsls	r3, r3, #8
 800f314:	4a1c      	ldr	r2, [pc, #112]	@ (800f388 <xPortStartScheduler+0x138>)
 800f316:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f318:	4b1b      	ldr	r3, [pc, #108]	@ (800f388 <xPortStartScheduler+0x138>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f320:	4a19      	ldr	r2, [pc, #100]	@ (800f388 <xPortStartScheduler+0x138>)
 800f322:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	b2da      	uxtb	r2, r3
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f32c:	4b17      	ldr	r3, [pc, #92]	@ (800f38c <xPortStartScheduler+0x13c>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	4a16      	ldr	r2, [pc, #88]	@ (800f38c <xPortStartScheduler+0x13c>)
 800f332:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f336:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f338:	4b14      	ldr	r3, [pc, #80]	@ (800f38c <xPortStartScheduler+0x13c>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	4a13      	ldr	r2, [pc, #76]	@ (800f38c <xPortStartScheduler+0x13c>)
 800f33e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f342:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f344:	f000 f8da 	bl	800f4fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f348:	4b11      	ldr	r3, [pc, #68]	@ (800f390 <xPortStartScheduler+0x140>)
 800f34a:	2200      	movs	r2, #0
 800f34c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f34e:	f000 f8f9 	bl	800f544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f352:	4b10      	ldr	r3, [pc, #64]	@ (800f394 <xPortStartScheduler+0x144>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	4a0f      	ldr	r2, [pc, #60]	@ (800f394 <xPortStartScheduler+0x144>)
 800f358:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f35c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f35e:	f7ff ff63 	bl	800f228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f362:	f7fe fe7d 	bl	800e060 <vTaskSwitchContext>
	prvTaskExitError();
 800f366:	f7ff ff1b 	bl	800f1a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f36a:	2300      	movs	r3, #0
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3718      	adds	r7, #24
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	e000ed00 	.word	0xe000ed00
 800f378:	410fc271 	.word	0x410fc271
 800f37c:	410fc270 	.word	0x410fc270
 800f380:	e000e400 	.word	0xe000e400
 800f384:	20001a4c 	.word	0x20001a4c
 800f388:	20001a50 	.word	0x20001a50
 800f38c:	e000ed20 	.word	0xe000ed20
 800f390:	2000061c 	.word	0x2000061c
 800f394:	e000ef34 	.word	0xe000ef34

0800f398 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f398:	b480      	push	{r7}
 800f39a:	b083      	sub	sp, #12
 800f39c:	af00      	add	r7, sp, #0
	__asm volatile
 800f39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3a2:	f383 8811 	msr	BASEPRI, r3
 800f3a6:	f3bf 8f6f 	isb	sy
 800f3aa:	f3bf 8f4f 	dsb	sy
 800f3ae:	607b      	str	r3, [r7, #4]
}
 800f3b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f3b2:	4b10      	ldr	r3, [pc, #64]	@ (800f3f4 <vPortEnterCritical+0x5c>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	3301      	adds	r3, #1
 800f3b8:	4a0e      	ldr	r2, [pc, #56]	@ (800f3f4 <vPortEnterCritical+0x5c>)
 800f3ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800f3f4 <vPortEnterCritical+0x5c>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d110      	bne.n	800f3e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f3c4:	4b0c      	ldr	r3, [pc, #48]	@ (800f3f8 <vPortEnterCritical+0x60>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	b2db      	uxtb	r3, r3
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d00b      	beq.n	800f3e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800f3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3d2:	f383 8811 	msr	BASEPRI, r3
 800f3d6:	f3bf 8f6f 	isb	sy
 800f3da:	f3bf 8f4f 	dsb	sy
 800f3de:	603b      	str	r3, [r7, #0]
}
 800f3e0:	bf00      	nop
 800f3e2:	bf00      	nop
 800f3e4:	e7fd      	b.n	800f3e2 <vPortEnterCritical+0x4a>
	}
}
 800f3e6:	bf00      	nop
 800f3e8:	370c      	adds	r7, #12
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f0:	4770      	bx	lr
 800f3f2:	bf00      	nop
 800f3f4:	2000061c 	.word	0x2000061c
 800f3f8:	e000ed04 	.word	0xe000ed04

0800f3fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b083      	sub	sp, #12
 800f400:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f402:	4b12      	ldr	r3, [pc, #72]	@ (800f44c <vPortExitCritical+0x50>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d10b      	bne.n	800f422 <vPortExitCritical+0x26>
	__asm volatile
 800f40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f40e:	f383 8811 	msr	BASEPRI, r3
 800f412:	f3bf 8f6f 	isb	sy
 800f416:	f3bf 8f4f 	dsb	sy
 800f41a:	607b      	str	r3, [r7, #4]
}
 800f41c:	bf00      	nop
 800f41e:	bf00      	nop
 800f420:	e7fd      	b.n	800f41e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f422:	4b0a      	ldr	r3, [pc, #40]	@ (800f44c <vPortExitCritical+0x50>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	3b01      	subs	r3, #1
 800f428:	4a08      	ldr	r2, [pc, #32]	@ (800f44c <vPortExitCritical+0x50>)
 800f42a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f42c:	4b07      	ldr	r3, [pc, #28]	@ (800f44c <vPortExitCritical+0x50>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d105      	bne.n	800f440 <vPortExitCritical+0x44>
 800f434:	2300      	movs	r3, #0
 800f436:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	f383 8811 	msr	BASEPRI, r3
}
 800f43e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f440:	bf00      	nop
 800f442:	370c      	adds	r7, #12
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr
 800f44c:	2000061c 	.word	0x2000061c

0800f450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f450:	f3ef 8009 	mrs	r0, PSP
 800f454:	f3bf 8f6f 	isb	sy
 800f458:	4b15      	ldr	r3, [pc, #84]	@ (800f4b0 <pxCurrentTCBConst>)
 800f45a:	681a      	ldr	r2, [r3, #0]
 800f45c:	f01e 0f10 	tst.w	lr, #16
 800f460:	bf08      	it	eq
 800f462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f46a:	6010      	str	r0, [r2, #0]
 800f46c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f470:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f474:	f380 8811 	msr	BASEPRI, r0
 800f478:	f3bf 8f4f 	dsb	sy
 800f47c:	f3bf 8f6f 	isb	sy
 800f480:	f7fe fdee 	bl	800e060 <vTaskSwitchContext>
 800f484:	f04f 0000 	mov.w	r0, #0
 800f488:	f380 8811 	msr	BASEPRI, r0
 800f48c:	bc09      	pop	{r0, r3}
 800f48e:	6819      	ldr	r1, [r3, #0]
 800f490:	6808      	ldr	r0, [r1, #0]
 800f492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f496:	f01e 0f10 	tst.w	lr, #16
 800f49a:	bf08      	it	eq
 800f49c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f4a0:	f380 8809 	msr	PSP, r0
 800f4a4:	f3bf 8f6f 	isb	sy
 800f4a8:	4770      	bx	lr
 800f4aa:	bf00      	nop
 800f4ac:	f3af 8000 	nop.w

0800f4b0 <pxCurrentTCBConst>:
 800f4b0:	20001420 	.word	0x20001420
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f4b4:	bf00      	nop
 800f4b6:	bf00      	nop

0800f4b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800f4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4c2:	f383 8811 	msr	BASEPRI, r3
 800f4c6:	f3bf 8f6f 	isb	sy
 800f4ca:	f3bf 8f4f 	dsb	sy
 800f4ce:	607b      	str	r3, [r7, #4]
}
 800f4d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f4d2:	f7fe fd0b 	bl	800deec <xTaskIncrementTick>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d003      	beq.n	800f4e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f4dc:	4b06      	ldr	r3, [pc, #24]	@ (800f4f8 <xPortSysTickHandler+0x40>)
 800f4de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4e2:	601a      	str	r2, [r3, #0]
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	f383 8811 	msr	BASEPRI, r3
}
 800f4ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f4f0:	bf00      	nop
 800f4f2:	3708      	adds	r7, #8
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	e000ed04 	.word	0xe000ed04

0800f4fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f500:	4b0b      	ldr	r3, [pc, #44]	@ (800f530 <vPortSetupTimerInterrupt+0x34>)
 800f502:	2200      	movs	r2, #0
 800f504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f506:	4b0b      	ldr	r3, [pc, #44]	@ (800f534 <vPortSetupTimerInterrupt+0x38>)
 800f508:	2200      	movs	r2, #0
 800f50a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f50c:	4b0a      	ldr	r3, [pc, #40]	@ (800f538 <vPortSetupTimerInterrupt+0x3c>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	4a0a      	ldr	r2, [pc, #40]	@ (800f53c <vPortSetupTimerInterrupt+0x40>)
 800f512:	fba2 2303 	umull	r2, r3, r2, r3
 800f516:	099b      	lsrs	r3, r3, #6
 800f518:	4a09      	ldr	r2, [pc, #36]	@ (800f540 <vPortSetupTimerInterrupt+0x44>)
 800f51a:	3b01      	subs	r3, #1
 800f51c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f51e:	4b04      	ldr	r3, [pc, #16]	@ (800f530 <vPortSetupTimerInterrupt+0x34>)
 800f520:	2207      	movs	r2, #7
 800f522:	601a      	str	r2, [r3, #0]
}
 800f524:	bf00      	nop
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr
 800f52e:	bf00      	nop
 800f530:	e000e010 	.word	0xe000e010
 800f534:	e000e018 	.word	0xe000e018
 800f538:	20000294 	.word	0x20000294
 800f53c:	10624dd3 	.word	0x10624dd3
 800f540:	e000e014 	.word	0xe000e014

0800f544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f544:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f554 <vPortEnableVFP+0x10>
 800f548:	6801      	ldr	r1, [r0, #0]
 800f54a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f54e:	6001      	str	r1, [r0, #0]
 800f550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f552:	bf00      	nop
 800f554:	e000ed88 	.word	0xe000ed88

0800f558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f558:	b480      	push	{r7}
 800f55a:	b085      	sub	sp, #20
 800f55c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f55e:	f3ef 8305 	mrs	r3, IPSR
 800f562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2b0f      	cmp	r3, #15
 800f568:	d915      	bls.n	800f596 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f56a:	4a18      	ldr	r2, [pc, #96]	@ (800f5cc <vPortValidateInterruptPriority+0x74>)
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	4413      	add	r3, r2
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f574:	4b16      	ldr	r3, [pc, #88]	@ (800f5d0 <vPortValidateInterruptPriority+0x78>)
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	7afa      	ldrb	r2, [r7, #11]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d20b      	bcs.n	800f596 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f582:	f383 8811 	msr	BASEPRI, r3
 800f586:	f3bf 8f6f 	isb	sy
 800f58a:	f3bf 8f4f 	dsb	sy
 800f58e:	607b      	str	r3, [r7, #4]
}
 800f590:	bf00      	nop
 800f592:	bf00      	nop
 800f594:	e7fd      	b.n	800f592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f596:	4b0f      	ldr	r3, [pc, #60]	@ (800f5d4 <vPortValidateInterruptPriority+0x7c>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f59e:	4b0e      	ldr	r3, [pc, #56]	@ (800f5d8 <vPortValidateInterruptPriority+0x80>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d90b      	bls.n	800f5be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5aa:	f383 8811 	msr	BASEPRI, r3
 800f5ae:	f3bf 8f6f 	isb	sy
 800f5b2:	f3bf 8f4f 	dsb	sy
 800f5b6:	603b      	str	r3, [r7, #0]
}
 800f5b8:	bf00      	nop
 800f5ba:	bf00      	nop
 800f5bc:	e7fd      	b.n	800f5ba <vPortValidateInterruptPriority+0x62>
	}
 800f5be:	bf00      	nop
 800f5c0:	3714      	adds	r7, #20
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c8:	4770      	bx	lr
 800f5ca:	bf00      	nop
 800f5cc:	e000e3f0 	.word	0xe000e3f0
 800f5d0:	20001a4c 	.word	0x20001a4c
 800f5d4:	e000ed0c 	.word	0xe000ed0c
 800f5d8:	20001a50 	.word	0x20001a50

0800f5dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b08a      	sub	sp, #40	@ 0x28
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f5e8:	f7fe fbc4 	bl	800dd74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f5ec:	4b5c      	ldr	r3, [pc, #368]	@ (800f760 <pvPortMalloc+0x184>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d101      	bne.n	800f5f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f5f4:	f000 f924 	bl	800f840 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f5f8:	4b5a      	ldr	r3, [pc, #360]	@ (800f764 <pvPortMalloc+0x188>)
 800f5fa:	681a      	ldr	r2, [r3, #0]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4013      	ands	r3, r2
 800f600:	2b00      	cmp	r3, #0
 800f602:	f040 8095 	bne.w	800f730 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d01e      	beq.n	800f64a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f60c:	2208      	movs	r2, #8
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	4413      	add	r3, r2
 800f612:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f003 0307 	and.w	r3, r3, #7
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d015      	beq.n	800f64a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f023 0307 	bic.w	r3, r3, #7
 800f624:	3308      	adds	r3, #8
 800f626:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f003 0307 	and.w	r3, r3, #7
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d00b      	beq.n	800f64a <pvPortMalloc+0x6e>
	__asm volatile
 800f632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f636:	f383 8811 	msr	BASEPRI, r3
 800f63a:	f3bf 8f6f 	isb	sy
 800f63e:	f3bf 8f4f 	dsb	sy
 800f642:	617b      	str	r3, [r7, #20]
}
 800f644:	bf00      	nop
 800f646:	bf00      	nop
 800f648:	e7fd      	b.n	800f646 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d06f      	beq.n	800f730 <pvPortMalloc+0x154>
 800f650:	4b45      	ldr	r3, [pc, #276]	@ (800f768 <pvPortMalloc+0x18c>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	687a      	ldr	r2, [r7, #4]
 800f656:	429a      	cmp	r2, r3
 800f658:	d86a      	bhi.n	800f730 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f65a:	4b44      	ldr	r3, [pc, #272]	@ (800f76c <pvPortMalloc+0x190>)
 800f65c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f65e:	4b43      	ldr	r3, [pc, #268]	@ (800f76c <pvPortMalloc+0x190>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f664:	e004      	b.n	800f670 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f668:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	687a      	ldr	r2, [r7, #4]
 800f676:	429a      	cmp	r2, r3
 800f678:	d903      	bls.n	800f682 <pvPortMalloc+0xa6>
 800f67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d1f1      	bne.n	800f666 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f682:	4b37      	ldr	r3, [pc, #220]	@ (800f760 <pvPortMalloc+0x184>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f688:	429a      	cmp	r2, r3
 800f68a:	d051      	beq.n	800f730 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f68c:	6a3b      	ldr	r3, [r7, #32]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	2208      	movs	r2, #8
 800f692:	4413      	add	r3, r2
 800f694:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	6a3b      	ldr	r3, [r7, #32]
 800f69c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6a0:	685a      	ldr	r2, [r3, #4]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	1ad2      	subs	r2, r2, r3
 800f6a6:	2308      	movs	r3, #8
 800f6a8:	005b      	lsls	r3, r3, #1
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d920      	bls.n	800f6f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f6ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	f003 0307 	and.w	r3, r3, #7
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d00b      	beq.n	800f6d8 <pvPortMalloc+0xfc>
	__asm volatile
 800f6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6c4:	f383 8811 	msr	BASEPRI, r3
 800f6c8:	f3bf 8f6f 	isb	sy
 800f6cc:	f3bf 8f4f 	dsb	sy
 800f6d0:	613b      	str	r3, [r7, #16]
}
 800f6d2:	bf00      	nop
 800f6d4:	bf00      	nop
 800f6d6:	e7fd      	b.n	800f6d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6da:	685a      	ldr	r2, [r3, #4]
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	1ad2      	subs	r2, r2, r3
 800f6e0:	69bb      	ldr	r3, [r7, #24]
 800f6e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f6ea:	69b8      	ldr	r0, [r7, #24]
 800f6ec:	f000 f90a 	bl	800f904 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f6f0:	4b1d      	ldr	r3, [pc, #116]	@ (800f768 <pvPortMalloc+0x18c>)
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	1ad3      	subs	r3, r2, r3
 800f6fa:	4a1b      	ldr	r2, [pc, #108]	@ (800f768 <pvPortMalloc+0x18c>)
 800f6fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f6fe:	4b1a      	ldr	r3, [pc, #104]	@ (800f768 <pvPortMalloc+0x18c>)
 800f700:	681a      	ldr	r2, [r3, #0]
 800f702:	4b1b      	ldr	r3, [pc, #108]	@ (800f770 <pvPortMalloc+0x194>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	429a      	cmp	r2, r3
 800f708:	d203      	bcs.n	800f712 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f70a:	4b17      	ldr	r3, [pc, #92]	@ (800f768 <pvPortMalloc+0x18c>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	4a18      	ldr	r2, [pc, #96]	@ (800f770 <pvPortMalloc+0x194>)
 800f710:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f714:	685a      	ldr	r2, [r3, #4]
 800f716:	4b13      	ldr	r3, [pc, #76]	@ (800f764 <pvPortMalloc+0x188>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	431a      	orrs	r2, r3
 800f71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f71e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f722:	2200      	movs	r2, #0
 800f724:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f726:	4b13      	ldr	r3, [pc, #76]	@ (800f774 <pvPortMalloc+0x198>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	3301      	adds	r3, #1
 800f72c:	4a11      	ldr	r2, [pc, #68]	@ (800f774 <pvPortMalloc+0x198>)
 800f72e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f730:	f7fe fb2e 	bl	800dd90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f734:	69fb      	ldr	r3, [r7, #28]
 800f736:	f003 0307 	and.w	r3, r3, #7
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d00b      	beq.n	800f756 <pvPortMalloc+0x17a>
	__asm volatile
 800f73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f742:	f383 8811 	msr	BASEPRI, r3
 800f746:	f3bf 8f6f 	isb	sy
 800f74a:	f3bf 8f4f 	dsb	sy
 800f74e:	60fb      	str	r3, [r7, #12]
}
 800f750:	bf00      	nop
 800f752:	bf00      	nop
 800f754:	e7fd      	b.n	800f752 <pvPortMalloc+0x176>
	return pvReturn;
 800f756:	69fb      	ldr	r3, [r7, #28]
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3728      	adds	r7, #40	@ 0x28
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}
 800f760:	2000925c 	.word	0x2000925c
 800f764:	20009270 	.word	0x20009270
 800f768:	20009260 	.word	0x20009260
 800f76c:	20009254 	.word	0x20009254
 800f770:	20009264 	.word	0x20009264
 800f774:	20009268 	.word	0x20009268

0800f778 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b086      	sub	sp, #24
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d04f      	beq.n	800f82a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f78a:	2308      	movs	r3, #8
 800f78c:	425b      	negs	r3, r3
 800f78e:	697a      	ldr	r2, [r7, #20]
 800f790:	4413      	add	r3, r2
 800f792:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	685a      	ldr	r2, [r3, #4]
 800f79c:	4b25      	ldr	r3, [pc, #148]	@ (800f834 <vPortFree+0xbc>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4013      	ands	r3, r2
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d10b      	bne.n	800f7be <vPortFree+0x46>
	__asm volatile
 800f7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7aa:	f383 8811 	msr	BASEPRI, r3
 800f7ae:	f3bf 8f6f 	isb	sy
 800f7b2:	f3bf 8f4f 	dsb	sy
 800f7b6:	60fb      	str	r3, [r7, #12]
}
 800f7b8:	bf00      	nop
 800f7ba:	bf00      	nop
 800f7bc:	e7fd      	b.n	800f7ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d00b      	beq.n	800f7de <vPortFree+0x66>
	__asm volatile
 800f7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ca:	f383 8811 	msr	BASEPRI, r3
 800f7ce:	f3bf 8f6f 	isb	sy
 800f7d2:	f3bf 8f4f 	dsb	sy
 800f7d6:	60bb      	str	r3, [r7, #8]
}
 800f7d8:	bf00      	nop
 800f7da:	bf00      	nop
 800f7dc:	e7fd      	b.n	800f7da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	685a      	ldr	r2, [r3, #4]
 800f7e2:	4b14      	ldr	r3, [pc, #80]	@ (800f834 <vPortFree+0xbc>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	4013      	ands	r3, r2
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d01e      	beq.n	800f82a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d11a      	bne.n	800f82a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	685a      	ldr	r2, [r3, #4]
 800f7f8:	4b0e      	ldr	r3, [pc, #56]	@ (800f834 <vPortFree+0xbc>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	43db      	mvns	r3, r3
 800f7fe:	401a      	ands	r2, r3
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f804:	f7fe fab6 	bl	800dd74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	685a      	ldr	r2, [r3, #4]
 800f80c:	4b0a      	ldr	r3, [pc, #40]	@ (800f838 <vPortFree+0xc0>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	4413      	add	r3, r2
 800f812:	4a09      	ldr	r2, [pc, #36]	@ (800f838 <vPortFree+0xc0>)
 800f814:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f816:	6938      	ldr	r0, [r7, #16]
 800f818:	f000 f874 	bl	800f904 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f81c:	4b07      	ldr	r3, [pc, #28]	@ (800f83c <vPortFree+0xc4>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	3301      	adds	r3, #1
 800f822:	4a06      	ldr	r2, [pc, #24]	@ (800f83c <vPortFree+0xc4>)
 800f824:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f826:	f7fe fab3 	bl	800dd90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f82a:	bf00      	nop
 800f82c:	3718      	adds	r7, #24
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
 800f832:	bf00      	nop
 800f834:	20009270 	.word	0x20009270
 800f838:	20009260 	.word	0x20009260
 800f83c:	2000926c 	.word	0x2000926c

0800f840 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f840:	b480      	push	{r7}
 800f842:	b085      	sub	sp, #20
 800f844:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f846:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800f84a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f84c:	4b27      	ldr	r3, [pc, #156]	@ (800f8ec <prvHeapInit+0xac>)
 800f84e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	f003 0307 	and.w	r3, r3, #7
 800f856:	2b00      	cmp	r3, #0
 800f858:	d00c      	beq.n	800f874 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	3307      	adds	r3, #7
 800f85e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f023 0307 	bic.w	r3, r3, #7
 800f866:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f868:	68ba      	ldr	r2, [r7, #8]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	1ad3      	subs	r3, r2, r3
 800f86e:	4a1f      	ldr	r2, [pc, #124]	@ (800f8ec <prvHeapInit+0xac>)
 800f870:	4413      	add	r3, r2
 800f872:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f878:	4a1d      	ldr	r2, [pc, #116]	@ (800f8f0 <prvHeapInit+0xb0>)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f87e:	4b1c      	ldr	r3, [pc, #112]	@ (800f8f0 <prvHeapInit+0xb0>)
 800f880:	2200      	movs	r2, #0
 800f882:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	68ba      	ldr	r2, [r7, #8]
 800f888:	4413      	add	r3, r2
 800f88a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f88c:	2208      	movs	r2, #8
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	1a9b      	subs	r3, r3, r2
 800f892:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	f023 0307 	bic.w	r3, r3, #7
 800f89a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	4a15      	ldr	r2, [pc, #84]	@ (800f8f4 <prvHeapInit+0xb4>)
 800f8a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f8a2:	4b14      	ldr	r3, [pc, #80]	@ (800f8f4 <prvHeapInit+0xb4>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f8aa:	4b12      	ldr	r3, [pc, #72]	@ (800f8f4 <prvHeapInit+0xb4>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	68fa      	ldr	r2, [r7, #12]
 800f8ba:	1ad2      	subs	r2, r2, r3
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f8c0:	4b0c      	ldr	r3, [pc, #48]	@ (800f8f4 <prvHeapInit+0xb4>)
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	685b      	ldr	r3, [r3, #4]
 800f8cc:	4a0a      	ldr	r2, [pc, #40]	@ (800f8f8 <prvHeapInit+0xb8>)
 800f8ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	685b      	ldr	r3, [r3, #4]
 800f8d4:	4a09      	ldr	r2, [pc, #36]	@ (800f8fc <prvHeapInit+0xbc>)
 800f8d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f8d8:	4b09      	ldr	r3, [pc, #36]	@ (800f900 <prvHeapInit+0xc0>)
 800f8da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f8de:	601a      	str	r2, [r3, #0]
}
 800f8e0:	bf00      	nop
 800f8e2:	3714      	adds	r7, #20
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr
 800f8ec:	20001a54 	.word	0x20001a54
 800f8f0:	20009254 	.word	0x20009254
 800f8f4:	2000925c 	.word	0x2000925c
 800f8f8:	20009264 	.word	0x20009264
 800f8fc:	20009260 	.word	0x20009260
 800f900:	20009270 	.word	0x20009270

0800f904 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f904:	b480      	push	{r7}
 800f906:	b085      	sub	sp, #20
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f90c:	4b28      	ldr	r3, [pc, #160]	@ (800f9b0 <prvInsertBlockIntoFreeList+0xac>)
 800f90e:	60fb      	str	r3, [r7, #12]
 800f910:	e002      	b.n	800f918 <prvInsertBlockIntoFreeList+0x14>
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	60fb      	str	r3, [r7, #12]
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	687a      	ldr	r2, [r7, #4]
 800f91e:	429a      	cmp	r2, r3
 800f920:	d8f7      	bhi.n	800f912 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	685b      	ldr	r3, [r3, #4]
 800f92a:	68ba      	ldr	r2, [r7, #8]
 800f92c:	4413      	add	r3, r2
 800f92e:	687a      	ldr	r2, [r7, #4]
 800f930:	429a      	cmp	r2, r3
 800f932:	d108      	bne.n	800f946 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	685a      	ldr	r2, [r3, #4]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	441a      	add	r2, r3
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	68ba      	ldr	r2, [r7, #8]
 800f950:	441a      	add	r2, r3
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	429a      	cmp	r2, r3
 800f958:	d118      	bne.n	800f98c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	681a      	ldr	r2, [r3, #0]
 800f95e:	4b15      	ldr	r3, [pc, #84]	@ (800f9b4 <prvInsertBlockIntoFreeList+0xb0>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	429a      	cmp	r2, r3
 800f964:	d00d      	beq.n	800f982 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	685a      	ldr	r2, [r3, #4]
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	441a      	add	r2, r3
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	681a      	ldr	r2, [r3, #0]
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	601a      	str	r2, [r3, #0]
 800f980:	e008      	b.n	800f994 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f982:	4b0c      	ldr	r3, [pc, #48]	@ (800f9b4 <prvInsertBlockIntoFreeList+0xb0>)
 800f984:	681a      	ldr	r2, [r3, #0]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	601a      	str	r2, [r3, #0]
 800f98a:	e003      	b.n	800f994 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f994:	68fa      	ldr	r2, [r7, #12]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	429a      	cmp	r2, r3
 800f99a:	d002      	beq.n	800f9a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	687a      	ldr	r2, [r7, #4]
 800f9a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9a2:	bf00      	nop
 800f9a4:	3714      	adds	r7, #20
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr
 800f9ae:	bf00      	nop
 800f9b0:	20009254 	.word	0x20009254
 800f9b4:	2000925c 	.word	0x2000925c

0800f9b8 <Kalman_Init>:
#include "../inc/KalmanFilter.h"


// Kalman Filter Initialization
void Kalman_Init(KalmanFilter *kf) {
 800f9b8:	b480      	push	{r7}
 800f9ba:	b083      	sub	sp, #12
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
    kf->Q_angle = 0.8f;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	4a13      	ldr	r2, [pc, #76]	@ (800fa10 <Kalman_Init+0x58>)
 800f9c4:	619a      	str	r2, [r3, #24]
    kf->Q_bias = 0.01f;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	4a12      	ldr	r2, [pc, #72]	@ (800fa14 <Kalman_Init+0x5c>)
 800f9ca:	61da      	str	r2, [r3, #28]
    kf->R_measure = 0.5f;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800f9d2:	621a      	str	r2, [r3, #32]
    
    kf->angle = 0.0f;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f04f 0200 	mov.w	r2, #0
 800f9da:	601a      	str	r2, [r3, #0]
    kf->bias = 0.0f;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f04f 0200 	mov.w	r2, #0
 800f9e2:	605a      	str	r2, [r3, #4]
    
    kf->P[0][0] = 0.0f;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f04f 0200 	mov.w	r2, #0
 800f9ea:	609a      	str	r2, [r3, #8]
    kf->P[0][1] = 0.0f;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f04f 0200 	mov.w	r2, #0
 800f9f2:	60da      	str	r2, [r3, #12]
    kf->P[1][0] = 0.0f;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f04f 0200 	mov.w	r2, #0
 800f9fa:	611a      	str	r2, [r3, #16]
    kf->P[1][1] = 0.0f;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f04f 0200 	mov.w	r2, #0
 800fa02:	615a      	str	r2, [r3, #20]
}
 800fa04:	bf00      	nop
 800fa06:	370c      	adds	r7, #12
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr
 800fa10:	3f4ccccd 	.word	0x3f4ccccd
 800fa14:	3c23d70a 	.word	0x3c23d70a

0800fa18 <Kalman_Update>:

// Kalman Filter Update
float_t Kalman_Update(KalmanFilter *kf, float_t new_angle, float_t new_rate, float_t dt) {
 800fa18:	b480      	push	{r7}
 800fa1a:	b08d      	sub	sp, #52	@ 0x34
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	60f8      	str	r0, [r7, #12]
 800fa20:	ed87 0a02 	vstr	s0, [r7, #8]
 800fa24:	edc7 0a01 	vstr	s1, [r7, #4]
 800fa28:	ed87 1a00 	vstr	s2, [r7]
    // Prediction step
    float_t rate = new_rate - kf->bias;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	edd3 7a01 	vldr	s15, [r3, #4]
 800fa32:	ed97 7a01 	vldr	s14, [r7, #4]
 800fa36:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa3a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    kf->angle += dt * rate;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	ed93 7a00 	vldr	s14, [r3]
 800fa44:	edd7 6a00 	vldr	s13, [r7]
 800fa48:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800fa4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fa50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	edc3 7a00 	vstr	s15, [r3]
    
    // Update error covariance
    kf->P[0][0] += dt * (dt*kf->P[1][1] - kf->P[0][1] - kf->P[1][0] + kf->Q_angle);
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	ed93 7a02 	vldr	s14, [r3, #8]
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	edd3 6a05 	vldr	s13, [r3, #20]
 800fa66:	edd7 7a00 	vldr	s15, [r7]
 800fa6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	edd3 7a03 	vldr	s15, [r3, #12]
 800fa74:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	edd3 7a04 	vldr	s15, [r3, #16]
 800fa7e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	edd3 7a06 	vldr	s15, [r3, #24]
 800fa88:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800fa8c:	edd7 7a00 	vldr	s15, [r7]
 800fa90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fa94:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->P[0][1] -= dt * kf->P[1][1];
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	ed93 7a03 	vldr	s14, [r3, #12]
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	edd3 6a05 	vldr	s13, [r3, #20]
 800faaa:	edd7 7a00 	vldr	s15, [r7]
 800faae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->P[1][0] -= dt * kf->P[1][1];
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	ed93 7a04 	vldr	s14, [r3, #16]
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	edd3 6a05 	vldr	s13, [r3, #20]
 800fac8:	edd7 7a00 	vldr	s15, [r7]
 800facc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][1] += kf->Q_bias * dt;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	ed93 7a05 	vldr	s14, [r3, #20]
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	edd3 6a07 	vldr	s13, [r3, #28]
 800fae6:	edd7 7a00 	vldr	s15, [r7]
 800faea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800faee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	edc3 7a05 	vstr	s15, [r3, #20]
    
    // Calculate innovation
    float_t y = new_angle - kf->angle;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	edd3 7a00 	vldr	s15, [r3]
 800fafe:	ed97 7a02 	vldr	s14, [r7, #8]
 800fb02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb06:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    // Normalize angle difference
    if(y > 180.0f) y -= 360.0f;
 800fb0a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800fb0e:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800fc54 <Kalman_Update+0x23c>
 800fb12:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fb16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb1a:	dd08      	ble.n	800fb2e <Kalman_Update+0x116>
 800fb1c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800fb20:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800fc58 <Kalman_Update+0x240>
 800fb24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb28:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800fb2c:	e010      	b.n	800fb50 <Kalman_Update+0x138>
    else if(y < -180.0f) y += 360.0f;
 800fb2e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800fb32:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800fc5c <Kalman_Update+0x244>
 800fb36:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fb3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb3e:	d507      	bpl.n	800fb50 <Kalman_Update+0x138>
 800fb40:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800fb44:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800fc58 <Kalman_Update+0x240>
 800fb48:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fb4c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    
    // Calculate Kalman gain
    float_t S = kf->P[0][0] + kf->R_measure;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	ed93 7a02 	vldr	s14, [r3, #8]
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	edd3 7a08 	vldr	s15, [r3, #32]
 800fb5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb60:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float_t K[2];
    K[0] = kf->P[0][0] / S;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	edd3 6a02 	vldr	s13, [r3, #8]
 800fb6a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800fb6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb72:	edc7 7a05 	vstr	s15, [r7, #20]
    K[1] = kf->P[1][0] / S;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	edd3 6a04 	vldr	s13, [r3, #16]
 800fb7c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800fb80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb84:	edc7 7a06 	vstr	s15, [r7, #24]
    
    // Update state and covariance
    kf->angle += K[0] * y;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	ed93 7a00 	vldr	s14, [r3]
 800fb8e:	edd7 6a05 	vldr	s13, [r7, #20]
 800fb92:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800fb96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	edc3 7a00 	vstr	s15, [r3]
    kf->bias += K[1] * y;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	ed93 7a01 	vldr	s14, [r3, #4]
 800fbaa:	edd7 6a06 	vldr	s13, [r7, #24]
 800fbae:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800fbb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fbb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	edc3 7a01 	vstr	s15, [r3, #4]
    
    float_t P00_temp = kf->P[0][0];
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	689b      	ldr	r3, [r3, #8]
 800fbc4:	623b      	str	r3, [r7, #32]
    float_t P01_temp = kf->P[0][1];
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	68db      	ldr	r3, [r3, #12]
 800fbca:	61fb      	str	r3, [r7, #28]
    
    kf->P[0][0] -= K[0] * P00_temp;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	ed93 7a02 	vldr	s14, [r3, #8]
 800fbd2:	edd7 6a05 	vldr	s13, [r7, #20]
 800fbd6:	edd7 7a08 	vldr	s15, [r7, #32]
 800fbda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fbde:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->P[0][1] -= K[0] * P01_temp;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	ed93 7a03 	vldr	s14, [r3, #12]
 800fbee:	edd7 6a05 	vldr	s13, [r7, #20]
 800fbf2:	edd7 7a07 	vldr	s15, [r7, #28]
 800fbf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fbfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->P[1][0] -= K[1] * P00_temp;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	ed93 7a04 	vldr	s14, [r3, #16]
 800fc0a:	edd7 6a06 	vldr	s13, [r7, #24]
 800fc0e:	edd7 7a08 	vldr	s15, [r7, #32]
 800fc12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fc16:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][1] -= K[1] * P01_temp;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	ed93 7a05 	vldr	s14, [r3, #20]
 800fc26:	edd7 6a06 	vldr	s13, [r7, #24]
 800fc2a:	edd7 7a07 	vldr	s15, [r7, #28]
 800fc2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fc32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	edc3 7a05 	vstr	s15, [r3, #20]
    
    return kf->angle;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	ee07 3a90 	vmov	s15, r3
 800fc44:	eeb0 0a67 	vmov.f32	s0, s15
 800fc48:	3734      	adds	r7, #52	@ 0x34
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr
 800fc52:	bf00      	nop
 800fc54:	43340000 	.word	0x43340000
 800fc58:	43b40000 	.word	0x43b40000
 800fc5c:	c3340000 	.word	0xc3340000

0800fc60 <PID_Init>:
#include "../inc/PID.h"

void PID_Init(PID_Controller *pid, float_t Kp, float_t Ki, float_t Kd, float_t N, float_t dt, float_t outputMin, float_t outputMax) {
 800fc60:	b480      	push	{r7}
 800fc62:	b089      	sub	sp, #36	@ 0x24
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	61f8      	str	r0, [r7, #28]
 800fc68:	ed87 0a06 	vstr	s0, [r7, #24]
 800fc6c:	edc7 0a05 	vstr	s1, [r7, #20]
 800fc70:	ed87 1a04 	vstr	s2, [r7, #16]
 800fc74:	edc7 1a03 	vstr	s3, [r7, #12]
 800fc78:	ed87 2a02 	vstr	s4, [r7, #8]
 800fc7c:	edc7 2a01 	vstr	s5, [r7, #4]
 800fc80:	ed87 3a00 	vstr	s6, [r7]
    pid->Kp = Kp;
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	69ba      	ldr	r2, [r7, #24]
 800fc88:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	697a      	ldr	r2, [r7, #20]
 800fc8e:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 800fc90:	69fb      	ldr	r3, [r7, #28]
 800fc92:	693a      	ldr	r2, [r7, #16]
 800fc94:	609a      	str	r2, [r3, #8]
    pid->N = N;
 800fc96:	69fb      	ldr	r3, [r7, #28]
 800fc98:	68fa      	ldr	r2, [r7, #12]
 800fc9a:	60da      	str	r2, [r3, #12]
    pid->prevError = 0.0f;
 800fc9c:	69fb      	ldr	r3, [r7, #28]
 800fc9e:	f04f 0200 	mov.w	r2, #0
 800fca2:	611a      	str	r2, [r3, #16]
    pid->integral = 0.0f;
 800fca4:	69fb      	ldr	r3, [r7, #28]
 800fca6:	f04f 0200 	mov.w	r2, #0
 800fcaa:	615a      	str	r2, [r3, #20]
    pid->prevD = 0.0f;
 800fcac:	69fb      	ldr	r3, [r7, #28]
 800fcae:	f04f 0200 	mov.w	r2, #0
 800fcb2:	619a      	str	r2, [r3, #24]
    pid->dt = dt;
 800fcb4:	69fb      	ldr	r3, [r7, #28]
 800fcb6:	68ba      	ldr	r2, [r7, #8]
 800fcb8:	61da      	str	r2, [r3, #28]
	pid->outputMin = outputMin;
 800fcba:	69fb      	ldr	r3, [r7, #28]
 800fcbc:	687a      	ldr	r2, [r7, #4]
 800fcbe:	621a      	str	r2, [r3, #32]
    pid->outputMax = outputMax;
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	683a      	ldr	r2, [r7, #0]
 800fcc4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800fcc6:	bf00      	nop
 800fcc8:	3724      	adds	r7, #36	@ 0x24
 800fcca:	46bd      	mov	sp, r7
 800fccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd0:	4770      	bx	lr

0800fcd2 <PID_Compute>:

float_t PID_Compute(PID_Controller *pid, float_t setpoint, float_t measuredValue) {
 800fcd2:	b480      	push	{r7}
 800fcd4:	b08b      	sub	sp, #44	@ 0x2c
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	60f8      	str	r0, [r7, #12]
 800fcda:	ed87 0a02 	vstr	s0, [r7, #8]
 800fcde:	edc7 0a01 	vstr	s1, [r7, #4]
    // Calculate error
    float_t error = setpoint - measuredValue;
 800fce2:	ed97 7a02 	vldr	s14, [r7, #8]
 800fce6:	edd7 7a01 	vldr	s15, [r7, #4]
 800fcea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fcee:	edc7 7a08 	vstr	s15, [r7, #32]

    // Proportional term
    float_t Pout = pid->Kp * error;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	edd3 7a00 	vldr	s15, [r3]
 800fcf8:	ed97 7a08 	vldr	s14, [r7, #32]
 800fcfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd00:	edc7 7a07 	vstr	s15, [r7, #28]

    // Integral term
    pid->integral += error * pid->dt;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	ed93 7a05 	vldr	s14, [r3, #20]
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	edd3 6a07 	vldr	s13, [r3, #28]
 800fd10:	edd7 7a08 	vldr	s15, [r7, #32]
 800fd14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fd18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	edc3 7a05 	vstr	s15, [r3, #20]
    float_t Iout = pid->Ki * pid->integral;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	ed93 7a01 	vldr	s14, [r3, #4]
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	edd3 7a05 	vldr	s15, [r3, #20]
 800fd2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd32:	edc7 7a06 	vstr	s15, [r7, #24]

    // Derivative term with filtering
    float_t derivative = (error - pid->prevError) / pid->dt;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	edd3 7a04 	vldr	s15, [r3, #16]
 800fd3c:	ed97 7a08 	vldr	s14, [r7, #32]
 800fd40:	ee77 6a67 	vsub.f32	s13, s14, s15
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	ed93 7a07 	vldr	s14, [r3, #28]
 800fd4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd4e:	edc7 7a05 	vstr	s15, [r7, #20]
    float_t Dout = pid->Kd * ((pid->N * derivative - pid->prevD) / (1.0f + pid->N * pid->dt));
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	ed93 7a02 	vldr	s14, [r3, #8]
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	edd3 6a03 	vldr	s13, [r3, #12]
 800fd5e:	edd7 7a05 	vldr	s15, [r7, #20]
 800fd62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	edd3 7a06 	vldr	s15, [r3, #24]
 800fd6c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	edd3 6a03 	vldr	s13, [r3, #12]
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	edd3 7a07 	vldr	s15, [r3, #28]
 800fd7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fd80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd84:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800fd88:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800fd8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd90:	edc7 7a04 	vstr	s15, [r7, #16]

    // Update previous values
    pid->prevError = error;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	6a3a      	ldr	r2, [r7, #32]
 800fd98:	611a      	str	r2, [r3, #16]
    pid->prevD = Dout;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	693a      	ldr	r2, [r7, #16]
 800fd9e:	619a      	str	r2, [r3, #24]

    // Total output
    float_t output = Pout + Iout + Dout;
 800fda0:	ed97 7a07 	vldr	s14, [r7, #28]
 800fda4:	edd7 7a06 	vldr	s15, [r7, #24]
 800fda8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fdac:	ed97 7a04 	vldr	s14, [r7, #16]
 800fdb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fdb4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Apply output limits
    if (output > pid->outputMax) {
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800fdbe:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800fdc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fdc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdca:	dd03      	ble.n	800fdd4 <PID_Compute+0x102>
        output = pid->outputMax;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdd0:	627b      	str	r3, [r7, #36]	@ 0x24
 800fdd2:	e00c      	b.n	800fdee <PID_Compute+0x11c>
    } else if (output < pid->outputMin) {
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	edd3 7a08 	vldr	s15, [r3, #32]
 800fdda:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800fdde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fde2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fde6:	d502      	bpl.n	800fdee <PID_Compute+0x11c>
        output = pid->outputMin;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	6a1b      	ldr	r3, [r3, #32]
 800fdec:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Anti-windup: Adjust integral term if output is saturated
    if (output == pid->outputMax && error > 0) {
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800fdf4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800fdf8:	eeb4 7a67 	vcmp.f32	s14, s15
 800fdfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe00:	d116      	bne.n	800fe30 <PID_Compute+0x15e>
 800fe02:	edd7 7a08 	vldr	s15, [r7, #32]
 800fe06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fe0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe0e:	dd0f      	ble.n	800fe30 <PID_Compute+0x15e>
        pid->integral -= error * pid->dt;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	ed93 7a05 	vldr	s14, [r3, #20]
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	edd3 6a07 	vldr	s13, [r3, #28]
 800fe1c:	edd7 7a08 	vldr	s15, [r7, #32]
 800fe20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	edc3 7a05 	vstr	s15, [r3, #20]
 800fe2e:	e01f      	b.n	800fe70 <PID_Compute+0x19e>
    } else if (output == pid->outputMin && error < 0) {
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	edd3 7a08 	vldr	s15, [r3, #32]
 800fe36:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800fe3a:	eeb4 7a67 	vcmp.f32	s14, s15
 800fe3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe42:	d115      	bne.n	800fe70 <PID_Compute+0x19e>
 800fe44:	edd7 7a08 	vldr	s15, [r7, #32]
 800fe48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fe4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe50:	d50e      	bpl.n	800fe70 <PID_Compute+0x19e>
        pid->integral -= error * pid->dt;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	ed93 7a05 	vldr	s14, [r3, #20]
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	edd3 6a07 	vldr	s13, [r3, #28]
 800fe5e:	edd7 7a08 	vldr	s15, [r7, #32]
 800fe62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe66:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	edc3 7a05 	vstr	s15, [r3, #20]
    }

    return output;
 800fe70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe72:	ee07 3a90 	vmov	s15, r3
 800fe76:	eeb0 0a67 	vmov.f32	s0, s15
 800fe7a:	372c      	adds	r7, #44	@ 0x2c
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe82:	4770      	bx	lr

0800fe84 <value_in_range>:
#include "../inc/diff_functionalities.h"



bool value_in_range (float_t p_Value, float_t p_Min, float_t p_Max)
{
 800fe84:	b480      	push	{r7}
 800fe86:	b085      	sub	sp, #20
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	ed87 0a03 	vstr	s0, [r7, #12]
 800fe8e:	edc7 0a02 	vstr	s1, [r7, #8]
 800fe92:	ed87 1a01 	vstr	s2, [r7, #4]
    if ((p_Min <= p_Value) && (p_Value <= p_Max))
 800fe96:	ed97 7a02 	vldr	s14, [r7, #8]
 800fe9a:	edd7 7a03 	vldr	s15, [r7, #12]
 800fe9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea6:	d80a      	bhi.n	800febe <value_in_range+0x3a>
 800fea8:	ed97 7a03 	vldr	s14, [r7, #12]
 800feac:	edd7 7a01 	vldr	s15, [r7, #4]
 800feb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800feb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb8:	d801      	bhi.n	800febe <value_in_range+0x3a>
        return true;
 800feba:	2301      	movs	r3, #1
 800febc:	e000      	b.n	800fec0 <value_in_range+0x3c>
    else
        return false;
 800febe:	2300      	movs	r3, #0
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3714      	adds	r7, #20
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr

0800fecc <min>:
    else
        return p_Value_2;
}

float_t min(float_t p_Value_1, float_t p_Value_2)
{
 800fecc:	b480      	push	{r7}
 800fece:	b083      	sub	sp, #12
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	ed87 0a01 	vstr	s0, [r7, #4]
 800fed6:	edc7 0a00 	vstr	s1, [r7]
    if (p_Value_1 < p_Value_2)
 800feda:	ed97 7a01 	vldr	s14, [r7, #4]
 800fede:	edd7 7a00 	vldr	s15, [r7]
 800fee2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feea:	d501      	bpl.n	800fef0 <min+0x24>
        return p_Value_1;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	e000      	b.n	800fef2 <min+0x26>
    else
        return p_Value_2;
 800fef0:	683b      	ldr	r3, [r7, #0]
}
 800fef2:	ee07 3a90 	vmov	s15, r3
 800fef6:	eeb0 0a67 	vmov.f32	s0, s15
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr

0800ff04 <list_create>:
#include <stdlib.h>
#include "../inc/my_list.h"

// Create a new list
List *list_create() {
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b082      	sub	sp, #8
 800ff08:	af00      	add	r7, sp, #0
    List *list = (List *)malloc(sizeof(List));
 800ff0a:	200c      	movs	r0, #12
 800ff0c:	f000 f878 	bl	8010000 <malloc>
 800ff10:	4603      	mov	r3, r0
 800ff12:	607b      	str	r3, [r7, #4]
    if (!list) return NULL;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d101      	bne.n	800ff1e <list_create+0x1a>
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	e00a      	b.n	800ff34 <list_create+0x30>
    list->head = list->tail = NULL;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2200      	movs	r2, #0
 800ff22:	605a      	str	r2, [r3, #4]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	685a      	ldr	r2, [r3, #4]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	601a      	str	r2, [r3, #0]
    list->size = 0;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	609a      	str	r2, [r3, #8]
    return list;
 800ff32:	687b      	ldr	r3, [r7, #4]
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	3708      	adds	r7, #8
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}

0800ff3c <list_append>:
    }
    free(list);
}

// Append an element to the end of the list
void list_append(List *list, void *data) {
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	6039      	str	r1, [r7, #0]
    if (!list) return;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d029      	beq.n	800ffa0 <list_append+0x64>

    Node *new_node = (Node *)malloc(sizeof(Node));
 800ff4c:	200c      	movs	r0, #12
 800ff4e:	f000 f857 	bl	8010000 <malloc>
 800ff52:	4603      	mov	r3, r0
 800ff54:	60fb      	str	r3, [r7, #12]
    if (!new_node) return;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d023      	beq.n	800ffa4 <list_append+0x68>

    new_node->data = data;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	683a      	ldr	r2, [r7, #0]
 800ff60:	601a      	str	r2, [r3, #0]
    new_node->next = NULL;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2200      	movs	r2, #0
 800ff66:	609a      	str	r2, [r3, #8]
    new_node->prev = list->tail;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	685a      	ldr	r2, [r3, #4]
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	605a      	str	r2, [r3, #4]

    if (list->tail) list->tail->next = new_node;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d003      	beq.n	800ff80 <list_append+0x44>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	685b      	ldr	r3, [r3, #4]
 800ff7c:	68fa      	ldr	r2, [r7, #12]
 800ff7e:	609a      	str	r2, [r3, #8]
    list->tail = new_node;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	68fa      	ldr	r2, [r7, #12]
 800ff84:	605a      	str	r2, [r3, #4]

    if (!list->head) list->head = new_node;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d102      	bne.n	800ff94 <list_append+0x58>
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	68fa      	ldr	r2, [r7, #12]
 800ff92:	601a      	str	r2, [r3, #0]
    list->size++;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	689b      	ldr	r3, [r3, #8]
 800ff98:	1c5a      	adds	r2, r3, #1
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	609a      	str	r2, [r3, #8]
 800ff9e:	e002      	b.n	800ffa6 <list_append+0x6a>
    if (!list) return;
 800ffa0:	bf00      	nop
 800ffa2:	e000      	b.n	800ffa6 <list_append+0x6a>
    if (!new_node) return;
 800ffa4:	bf00      	nop
}
 800ffa6:	3710      	adds	r7, #16
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <list_find>:
size_t list_size(const List *list) {
    return list ? list->size : 0;
}

// Find data based on a callback function
void *list_find(List *list, const void *data, int (*callback)(void *, const void *)) {
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b086      	sub	sp, #24
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	60f8      	str	r0, [r7, #12]
 800ffb4:	60b9      	str	r1, [r7, #8]
 800ffb6:	607a      	str	r2, [r7, #4]
    if (!list || !callback) return NULL;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d002      	beq.n	800ffc4 <list_find+0x18>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d101      	bne.n	800ffc8 <list_find+0x1c>
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	e016      	b.n	800fff6 <list_find+0x4a>

    Node *current = list->head;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	617b      	str	r3, [r7, #20]
    while (current) {
 800ffce:	e00e      	b.n	800ffee <list_find+0x42>
        if (callback(current->data, data)) {
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	68b9      	ldr	r1, [r7, #8]
 800ffd8:	4610      	mov	r0, r2
 800ffda:	4798      	blx	r3
 800ffdc:	4603      	mov	r3, r0
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d002      	beq.n	800ffe8 <list_find+0x3c>
            return current->data;
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	e006      	b.n	800fff6 <list_find+0x4a>
        }
        current = current->next;
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	689b      	ldr	r3, [r3, #8]
 800ffec:	617b      	str	r3, [r7, #20]
    while (current) {
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d1ed      	bne.n	800ffd0 <list_find+0x24>
    }
    return NULL;
 800fff4:	2300      	movs	r3, #0
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3718      	adds	r7, #24
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
	...

08010000 <malloc>:
 8010000:	4b02      	ldr	r3, [pc, #8]	@ (801000c <malloc+0xc>)
 8010002:	4601      	mov	r1, r0
 8010004:	6818      	ldr	r0, [r3, #0]
 8010006:	f000 b825 	b.w	8010054 <_malloc_r>
 801000a:	bf00      	nop
 801000c:	20000620 	.word	0x20000620

08010010 <sbrk_aligned>:
 8010010:	b570      	push	{r4, r5, r6, lr}
 8010012:	4e0f      	ldr	r6, [pc, #60]	@ (8010050 <sbrk_aligned+0x40>)
 8010014:	460c      	mov	r4, r1
 8010016:	6831      	ldr	r1, [r6, #0]
 8010018:	4605      	mov	r5, r0
 801001a:	b911      	cbnz	r1, 8010022 <sbrk_aligned+0x12>
 801001c:	f000 f8ae 	bl	801017c <_sbrk_r>
 8010020:	6030      	str	r0, [r6, #0]
 8010022:	4621      	mov	r1, r4
 8010024:	4628      	mov	r0, r5
 8010026:	f000 f8a9 	bl	801017c <_sbrk_r>
 801002a:	1c43      	adds	r3, r0, #1
 801002c:	d103      	bne.n	8010036 <sbrk_aligned+0x26>
 801002e:	f04f 34ff 	mov.w	r4, #4294967295
 8010032:	4620      	mov	r0, r4
 8010034:	bd70      	pop	{r4, r5, r6, pc}
 8010036:	1cc4      	adds	r4, r0, #3
 8010038:	f024 0403 	bic.w	r4, r4, #3
 801003c:	42a0      	cmp	r0, r4
 801003e:	d0f8      	beq.n	8010032 <sbrk_aligned+0x22>
 8010040:	1a21      	subs	r1, r4, r0
 8010042:	4628      	mov	r0, r5
 8010044:	f000 f89a 	bl	801017c <_sbrk_r>
 8010048:	3001      	adds	r0, #1
 801004a:	d1f2      	bne.n	8010032 <sbrk_aligned+0x22>
 801004c:	e7ef      	b.n	801002e <sbrk_aligned+0x1e>
 801004e:	bf00      	nop
 8010050:	20009274 	.word	0x20009274

08010054 <_malloc_r>:
 8010054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010058:	1ccd      	adds	r5, r1, #3
 801005a:	f025 0503 	bic.w	r5, r5, #3
 801005e:	3508      	adds	r5, #8
 8010060:	2d0c      	cmp	r5, #12
 8010062:	bf38      	it	cc
 8010064:	250c      	movcc	r5, #12
 8010066:	2d00      	cmp	r5, #0
 8010068:	4606      	mov	r6, r0
 801006a:	db01      	blt.n	8010070 <_malloc_r+0x1c>
 801006c:	42a9      	cmp	r1, r5
 801006e:	d904      	bls.n	801007a <_malloc_r+0x26>
 8010070:	230c      	movs	r3, #12
 8010072:	6033      	str	r3, [r6, #0]
 8010074:	2000      	movs	r0, #0
 8010076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801007a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010150 <_malloc_r+0xfc>
 801007e:	f000 f869 	bl	8010154 <__malloc_lock>
 8010082:	f8d8 3000 	ldr.w	r3, [r8]
 8010086:	461c      	mov	r4, r3
 8010088:	bb44      	cbnz	r4, 80100dc <_malloc_r+0x88>
 801008a:	4629      	mov	r1, r5
 801008c:	4630      	mov	r0, r6
 801008e:	f7ff ffbf 	bl	8010010 <sbrk_aligned>
 8010092:	1c43      	adds	r3, r0, #1
 8010094:	4604      	mov	r4, r0
 8010096:	d158      	bne.n	801014a <_malloc_r+0xf6>
 8010098:	f8d8 4000 	ldr.w	r4, [r8]
 801009c:	4627      	mov	r7, r4
 801009e:	2f00      	cmp	r7, #0
 80100a0:	d143      	bne.n	801012a <_malloc_r+0xd6>
 80100a2:	2c00      	cmp	r4, #0
 80100a4:	d04b      	beq.n	801013e <_malloc_r+0xea>
 80100a6:	6823      	ldr	r3, [r4, #0]
 80100a8:	4639      	mov	r1, r7
 80100aa:	4630      	mov	r0, r6
 80100ac:	eb04 0903 	add.w	r9, r4, r3
 80100b0:	f000 f864 	bl	801017c <_sbrk_r>
 80100b4:	4581      	cmp	r9, r0
 80100b6:	d142      	bne.n	801013e <_malloc_r+0xea>
 80100b8:	6821      	ldr	r1, [r4, #0]
 80100ba:	1a6d      	subs	r5, r5, r1
 80100bc:	4629      	mov	r1, r5
 80100be:	4630      	mov	r0, r6
 80100c0:	f7ff ffa6 	bl	8010010 <sbrk_aligned>
 80100c4:	3001      	adds	r0, #1
 80100c6:	d03a      	beq.n	801013e <_malloc_r+0xea>
 80100c8:	6823      	ldr	r3, [r4, #0]
 80100ca:	442b      	add	r3, r5
 80100cc:	6023      	str	r3, [r4, #0]
 80100ce:	f8d8 3000 	ldr.w	r3, [r8]
 80100d2:	685a      	ldr	r2, [r3, #4]
 80100d4:	bb62      	cbnz	r2, 8010130 <_malloc_r+0xdc>
 80100d6:	f8c8 7000 	str.w	r7, [r8]
 80100da:	e00f      	b.n	80100fc <_malloc_r+0xa8>
 80100dc:	6822      	ldr	r2, [r4, #0]
 80100de:	1b52      	subs	r2, r2, r5
 80100e0:	d420      	bmi.n	8010124 <_malloc_r+0xd0>
 80100e2:	2a0b      	cmp	r2, #11
 80100e4:	d917      	bls.n	8010116 <_malloc_r+0xc2>
 80100e6:	1961      	adds	r1, r4, r5
 80100e8:	42a3      	cmp	r3, r4
 80100ea:	6025      	str	r5, [r4, #0]
 80100ec:	bf18      	it	ne
 80100ee:	6059      	strne	r1, [r3, #4]
 80100f0:	6863      	ldr	r3, [r4, #4]
 80100f2:	bf08      	it	eq
 80100f4:	f8c8 1000 	streq.w	r1, [r8]
 80100f8:	5162      	str	r2, [r4, r5]
 80100fa:	604b      	str	r3, [r1, #4]
 80100fc:	4630      	mov	r0, r6
 80100fe:	f000 f82f 	bl	8010160 <__malloc_unlock>
 8010102:	f104 000b 	add.w	r0, r4, #11
 8010106:	1d23      	adds	r3, r4, #4
 8010108:	f020 0007 	bic.w	r0, r0, #7
 801010c:	1ac2      	subs	r2, r0, r3
 801010e:	bf1c      	itt	ne
 8010110:	1a1b      	subne	r3, r3, r0
 8010112:	50a3      	strne	r3, [r4, r2]
 8010114:	e7af      	b.n	8010076 <_malloc_r+0x22>
 8010116:	6862      	ldr	r2, [r4, #4]
 8010118:	42a3      	cmp	r3, r4
 801011a:	bf0c      	ite	eq
 801011c:	f8c8 2000 	streq.w	r2, [r8]
 8010120:	605a      	strne	r2, [r3, #4]
 8010122:	e7eb      	b.n	80100fc <_malloc_r+0xa8>
 8010124:	4623      	mov	r3, r4
 8010126:	6864      	ldr	r4, [r4, #4]
 8010128:	e7ae      	b.n	8010088 <_malloc_r+0x34>
 801012a:	463c      	mov	r4, r7
 801012c:	687f      	ldr	r7, [r7, #4]
 801012e:	e7b6      	b.n	801009e <_malloc_r+0x4a>
 8010130:	461a      	mov	r2, r3
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	42a3      	cmp	r3, r4
 8010136:	d1fb      	bne.n	8010130 <_malloc_r+0xdc>
 8010138:	2300      	movs	r3, #0
 801013a:	6053      	str	r3, [r2, #4]
 801013c:	e7de      	b.n	80100fc <_malloc_r+0xa8>
 801013e:	230c      	movs	r3, #12
 8010140:	6033      	str	r3, [r6, #0]
 8010142:	4630      	mov	r0, r6
 8010144:	f000 f80c 	bl	8010160 <__malloc_unlock>
 8010148:	e794      	b.n	8010074 <_malloc_r+0x20>
 801014a:	6005      	str	r5, [r0, #0]
 801014c:	e7d6      	b.n	80100fc <_malloc_r+0xa8>
 801014e:	bf00      	nop
 8010150:	20009278 	.word	0x20009278

08010154 <__malloc_lock>:
 8010154:	4801      	ldr	r0, [pc, #4]	@ (801015c <__malloc_lock+0x8>)
 8010156:	f000 b84b 	b.w	80101f0 <__retarget_lock_acquire_recursive>
 801015a:	bf00      	nop
 801015c:	200093b8 	.word	0x200093b8

08010160 <__malloc_unlock>:
 8010160:	4801      	ldr	r0, [pc, #4]	@ (8010168 <__malloc_unlock+0x8>)
 8010162:	f000 b846 	b.w	80101f2 <__retarget_lock_release_recursive>
 8010166:	bf00      	nop
 8010168:	200093b8 	.word	0x200093b8

0801016c <memset>:
 801016c:	4402      	add	r2, r0
 801016e:	4603      	mov	r3, r0
 8010170:	4293      	cmp	r3, r2
 8010172:	d100      	bne.n	8010176 <memset+0xa>
 8010174:	4770      	bx	lr
 8010176:	f803 1b01 	strb.w	r1, [r3], #1
 801017a:	e7f9      	b.n	8010170 <memset+0x4>

0801017c <_sbrk_r>:
 801017c:	b538      	push	{r3, r4, r5, lr}
 801017e:	4d06      	ldr	r5, [pc, #24]	@ (8010198 <_sbrk_r+0x1c>)
 8010180:	2300      	movs	r3, #0
 8010182:	4604      	mov	r4, r0
 8010184:	4608      	mov	r0, r1
 8010186:	602b      	str	r3, [r5, #0]
 8010188:	f7f4 fbca 	bl	8004920 <_sbrk>
 801018c:	1c43      	adds	r3, r0, #1
 801018e:	d102      	bne.n	8010196 <_sbrk_r+0x1a>
 8010190:	682b      	ldr	r3, [r5, #0]
 8010192:	b103      	cbz	r3, 8010196 <_sbrk_r+0x1a>
 8010194:	6023      	str	r3, [r4, #0]
 8010196:	bd38      	pop	{r3, r4, r5, pc}
 8010198:	200093b4 	.word	0x200093b4

0801019c <__errno>:
 801019c:	4b01      	ldr	r3, [pc, #4]	@ (80101a4 <__errno+0x8>)
 801019e:	6818      	ldr	r0, [r3, #0]
 80101a0:	4770      	bx	lr
 80101a2:	bf00      	nop
 80101a4:	20000620 	.word	0x20000620

080101a8 <__libc_init_array>:
 80101a8:	b570      	push	{r4, r5, r6, lr}
 80101aa:	4d0d      	ldr	r5, [pc, #52]	@ (80101e0 <__libc_init_array+0x38>)
 80101ac:	4c0d      	ldr	r4, [pc, #52]	@ (80101e4 <__libc_init_array+0x3c>)
 80101ae:	1b64      	subs	r4, r4, r5
 80101b0:	10a4      	asrs	r4, r4, #2
 80101b2:	2600      	movs	r6, #0
 80101b4:	42a6      	cmp	r6, r4
 80101b6:	d109      	bne.n	80101cc <__libc_init_array+0x24>
 80101b8:	4d0b      	ldr	r5, [pc, #44]	@ (80101e8 <__libc_init_array+0x40>)
 80101ba:	4c0c      	ldr	r4, [pc, #48]	@ (80101ec <__libc_init_array+0x44>)
 80101bc:	f000 fcce 	bl	8010b5c <_init>
 80101c0:	1b64      	subs	r4, r4, r5
 80101c2:	10a4      	asrs	r4, r4, #2
 80101c4:	2600      	movs	r6, #0
 80101c6:	42a6      	cmp	r6, r4
 80101c8:	d105      	bne.n	80101d6 <__libc_init_array+0x2e>
 80101ca:	bd70      	pop	{r4, r5, r6, pc}
 80101cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80101d0:	4798      	blx	r3
 80101d2:	3601      	adds	r6, #1
 80101d4:	e7ee      	b.n	80101b4 <__libc_init_array+0xc>
 80101d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80101da:	4798      	blx	r3
 80101dc:	3601      	adds	r6, #1
 80101de:	e7f2      	b.n	80101c6 <__libc_init_array+0x1e>
 80101e0:	08010fa8 	.word	0x08010fa8
 80101e4:	08010fa8 	.word	0x08010fa8
 80101e8:	08010fa8 	.word	0x08010fa8
 80101ec:	08010fac 	.word	0x08010fac

080101f0 <__retarget_lock_acquire_recursive>:
 80101f0:	4770      	bx	lr

080101f2 <__retarget_lock_release_recursive>:
 80101f2:	4770      	bx	lr

080101f4 <memcpy>:
 80101f4:	440a      	add	r2, r1
 80101f6:	4291      	cmp	r1, r2
 80101f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80101fc:	d100      	bne.n	8010200 <memcpy+0xc>
 80101fe:	4770      	bx	lr
 8010200:	b510      	push	{r4, lr}
 8010202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010206:	f803 4f01 	strb.w	r4, [r3, #1]!
 801020a:	4291      	cmp	r1, r2
 801020c:	d1f9      	bne.n	8010202 <memcpy+0xe>
 801020e:	bd10      	pop	{r4, pc}

08010210 <atan2>:
 8010210:	f000 bbde 	b.w	80109d0 <__ieee754_atan2>

08010214 <sqrt>:
 8010214:	b538      	push	{r3, r4, r5, lr}
 8010216:	ed2d 8b02 	vpush	{d8}
 801021a:	ec55 4b10 	vmov	r4, r5, d0
 801021e:	f000 f9c7 	bl	80105b0 <__ieee754_sqrt>
 8010222:	4622      	mov	r2, r4
 8010224:	462b      	mov	r3, r5
 8010226:	4620      	mov	r0, r4
 8010228:	4629      	mov	r1, r5
 801022a:	eeb0 8a40 	vmov.f32	s16, s0
 801022e:	eef0 8a60 	vmov.f32	s17, s1
 8010232:	f7f0 fc2b 	bl	8000a8c <__aeabi_dcmpun>
 8010236:	b990      	cbnz	r0, 801025e <sqrt+0x4a>
 8010238:	2200      	movs	r2, #0
 801023a:	2300      	movs	r3, #0
 801023c:	4620      	mov	r0, r4
 801023e:	4629      	mov	r1, r5
 8010240:	f7f0 fbfc 	bl	8000a3c <__aeabi_dcmplt>
 8010244:	b158      	cbz	r0, 801025e <sqrt+0x4a>
 8010246:	f7ff ffa9 	bl	801019c <__errno>
 801024a:	2321      	movs	r3, #33	@ 0x21
 801024c:	6003      	str	r3, [r0, #0]
 801024e:	2200      	movs	r2, #0
 8010250:	2300      	movs	r3, #0
 8010252:	4610      	mov	r0, r2
 8010254:	4619      	mov	r1, r3
 8010256:	f7f0 faa9 	bl	80007ac <__aeabi_ddiv>
 801025a:	ec41 0b18 	vmov	d8, r0, r1
 801025e:	eeb0 0a48 	vmov.f32	s0, s16
 8010262:	eef0 0a68 	vmov.f32	s1, s17
 8010266:	ecbd 8b02 	vpop	{d8}
 801026a:	bd38      	pop	{r3, r4, r5, pc}
 801026c:	0000      	movs	r0, r0
	...

08010270 <atan>:
 8010270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010274:	ec55 4b10 	vmov	r4, r5, d0
 8010278:	4bbf      	ldr	r3, [pc, #764]	@ (8010578 <atan+0x308>)
 801027a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801027e:	429e      	cmp	r6, r3
 8010280:	46ab      	mov	fp, r5
 8010282:	d918      	bls.n	80102b6 <atan+0x46>
 8010284:	4bbd      	ldr	r3, [pc, #756]	@ (801057c <atan+0x30c>)
 8010286:	429e      	cmp	r6, r3
 8010288:	d801      	bhi.n	801028e <atan+0x1e>
 801028a:	d109      	bne.n	80102a0 <atan+0x30>
 801028c:	b144      	cbz	r4, 80102a0 <atan+0x30>
 801028e:	4622      	mov	r2, r4
 8010290:	462b      	mov	r3, r5
 8010292:	4620      	mov	r0, r4
 8010294:	4629      	mov	r1, r5
 8010296:	f7ef ffa9 	bl	80001ec <__adddf3>
 801029a:	4604      	mov	r4, r0
 801029c:	460d      	mov	r5, r1
 801029e:	e006      	b.n	80102ae <atan+0x3e>
 80102a0:	f1bb 0f00 	cmp.w	fp, #0
 80102a4:	f340 812b 	ble.w	80104fe <atan+0x28e>
 80102a8:	a597      	add	r5, pc, #604	@ (adr r5, 8010508 <atan+0x298>)
 80102aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80102ae:	ec45 4b10 	vmov	d0, r4, r5
 80102b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102b6:	4bb2      	ldr	r3, [pc, #712]	@ (8010580 <atan+0x310>)
 80102b8:	429e      	cmp	r6, r3
 80102ba:	d813      	bhi.n	80102e4 <atan+0x74>
 80102bc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80102c0:	429e      	cmp	r6, r3
 80102c2:	d80c      	bhi.n	80102de <atan+0x6e>
 80102c4:	a392      	add	r3, pc, #584	@ (adr r3, 8010510 <atan+0x2a0>)
 80102c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ca:	4620      	mov	r0, r4
 80102cc:	4629      	mov	r1, r5
 80102ce:	f7ef ff8d 	bl	80001ec <__adddf3>
 80102d2:	4bac      	ldr	r3, [pc, #688]	@ (8010584 <atan+0x314>)
 80102d4:	2200      	movs	r2, #0
 80102d6:	f7f0 fbcf 	bl	8000a78 <__aeabi_dcmpgt>
 80102da:	2800      	cmp	r0, #0
 80102dc:	d1e7      	bne.n	80102ae <atan+0x3e>
 80102de:	f04f 3aff 	mov.w	sl, #4294967295
 80102e2:	e029      	b.n	8010338 <atan+0xc8>
 80102e4:	f000 f95c 	bl	80105a0 <fabs>
 80102e8:	4ba7      	ldr	r3, [pc, #668]	@ (8010588 <atan+0x318>)
 80102ea:	429e      	cmp	r6, r3
 80102ec:	ec55 4b10 	vmov	r4, r5, d0
 80102f0:	f200 80bc 	bhi.w	801046c <atan+0x1fc>
 80102f4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80102f8:	429e      	cmp	r6, r3
 80102fa:	f200 809e 	bhi.w	801043a <atan+0x1ca>
 80102fe:	4622      	mov	r2, r4
 8010300:	462b      	mov	r3, r5
 8010302:	4620      	mov	r0, r4
 8010304:	4629      	mov	r1, r5
 8010306:	f7ef ff71 	bl	80001ec <__adddf3>
 801030a:	4b9e      	ldr	r3, [pc, #632]	@ (8010584 <atan+0x314>)
 801030c:	2200      	movs	r2, #0
 801030e:	f7ef ff6b 	bl	80001e8 <__aeabi_dsub>
 8010312:	2200      	movs	r2, #0
 8010314:	4606      	mov	r6, r0
 8010316:	460f      	mov	r7, r1
 8010318:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801031c:	4620      	mov	r0, r4
 801031e:	4629      	mov	r1, r5
 8010320:	f7ef ff64 	bl	80001ec <__adddf3>
 8010324:	4602      	mov	r2, r0
 8010326:	460b      	mov	r3, r1
 8010328:	4630      	mov	r0, r6
 801032a:	4639      	mov	r1, r7
 801032c:	f7f0 fa3e 	bl	80007ac <__aeabi_ddiv>
 8010330:	f04f 0a00 	mov.w	sl, #0
 8010334:	4604      	mov	r4, r0
 8010336:	460d      	mov	r5, r1
 8010338:	4622      	mov	r2, r4
 801033a:	462b      	mov	r3, r5
 801033c:	4620      	mov	r0, r4
 801033e:	4629      	mov	r1, r5
 8010340:	f7f0 f90a 	bl	8000558 <__aeabi_dmul>
 8010344:	4602      	mov	r2, r0
 8010346:	460b      	mov	r3, r1
 8010348:	4680      	mov	r8, r0
 801034a:	4689      	mov	r9, r1
 801034c:	f7f0 f904 	bl	8000558 <__aeabi_dmul>
 8010350:	a371      	add	r3, pc, #452	@ (adr r3, 8010518 <atan+0x2a8>)
 8010352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010356:	4606      	mov	r6, r0
 8010358:	460f      	mov	r7, r1
 801035a:	f7f0 f8fd 	bl	8000558 <__aeabi_dmul>
 801035e:	a370      	add	r3, pc, #448	@ (adr r3, 8010520 <atan+0x2b0>)
 8010360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010364:	f7ef ff42 	bl	80001ec <__adddf3>
 8010368:	4632      	mov	r2, r6
 801036a:	463b      	mov	r3, r7
 801036c:	f7f0 f8f4 	bl	8000558 <__aeabi_dmul>
 8010370:	a36d      	add	r3, pc, #436	@ (adr r3, 8010528 <atan+0x2b8>)
 8010372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010376:	f7ef ff39 	bl	80001ec <__adddf3>
 801037a:	4632      	mov	r2, r6
 801037c:	463b      	mov	r3, r7
 801037e:	f7f0 f8eb 	bl	8000558 <__aeabi_dmul>
 8010382:	a36b      	add	r3, pc, #428	@ (adr r3, 8010530 <atan+0x2c0>)
 8010384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010388:	f7ef ff30 	bl	80001ec <__adddf3>
 801038c:	4632      	mov	r2, r6
 801038e:	463b      	mov	r3, r7
 8010390:	f7f0 f8e2 	bl	8000558 <__aeabi_dmul>
 8010394:	a368      	add	r3, pc, #416	@ (adr r3, 8010538 <atan+0x2c8>)
 8010396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039a:	f7ef ff27 	bl	80001ec <__adddf3>
 801039e:	4632      	mov	r2, r6
 80103a0:	463b      	mov	r3, r7
 80103a2:	f7f0 f8d9 	bl	8000558 <__aeabi_dmul>
 80103a6:	a366      	add	r3, pc, #408	@ (adr r3, 8010540 <atan+0x2d0>)
 80103a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ac:	f7ef ff1e 	bl	80001ec <__adddf3>
 80103b0:	4642      	mov	r2, r8
 80103b2:	464b      	mov	r3, r9
 80103b4:	f7f0 f8d0 	bl	8000558 <__aeabi_dmul>
 80103b8:	a363      	add	r3, pc, #396	@ (adr r3, 8010548 <atan+0x2d8>)
 80103ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103be:	4680      	mov	r8, r0
 80103c0:	4689      	mov	r9, r1
 80103c2:	4630      	mov	r0, r6
 80103c4:	4639      	mov	r1, r7
 80103c6:	f7f0 f8c7 	bl	8000558 <__aeabi_dmul>
 80103ca:	a361      	add	r3, pc, #388	@ (adr r3, 8010550 <atan+0x2e0>)
 80103cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d0:	f7ef ff0a 	bl	80001e8 <__aeabi_dsub>
 80103d4:	4632      	mov	r2, r6
 80103d6:	463b      	mov	r3, r7
 80103d8:	f7f0 f8be 	bl	8000558 <__aeabi_dmul>
 80103dc:	a35e      	add	r3, pc, #376	@ (adr r3, 8010558 <atan+0x2e8>)
 80103de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e2:	f7ef ff01 	bl	80001e8 <__aeabi_dsub>
 80103e6:	4632      	mov	r2, r6
 80103e8:	463b      	mov	r3, r7
 80103ea:	f7f0 f8b5 	bl	8000558 <__aeabi_dmul>
 80103ee:	a35c      	add	r3, pc, #368	@ (adr r3, 8010560 <atan+0x2f0>)
 80103f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f4:	f7ef fef8 	bl	80001e8 <__aeabi_dsub>
 80103f8:	4632      	mov	r2, r6
 80103fa:	463b      	mov	r3, r7
 80103fc:	f7f0 f8ac 	bl	8000558 <__aeabi_dmul>
 8010400:	a359      	add	r3, pc, #356	@ (adr r3, 8010568 <atan+0x2f8>)
 8010402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010406:	f7ef feef 	bl	80001e8 <__aeabi_dsub>
 801040a:	4632      	mov	r2, r6
 801040c:	463b      	mov	r3, r7
 801040e:	f7f0 f8a3 	bl	8000558 <__aeabi_dmul>
 8010412:	4602      	mov	r2, r0
 8010414:	460b      	mov	r3, r1
 8010416:	4640      	mov	r0, r8
 8010418:	4649      	mov	r1, r9
 801041a:	f7ef fee7 	bl	80001ec <__adddf3>
 801041e:	4622      	mov	r2, r4
 8010420:	462b      	mov	r3, r5
 8010422:	f7f0 f899 	bl	8000558 <__aeabi_dmul>
 8010426:	f1ba 3fff 	cmp.w	sl, #4294967295
 801042a:	4602      	mov	r2, r0
 801042c:	460b      	mov	r3, r1
 801042e:	d148      	bne.n	80104c2 <atan+0x252>
 8010430:	4620      	mov	r0, r4
 8010432:	4629      	mov	r1, r5
 8010434:	f7ef fed8 	bl	80001e8 <__aeabi_dsub>
 8010438:	e72f      	b.n	801029a <atan+0x2a>
 801043a:	4b52      	ldr	r3, [pc, #328]	@ (8010584 <atan+0x314>)
 801043c:	2200      	movs	r2, #0
 801043e:	4620      	mov	r0, r4
 8010440:	4629      	mov	r1, r5
 8010442:	f7ef fed1 	bl	80001e8 <__aeabi_dsub>
 8010446:	4b4f      	ldr	r3, [pc, #316]	@ (8010584 <atan+0x314>)
 8010448:	4606      	mov	r6, r0
 801044a:	460f      	mov	r7, r1
 801044c:	2200      	movs	r2, #0
 801044e:	4620      	mov	r0, r4
 8010450:	4629      	mov	r1, r5
 8010452:	f7ef fecb 	bl	80001ec <__adddf3>
 8010456:	4602      	mov	r2, r0
 8010458:	460b      	mov	r3, r1
 801045a:	4630      	mov	r0, r6
 801045c:	4639      	mov	r1, r7
 801045e:	f7f0 f9a5 	bl	80007ac <__aeabi_ddiv>
 8010462:	f04f 0a01 	mov.w	sl, #1
 8010466:	4604      	mov	r4, r0
 8010468:	460d      	mov	r5, r1
 801046a:	e765      	b.n	8010338 <atan+0xc8>
 801046c:	4b47      	ldr	r3, [pc, #284]	@ (801058c <atan+0x31c>)
 801046e:	429e      	cmp	r6, r3
 8010470:	d21c      	bcs.n	80104ac <atan+0x23c>
 8010472:	4b47      	ldr	r3, [pc, #284]	@ (8010590 <atan+0x320>)
 8010474:	2200      	movs	r2, #0
 8010476:	4620      	mov	r0, r4
 8010478:	4629      	mov	r1, r5
 801047a:	f7ef feb5 	bl	80001e8 <__aeabi_dsub>
 801047e:	4b44      	ldr	r3, [pc, #272]	@ (8010590 <atan+0x320>)
 8010480:	4606      	mov	r6, r0
 8010482:	460f      	mov	r7, r1
 8010484:	2200      	movs	r2, #0
 8010486:	4620      	mov	r0, r4
 8010488:	4629      	mov	r1, r5
 801048a:	f7f0 f865 	bl	8000558 <__aeabi_dmul>
 801048e:	4b3d      	ldr	r3, [pc, #244]	@ (8010584 <atan+0x314>)
 8010490:	2200      	movs	r2, #0
 8010492:	f7ef feab 	bl	80001ec <__adddf3>
 8010496:	4602      	mov	r2, r0
 8010498:	460b      	mov	r3, r1
 801049a:	4630      	mov	r0, r6
 801049c:	4639      	mov	r1, r7
 801049e:	f7f0 f985 	bl	80007ac <__aeabi_ddiv>
 80104a2:	f04f 0a02 	mov.w	sl, #2
 80104a6:	4604      	mov	r4, r0
 80104a8:	460d      	mov	r5, r1
 80104aa:	e745      	b.n	8010338 <atan+0xc8>
 80104ac:	4622      	mov	r2, r4
 80104ae:	462b      	mov	r3, r5
 80104b0:	4938      	ldr	r1, [pc, #224]	@ (8010594 <atan+0x324>)
 80104b2:	2000      	movs	r0, #0
 80104b4:	f7f0 f97a 	bl	80007ac <__aeabi_ddiv>
 80104b8:	f04f 0a03 	mov.w	sl, #3
 80104bc:	4604      	mov	r4, r0
 80104be:	460d      	mov	r5, r1
 80104c0:	e73a      	b.n	8010338 <atan+0xc8>
 80104c2:	4b35      	ldr	r3, [pc, #212]	@ (8010598 <atan+0x328>)
 80104c4:	4e35      	ldr	r6, [pc, #212]	@ (801059c <atan+0x32c>)
 80104c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80104ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ce:	f7ef fe8b 	bl	80001e8 <__aeabi_dsub>
 80104d2:	4622      	mov	r2, r4
 80104d4:	462b      	mov	r3, r5
 80104d6:	f7ef fe87 	bl	80001e8 <__aeabi_dsub>
 80104da:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80104de:	4602      	mov	r2, r0
 80104e0:	460b      	mov	r3, r1
 80104e2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80104e6:	f7ef fe7f 	bl	80001e8 <__aeabi_dsub>
 80104ea:	f1bb 0f00 	cmp.w	fp, #0
 80104ee:	4604      	mov	r4, r0
 80104f0:	460d      	mov	r5, r1
 80104f2:	f6bf aedc 	bge.w	80102ae <atan+0x3e>
 80104f6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80104fa:	461d      	mov	r5, r3
 80104fc:	e6d7      	b.n	80102ae <atan+0x3e>
 80104fe:	a51c      	add	r5, pc, #112	@ (adr r5, 8010570 <atan+0x300>)
 8010500:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010504:	e6d3      	b.n	80102ae <atan+0x3e>
 8010506:	bf00      	nop
 8010508:	54442d18 	.word	0x54442d18
 801050c:	3ff921fb 	.word	0x3ff921fb
 8010510:	8800759c 	.word	0x8800759c
 8010514:	7e37e43c 	.word	0x7e37e43c
 8010518:	e322da11 	.word	0xe322da11
 801051c:	3f90ad3a 	.word	0x3f90ad3a
 8010520:	24760deb 	.word	0x24760deb
 8010524:	3fa97b4b 	.word	0x3fa97b4b
 8010528:	a0d03d51 	.word	0xa0d03d51
 801052c:	3fb10d66 	.word	0x3fb10d66
 8010530:	c54c206e 	.word	0xc54c206e
 8010534:	3fb745cd 	.word	0x3fb745cd
 8010538:	920083ff 	.word	0x920083ff
 801053c:	3fc24924 	.word	0x3fc24924
 8010540:	5555550d 	.word	0x5555550d
 8010544:	3fd55555 	.word	0x3fd55555
 8010548:	2c6a6c2f 	.word	0x2c6a6c2f
 801054c:	bfa2b444 	.word	0xbfa2b444
 8010550:	52defd9a 	.word	0x52defd9a
 8010554:	3fadde2d 	.word	0x3fadde2d
 8010558:	af749a6d 	.word	0xaf749a6d
 801055c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010560:	fe231671 	.word	0xfe231671
 8010564:	3fbc71c6 	.word	0x3fbc71c6
 8010568:	9998ebc4 	.word	0x9998ebc4
 801056c:	3fc99999 	.word	0x3fc99999
 8010570:	54442d18 	.word	0x54442d18
 8010574:	bff921fb 	.word	0xbff921fb
 8010578:	440fffff 	.word	0x440fffff
 801057c:	7ff00000 	.word	0x7ff00000
 8010580:	3fdbffff 	.word	0x3fdbffff
 8010584:	3ff00000 	.word	0x3ff00000
 8010588:	3ff2ffff 	.word	0x3ff2ffff
 801058c:	40038000 	.word	0x40038000
 8010590:	3ff80000 	.word	0x3ff80000
 8010594:	bff00000 	.word	0xbff00000
 8010598:	08010f30 	.word	0x08010f30
 801059c:	08010f50 	.word	0x08010f50

080105a0 <fabs>:
 80105a0:	ec51 0b10 	vmov	r0, r1, d0
 80105a4:	4602      	mov	r2, r0
 80105a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80105aa:	ec43 2b10 	vmov	d0, r2, r3
 80105ae:	4770      	bx	lr

080105b0 <__ieee754_sqrt>:
 80105b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b4:	4a68      	ldr	r2, [pc, #416]	@ (8010758 <__ieee754_sqrt+0x1a8>)
 80105b6:	ec55 4b10 	vmov	r4, r5, d0
 80105ba:	43aa      	bics	r2, r5
 80105bc:	462b      	mov	r3, r5
 80105be:	4621      	mov	r1, r4
 80105c0:	d110      	bne.n	80105e4 <__ieee754_sqrt+0x34>
 80105c2:	4622      	mov	r2, r4
 80105c4:	4620      	mov	r0, r4
 80105c6:	4629      	mov	r1, r5
 80105c8:	f7ef ffc6 	bl	8000558 <__aeabi_dmul>
 80105cc:	4602      	mov	r2, r0
 80105ce:	460b      	mov	r3, r1
 80105d0:	4620      	mov	r0, r4
 80105d2:	4629      	mov	r1, r5
 80105d4:	f7ef fe0a 	bl	80001ec <__adddf3>
 80105d8:	4604      	mov	r4, r0
 80105da:	460d      	mov	r5, r1
 80105dc:	ec45 4b10 	vmov	d0, r4, r5
 80105e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105e4:	2d00      	cmp	r5, #0
 80105e6:	dc0e      	bgt.n	8010606 <__ieee754_sqrt+0x56>
 80105e8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80105ec:	4322      	orrs	r2, r4
 80105ee:	d0f5      	beq.n	80105dc <__ieee754_sqrt+0x2c>
 80105f0:	b19d      	cbz	r5, 801061a <__ieee754_sqrt+0x6a>
 80105f2:	4622      	mov	r2, r4
 80105f4:	4620      	mov	r0, r4
 80105f6:	4629      	mov	r1, r5
 80105f8:	f7ef fdf6 	bl	80001e8 <__aeabi_dsub>
 80105fc:	4602      	mov	r2, r0
 80105fe:	460b      	mov	r3, r1
 8010600:	f7f0 f8d4 	bl	80007ac <__aeabi_ddiv>
 8010604:	e7e8      	b.n	80105d8 <__ieee754_sqrt+0x28>
 8010606:	152a      	asrs	r2, r5, #20
 8010608:	d115      	bne.n	8010636 <__ieee754_sqrt+0x86>
 801060a:	2000      	movs	r0, #0
 801060c:	e009      	b.n	8010622 <__ieee754_sqrt+0x72>
 801060e:	0acb      	lsrs	r3, r1, #11
 8010610:	3a15      	subs	r2, #21
 8010612:	0549      	lsls	r1, r1, #21
 8010614:	2b00      	cmp	r3, #0
 8010616:	d0fa      	beq.n	801060e <__ieee754_sqrt+0x5e>
 8010618:	e7f7      	b.n	801060a <__ieee754_sqrt+0x5a>
 801061a:	462a      	mov	r2, r5
 801061c:	e7fa      	b.n	8010614 <__ieee754_sqrt+0x64>
 801061e:	005b      	lsls	r3, r3, #1
 8010620:	3001      	adds	r0, #1
 8010622:	02dc      	lsls	r4, r3, #11
 8010624:	d5fb      	bpl.n	801061e <__ieee754_sqrt+0x6e>
 8010626:	1e44      	subs	r4, r0, #1
 8010628:	1b12      	subs	r2, r2, r4
 801062a:	f1c0 0420 	rsb	r4, r0, #32
 801062e:	fa21 f404 	lsr.w	r4, r1, r4
 8010632:	4323      	orrs	r3, r4
 8010634:	4081      	lsls	r1, r0
 8010636:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801063a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801063e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010642:	07d2      	lsls	r2, r2, #31
 8010644:	bf5c      	itt	pl
 8010646:	005b      	lslpl	r3, r3, #1
 8010648:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801064c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010650:	bf58      	it	pl
 8010652:	0049      	lslpl	r1, r1, #1
 8010654:	2600      	movs	r6, #0
 8010656:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801065a:	106d      	asrs	r5, r5, #1
 801065c:	0049      	lsls	r1, r1, #1
 801065e:	2016      	movs	r0, #22
 8010660:	4632      	mov	r2, r6
 8010662:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8010666:	1917      	adds	r7, r2, r4
 8010668:	429f      	cmp	r7, r3
 801066a:	bfde      	ittt	le
 801066c:	193a      	addle	r2, r7, r4
 801066e:	1bdb      	suble	r3, r3, r7
 8010670:	1936      	addle	r6, r6, r4
 8010672:	0fcf      	lsrs	r7, r1, #31
 8010674:	3801      	subs	r0, #1
 8010676:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801067a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801067e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010682:	d1f0      	bne.n	8010666 <__ieee754_sqrt+0xb6>
 8010684:	4604      	mov	r4, r0
 8010686:	2720      	movs	r7, #32
 8010688:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801068c:	429a      	cmp	r2, r3
 801068e:	eb00 0e0c 	add.w	lr, r0, ip
 8010692:	db02      	blt.n	801069a <__ieee754_sqrt+0xea>
 8010694:	d113      	bne.n	80106be <__ieee754_sqrt+0x10e>
 8010696:	458e      	cmp	lr, r1
 8010698:	d811      	bhi.n	80106be <__ieee754_sqrt+0x10e>
 801069a:	f1be 0f00 	cmp.w	lr, #0
 801069e:	eb0e 000c 	add.w	r0, lr, ip
 80106a2:	da42      	bge.n	801072a <__ieee754_sqrt+0x17a>
 80106a4:	2800      	cmp	r0, #0
 80106a6:	db40      	blt.n	801072a <__ieee754_sqrt+0x17a>
 80106a8:	f102 0801 	add.w	r8, r2, #1
 80106ac:	1a9b      	subs	r3, r3, r2
 80106ae:	458e      	cmp	lr, r1
 80106b0:	bf88      	it	hi
 80106b2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80106b6:	eba1 010e 	sub.w	r1, r1, lr
 80106ba:	4464      	add	r4, ip
 80106bc:	4642      	mov	r2, r8
 80106be:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80106c2:	3f01      	subs	r7, #1
 80106c4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80106c8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80106cc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80106d0:	d1dc      	bne.n	801068c <__ieee754_sqrt+0xdc>
 80106d2:	4319      	orrs	r1, r3
 80106d4:	d01b      	beq.n	801070e <__ieee754_sqrt+0x15e>
 80106d6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801075c <__ieee754_sqrt+0x1ac>
 80106da:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010760 <__ieee754_sqrt+0x1b0>
 80106de:	e9da 0100 	ldrd	r0, r1, [sl]
 80106e2:	e9db 2300 	ldrd	r2, r3, [fp]
 80106e6:	f7ef fd7f 	bl	80001e8 <__aeabi_dsub>
 80106ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80106ee:	4602      	mov	r2, r0
 80106f0:	460b      	mov	r3, r1
 80106f2:	4640      	mov	r0, r8
 80106f4:	4649      	mov	r1, r9
 80106f6:	f7f0 f9ab 	bl	8000a50 <__aeabi_dcmple>
 80106fa:	b140      	cbz	r0, 801070e <__ieee754_sqrt+0x15e>
 80106fc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010700:	e9da 0100 	ldrd	r0, r1, [sl]
 8010704:	e9db 2300 	ldrd	r2, r3, [fp]
 8010708:	d111      	bne.n	801072e <__ieee754_sqrt+0x17e>
 801070a:	3601      	adds	r6, #1
 801070c:	463c      	mov	r4, r7
 801070e:	1072      	asrs	r2, r6, #1
 8010710:	0863      	lsrs	r3, r4, #1
 8010712:	07f1      	lsls	r1, r6, #31
 8010714:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010718:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801071c:	bf48      	it	mi
 801071e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8010722:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8010726:	4618      	mov	r0, r3
 8010728:	e756      	b.n	80105d8 <__ieee754_sqrt+0x28>
 801072a:	4690      	mov	r8, r2
 801072c:	e7be      	b.n	80106ac <__ieee754_sqrt+0xfc>
 801072e:	f7ef fd5d 	bl	80001ec <__adddf3>
 8010732:	e9da 8900 	ldrd	r8, r9, [sl]
 8010736:	4602      	mov	r2, r0
 8010738:	460b      	mov	r3, r1
 801073a:	4640      	mov	r0, r8
 801073c:	4649      	mov	r1, r9
 801073e:	f7f0 f97d 	bl	8000a3c <__aeabi_dcmplt>
 8010742:	b120      	cbz	r0, 801074e <__ieee754_sqrt+0x19e>
 8010744:	1ca0      	adds	r0, r4, #2
 8010746:	bf08      	it	eq
 8010748:	3601      	addeq	r6, #1
 801074a:	3402      	adds	r4, #2
 801074c:	e7df      	b.n	801070e <__ieee754_sqrt+0x15e>
 801074e:	1c63      	adds	r3, r4, #1
 8010750:	f023 0401 	bic.w	r4, r3, #1
 8010754:	e7db      	b.n	801070e <__ieee754_sqrt+0x15e>
 8010756:	bf00      	nop
 8010758:	7ff00000 	.word	0x7ff00000
 801075c:	20000678 	.word	0x20000678
 8010760:	20000670 	.word	0x20000670
 8010764:	00000000 	.word	0x00000000

08010768 <ceil>:
 8010768:	ec51 0b10 	vmov	r0, r1, d0
 801076c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010774:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010778:	2e13      	cmp	r6, #19
 801077a:	460c      	mov	r4, r1
 801077c:	4605      	mov	r5, r0
 801077e:	4680      	mov	r8, r0
 8010780:	dc2e      	bgt.n	80107e0 <ceil+0x78>
 8010782:	2e00      	cmp	r6, #0
 8010784:	da11      	bge.n	80107aa <ceil+0x42>
 8010786:	a332      	add	r3, pc, #200	@ (adr r3, 8010850 <ceil+0xe8>)
 8010788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801078c:	f7ef fd2e 	bl	80001ec <__adddf3>
 8010790:	2200      	movs	r2, #0
 8010792:	2300      	movs	r3, #0
 8010794:	f7f0 f970 	bl	8000a78 <__aeabi_dcmpgt>
 8010798:	b120      	cbz	r0, 80107a4 <ceil+0x3c>
 801079a:	2c00      	cmp	r4, #0
 801079c:	db4f      	blt.n	801083e <ceil+0xd6>
 801079e:	4325      	orrs	r5, r4
 80107a0:	d151      	bne.n	8010846 <ceil+0xde>
 80107a2:	462c      	mov	r4, r5
 80107a4:	4621      	mov	r1, r4
 80107a6:	4628      	mov	r0, r5
 80107a8:	e023      	b.n	80107f2 <ceil+0x8a>
 80107aa:	4f2b      	ldr	r7, [pc, #172]	@ (8010858 <ceil+0xf0>)
 80107ac:	4137      	asrs	r7, r6
 80107ae:	ea01 0307 	and.w	r3, r1, r7
 80107b2:	4303      	orrs	r3, r0
 80107b4:	d01d      	beq.n	80107f2 <ceil+0x8a>
 80107b6:	a326      	add	r3, pc, #152	@ (adr r3, 8010850 <ceil+0xe8>)
 80107b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107bc:	f7ef fd16 	bl	80001ec <__adddf3>
 80107c0:	2200      	movs	r2, #0
 80107c2:	2300      	movs	r3, #0
 80107c4:	f7f0 f958 	bl	8000a78 <__aeabi_dcmpgt>
 80107c8:	2800      	cmp	r0, #0
 80107ca:	d0eb      	beq.n	80107a4 <ceil+0x3c>
 80107cc:	2c00      	cmp	r4, #0
 80107ce:	bfc2      	ittt	gt
 80107d0:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 80107d4:	4133      	asrgt	r3, r6
 80107d6:	18e4      	addgt	r4, r4, r3
 80107d8:	ea24 0407 	bic.w	r4, r4, r7
 80107dc:	2500      	movs	r5, #0
 80107de:	e7e1      	b.n	80107a4 <ceil+0x3c>
 80107e0:	2e33      	cmp	r6, #51	@ 0x33
 80107e2:	dd0a      	ble.n	80107fa <ceil+0x92>
 80107e4:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80107e8:	d103      	bne.n	80107f2 <ceil+0x8a>
 80107ea:	4602      	mov	r2, r0
 80107ec:	460b      	mov	r3, r1
 80107ee:	f7ef fcfd 	bl	80001ec <__adddf3>
 80107f2:	ec41 0b10 	vmov	d0, r0, r1
 80107f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107fa:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80107fe:	f04f 37ff 	mov.w	r7, #4294967295
 8010802:	40df      	lsrs	r7, r3
 8010804:	4238      	tst	r0, r7
 8010806:	d0f4      	beq.n	80107f2 <ceil+0x8a>
 8010808:	a311      	add	r3, pc, #68	@ (adr r3, 8010850 <ceil+0xe8>)
 801080a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080e:	f7ef fced 	bl	80001ec <__adddf3>
 8010812:	2200      	movs	r2, #0
 8010814:	2300      	movs	r3, #0
 8010816:	f7f0 f92f 	bl	8000a78 <__aeabi_dcmpgt>
 801081a:	2800      	cmp	r0, #0
 801081c:	d0c2      	beq.n	80107a4 <ceil+0x3c>
 801081e:	2c00      	cmp	r4, #0
 8010820:	dd0a      	ble.n	8010838 <ceil+0xd0>
 8010822:	2e14      	cmp	r6, #20
 8010824:	d101      	bne.n	801082a <ceil+0xc2>
 8010826:	3401      	adds	r4, #1
 8010828:	e006      	b.n	8010838 <ceil+0xd0>
 801082a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801082e:	2301      	movs	r3, #1
 8010830:	40b3      	lsls	r3, r6
 8010832:	441d      	add	r5, r3
 8010834:	45a8      	cmp	r8, r5
 8010836:	d8f6      	bhi.n	8010826 <ceil+0xbe>
 8010838:	ea25 0507 	bic.w	r5, r5, r7
 801083c:	e7b2      	b.n	80107a4 <ceil+0x3c>
 801083e:	2500      	movs	r5, #0
 8010840:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8010844:	e7ae      	b.n	80107a4 <ceil+0x3c>
 8010846:	4c05      	ldr	r4, [pc, #20]	@ (801085c <ceil+0xf4>)
 8010848:	2500      	movs	r5, #0
 801084a:	e7ab      	b.n	80107a4 <ceil+0x3c>
 801084c:	f3af 8000 	nop.w
 8010850:	8800759c 	.word	0x8800759c
 8010854:	7e37e43c 	.word	0x7e37e43c
 8010858:	000fffff 	.word	0x000fffff
 801085c:	3ff00000 	.word	0x3ff00000

08010860 <floor>:
 8010860:	ec51 0b10 	vmov	r0, r1, d0
 8010864:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801086c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010870:	2e13      	cmp	r6, #19
 8010872:	460c      	mov	r4, r1
 8010874:	4605      	mov	r5, r0
 8010876:	4680      	mov	r8, r0
 8010878:	dc34      	bgt.n	80108e4 <floor+0x84>
 801087a:	2e00      	cmp	r6, #0
 801087c:	da17      	bge.n	80108ae <floor+0x4e>
 801087e:	a332      	add	r3, pc, #200	@ (adr r3, 8010948 <floor+0xe8>)
 8010880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010884:	f7ef fcb2 	bl	80001ec <__adddf3>
 8010888:	2200      	movs	r2, #0
 801088a:	2300      	movs	r3, #0
 801088c:	f7f0 f8f4 	bl	8000a78 <__aeabi_dcmpgt>
 8010890:	b150      	cbz	r0, 80108a8 <floor+0x48>
 8010892:	2c00      	cmp	r4, #0
 8010894:	da55      	bge.n	8010942 <floor+0xe2>
 8010896:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801089a:	432c      	orrs	r4, r5
 801089c:	2500      	movs	r5, #0
 801089e:	42ac      	cmp	r4, r5
 80108a0:	4c2b      	ldr	r4, [pc, #172]	@ (8010950 <floor+0xf0>)
 80108a2:	bf08      	it	eq
 80108a4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80108a8:	4621      	mov	r1, r4
 80108aa:	4628      	mov	r0, r5
 80108ac:	e023      	b.n	80108f6 <floor+0x96>
 80108ae:	4f29      	ldr	r7, [pc, #164]	@ (8010954 <floor+0xf4>)
 80108b0:	4137      	asrs	r7, r6
 80108b2:	ea01 0307 	and.w	r3, r1, r7
 80108b6:	4303      	orrs	r3, r0
 80108b8:	d01d      	beq.n	80108f6 <floor+0x96>
 80108ba:	a323      	add	r3, pc, #140	@ (adr r3, 8010948 <floor+0xe8>)
 80108bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c0:	f7ef fc94 	bl	80001ec <__adddf3>
 80108c4:	2200      	movs	r2, #0
 80108c6:	2300      	movs	r3, #0
 80108c8:	f7f0 f8d6 	bl	8000a78 <__aeabi_dcmpgt>
 80108cc:	2800      	cmp	r0, #0
 80108ce:	d0eb      	beq.n	80108a8 <floor+0x48>
 80108d0:	2c00      	cmp	r4, #0
 80108d2:	bfbe      	ittt	lt
 80108d4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80108d8:	4133      	asrlt	r3, r6
 80108da:	18e4      	addlt	r4, r4, r3
 80108dc:	ea24 0407 	bic.w	r4, r4, r7
 80108e0:	2500      	movs	r5, #0
 80108e2:	e7e1      	b.n	80108a8 <floor+0x48>
 80108e4:	2e33      	cmp	r6, #51	@ 0x33
 80108e6:	dd0a      	ble.n	80108fe <floor+0x9e>
 80108e8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80108ec:	d103      	bne.n	80108f6 <floor+0x96>
 80108ee:	4602      	mov	r2, r0
 80108f0:	460b      	mov	r3, r1
 80108f2:	f7ef fc7b 	bl	80001ec <__adddf3>
 80108f6:	ec41 0b10 	vmov	d0, r0, r1
 80108fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108fe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8010902:	f04f 37ff 	mov.w	r7, #4294967295
 8010906:	40df      	lsrs	r7, r3
 8010908:	4207      	tst	r7, r0
 801090a:	d0f4      	beq.n	80108f6 <floor+0x96>
 801090c:	a30e      	add	r3, pc, #56	@ (adr r3, 8010948 <floor+0xe8>)
 801090e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010912:	f7ef fc6b 	bl	80001ec <__adddf3>
 8010916:	2200      	movs	r2, #0
 8010918:	2300      	movs	r3, #0
 801091a:	f7f0 f8ad 	bl	8000a78 <__aeabi_dcmpgt>
 801091e:	2800      	cmp	r0, #0
 8010920:	d0c2      	beq.n	80108a8 <floor+0x48>
 8010922:	2c00      	cmp	r4, #0
 8010924:	da0a      	bge.n	801093c <floor+0xdc>
 8010926:	2e14      	cmp	r6, #20
 8010928:	d101      	bne.n	801092e <floor+0xce>
 801092a:	3401      	adds	r4, #1
 801092c:	e006      	b.n	801093c <floor+0xdc>
 801092e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010932:	2301      	movs	r3, #1
 8010934:	40b3      	lsls	r3, r6
 8010936:	441d      	add	r5, r3
 8010938:	4545      	cmp	r5, r8
 801093a:	d3f6      	bcc.n	801092a <floor+0xca>
 801093c:	ea25 0507 	bic.w	r5, r5, r7
 8010940:	e7b2      	b.n	80108a8 <floor+0x48>
 8010942:	2500      	movs	r5, #0
 8010944:	462c      	mov	r4, r5
 8010946:	e7af      	b.n	80108a8 <floor+0x48>
 8010948:	8800759c 	.word	0x8800759c
 801094c:	7e37e43c 	.word	0x7e37e43c
 8010950:	bff00000 	.word	0xbff00000
 8010954:	000fffff 	.word	0x000fffff

08010958 <trunc>:
 8010958:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 801095c:	ec5c bb10 	vmov	fp, ip, d0
 8010960:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8010964:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8010968:	2913      	cmp	r1, #19
 801096a:	4664      	mov	r4, ip
 801096c:	dc14      	bgt.n	8010998 <trunc+0x40>
 801096e:	2900      	cmp	r1, #0
 8010970:	bfa4      	itt	ge
 8010972:	4b15      	ldrge	r3, [pc, #84]	@ (80109c8 <trunc+0x70>)
 8010974:	fa43 f101 	asrge.w	r1, r3, r1
 8010978:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 801097c:	bfad      	iteet	ge
 801097e:	4021      	andge	r1, r4
 8010980:	2200      	movlt	r2, #0
 8010982:	4603      	movlt	r3, r0
 8010984:	2200      	movge	r2, #0
 8010986:	bfa8      	it	ge
 8010988:	ea41 0300 	orrge.w	r3, r1, r0
 801098c:	4693      	mov	fp, r2
 801098e:	469c      	mov	ip, r3
 8010990:	ec4c bb10 	vmov	d0, fp, ip
 8010994:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8010998:	2933      	cmp	r1, #51	@ 0x33
 801099a:	dd0b      	ble.n	80109b4 <trunc+0x5c>
 801099c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80109a0:	d1f6      	bne.n	8010990 <trunc+0x38>
 80109a2:	465a      	mov	r2, fp
 80109a4:	4663      	mov	r3, ip
 80109a6:	4658      	mov	r0, fp
 80109a8:	4621      	mov	r1, r4
 80109aa:	f7ef fc1f 	bl	80001ec <__adddf3>
 80109ae:	4683      	mov	fp, r0
 80109b0:	468c      	mov	ip, r1
 80109b2:	e7ed      	b.n	8010990 <trunc+0x38>
 80109b4:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 80109b8:	f04f 33ff 	mov.w	r3, #4294967295
 80109bc:	40c3      	lsrs	r3, r0
 80109be:	ea2b 0603 	bic.w	r6, fp, r3
 80109c2:	46b3      	mov	fp, r6
 80109c4:	46a4      	mov	ip, r4
 80109c6:	e7e3      	b.n	8010990 <trunc+0x38>
 80109c8:	fff00000 	.word	0xfff00000
 80109cc:	00000000 	.word	0x00000000

080109d0 <__ieee754_atan2>:
 80109d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109d4:	ec57 6b11 	vmov	r6, r7, d1
 80109d8:	4273      	negs	r3, r6
 80109da:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8010b58 <__ieee754_atan2+0x188>
 80109de:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80109e2:	4333      	orrs	r3, r6
 80109e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80109e8:	4543      	cmp	r3, r8
 80109ea:	ec51 0b10 	vmov	r0, r1, d0
 80109ee:	4635      	mov	r5, r6
 80109f0:	d809      	bhi.n	8010a06 <__ieee754_atan2+0x36>
 80109f2:	4244      	negs	r4, r0
 80109f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80109f8:	4304      	orrs	r4, r0
 80109fa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80109fe:	4544      	cmp	r4, r8
 8010a00:	468e      	mov	lr, r1
 8010a02:	4681      	mov	r9, r0
 8010a04:	d907      	bls.n	8010a16 <__ieee754_atan2+0x46>
 8010a06:	4632      	mov	r2, r6
 8010a08:	463b      	mov	r3, r7
 8010a0a:	f7ef fbef 	bl	80001ec <__adddf3>
 8010a0e:	ec41 0b10 	vmov	d0, r0, r1
 8010a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a16:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8010a1a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8010a1e:	4334      	orrs	r4, r6
 8010a20:	d103      	bne.n	8010a2a <__ieee754_atan2+0x5a>
 8010a22:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a26:	f7ff bc23 	b.w	8010270 <atan>
 8010a2a:	17bc      	asrs	r4, r7, #30
 8010a2c:	f004 0402 	and.w	r4, r4, #2
 8010a30:	ea53 0909 	orrs.w	r9, r3, r9
 8010a34:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010a38:	d107      	bne.n	8010a4a <__ieee754_atan2+0x7a>
 8010a3a:	2c02      	cmp	r4, #2
 8010a3c:	d05f      	beq.n	8010afe <__ieee754_atan2+0x12e>
 8010a3e:	2c03      	cmp	r4, #3
 8010a40:	d1e5      	bne.n	8010a0e <__ieee754_atan2+0x3e>
 8010a42:	a141      	add	r1, pc, #260	@ (adr r1, 8010b48 <__ieee754_atan2+0x178>)
 8010a44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a48:	e7e1      	b.n	8010a0e <__ieee754_atan2+0x3e>
 8010a4a:	4315      	orrs	r5, r2
 8010a4c:	d106      	bne.n	8010a5c <__ieee754_atan2+0x8c>
 8010a4e:	f1be 0f00 	cmp.w	lr, #0
 8010a52:	da5f      	bge.n	8010b14 <__ieee754_atan2+0x144>
 8010a54:	a13e      	add	r1, pc, #248	@ (adr r1, 8010b50 <__ieee754_atan2+0x180>)
 8010a56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a5a:	e7d8      	b.n	8010a0e <__ieee754_atan2+0x3e>
 8010a5c:	4542      	cmp	r2, r8
 8010a5e:	d10f      	bne.n	8010a80 <__ieee754_atan2+0xb0>
 8010a60:	4293      	cmp	r3, r2
 8010a62:	f104 34ff 	add.w	r4, r4, #4294967295
 8010a66:	d107      	bne.n	8010a78 <__ieee754_atan2+0xa8>
 8010a68:	2c02      	cmp	r4, #2
 8010a6a:	d84c      	bhi.n	8010b06 <__ieee754_atan2+0x136>
 8010a6c:	4b34      	ldr	r3, [pc, #208]	@ (8010b40 <__ieee754_atan2+0x170>)
 8010a6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010a72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a76:	e7ca      	b.n	8010a0e <__ieee754_atan2+0x3e>
 8010a78:	2c02      	cmp	r4, #2
 8010a7a:	d848      	bhi.n	8010b0e <__ieee754_atan2+0x13e>
 8010a7c:	4b31      	ldr	r3, [pc, #196]	@ (8010b44 <__ieee754_atan2+0x174>)
 8010a7e:	e7f6      	b.n	8010a6e <__ieee754_atan2+0x9e>
 8010a80:	4543      	cmp	r3, r8
 8010a82:	d0e4      	beq.n	8010a4e <__ieee754_atan2+0x7e>
 8010a84:	1a9b      	subs	r3, r3, r2
 8010a86:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8010a8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010a8e:	da1e      	bge.n	8010ace <__ieee754_atan2+0xfe>
 8010a90:	2f00      	cmp	r7, #0
 8010a92:	da01      	bge.n	8010a98 <__ieee754_atan2+0xc8>
 8010a94:	323c      	adds	r2, #60	@ 0x3c
 8010a96:	db1e      	blt.n	8010ad6 <__ieee754_atan2+0x106>
 8010a98:	4632      	mov	r2, r6
 8010a9a:	463b      	mov	r3, r7
 8010a9c:	f7ef fe86 	bl	80007ac <__aeabi_ddiv>
 8010aa0:	ec41 0b10 	vmov	d0, r0, r1
 8010aa4:	f7ff fd7c 	bl	80105a0 <fabs>
 8010aa8:	f7ff fbe2 	bl	8010270 <atan>
 8010aac:	ec51 0b10 	vmov	r0, r1, d0
 8010ab0:	2c01      	cmp	r4, #1
 8010ab2:	d013      	beq.n	8010adc <__ieee754_atan2+0x10c>
 8010ab4:	2c02      	cmp	r4, #2
 8010ab6:	d015      	beq.n	8010ae4 <__ieee754_atan2+0x114>
 8010ab8:	2c00      	cmp	r4, #0
 8010aba:	d0a8      	beq.n	8010a0e <__ieee754_atan2+0x3e>
 8010abc:	a318      	add	r3, pc, #96	@ (adr r3, 8010b20 <__ieee754_atan2+0x150>)
 8010abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac2:	f7ef fb91 	bl	80001e8 <__aeabi_dsub>
 8010ac6:	a318      	add	r3, pc, #96	@ (adr r3, 8010b28 <__ieee754_atan2+0x158>)
 8010ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010acc:	e014      	b.n	8010af8 <__ieee754_atan2+0x128>
 8010ace:	a118      	add	r1, pc, #96	@ (adr r1, 8010b30 <__ieee754_atan2+0x160>)
 8010ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ad4:	e7ec      	b.n	8010ab0 <__ieee754_atan2+0xe0>
 8010ad6:	2000      	movs	r0, #0
 8010ad8:	2100      	movs	r1, #0
 8010ada:	e7e9      	b.n	8010ab0 <__ieee754_atan2+0xe0>
 8010adc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	e794      	b.n	8010a0e <__ieee754_atan2+0x3e>
 8010ae4:	a30e      	add	r3, pc, #56	@ (adr r3, 8010b20 <__ieee754_atan2+0x150>)
 8010ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aea:	f7ef fb7d 	bl	80001e8 <__aeabi_dsub>
 8010aee:	4602      	mov	r2, r0
 8010af0:	460b      	mov	r3, r1
 8010af2:	a10d      	add	r1, pc, #52	@ (adr r1, 8010b28 <__ieee754_atan2+0x158>)
 8010af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010af8:	f7ef fb76 	bl	80001e8 <__aeabi_dsub>
 8010afc:	e787      	b.n	8010a0e <__ieee754_atan2+0x3e>
 8010afe:	a10a      	add	r1, pc, #40	@ (adr r1, 8010b28 <__ieee754_atan2+0x158>)
 8010b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b04:	e783      	b.n	8010a0e <__ieee754_atan2+0x3e>
 8010b06:	a10c      	add	r1, pc, #48	@ (adr r1, 8010b38 <__ieee754_atan2+0x168>)
 8010b08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b0c:	e77f      	b.n	8010a0e <__ieee754_atan2+0x3e>
 8010b0e:	2000      	movs	r0, #0
 8010b10:	2100      	movs	r1, #0
 8010b12:	e77c      	b.n	8010a0e <__ieee754_atan2+0x3e>
 8010b14:	a106      	add	r1, pc, #24	@ (adr r1, 8010b30 <__ieee754_atan2+0x160>)
 8010b16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b1a:	e778      	b.n	8010a0e <__ieee754_atan2+0x3e>
 8010b1c:	f3af 8000 	nop.w
 8010b20:	33145c07 	.word	0x33145c07
 8010b24:	3ca1a626 	.word	0x3ca1a626
 8010b28:	54442d18 	.word	0x54442d18
 8010b2c:	400921fb 	.word	0x400921fb
 8010b30:	54442d18 	.word	0x54442d18
 8010b34:	3ff921fb 	.word	0x3ff921fb
 8010b38:	54442d18 	.word	0x54442d18
 8010b3c:	3fe921fb 	.word	0x3fe921fb
 8010b40:	08010f88 	.word	0x08010f88
 8010b44:	08010f70 	.word	0x08010f70
 8010b48:	54442d18 	.word	0x54442d18
 8010b4c:	c00921fb 	.word	0xc00921fb
 8010b50:	54442d18 	.word	0x54442d18
 8010b54:	bff921fb 	.word	0xbff921fb
 8010b58:	7ff00000 	.word	0x7ff00000

08010b5c <_init>:
 8010b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b5e:	bf00      	nop
 8010b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b62:	bc08      	pop	{r3}
 8010b64:	469e      	mov	lr, r3
 8010b66:	4770      	bx	lr

08010b68 <_fini>:
 8010b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b6a:	bf00      	nop
 8010b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b6e:	bc08      	pop	{r3}
 8010b70:	469e      	mov	lr, r3
 8010b72:	4770      	bx	lr
