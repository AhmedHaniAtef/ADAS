
ADAS _MOVING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca10  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800cbb0  0800cbb0  0000dbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ced0  0800ced0  0000e27c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ced0  0800ced0  0000ded0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ced8  0800ced8  0000e27c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ced8  0800ced8  0000ded8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cedc  0800cedc  0000dedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000027c  20000000  0800cee0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000da28  2000027c  0800d15c  0000e27c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000dca4  0800d15c  0000eca4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e27c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000228ab  00000000  00000000  0000e2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005206  00000000  00000000  00030b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a18  00000000  00000000  00035d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001c23a  00000000  00000000  00037778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00022465  00000000  00000000  000539b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009c65a  00000000  00000000  00075e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00112471  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000013ef  00000000  00000000  001124b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000718c  00000000  00000000  001138a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011aa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000027c 	.word	0x2000027c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cb98 	.word	0x0800cb98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000280 	.word	0x20000280
 80001dc:	0800cb98 	.word	0x0800cb98

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2iz>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a94:	d215      	bcs.n	8000ac2 <__aeabi_d2iz+0x36>
 8000a96:	d511      	bpl.n	8000abc <__aeabi_d2iz+0x30>
 8000a98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d912      	bls.n	8000ac8 <__aeabi_d2iz+0x3c>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ab2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_d2iz+0x48>
 8000ac8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	bf08      	it	eq
 8000ace:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b96a 	b.w	8000e68 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d14e      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bb8:	4694      	mov	ip, r2
 8000bba:	458c      	cmp	ip, r1
 8000bbc:	4686      	mov	lr, r0
 8000bbe:	fab2 f282 	clz	r2, r2
 8000bc2:	d962      	bls.n	8000c8a <__udivmoddi4+0xde>
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc6:	f1c2 0320 	rsb	r3, r2, #32
 8000bca:	4091      	lsls	r1, r2
 8000bcc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd4:	4319      	orrs	r1, r3
 8000bd6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bde:	fa1f f68c 	uxth.w	r6, ip
 8000be2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000be6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bea:	fb07 1114 	mls	r1, r7, r4, r1
 8000bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf2:	fb04 f106 	mul.w	r1, r4, r6
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c02:	f080 8112 	bcs.w	8000e2a <__udivmoddi4+0x27e>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 810f 	bls.w	8000e2a <__udivmoddi4+0x27e>
 8000c0c:	3c02      	subs	r4, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	fa1f f38e 	uxth.w	r3, lr
 8000c16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb00 f606 	mul.w	r6, r0, r6
 8000c26:	429e      	cmp	r6, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x94>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c32:	f080 80fc 	bcs.w	8000e2e <__udivmoddi4+0x282>
 8000c36:	429e      	cmp	r6, r3
 8000c38:	f240 80f9 	bls.w	8000e2e <__udivmoddi4+0x282>
 8000c3c:	4463      	add	r3, ip
 8000c3e:	3802      	subs	r0, #2
 8000c40:	1b9b      	subs	r3, r3, r6
 8000c42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c46:	2100      	movs	r1, #0
 8000c48:	b11d      	cbz	r5, 8000c52 <__udivmoddi4+0xa6>
 8000c4a:	40d3      	lsrs	r3, r2
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d905      	bls.n	8000c66 <__udivmoddi4+0xba>
 8000c5a:	b10d      	cbz	r5, 8000c60 <__udivmoddi4+0xb4>
 8000c5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c60:	2100      	movs	r1, #0
 8000c62:	4608      	mov	r0, r1
 8000c64:	e7f5      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c66:	fab3 f183 	clz	r1, r3
 8000c6a:	2900      	cmp	r1, #0
 8000c6c:	d146      	bne.n	8000cfc <__udivmoddi4+0x150>
 8000c6e:	42a3      	cmp	r3, r4
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xcc>
 8000c72:	4290      	cmp	r0, r2
 8000c74:	f0c0 80f0 	bcc.w	8000e58 <__udivmoddi4+0x2ac>
 8000c78:	1a86      	subs	r6, r0, r2
 8000c7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d0e6      	beq.n	8000c52 <__udivmoddi4+0xa6>
 8000c84:	e9c5 6300 	strd	r6, r3, [r5]
 8000c88:	e7e3      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	f040 8090 	bne.w	8000db0 <__udivmoddi4+0x204>
 8000c90:	eba1 040c 	sub.w	r4, r1, ip
 8000c94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c98:	fa1f f78c 	uxth.w	r7, ip
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb08 4416 	mls	r4, r8, r6, r4
 8000caa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cae:	fb07 f006 	mul.w	r0, r7, r6
 8000cb2:	4298      	cmp	r0, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x11c>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x11a>
 8000cc0:	4298      	cmp	r0, r3
 8000cc2:	f200 80cd 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000cc6:	4626      	mov	r6, r4
 8000cc8:	1a1c      	subs	r4, r3, r0
 8000cca:	fa1f f38e 	uxth.w	r3, lr
 8000cce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb00 f707 	mul.w	r7, r0, r7
 8000cde:	429f      	cmp	r7, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x148>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x146>
 8000cec:	429f      	cmp	r7, r3
 8000cee:	f200 80b0 	bhi.w	8000e52 <__udivmoddi4+0x2a6>
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	1bdb      	subs	r3, r3, r7
 8000cf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfa:	e7a5      	b.n	8000c48 <__udivmoddi4+0x9c>
 8000cfc:	f1c1 0620 	rsb	r6, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa22 f706 	lsr.w	r7, r2, r6
 8000d06:	431f      	orrs	r7, r3
 8000d08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d10:	ea43 030c 	orr.w	r3, r3, ip
 8000d14:	40f4      	lsrs	r4, r6
 8000d16:	fa00 f801 	lsl.w	r8, r0, r1
 8000d1a:	0c38      	lsrs	r0, r7, #16
 8000d1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d20:	fbb4 fef0 	udiv	lr, r4, r0
 8000d24:	fa1f fc87 	uxth.w	ip, r7
 8000d28:	fb00 441e 	mls	r4, r0, lr, r4
 8000d2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d30:	fb0e f90c 	mul.w	r9, lr, ip
 8000d34:	45a1      	cmp	r9, r4
 8000d36:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3a:	d90a      	bls.n	8000d52 <__udivmoddi4+0x1a6>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d42:	f080 8084 	bcs.w	8000e4e <__udivmoddi4+0x2a2>
 8000d46:	45a1      	cmp	r9, r4
 8000d48:	f240 8081 	bls.w	8000e4e <__udivmoddi4+0x2a2>
 8000d4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	eba4 0409 	sub.w	r4, r4, r9
 8000d56:	fa1f f983 	uxth.w	r9, r3
 8000d5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x1d2>
 8000d6e:	193c      	adds	r4, r7, r4
 8000d70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d74:	d267      	bcs.n	8000e46 <__udivmoddi4+0x29a>
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0x29a>
 8000d7a:	3b02      	subs	r3, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d82:	fba0 9302 	umull	r9, r3, r0, r2
 8000d86:	eba4 040c 	sub.w	r4, r4, ip
 8000d8a:	429c      	cmp	r4, r3
 8000d8c:	46ce      	mov	lr, r9
 8000d8e:	469c      	mov	ip, r3
 8000d90:	d351      	bcc.n	8000e36 <__udivmoddi4+0x28a>
 8000d92:	d04e      	beq.n	8000e32 <__udivmoddi4+0x286>
 8000d94:	b155      	cbz	r5, 8000dac <__udivmoddi4+0x200>
 8000d96:	ebb8 030e 	subs.w	r3, r8, lr
 8000d9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000da2:	40cb      	lsrs	r3, r1
 8000da4:	431e      	orrs	r6, r3
 8000da6:	40cc      	lsrs	r4, r1
 8000da8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	e750      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000db0:	f1c2 0320 	rsb	r3, r2, #32
 8000db4:	fa20 f103 	lsr.w	r1, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc0:	4094      	lsls	r4, r2
 8000dc2:	430c      	orrs	r4, r1
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dcc:	fa1f f78c 	uxth.w	r7, ip
 8000dd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dd8:	0c23      	lsrs	r3, r4, #16
 8000dda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dde:	fb00 f107 	mul.w	r1, r0, r7
 8000de2:	4299      	cmp	r1, r3
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x24c>
 8000de6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dee:	d22c      	bcs.n	8000e4a <__udivmoddi4+0x29e>
 8000df0:	4299      	cmp	r1, r3
 8000df2:	d92a      	bls.n	8000e4a <__udivmoddi4+0x29e>
 8000df4:	3802      	subs	r0, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e00:	fb08 3311 	mls	r3, r8, r1, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb01 f307 	mul.w	r3, r1, r7
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x276>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e18:	d213      	bcs.n	8000e42 <__udivmoddi4+0x296>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d911      	bls.n	8000e42 <__udivmoddi4+0x296>
 8000e1e:	3902      	subs	r1, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	1ae4      	subs	r4, r4, r3
 8000e24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e28:	e739      	b.n	8000c9e <__udivmoddi4+0xf2>
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	e6f0      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e706      	b.n	8000c40 <__udivmoddi4+0x94>
 8000e32:	45c8      	cmp	r8, r9
 8000e34:	d2ae      	bcs.n	8000d94 <__udivmoddi4+0x1e8>
 8000e36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e3e:	3801      	subs	r0, #1
 8000e40:	e7a8      	b.n	8000d94 <__udivmoddi4+0x1e8>
 8000e42:	4631      	mov	r1, r6
 8000e44:	e7ed      	b.n	8000e22 <__udivmoddi4+0x276>
 8000e46:	4603      	mov	r3, r0
 8000e48:	e799      	b.n	8000d7e <__udivmoddi4+0x1d2>
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	e7d4      	b.n	8000df8 <__udivmoddi4+0x24c>
 8000e4e:	46d6      	mov	lr, sl
 8000e50:	e77f      	b.n	8000d52 <__udivmoddi4+0x1a6>
 8000e52:	4463      	add	r3, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e74d      	b.n	8000cf4 <__udivmoddi4+0x148>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e70f      	b.n	8000c80 <__udivmoddi4+0xd4>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	e730      	b.n	8000cc8 <__udivmoddi4+0x11c>
 8000e66:	bf00      	nop

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <CAN_task_init>:
 * 
 * @param p_CanBus pointer to the bus of CAN
 * @return app_status_t status of the operation 
 */
app_status_t CAN_task_init (CAN_bus_t *p_CanBus)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]
    ecu_status_t l_EcuStatus = ECU_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73bb      	strb	r3, [r7, #14]
    if (NULL == p_CanBus)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d102      	bne.n	8000e88 <CAN_task_init+0x1c>
    {
        l_AppStatus = APP_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
 8000e86:	e017      	b.n	8000eb8 <CAN_task_init+0x4c>
    }
    else
    {
        l_EcuStatus |= CANSPI_Initialize(p_CanBus->UsedCAN);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 fabf 	bl	8005410 <CANSPI_Initialize>
 8000e92:	4603      	mov	r3, r0
 8000e94:	461a      	mov	r2, r3
 8000e96:	7bbb      	ldrb	r3, [r7, #14]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	73bb      	strb	r3, [r7, #14]
        p_CanBus->ExpectedMSG = list_create();
 8000e9c:	f00a fc4e 	bl	800b73c <list_create>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	605a      	str	r2, [r3, #4]
        if ((l_EcuStatus != ECU_OK) || (NULL == p_CanBus->ExpectedMSG))
 8000ea6:	7bbb      	ldrb	r3, [r7, #14]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d103      	bne.n	8000eb4 <CAN_task_init+0x48>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <CAN_task_init+0x4c>
        {
            l_AppStatus = APP_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_AppStatus;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <CAN_add_msg_rx>:
 * @param p_CanBus pointer to the CAN bus which could receive the message
 * @param p_Message pointer to the message could be received
 * @return app_status_t status of the operation 
 */
app_status_t CAN_add_msg_rx (CAN_bus_t *p_CanBus, can_msg_t *p_Message)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
    app_status_t l_AppStatus = APP_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
    if ((NULL == p_CanBus) || (NULL == p_Message))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <CAN_add_msg_rx+0x1a>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <CAN_add_msg_rx+0x20>
    {
        l_AppStatus = APP_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e005      	b.n	8000eee <CAN_add_msg_rx+0x2c>
    }
    else
    {
        list_append(p_CanBus->ExpectedMSG, p_Message);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	6839      	ldr	r1, [r7, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f00a fc43 	bl	800b774 <list_append>
    }
    return l_AppStatus;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <CAN_rx_task>:
 * @param p_CanBus pointer to the CAN bus
 * @return app_status_t status of the operation 
 * @note this task should be blocked waiting for interrupt to unblock it
 */
app_status_t CAN_rx_task (CAN_bus_t *p_CanBus)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	@ 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
    app_status_t l_AppStatus = APP_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    ecu_status_t l_EcuStatus = ECU_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (NULL == p_CanBus)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d103      	bne.n	8000f1a <CAN_rx_task+0x22>
    {
        l_AppStatus = APP_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f18:	e02c      	b.n	8000f74 <CAN_rx_task+0x7c>
    }
    else
    {
        uCAN_MSG l_TempMessage;
        can_msg_t *l_RxMessage = NULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
        l_EcuStatus |= CANSPI_Receive(p_CanBus->UsedCAN, &l_TempMessage);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f107 020c 	add.w	r2, r7, #12
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 fce9 	bl	8005900 <CANSPI_Receive>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	461a      	mov	r2, r3
 8000f32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f36:	4313      	orrs	r3, r2
 8000f38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        if (l_EcuStatus == ECU_OK)
 8000f3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d117      	bne.n	8000f74 <CAN_rx_task+0x7c>
        {
            l_RxMessage = (can_msg_t *)list_find(p_CanBus->ExpectedMSG, &(l_TempMessage), find_msg_with_id);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f107 010c 	add.w	r1, r7, #12
 8000f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f80 <CAN_rx_task+0x88>)
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f00a fc48 	bl	800b7e4 <list_find>
 8000f54:	6238      	str	r0, [r7, #32]
            if (l_RxMessage != NULL)
 8000f56:	6a3b      	ldr	r3, [r7, #32]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00b      	beq.n	8000f74 <CAN_rx_task+0x7c>
            {
                memcpy(&l_RxMessage->Message, &l_TempMessage, sizeof(uCAN_MSG));
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
 8000f5e:	f107 010c 	add.w	r1, r7, #12
 8000f62:	2214      	movs	r2, #20
 8000f64:	4618      	mov	r0, r3
 8000f66:	f00a fd61 	bl	800ba2c <memcpy>
                l_RxMessage->CallBack(&l_RxMessage->Message);
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	6a3a      	ldr	r2, [r7, #32]
 8000f70:	4610      	mov	r0, r2
 8000f72:	4798      	blx	r3
            }
        }
    }
    return l_AppStatus;
 8000f74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3728      	adds	r7, #40	@ 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	08001023 	.word	0x08001023

08000f84 <CAN_send_message>:
 * @param p_Message pointer to the transsmitted message
 * @return app_status_t status of the operation 
 * @note this function calls callback to update the message frame
 */
app_status_t CAN_send_message (CAN_bus_t *p_CanBus, can_msg_t *p_Message)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
    app_status_t l_AppStatus = APP_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
    ecu_status_t l_EcuStatus = ECU_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	73bb      	strb	r3, [r7, #14]
    if ((NULL == p_CanBus) || (NULL == p_Message))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <CAN_send_message+0x1e>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d102      	bne.n	8000fa8 <CAN_send_message+0x24>
    {
        l_AppStatus = APP_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	e037      	b.n	8001018 <CAN_send_message+0x94>
    }
    else
    {
        p_Message->CallBack(&p_Message->Message);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	4610      	mov	r0, r2
 8000fb0:	4798      	blx	r3
        p_Message->Message.frame.id = p_Message->ID;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	695a      	ldr	r2, [r3, #20]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
        l_EcuStatus = CANSPI_isBussOff(p_CanBus->UsedCAN);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f004 fd5c 	bl	8005a7c <CANSPI_isBussOff>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	73bb      	strb	r3, [r7, #14]
        if (l_EcuStatus == ECU_OK)
 8000fc8:	7bbb      	ldrb	r3, [r7, #14]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d111      	bne.n	8000ff2 <CAN_send_message+0x6e>
        {
            l_EcuStatus |= CANSPI_Transmit(p_CanBus->UsedCAN, &p_Message->Message);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f004 fbcc 	bl	8005774 <CANSPI_Transmit>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	73bb      	strb	r3, [r7, #14]
            if ((l_EcuStatus != ECU_OK))
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d015      	beq.n	8001018 <CAN_send_message+0x94>
            {
                l_AppStatus = APP_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	e012      	b.n	8001018 <CAN_send_message+0x94>
            }
        }
        else
        {
            l_EcuStatus = CANSPI_isTxErrorPassive(p_CanBus->UsedCAN);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f004 fd68 	bl	8005acc <CANSPI_isTxErrorPassive>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	73bb      	strb	r3, [r7, #14]
            if (l_EcuStatus == ECU_ERROR)
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d108      	bne.n	8001018 <CAN_send_message+0x94>
            {
                l_EcuStatus = CANSPI_Initialize(p_CanBus->UsedCAN);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f004 fa00 	bl	8005410 <CANSPI_Initialize>
 8001010:	4603      	mov	r3, r0
 8001012:	73bb      	strb	r3, [r7, #14]
                l_AppStatus = APP_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
            }
        }
    }
    return l_AppStatus;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <find_msg_with_id>:
 * @param p_MsgExpected pointer to the messages which can expected to receive and handle
 * @param p_MsgReceived pointer to the received message
 * @return int 1 if yes 0 if no
 */
static int find_msg_with_id(void *p_MsgExpected, const void *p_MsgReceived)
{
 8001022:	b480      	push	{r7}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	6039      	str	r1, [r7, #0]
    int l_RetVal = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
    if (((can_msg_t *)p_MsgExpected)->ID == ((uCAN_MSG *)p_MsgReceived)->frame.id)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	695a      	ldr	r2, [r3, #20]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	429a      	cmp	r2, r3
 800103a:	d101      	bne.n	8001040 <find_msg_with_id+0x1e>
    {
        l_RetVal = 1;
 800103c:	2301      	movs	r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
    }
    return l_RetVal;
 8001040:	68fb      	ldr	r3, [r7, #12]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <messages_init>:
/**
 * @brief responsible for adding messages to the list of expected messages to receive via CAN bus
 * @return app_status_t status of operation
 */
app_status_t messages_init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
    app_status_t l_AppStatus = APP_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	71fb      	strb	r3, [r7, #7]
    l_AppStatus |= CAN_add_msg_rx(&Main_CAN, &msg_robot_strafe);
 800105a:	4914      	ldr	r1, [pc, #80]	@ (80010ac <messages_init+0x5c>)
 800105c:	4814      	ldr	r0, [pc, #80]	@ (80010b0 <messages_init+0x60>)
 800105e:	f7ff ff30 	bl	8000ec2 <CAN_add_msg_rx>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	4313      	orrs	r3, r2
 800106a:	71fb      	strb	r3, [r7, #7]
    l_AppStatus |= CAN_add_msg_rx(&Main_CAN, &msg_robot_rotate);
 800106c:	4911      	ldr	r1, [pc, #68]	@ (80010b4 <messages_init+0x64>)
 800106e:	4810      	ldr	r0, [pc, #64]	@ (80010b0 <messages_init+0x60>)
 8001070:	f7ff ff27 	bl	8000ec2 <CAN_add_msg_rx>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	4313      	orrs	r3, r2
 800107c:	71fb      	strb	r3, [r7, #7]
    l_AppStatus |= CAN_add_msg_rx(&Main_CAN, &msg_robot_stop);
 800107e:	490e      	ldr	r1, [pc, #56]	@ (80010b8 <messages_init+0x68>)
 8001080:	480b      	ldr	r0, [pc, #44]	@ (80010b0 <messages_init+0x60>)
 8001082:	f7ff ff1e 	bl	8000ec2 <CAN_add_msg_rx>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4313      	orrs	r3, r2
 800108e:	71fb      	strb	r3, [r7, #7]
    l_AppStatus |= CAN_add_msg_rx(&Main_CAN, &msg_robot_Wz);
 8001090:	490a      	ldr	r1, [pc, #40]	@ (80010bc <messages_init+0x6c>)
 8001092:	4807      	ldr	r0, [pc, #28]	@ (80010b0 <messages_init+0x60>)
 8001094:	f7ff ff15 	bl	8000ec2 <CAN_add_msg_rx>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4313      	orrs	r3, r2
 80010a0:	71fb      	strb	r3, [r7, #7]
    return l_AppStatus;
 80010a2:	79fb      	ldrb	r3, [r7, #7]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000024 	.word	0x20000024
 80010b8:	20000040 	.word	0x20000040
 80010bc:	2000005c 	.word	0x2000005c

080010c0 <msg_robot_strafe_clb>:
*                                               STATIC FUNCTION DECLARATION                                            *
***********************************************************************************************************************/

/* Message for robot strafe callback */
static void msg_robot_strafe_clb(uCAN_MSG *p_Message)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
    two_float_conv temp = {0};
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
    memcpy(&temp.data, p_Message->frame.data, 8);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f103 0209 	add.w	r2, r3, #9
 80010d8:	f107 0308 	add.w	r3, r7, #8
 80010dc:	6810      	ldr	r0, [r2, #0]
 80010de:	6851      	ldr	r1, [r2, #4]
 80010e0:	c303      	stmia	r3!, {r0, r1}
    float speed = temp.value[0];
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	617b      	str	r3, [r7, #20]
    float direction = temp.value[1];
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	613b      	str	r3, [r7, #16]
    robot_move(&ADAS_ROBOT, direction, speed);
 80010ea:	edd7 0a05 	vldr	s1, [r7, #20]
 80010ee:	ed97 0a04 	vldr	s0, [r7, #16]
 80010f2:	4803      	ldr	r0, [pc, #12]	@ (8001100 <msg_robot_strafe_clb+0x40>)
 80010f4:	f005 fd4c 	bl	8006b90 <robot_move>
}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000a0 	.word	0x200000a0

08001104 <msg_robot_rotate_clb>:

/* Message for robot rotate callback */
static void msg_robot_rotate_clb(uCAN_MSG *p_Message)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	two_float_conv temp = {0};
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
    memcpy(&temp.data, p_Message->frame.data, 8);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f103 0209 	add.w	r2, r3, #9
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	6810      	ldr	r0, [r2, #0]
 8001122:	6851      	ldr	r1, [r2, #4]
 8001124:	c303      	stmia	r3!, {r0, r1}
    float speed = temp.value[0];
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	617b      	str	r3, [r7, #20]
    float radius = temp.value[1];
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	613b      	str	r3, [r7, #16]
    robot_rotate(&ADAS_ROBOT, radius, speed);
 800112e:	edd7 0a05 	vldr	s1, [r7, #20]
 8001132:	ed97 0a04 	vldr	s0, [r7, #16]
 8001136:	4803      	ldr	r0, [pc, #12]	@ (8001144 <msg_robot_rotate_clb+0x40>)
 8001138:	f005 ff96 	bl	8007068 <robot_rotate>
}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200000a0 	.word	0x200000a0

08001148 <msg_robot_stop_clb>:

/* Message for robot stop callback */
static void msg_robot_stop_clb(uCAN_MSG *p_Message)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    uint8_t flag = p_Message->frame.data[0];
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7a5b      	ldrb	r3, [r3, #9]
 8001154:	73fb      	strb	r3, [r7, #15]
    if (0xFF == flag)
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	2bff      	cmp	r3, #255	@ 0xff
 800115a:	d102      	bne.n	8001162 <msg_robot_stop_clb+0x1a>
    {
        robot_stop(&ADAS_ROBOT);
 800115c:	4803      	ldr	r0, [pc, #12]	@ (800116c <msg_robot_stop_clb+0x24>)
 800115e:	f006 f9b5 	bl	80074cc <robot_stop>
    }
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200000a0 	.word	0x200000a0

08001170 <msg_robot_Wz_clb>:

/* Message for robot updating the value of omega z callback */
static void msg_robot_Wz_clb(uCAN_MSG *p_Message)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	one_float_conv temp = {0};
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
    memcpy(&temp.data, p_Message->frame.data, 4);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3309      	adds	r3, #9
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60bb      	str	r3, [r7, #8]
    float l_new_Wz = temp.value;
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	60fb      	str	r3, [r7, #12]
    robot_manual_move(&ADAS_ROBOT, ADAS_ROBOT.Vx, ADAS_ROBOT.Vy, l_new_Wz);
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <msg_robot_Wz_clb+0x40>)
 800118c:	edd3 7a58 	vldr	s15, [r3, #352]	@ 0x160
 8001190:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <msg_robot_Wz_clb+0x40>)
 8001192:	ed93 7a59 	vldr	s14, [r3, #356]	@ 0x164
 8001196:	ed97 1a03 	vldr	s2, [r7, #12]
 800119a:	eef0 0a47 	vmov.f32	s1, s14
 800119e:	eeb0 0a67 	vmov.f32	s0, s15
 80011a2:	4803      	ldr	r0, [pc, #12]	@ (80011b0 <msg_robot_Wz_clb+0x40>)
 80011a4:	f005 fafc 	bl	80067a0 <robot_manual_move>
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200000a0 	.word	0x200000a0

080011b4 <msg_update_encoder_clb>:

/* Message for update encoder position callback */
static void msg_update_encoder_clb(uCAN_MSG *p_Message)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    p_Message->frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
    p_Message->frame.dlc = 8;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2208      	movs	r2, #8
 80011c6:	721a      	strb	r2, [r3, #8]

    two_float_conv temp;

    temp.value[0] = ADAS_ROBOT.FL.Encoder.Position;
 80011c8:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <msg_update_encoder_clb+0x3c>)
 80011ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011cc:	60bb      	str	r3, [r7, #8]
    temp.value[1] = ADAS_ROBOT.FR.Encoder.Position;
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <msg_update_encoder_clb+0x3c>)
 80011d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011d2:	60fb      	str	r3, [r7, #12]

    memcpy(p_Message->frame.data, temp.data, 8);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3309      	adds	r3, #9
 80011d8:	461a      	mov	r2, r3
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	cb03      	ldmia	r3!, {r0, r1}
 80011e0:	6010      	str	r0, [r2, #0]
 80011e2:	6051      	str	r1, [r2, #4]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	200000a0 	.word	0x200000a0

080011f4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
return 0;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of CAN_mutex */
  CAN_mutexHandle = osMutexNew(&CAN_mutex_attributes);
 8001218:	4817      	ldr	r0, [pc, #92]	@ (8001278 <MX_FREERTOS_Init+0x64>)
 800121a:	f006 fda8 	bl	8007d6e <osMutexNew>
 800121e:	4603      	mov	r3, r0
 8001220:	4a16      	ldr	r2, [pc, #88]	@ (800127c <MX_FREERTOS_Init+0x68>)
 8001222:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ROBOT_INITsema */
  ROBOT_INITsemaHandle = osSemaphoreNew(1, 0, &ROBOT_INITsema_attributes);
 8001224:	4a16      	ldr	r2, [pc, #88]	@ (8001280 <MX_FREERTOS_Init+0x6c>)
 8001226:	2100      	movs	r1, #0
 8001228:	2001      	movs	r0, #1
 800122a:	f006 feae 	bl	8007f8a <osSemaphoreNew>
 800122e:	4603      	mov	r3, r0
 8001230:	4a14      	ldr	r2, [pc, #80]	@ (8001284 <MX_FREERTOS_Init+0x70>)
 8001232:	6013      	str	r3, [r2, #0]

  /* creation of CAN_sema */
  CAN_semaHandle = osSemaphoreNew(2, 0, &CAN_sema_attributes);
 8001234:	4a14      	ldr	r2, [pc, #80]	@ (8001288 <MX_FREERTOS_Init+0x74>)
 8001236:	2100      	movs	r1, #0
 8001238:	2002      	movs	r0, #2
 800123a:	f006 fea6 	bl	8007f8a <osSemaphoreNew>
 800123e:	4603      	mov	r3, r0
 8001240:	4a12      	ldr	r2, [pc, #72]	@ (800128c <MX_FREERTOS_Init+0x78>)
 8001242:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PID_task */
  PID_taskHandle = osThreadNew(PIDtask, NULL, &PID_task_attributes);
 8001244:	4a12      	ldr	r2, [pc, #72]	@ (8001290 <MX_FREERTOS_Init+0x7c>)
 8001246:	2100      	movs	r1, #0
 8001248:	4812      	ldr	r0, [pc, #72]	@ (8001294 <MX_FREERTOS_Init+0x80>)
 800124a:	f006 fce3 	bl	8007c14 <osThreadNew>
 800124e:	4603      	mov	r3, r0
 8001250:	4a11      	ldr	r2, [pc, #68]	@ (8001298 <MX_FREERTOS_Init+0x84>)
 8001252:	6013      	str	r3, [r2, #0]

  /* creation of CAN_task */
  CAN_taskHandle = osThreadNew(CANtask, NULL, &CAN_task_attributes);
 8001254:	4a11      	ldr	r2, [pc, #68]	@ (800129c <MX_FREERTOS_Init+0x88>)
 8001256:	2100      	movs	r1, #0
 8001258:	4811      	ldr	r0, [pc, #68]	@ (80012a0 <MX_FREERTOS_Init+0x8c>)
 800125a:	f006 fcdb 	bl	8007c14 <osThreadNew>
 800125e:	4603      	mov	r3, r0
 8001260:	4a10      	ldr	r2, [pc, #64]	@ (80012a4 <MX_FREERTOS_Init+0x90>)
 8001262:	6013      	str	r3, [r2, #0]

  /* creation of Encoder_task */
  Encoder_taskHandle = osThreadNew(EncoderTask, NULL, &Encoder_task_attributes);
 8001264:	4a10      	ldr	r2, [pc, #64]	@ (80012a8 <MX_FREERTOS_Init+0x94>)
 8001266:	2100      	movs	r1, #0
 8001268:	4810      	ldr	r0, [pc, #64]	@ (80012ac <MX_FREERTOS_Init+0x98>)
 800126a:	f006 fcd3 	bl	8007c14 <osThreadNew>
 800126e:	4603      	mov	r3, r0
 8001270:	4a0f      	ldr	r2, [pc, #60]	@ (80012b0 <MX_FREERTOS_Init+0x9c>)
 8001272:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	0800ccb0 	.word	0x0800ccb0
 800127c:	200002ac 	.word	0x200002ac
 8001280:	0800ccc0 	.word	0x0800ccc0
 8001284:	200002b0 	.word	0x200002b0
 8001288:	0800ccd0 	.word	0x0800ccd0
 800128c:	200002b4 	.word	0x200002b4
 8001290:	0800cc44 	.word	0x0800cc44
 8001294:	080012b5 	.word	0x080012b5
 8001298:	200002a0 	.word	0x200002a0
 800129c:	0800cc68 	.word	0x0800cc68
 80012a0:	08001301 	.word	0x08001301
 80012a4:	200002a4 	.word	0x200002a4
 80012a8:	0800cc8c 	.word	0x0800cc8c
 80012ac:	08001369 	.word	0x08001369
 80012b0:	200002a8 	.word	0x200002a8

080012b4 <PIDtask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PIDtask */
void PIDtask(void *argument)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PIDtask */
  ecu_status_t t_EcuStatus = robot_init(&ADAS_ROBOT, MOTORS_PID_TIME_STEP);
 80012bc:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80012f4 <PIDtask+0x40>
 80012c0:	480d      	ldr	r0, [pc, #52]	@ (80012f8 <PIDtask+0x44>)
 80012c2:	f006 f971 	bl	80075a8 <robot_init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
  osSemaphoreRelease(ROBOT_INITsemaHandle);
 80012ca:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <PIDtask+0x48>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f006 ff36 	bl	8008140 <osSemaphoreRelease>
  /* Infinite loop */
  for(;;)
  {
    t_EcuStatus |= robot_PID(&ADAS_ROBOT, MOTORS_PID_TIME_STEP);
 80012d4:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80012f4 <PIDtask+0x40>
 80012d8:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <PIDtask+0x44>)
 80012da:	f006 fa9f 	bl	800781c <robot_PID>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	73fb      	strb	r3, [r7, #15]
    osDelay(MOTORS_PID_TIME_STEP);
 80012e8:	2032      	movs	r0, #50	@ 0x32
 80012ea:	f006 fd25 	bl	8007d38 <osDelay>
    t_EcuStatus |= robot_PID(&ADAS_ROBOT, MOTORS_PID_TIME_STEP);
 80012ee:	bf00      	nop
 80012f0:	e7f0      	b.n	80012d4 <PIDtask+0x20>
 80012f2:	bf00      	nop
 80012f4:	42480000 	.word	0x42480000
 80012f8:	200000a0 	.word	0x200000a0
 80012fc:	200002b0 	.word	0x200002b0

08001300 <CANtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CANtask */
void CANtask(void *argument)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CANtask */
  app_status_t t_AppStatus = CAN_task_init(&Main_CAN);
 8001308:	4814      	ldr	r0, [pc, #80]	@ (800135c <CANtask+0x5c>)
 800130a:	f7ff fdaf 	bl	8000e6c <CAN_task_init>
 800130e:	4603      	mov	r3, r0
 8001310:	73fb      	strb	r3, [r7, #15]
  t_AppStatus |= messages_init();
 8001312:	f7ff fe9d 	bl	8001050 <messages_init>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	4313      	orrs	r3, r2
 800131e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreAcquire(CAN_semaHandle, osWaitForever);
 8001320:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <CANtask+0x60>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	4618      	mov	r0, r3
 800132a:	f006 feb7 	bl	800809c <osSemaphoreAcquire>
    osMutexAcquire(CAN_mutexHandle, osWaitForever);
 800132e:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <CANtask+0x64>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f04f 31ff 	mov.w	r1, #4294967295
 8001336:	4618      	mov	r0, r3
 8001338:	f006 fd9f 	bl	8007e7a <osMutexAcquire>
    t_AppStatus |= CAN_rx_task(&Main_CAN);
 800133c:	4807      	ldr	r0, [pc, #28]	@ (800135c <CANtask+0x5c>)
 800133e:	f7ff fddb 	bl	8000ef8 <CAN_rx_task>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	4313      	orrs	r3, r2
 800134a:	73fb      	strb	r3, [r7, #15]
    osMutexRelease(CAN_mutexHandle);
 800134c:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <CANtask+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f006 fddd 	bl	8007f10 <osMutexRelease>
    osSemaphoreAcquire(CAN_semaHandle, osWaitForever);
 8001356:	bf00      	nop
 8001358:	e7e2      	b.n	8001320 <CANtask+0x20>
 800135a:	bf00      	nop
 800135c:	20000000 	.word	0x20000000
 8001360:	200002b4 	.word	0x200002b4
 8001364:	200002ac 	.word	0x200002ac

08001368 <EncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EncoderTask */
void EncoderTask(void *argument)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EncoderTask */
  app_status_t t_AppStatus = APP_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
    if (ADAS_ROBOT.FL.Encoder.Position != EncoderLeftTemp ||
 8001374:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <EncoderTask+0x7c>)
 8001376:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800137a:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <EncoderTask+0x80>)
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	eeb4 7a67 	vcmp.f32	s14, s15
 8001384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001388:	d10a      	bne.n	80013a0 <EncoderTask+0x38>
        ADAS_ROBOT.FR.Encoder.Position != EncoderRightTemp  ) 
 800138a:	4b16      	ldr	r3, [pc, #88]	@ (80013e4 <EncoderTask+0x7c>)
 800138c:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8001390:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <EncoderTask+0x84>)
 8001392:	edd3 7a00 	vldr	s15, [r3]
    if (ADAS_ROBOT.FL.Encoder.Position != EncoderLeftTemp ||
 8001396:	eeb4 7a67 	vcmp.f32	s14, s15
 800139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139e:	d01c      	beq.n	80013da <EncoderTask+0x72>
    {
      osMutexAcquire(CAN_mutexHandle, osWaitForever);
 80013a0:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <EncoderTask+0x88>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	4618      	mov	r0, r3
 80013aa:	f006 fd66 	bl	8007e7a <osMutexAcquire>
      t_AppStatus |= CAN_send_message(&Main_CAN, &msg_update_encoder);
 80013ae:	4911      	ldr	r1, [pc, #68]	@ (80013f4 <EncoderTask+0x8c>)
 80013b0:	4811      	ldr	r0, [pc, #68]	@ (80013f8 <EncoderTask+0x90>)
 80013b2:	f7ff fde7 	bl	8000f84 <CAN_send_message>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	4313      	orrs	r3, r2
 80013be:	73fb      	strb	r3, [r7, #15]
      osMutexRelease(CAN_mutexHandle);
 80013c0:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <EncoderTask+0x88>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f006 fda3 	bl	8007f10 <osMutexRelease>
      EncoderLeftTemp = ADAS_ROBOT.FL.Encoder.Position;
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <EncoderTask+0x7c>)
 80013cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ce:	4a06      	ldr	r2, [pc, #24]	@ (80013e8 <EncoderTask+0x80>)
 80013d0:	6013      	str	r3, [r2, #0]
      EncoderRightTemp = ADAS_ROBOT.FR.Encoder.Position;
 80013d2:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <EncoderTask+0x7c>)
 80013d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013d6:	4a05      	ldr	r2, [pc, #20]	@ (80013ec <EncoderTask+0x84>)
 80013d8:	6013      	str	r3, [r2, #0]
    }

    osDelay(50);
 80013da:	2032      	movs	r0, #50	@ 0x32
 80013dc:	f006 fcac 	bl	8007d38 <osDelay>
    if (ADAS_ROBOT.FL.Encoder.Position != EncoderLeftTemp ||
 80013e0:	e7c8      	b.n	8001374 <EncoderTask+0xc>
 80013e2:	bf00      	nop
 80013e4:	200000a0 	.word	0x200000a0
 80013e8:	20000298 	.word	0x20000298
 80013ec:	2000029c 	.word	0x2000029c
 80013f0:	200002ac 	.word	0x200002ac
 80013f4:	20000078 	.word	0x20000078
 80013f8:	20000000 	.word	0x20000000

080013fc <HAL_GPIO_EXTI_Callback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == CAN_INT_Pin) {
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800140c:	d104      	bne.n	8001418 <HAL_GPIO_EXTI_Callback+0x1c>
	    // Call your custom callback function here
	    osSemaphoreRelease(CAN_semaHandle);
 800140e:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <HAL_GPIO_EXTI_Callback+0x24>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f006 fe94 	bl	8008140 <osSemaphoreRelease>
	}
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200002b4 	.word	0x200002b4

08001424 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b4d      	ldr	r3, [pc, #308]	@ (8001574 <MX_GPIO_Init+0x150>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a4c      	ldr	r2, [pc, #304]	@ (8001574 <MX_GPIO_Init+0x150>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b4a      	ldr	r3, [pc, #296]	@ (8001574 <MX_GPIO_Init+0x150>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b46      	ldr	r3, [pc, #280]	@ (8001574 <MX_GPIO_Init+0x150>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a45      	ldr	r2, [pc, #276]	@ (8001574 <MX_GPIO_Init+0x150>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b43      	ldr	r3, [pc, #268]	@ (8001574 <MX_GPIO_Init+0x150>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b3f      	ldr	r3, [pc, #252]	@ (8001574 <MX_GPIO_Init+0x150>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a3e      	ldr	r2, [pc, #248]	@ (8001574 <MX_GPIO_Init+0x150>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b3c      	ldr	r3, [pc, #240]	@ (8001574 <MX_GPIO_Init+0x150>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b38      	ldr	r3, [pc, #224]	@ (8001574 <MX_GPIO_Init+0x150>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a37      	ldr	r2, [pc, #220]	@ (8001574 <MX_GPIO_Init+0x150>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b35      	ldr	r3, [pc, #212]	@ (8001574 <MX_GPIO_Init+0x150>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RL_2_Pin|RL_1_Pin|FL_2_Pin|FL_1_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	f641 0130 	movw	r1, #6192	@ 0x1830
 80014b0:	4831      	ldr	r0, [pc, #196]	@ (8001578 <MX_GPIO_Init+0x154>)
 80014b2:	f001 fa23 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RR_2_Pin|RR_1_Pin|FR_2_Pin|FR_1_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2133      	movs	r1, #51	@ 0x33
 80014ba:	4830      	ldr	r0, [pc, #192]	@ (800157c <MX_GPIO_Init+0x158>)
 80014bc:	f001 fa1e 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014c6:	482d      	ldr	r0, [pc, #180]	@ (800157c <MX_GPIO_Init+0x158>)
 80014c8:	f001 fa18 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_INT_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin;
 80014cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d8:	2301      	movs	r3, #1
 80014da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4827      	ldr	r0, [pc, #156]	@ (8001580 <MX_GPIO_Init+0x15c>)
 80014e4:	f001 f886 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RL_2_Pin RL_1_Pin */
  GPIO_InitStruct.Pin = RL_2_Pin|RL_1_Pin;
 80014e8:	2330      	movs	r3, #48	@ 0x30
 80014ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014f0:	2302      	movs	r3, #2
 80014f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	481e      	ldr	r0, [pc, #120]	@ (8001578 <MX_GPIO_Init+0x154>)
 8001500:	f001 f878 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RR_2_Pin RR_1_Pin FR_2_Pin FR_1_Pin */
  GPIO_InitStruct.Pin = RR_2_Pin|RR_1_Pin|FR_2_Pin|FR_1_Pin;
 8001504:	2333      	movs	r3, #51	@ 0x33
 8001506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800150c:	2302      	movs	r3, #2
 800150e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	4818      	ldr	r0, [pc, #96]	@ (800157c <MX_GPIO_Init+0x158>)
 800151c:	f001 f86a 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001520:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152a:	2301      	movs	r3, #1
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	4810      	ldr	r0, [pc, #64]	@ (800157c <MX_GPIO_Init+0x158>)
 800153a:	f001 f85b 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FL_2_Pin FL_1_Pin */
  GPIO_InitStruct.Pin = FL_2_Pin|FL_1_Pin;
 800153e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4808      	ldr	r0, [pc, #32]	@ (8001578 <MX_GPIO_Init+0x154>)
 8001558:	f001 f84c 	bl	80025f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	2105      	movs	r1, #5
 8001560:	2028      	movs	r0, #40	@ 0x28
 8001562:	f001 f81d 	bl	80025a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001566:	2028      	movs	r0, #40	@ 0x28
 8001568:	f001 f836 	bl	80025d8 <HAL_NVIC_EnableIRQ>

}
 800156c:	bf00      	nop
 800156e:	3728      	adds	r7, #40	@ 0x28
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	40020000 	.word	0x40020000
 800157c:	40020400 	.word	0x40020400
 8001580:	40020800 	.word	0x40020800

08001584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001588:	f000 ff10 	bl	80023ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158c:	f000 f81c 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001590:	f7ff ff48 	bl	8001424 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001594:	f000 fa34 	bl	8001a00 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001598:	f000 fb32 	bl	8001c00 <MX_TIM4_Init>
  MX_TIM2_Init();
 800159c:	f000 fa88 	bl	8001ab0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015a0:	f000 fada 	bl	8001b58 <MX_TIM3_Init>
  MX_TIM5_Init();
 80015a4:	f000 fb80 	bl	8001ca8 <MX_TIM5_Init>
  MX_SPI2_Init();
 80015a8:	f000 f892 	bl	80016d0 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 80015ac:	f000 fe62 	bl	8002274 <MX_USART6_UART_Init>
  MX_TIM11_Init();
 80015b0:	f000 fc24 	bl	8001dfc <MX_TIM11_Init>
  MX_TIM9_Init();
 80015b4:	f000 fbdc 	bl	8001d70 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015b8:	f006 fae2 	bl	8007b80 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80015bc:	f7ff fe2a 	bl	8001214 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015c0:	f006 fb02 	bl	8007bc8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <main+0x40>

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b094      	sub	sp, #80	@ 0x50
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 0320 	add.w	r3, r7, #32
 80015d2:	2230      	movs	r2, #48	@ 0x30
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f00a f9e4 	bl	800b9a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	4b29      	ldr	r3, [pc, #164]	@ (8001698 <SystemClock_Config+0xd0>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f4:	4a28      	ldr	r2, [pc, #160]	@ (8001698 <SystemClock_Config+0xd0>)
 80015f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fc:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <SystemClock_Config+0xd0>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	4b23      	ldr	r3, [pc, #140]	@ (800169c <SystemClock_Config+0xd4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001614:	4a21      	ldr	r2, [pc, #132]	@ (800169c <SystemClock_Config+0xd4>)
 8001616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <SystemClock_Config+0xd4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001628:	2301      	movs	r3, #1
 800162a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800162c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001632:	2302      	movs	r3, #2
 8001634:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001636:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800163a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800163c:	2319      	movs	r3, #25
 800163e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001640:	23a8      	movs	r3, #168	@ 0xa8
 8001642:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001644:	2302      	movs	r3, #2
 8001646:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001648:	2304      	movs	r3, #4
 800164a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164c:	f107 0320 	add.w	r3, r7, #32
 8001650:	4618      	mov	r0, r3
 8001652:	f001 f985 	bl	8002960 <HAL_RCC_OscConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800165c:	f000 f832 	bl	80016c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001660:	230f      	movs	r3, #15
 8001662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001664:	2302      	movs	r3, #2
 8001666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800166c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	2102      	movs	r1, #2
 800167c:	4618      	mov	r0, r3
 800167e:	f001 fbe7 	bl	8002e50 <HAL_RCC_ClockConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001688:	f000 f81c 	bl	80016c4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800168c:	f001 fcc6 	bl	800301c <HAL_RCC_EnableCSS>
}
 8001690:	bf00      	nop
 8001692:	3750      	adds	r7, #80	@ 0x50
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40023800 	.word	0x40023800
 800169c:	40007000 	.word	0x40007000

080016a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a04      	ldr	r2, [pc, #16]	@ (80016c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d101      	bne.n	80016b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016b2:	f000 fe9d 	bl	80023f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40014400 	.word	0x40014400

080016c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c8:	b672      	cpsid	i
}
 80016ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <Error_Handler+0x8>

080016d0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <MX_SPI2_Init+0x64>)
 80016d6:	4a18      	ldr	r2, [pc, #96]	@ (8001738 <MX_SPI2_Init+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016da:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <MX_SPI2_Init+0x64>)
 80016dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016e2:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <MX_SPI2_Init+0x64>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <MX_SPI2_Init+0x64>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <MX_SPI2_Init+0x64>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <MX_SPI2_Init+0x64>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <MX_SPI2_Init+0x64>)
 80016fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001700:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001702:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <MX_SPI2_Init+0x64>)
 8001704:	2210      	movs	r2, #16
 8001706:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001708:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <MX_SPI2_Init+0x64>)
 800170a:	2200      	movs	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <MX_SPI2_Init+0x64>)
 8001710:	2200      	movs	r2, #0
 8001712:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001714:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <MX_SPI2_Init+0x64>)
 8001716:	2200      	movs	r2, #0
 8001718:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <MX_SPI2_Init+0x64>)
 800171c:	220a      	movs	r2, #10
 800171e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001720:	4804      	ldr	r0, [pc, #16]	@ (8001734 <MX_SPI2_Init+0x64>)
 8001722:	f001 fdcf 	bl	80032c4 <HAL_SPI_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800172c:	f7ff ffca 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200002b8 	.word	0x200002b8
 8001738:	40003800 	.word	0x40003800

0800173c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <HAL_SPI_MspInit+0x84>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d12c      	bne.n	80017b8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <HAL_SPI_MspInit+0x88>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <HAL_SPI_MspInit+0x88>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800176c:	6413      	str	r3, [r2, #64]	@ 0x40
 800176e:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <HAL_SPI_MspInit+0x88>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <HAL_SPI_MspInit+0x88>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a10      	ldr	r2, [pc, #64]	@ (80017c4 <HAL_SPI_MspInit+0x88>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <HAL_SPI_MspInit+0x88>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001796:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800179a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017a8:	2305      	movs	r3, #5
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <HAL_SPI_MspInit+0x8c>)
 80017b4:	f000 ff1e 	bl	80025f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80017b8:	bf00      	nop
 80017ba:	3728      	adds	r7, #40	@ 0x28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40003800 	.word	0x40003800
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020400 	.word	0x40020400

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <HAL_MspInit+0x54>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	4a11      	ldr	r2, [pc, #68]	@ (8001820 <HAL_MspInit+0x54>)
 80017dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <HAL_MspInit+0x54>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <HAL_MspInit+0x54>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <HAL_MspInit+0x54>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017fe:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <HAL_MspInit+0x54>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	210f      	movs	r1, #15
 800180e:	f06f 0001 	mvn.w	r0, #1
 8001812:	f000 fec5 	bl	80025a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800

08001824 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	@ 0x30
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	4b2e      	ldr	r3, [pc, #184]	@ (80018f4 <HAL_InitTick+0xd0>)
 800183a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183c:	4a2d      	ldr	r2, [pc, #180]	@ (80018f4 <HAL_InitTick+0xd0>)
 800183e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001842:	6453      	str	r3, [r2, #68]	@ 0x44
 8001844:	4b2b      	ldr	r3, [pc, #172]	@ (80018f4 <HAL_InitTick+0xd0>)
 8001846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001850:	f107 020c 	add.w	r2, r7, #12
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f001 fce4 	bl	8003228 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001860:	f001 fcce 	bl	8003200 <HAL_RCC_GetPCLK2Freq>
 8001864:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001868:	4a23      	ldr	r2, [pc, #140]	@ (80018f8 <HAL_InitTick+0xd4>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	0c9b      	lsrs	r3, r3, #18
 8001870:	3b01      	subs	r3, #1
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001874:	4b21      	ldr	r3, [pc, #132]	@ (80018fc <HAL_InitTick+0xd8>)
 8001876:	4a22      	ldr	r2, [pc, #136]	@ (8001900 <HAL_InitTick+0xdc>)
 8001878:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800187a:	4b20      	ldr	r3, [pc, #128]	@ (80018fc <HAL_InitTick+0xd8>)
 800187c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001880:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001882:	4a1e      	ldr	r2, [pc, #120]	@ (80018fc <HAL_InitTick+0xd8>)
 8001884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001886:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001888:	4b1c      	ldr	r3, [pc, #112]	@ (80018fc <HAL_InitTick+0xd8>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <HAL_InitTick+0xd8>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001894:	4b19      	ldr	r3, [pc, #100]	@ (80018fc <HAL_InitTick+0xd8>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800189a:	4818      	ldr	r0, [pc, #96]	@ (80018fc <HAL_InitTick+0xd8>)
 800189c:	f002 fb74 	bl	8003f88 <HAL_TIM_Base_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80018a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d11b      	bne.n	80018e6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80018ae:	4813      	ldr	r0, [pc, #76]	@ (80018fc <HAL_InitTick+0xd8>)
 80018b0:	f002 fbba 	bl	8004028 <HAL_TIM_Base_Start_IT>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80018ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d111      	bne.n	80018e6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018c2:	2019      	movs	r0, #25
 80018c4:	f000 fe88 	bl	80025d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b0f      	cmp	r3, #15
 80018cc:	d808      	bhi.n	80018e0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80018ce:	2200      	movs	r2, #0
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	2019      	movs	r0, #25
 80018d4:	f000 fe64 	bl	80025a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <HAL_InitTick+0xe0>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e002      	b.n	80018e6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80018e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3730      	adds	r7, #48	@ 0x30
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	431bde83 	.word	0x431bde83
 80018fc:	20000338 	.word	0x20000338
 8001900:	40014400 	.word	0x40014400
 8001904:	20000098 	.word	0x20000098

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800190c:	f001 fcbe 	bl	800328c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <NMI_Handler+0x8>

08001914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <MemManage_Handler+0x4>

08001924 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <BusFault_Handler+0x4>

0800192c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <UsageFault_Handler+0x4>

08001934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001948:	4803      	ldr	r0, [pc, #12]	@ (8001958 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800194a:	f002 fe03 	bl	8004554 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800194e:	4803      	ldr	r0, [pc, #12]	@ (800195c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001950:	f002 fe00 	bl	8004554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000384 	.word	0x20000384
 800195c:	20000338 	.word	0x20000338

08001960 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN_INT_Pin);
 8001964:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001968:	f000 ffe2 	bl	8002930 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001978:	4a14      	ldr	r2, [pc, #80]	@ (80019cc <_sbrk+0x5c>)
 800197a:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <_sbrk+0x60>)
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001984:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800198c:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <_sbrk+0x64>)
 800198e:	4a12      	ldr	r2, [pc, #72]	@ (80019d8 <_sbrk+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001992:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d207      	bcs.n	80019b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a0:	f00a f818 	bl	800b9d4 <__errno>
 80019a4:	4603      	mov	r3, r0
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b07      	ldr	r3, [pc, #28]	@ (80019d4 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a05      	ldr	r2, [pc, #20]	@ (80019d4 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20010000 	.word	0x20010000
 80019d0:	00000400 	.word	0x00000400
 80019d4:	20000380 	.word	0x20000380
 80019d8:	2000dca8 	.word	0x2000dca8

080019dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08c      	sub	sp, #48	@ 0x30
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	2224      	movs	r2, #36	@ 0x24
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f009 ffc8 	bl	800b9a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a1c:	4b22      	ldr	r3, [pc, #136]	@ (8001aa8 <MX_TIM1_Init+0xa8>)
 8001a1e:	4a23      	ldr	r2, [pc, #140]	@ (8001aac <MX_TIM1_Init+0xac>)
 8001a20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8001a22:	4b21      	ldr	r3, [pc, #132]	@ (8001aa8 <MX_TIM1_Init+0xa8>)
 8001a24:	2203      	movs	r2, #3
 8001a26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a28:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa8 <MX_TIM1_Init+0xa8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 44000;
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa8 <MX_TIM1_Init+0xa8>)
 8001a30:	f64a 32e0 	movw	r2, #44000	@ 0xabe0
 8001a34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a36:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <MX_TIM1_Init+0xa8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa8 <MX_TIM1_Init+0xa8>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a42:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <MX_TIM1_Init+0xa8>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a50:	2301      	movs	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a60:	2301      	movs	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	4619      	mov	r1, r3
 8001a72:	480d      	ldr	r0, [pc, #52]	@ (8001aa8 <MX_TIM1_Init+0xa8>)
 8001a74:	f002 fc3a 	bl	80042ec <HAL_TIM_Encoder_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001a7e:	f7ff fe21 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4806      	ldr	r0, [pc, #24]	@ (8001aa8 <MX_TIM1_Init+0xa8>)
 8001a90:	f003 f978 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001a9a:	f7ff fe13 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	3730      	adds	r7, #48	@ 0x30
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000384 	.word	0x20000384
 8001aac:	40010000 	.word	0x40010000

08001ab0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08c      	sub	sp, #48	@ 0x30
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	2224      	movs	r2, #36	@ 0x24
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f009 ff70 	bl	800b9a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001acc:	4b21      	ldr	r3, [pc, #132]	@ (8001b54 <MX_TIM2_Init+0xa4>)
 8001ace:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ad2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b54 <MX_TIM2_Init+0xa4>)
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	@ (8001b54 <MX_TIM2_Init+0xa4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 44000;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b54 <MX_TIM2_Init+0xa4>)
 8001ae2:	f64a 32e0 	movw	r2, #44000	@ 0xabe0
 8001ae6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b54 <MX_TIM2_Init+0xa4>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aee:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <MX_TIM2_Init+0xa4>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001af4:	2303      	movs	r3, #3
 8001af6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001afc:	2301      	movs	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480d      	ldr	r0, [pc, #52]	@ (8001b54 <MX_TIM2_Init+0xa4>)
 8001b20:	f002 fbe4 	bl	80042ec <HAL_TIM_Encoder_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b2a:	f7ff fdcb 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4806      	ldr	r0, [pc, #24]	@ (8001b54 <MX_TIM2_Init+0xa4>)
 8001b3c:	f003 f922 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b46:	f7ff fdbd 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	3730      	adds	r7, #48	@ 0x30
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200003cc 	.word	0x200003cc

08001b58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08c      	sub	sp, #48	@ 0x30
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	2224      	movs	r2, #36	@ 0x24
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f009 ff1c 	bl	800b9a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b74:	4b20      	ldr	r3, [pc, #128]	@ (8001bf8 <MX_TIM3_Init+0xa0>)
 8001b76:	4a21      	ldr	r2, [pc, #132]	@ (8001bfc <MX_TIM3_Init+0xa4>)
 8001b78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8001b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf8 <MX_TIM3_Init+0xa0>)
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b80:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf8 <MX_TIM3_Init+0xa0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 44000;
 8001b86:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <MX_TIM3_Init+0xa0>)
 8001b88:	f64a 32e0 	movw	r2, #44000	@ 0xabe0
 8001b8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf8 <MX_TIM3_Init+0xa0>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b94:	4b18      	ldr	r3, [pc, #96]	@ (8001bf8 <MX_TIM3_Init+0xa0>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480c      	ldr	r0, [pc, #48]	@ (8001bf8 <MX_TIM3_Init+0xa0>)
 8001bc6:	f002 fb91 	bl	80042ec <HAL_TIM_Encoder_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001bd0:	f7ff fd78 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <MX_TIM3_Init+0xa0>)
 8001be2:	f003 f8cf 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001bec:	f7ff fd6a 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	3730      	adds	r7, #48	@ 0x30
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000414 	.word	0x20000414
 8001bfc:	40000400 	.word	0x40000400

08001c00 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08c      	sub	sp, #48	@ 0x30
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c06:	f107 030c 	add.w	r3, r7, #12
 8001c0a:	2224      	movs	r2, #36	@ 0x24
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f009 fec8 	bl	800b9a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c1c:	4b20      	ldr	r3, [pc, #128]	@ (8001ca0 <MX_TIM4_Init+0xa0>)
 8001c1e:	4a21      	ldr	r2, [pc, #132]	@ (8001ca4 <MX_TIM4_Init+0xa4>)
 8001c20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8001c22:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca0 <MX_TIM4_Init+0xa0>)
 8001c24:	2203      	movs	r2, #3
 8001c26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca0 <MX_TIM4_Init+0xa0>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 44000;
 8001c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca0 <MX_TIM4_Init+0xa0>)
 8001c30:	f64a 32e0 	movw	r2, #44000	@ 0xabe0
 8001c34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <MX_TIM4_Init+0xa0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <MX_TIM4_Init+0xa0>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c42:	2303      	movs	r3, #3
 8001c44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480c      	ldr	r0, [pc, #48]	@ (8001ca0 <MX_TIM4_Init+0xa0>)
 8001c6e:	f002 fb3d 	bl	80042ec <HAL_TIM_Encoder_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001c78:	f7ff fd24 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	@ (8001ca0 <MX_TIM4_Init+0xa0>)
 8001c8a:	f003 f87b 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c94:	f7ff fd16 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	3730      	adds	r7, #48	@ 0x30
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	2000045c 	.word	0x2000045c
 8001ca4:	40000800 	.word	0x40000800

08001ca8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	@ 0x28
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cae:	f107 0320 	add.w	r3, r7, #32
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
 8001cc4:	611a      	str	r2, [r3, #16]
 8001cc6:	615a      	str	r2, [r3, #20]
 8001cc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001cca:	4b27      	ldr	r3, [pc, #156]	@ (8001d68 <MX_TIM5_Init+0xc0>)
 8001ccc:	4a27      	ldr	r2, [pc, #156]	@ (8001d6c <MX_TIM5_Init+0xc4>)
 8001cce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001cd0:	4b25      	ldr	r3, [pc, #148]	@ (8001d68 <MX_TIM5_Init+0xc0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd6:	4b24      	ldr	r3, [pc, #144]	@ (8001d68 <MX_TIM5_Init+0xc0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4199;
 8001cdc:	4b22      	ldr	r3, [pc, #136]	@ (8001d68 <MX_TIM5_Init+0xc0>)
 8001cde:	f241 0267 	movw	r2, #4199	@ 0x1067
 8001ce2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce4:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <MX_TIM5_Init+0xc0>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cea:	4b1f      	ldr	r3, [pc, #124]	@ (8001d68 <MX_TIM5_Init+0xc0>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001cf0:	481d      	ldr	r0, [pc, #116]	@ (8001d68 <MX_TIM5_Init+0xc0>)
 8001cf2:	f002 f9fb 	bl	80040ec <HAL_TIM_PWM_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001cfc:	f7ff fce2 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d00:	2300      	movs	r3, #0
 8001d02:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d08:	f107 0320 	add.w	r3, r7, #32
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4816      	ldr	r0, [pc, #88]	@ (8001d68 <MX_TIM5_Init+0xc0>)
 8001d10:	f003 f838 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001d1a:	f7ff fcd3 	bl	80016c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d1e:	2360      	movs	r3, #96	@ 0x60
 8001d20:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	2204      	movs	r2, #4
 8001d32:	4619      	mov	r1, r3
 8001d34:	480c      	ldr	r0, [pc, #48]	@ (8001d68 <MX_TIM5_Init+0xc0>)
 8001d36:	f002 fcfd 	bl	8004734 <HAL_TIM_PWM_ConfigChannel>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001d40:	f7ff fcc0 	bl	80016c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	2208      	movs	r2, #8
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4807      	ldr	r0, [pc, #28]	@ (8001d68 <MX_TIM5_Init+0xc0>)
 8001d4c:	f002 fcf2 	bl	8004734 <HAL_TIM_PWM_ConfigChannel>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001d56:	f7ff fcb5 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001d5a:	4803      	ldr	r0, [pc, #12]	@ (8001d68 <MX_TIM5_Init+0xc0>)
 8001d5c:	f000 fa02 	bl	8002164 <HAL_TIM_MspPostInit>

}
 8001d60:	bf00      	nop
 8001d62:	3728      	adds	r7, #40	@ 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	200004a4 	.word	0x200004a4
 8001d6c:	40000c00 	.word	0x40000c00

08001d70 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
 8001d84:	615a      	str	r2, [r3, #20]
 8001d86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001d88:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <MX_TIM9_Init+0x84>)
 8001d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8001df8 <MX_TIM9_Init+0x88>)
 8001d8c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001d8e:	4b19      	ldr	r3, [pc, #100]	@ (8001df4 <MX_TIM9_Init+0x84>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d94:	4b17      	ldr	r3, [pc, #92]	@ (8001df4 <MX_TIM9_Init+0x84>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4199;
 8001d9a:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <MX_TIM9_Init+0x84>)
 8001d9c:	f241 0267 	movw	r2, #4199	@ 0x1067
 8001da0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da2:	4b14      	ldr	r3, [pc, #80]	@ (8001df4 <MX_TIM9_Init+0x84>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da8:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <MX_TIM9_Init+0x84>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001dae:	4811      	ldr	r0, [pc, #68]	@ (8001df4 <MX_TIM9_Init+0x84>)
 8001db0:	f002 f99c 	bl	80040ec <HAL_TIM_PWM_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001dba:	f7ff fc83 	bl	80016c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dbe:	2360      	movs	r3, #96	@ 0x60
 8001dc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4807      	ldr	r0, [pc, #28]	@ (8001df4 <MX_TIM9_Init+0x84>)
 8001dd6:	f002 fcad 	bl	8004734 <HAL_TIM_PWM_ConfigChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001de0:	f7ff fc70 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001de4:	4803      	ldr	r0, [pc, #12]	@ (8001df4 <MX_TIM9_Init+0x84>)
 8001de6:	f000 f9bd 	bl	8002164 <HAL_TIM_MspPostInit>

}
 8001dea:	bf00      	nop
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200004ec 	.word	0x200004ec
 8001df8:	40014000 	.word	0x40014000

08001dfc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
 8001e10:	615a      	str	r2, [r3, #20]
 8001e12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001e14:	4b1e      	ldr	r3, [pc, #120]	@ (8001e90 <MX_TIM11_Init+0x94>)
 8001e16:	4a1f      	ldr	r2, [pc, #124]	@ (8001e94 <MX_TIM11_Init+0x98>)
 8001e18:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <MX_TIM11_Init+0x94>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e20:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <MX_TIM11_Init+0x94>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4199;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <MX_TIM11_Init+0x94>)
 8001e28:	f241 0267 	movw	r2, #4199	@ 0x1067
 8001e2c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2e:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <MX_TIM11_Init+0x94>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e34:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <MX_TIM11_Init+0x94>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001e3a:	4815      	ldr	r0, [pc, #84]	@ (8001e90 <MX_TIM11_Init+0x94>)
 8001e3c:	f002 f8a4 	bl	8003f88 <HAL_TIM_Base_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001e46:	f7ff fc3d 	bl	80016c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001e4a:	4811      	ldr	r0, [pc, #68]	@ (8001e90 <MX_TIM11_Init+0x94>)
 8001e4c:	f002 f94e 	bl	80040ec <HAL_TIM_PWM_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001e56:	f7ff fc35 	bl	80016c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e5a:	2360      	movs	r3, #96	@ 0x60
 8001e5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4807      	ldr	r0, [pc, #28]	@ (8001e90 <MX_TIM11_Init+0x94>)
 8001e72:	f002 fc5f 	bl	8004734 <HAL_TIM_PWM_ConfigChannel>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001e7c:	f7ff fc22 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001e80:	4803      	ldr	r0, [pc, #12]	@ (8001e90 <MX_TIM11_Init+0x94>)
 8001e82:	f000 f96f 	bl	8002164 <HAL_TIM_MspPostInit>

}
 8001e86:	bf00      	nop
 8001e88:	3720      	adds	r7, #32
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000534 	.word	0x20000534
 8001e94:	40014800 	.word	0x40014800

08001e98 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b090      	sub	sp, #64	@ 0x40
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a78      	ldr	r2, [pc, #480]	@ (8002098 <HAL_TIM_Encoder_MspInit+0x200>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d135      	bne.n	8001f26 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ebe:	4b77      	ldr	r3, [pc, #476]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	4a76      	ldr	r2, [pc, #472]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eca:	4b74      	ldr	r3, [pc, #464]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eda:	4b70      	ldr	r3, [pc, #448]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	4a6f      	ldr	r2, [pc, #444]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee6:	4b6d      	ldr	r3, [pc, #436]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FL_EN_1_Pin|FL_EN_2_Pin;
 8001ef2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001efc:	2301      	movs	r3, #1
 8001efe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f00:	2302      	movs	r3, #2
 8001f02:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f04:	2301      	movs	r3, #1
 8001f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4864      	ldr	r0, [pc, #400]	@ (80020a0 <HAL_TIM_Encoder_MspInit+0x208>)
 8001f10:	f000 fb70 	bl	80025f4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8001f14:	2200      	movs	r2, #0
 8001f16:	210f      	movs	r1, #15
 8001f18:	2019      	movs	r0, #25
 8001f1a:	f000 fb41 	bl	80025a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f1e:	2019      	movs	r0, #25
 8001f20:	f000 fb5a 	bl	80025d8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001f24:	e0b3      	b.n	800208e <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(tim_encoderHandle->Instance==TIM2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f2e:	d14b      	bne.n	8001fc8 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
 8001f34:	4b59      	ldr	r3, [pc, #356]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	4a58      	ldr	r2, [pc, #352]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f40:	4b56      	ldr	r3, [pc, #344]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	623b      	str	r3, [r7, #32]
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	4b52      	ldr	r3, [pc, #328]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f54:	4a51      	ldr	r2, [pc, #324]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5c:	4b4f      	ldr	r3, [pc, #316]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	4b4b      	ldr	r3, [pc, #300]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f70:	4a4a      	ldr	r2, [pc, #296]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f78:	4b48      	ldr	r3, [pc, #288]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = FR_EN_1_Pin;
 8001f84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f96:	2301      	movs	r3, #1
 8001f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(FR_EN_1_GPIO_Port, &GPIO_InitStruct);
 8001f9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	483f      	ldr	r0, [pc, #252]	@ (80020a0 <HAL_TIM_Encoder_MspInit+0x208>)
 8001fa2:	f000 fb27 	bl	80025f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FR_EN_2_Pin;
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(FR_EN_2_GPIO_Port, &GPIO_InitStruct);
 8001fba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4838      	ldr	r0, [pc, #224]	@ (80020a4 <HAL_TIM_Encoder_MspInit+0x20c>)
 8001fc2:	f000 fb17 	bl	80025f4 <HAL_GPIO_Init>
}
 8001fc6:	e062      	b.n	800208e <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(tim_encoderHandle->Instance==TIM3)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a36      	ldr	r2, [pc, #216]	@ (80020a8 <HAL_TIM_Encoder_MspInit+0x210>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d12c      	bne.n	800202c <HAL_TIM_Encoder_MspInit+0x194>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	4b31      	ldr	r3, [pc, #196]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	4a30      	ldr	r2, [pc, #192]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	4a29      	ldr	r2, [pc, #164]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffe:	4b27      	ldr	r3, [pc, #156]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RL_EN_1_Pin|RL_EN_2_Pin;
 800200a:	23c0      	movs	r3, #192	@ 0xc0
 800200c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002012:	2302      	movs	r3, #2
 8002014:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800201a:	2302      	movs	r3, #2
 800201c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002022:	4619      	mov	r1, r3
 8002024:	481e      	ldr	r0, [pc, #120]	@ (80020a0 <HAL_TIM_Encoder_MspInit+0x208>)
 8002026:	f000 fae5 	bl	80025f4 <HAL_GPIO_Init>
}
 800202a:	e030      	b.n	800208e <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(tim_encoderHandle->Instance==TIM4)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1e      	ldr	r2, [pc, #120]	@ (80020ac <HAL_TIM_Encoder_MspInit+0x214>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d12b      	bne.n	800208e <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b18      	ldr	r3, [pc, #96]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	4a17      	ldr	r2, [pc, #92]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	6413      	str	r3, [r2, #64]	@ 0x40
 8002046:	4b15      	ldr	r3, [pc, #84]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	4b11      	ldr	r3, [pc, #68]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	4a10      	ldr	r2, [pc, #64]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6313      	str	r3, [r2, #48]	@ 0x30
 8002062:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <HAL_TIM_Encoder_MspInit+0x204>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RR_EN_1_Pin|RR_EN_2_Pin;
 800206e:	23c0      	movs	r3, #192	@ 0xc0
 8002070:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002076:	2302      	movs	r3, #2
 8002078:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800207e:	2302      	movs	r3, #2
 8002080:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002086:	4619      	mov	r1, r3
 8002088:	4806      	ldr	r0, [pc, #24]	@ (80020a4 <HAL_TIM_Encoder_MspInit+0x20c>)
 800208a:	f000 fab3 	bl	80025f4 <HAL_GPIO_Init>
}
 800208e:	bf00      	nop
 8002090:	3740      	adds	r7, #64	@ 0x40
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40010000 	.word	0x40010000
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020000 	.word	0x40020000
 80020a4:	40020400 	.word	0x40020400
 80020a8:	40000400 	.word	0x40000400
 80020ac:	40000800 	.word	0x40000800

080020b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a15      	ldr	r2, [pc, #84]	@ (8002114 <HAL_TIM_PWM_MspInit+0x64>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d10e      	bne.n	80020e0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <HAL_TIM_PWM_MspInit+0x68>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	4a13      	ldr	r2, [pc, #76]	@ (8002118 <HAL_TIM_PWM_MspInit+0x68>)
 80020cc:	f043 0308 	orr.w	r3, r3, #8
 80020d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d2:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <HAL_TIM_PWM_MspInit+0x68>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80020de:	e012      	b.n	8002106 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM9)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0d      	ldr	r2, [pc, #52]	@ (800211c <HAL_TIM_PWM_MspInit+0x6c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d10d      	bne.n	8002106 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002118 <HAL_TIM_PWM_MspInit+0x68>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f2:	4a09      	ldr	r2, [pc, #36]	@ (8002118 <HAL_TIM_PWM_MspInit+0x68>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020fa:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <HAL_TIM_PWM_MspInit+0x68>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
}
 8002106:	bf00      	nop
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40000c00 	.word	0x40000c00
 8002118:	40023800 	.word	0x40023800
 800211c:	40014000 	.word	0x40014000

08002120 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0b      	ldr	r2, [pc, #44]	@ (800215c <HAL_TIM_Base_MspInit+0x3c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d10d      	bne.n	800214e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b0a      	ldr	r3, [pc, #40]	@ (8002160 <HAL_TIM_Base_MspInit+0x40>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213a:	4a09      	ldr	r2, [pc, #36]	@ (8002160 <HAL_TIM_Base_MspInit+0x40>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002140:	6453      	str	r3, [r2, #68]	@ 0x44
 8002142:	4b07      	ldr	r3, [pc, #28]	@ (8002160 <HAL_TIM_Base_MspInit+0x40>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002146:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40014800 	.word	0x40014800
 8002160:	40023800 	.word	0x40023800

08002164 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	@ 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a36      	ldr	r2, [pc, #216]	@ (800225c <HAL_TIM_MspPostInit+0xf8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d11e      	bne.n	80021c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	4b35      	ldr	r3, [pc, #212]	@ (8002260 <HAL_TIM_MspPostInit+0xfc>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	4a34      	ldr	r2, [pc, #208]	@ (8002260 <HAL_TIM_MspPostInit+0xfc>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6313      	str	r3, [r2, #48]	@ 0x30
 8002196:	4b32      	ldr	r3, [pc, #200]	@ (8002260 <HAL_TIM_MspPostInit+0xfc>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    */
    GPIO_InitStruct.Pin = FL_PWM_Pin|FR_PWM_Pin;
 80021a2:	2306      	movs	r3, #6
 80021a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021b2:	2302      	movs	r3, #2
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	4829      	ldr	r0, [pc, #164]	@ (8002264 <HAL_TIM_MspPostInit+0x100>)
 80021be:	f000 fa19 	bl	80025f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80021c2:	e047      	b.n	8002254 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM9)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a27      	ldr	r2, [pc, #156]	@ (8002268 <HAL_TIM_MspPostInit+0x104>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d11e      	bne.n	800220c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b23      	ldr	r3, [pc, #140]	@ (8002260 <HAL_TIM_MspPostInit+0xfc>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	4a22      	ldr	r2, [pc, #136]	@ (8002260 <HAL_TIM_MspPostInit+0xfc>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021de:	4b20      	ldr	r3, [pc, #128]	@ (8002260 <HAL_TIM_MspPostInit+0xfc>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RL_PWM_Pin;
 80021ea:	2308      	movs	r3, #8
 80021ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80021fa:	2303      	movs	r3, #3
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RL_PWM_GPIO_Port, &GPIO_InitStruct);
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	4619      	mov	r1, r3
 8002204:	4817      	ldr	r0, [pc, #92]	@ (8002264 <HAL_TIM_MspPostInit+0x100>)
 8002206:	f000 f9f5 	bl	80025f4 <HAL_GPIO_Init>
}
 800220a:	e023      	b.n	8002254 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM11)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a16      	ldr	r2, [pc, #88]	@ (800226c <HAL_TIM_MspPostInit+0x108>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d11e      	bne.n	8002254 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <HAL_TIM_MspPostInit+0xfc>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	4a10      	ldr	r2, [pc, #64]	@ (8002260 <HAL_TIM_MspPostInit+0xfc>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	6313      	str	r3, [r2, #48]	@ 0x30
 8002226:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <HAL_TIM_MspPostInit+0xfc>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RR_PWM_Pin;
 8002232:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800223c:	2302      	movs	r3, #2
 800223e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002244:	2303      	movs	r3, #3
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RR_PWM_GPIO_Port, &GPIO_InitStruct);
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	4619      	mov	r1, r3
 800224e:	4808      	ldr	r0, [pc, #32]	@ (8002270 <HAL_TIM_MspPostInit+0x10c>)
 8002250:	f000 f9d0 	bl	80025f4 <HAL_GPIO_Init>
}
 8002254:	bf00      	nop
 8002256:	3728      	adds	r7, #40	@ 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40000c00 	.word	0x40000c00
 8002260:	40023800 	.word	0x40023800
 8002264:	40020000 	.word	0x40020000
 8002268:	40014000 	.word	0x40014000
 800226c:	40014800 	.word	0x40014800
 8002270:	40020400 	.word	0x40020400

08002274 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002278:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <MX_USART6_UART_Init+0x4c>)
 800227a:	4a12      	ldr	r2, [pc, #72]	@ (80022c4 <MX_USART6_UART_Init+0x50>)
 800227c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800227e:	4b10      	ldr	r3, [pc, #64]	@ (80022c0 <MX_USART6_UART_Init+0x4c>)
 8002280:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002284:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002286:	4b0e      	ldr	r3, [pc, #56]	@ (80022c0 <MX_USART6_UART_Init+0x4c>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800228c:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <MX_USART6_UART_Init+0x4c>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002292:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <MX_USART6_UART_Init+0x4c>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002298:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <MX_USART6_UART_Init+0x4c>)
 800229a:	220c      	movs	r2, #12
 800229c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229e:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <MX_USART6_UART_Init+0x4c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <MX_USART6_UART_Init+0x4c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80022aa:	4805      	ldr	r0, [pc, #20]	@ (80022c0 <MX_USART6_UART_Init+0x4c>)
 80022ac:	f002 fdec 	bl	8004e88 <HAL_UART_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80022b6:	f7ff fa05 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	2000057c 	.word	0x2000057c
 80022c4:	40011400 	.word	0x40011400

080022c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	@ 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a19      	ldr	r2, [pc, #100]	@ (800234c <HAL_UART_MspInit+0x84>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d12b      	bne.n	8002342 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	4b18      	ldr	r3, [pc, #96]	@ (8002350 <HAL_UART_MspInit+0x88>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	4a17      	ldr	r2, [pc, #92]	@ (8002350 <HAL_UART_MspInit+0x88>)
 80022f4:	f043 0320 	orr.w	r3, r3, #32
 80022f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022fa:	4b15      	ldr	r3, [pc, #84]	@ (8002350 <HAL_UART_MspInit+0x88>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	4b11      	ldr	r3, [pc, #68]	@ (8002350 <HAL_UART_MspInit+0x88>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	4a10      	ldr	r2, [pc, #64]	@ (8002350 <HAL_UART_MspInit+0x88>)
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	6313      	str	r3, [r2, #48]	@ 0x30
 8002316:	4b0e      	ldr	r3, [pc, #56]	@ (8002350 <HAL_UART_MspInit+0x88>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002322:	23c0      	movs	r3, #192	@ 0xc0
 8002324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232e:	2303      	movs	r3, #3
 8002330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002332:	2308      	movs	r3, #8
 8002334:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4619      	mov	r1, r3
 800233c:	4805      	ldr	r0, [pc, #20]	@ (8002354 <HAL_UART_MspInit+0x8c>)
 800233e:	f000 f959 	bl	80025f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002342:	bf00      	nop
 8002344:	3728      	adds	r7, #40	@ 0x28
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40011400 	.word	0x40011400
 8002350:	40023800 	.word	0x40023800
 8002354:	40020800 	.word	0x40020800

08002358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002358:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002390 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800235c:	f7ff fb3e 	bl	80019dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002360:	480c      	ldr	r0, [pc, #48]	@ (8002394 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002362:	490d      	ldr	r1, [pc, #52]	@ (8002398 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002364:	4a0d      	ldr	r2, [pc, #52]	@ (800239c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002368:	e002      	b.n	8002370 <LoopCopyDataInit>

0800236a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800236a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800236c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800236e:	3304      	adds	r3, #4

08002370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002374:	d3f9      	bcc.n	800236a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002376:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002378:	4c0a      	ldr	r4, [pc, #40]	@ (80023a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800237c:	e001      	b.n	8002382 <LoopFillZerobss>

0800237e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800237e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002380:	3204      	adds	r2, #4

08002382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002384:	d3fb      	bcc.n	800237e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002386:	f009 fb2b 	bl	800b9e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800238a:	f7ff f8fb 	bl	8001584 <main>
  bx  lr    
 800238e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002390:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002398:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 800239c:	0800cee0 	.word	0x0800cee0
  ldr r2, =_sbss
 80023a0:	2000027c 	.word	0x2000027c
  ldr r4, =_ebss
 80023a4:	2000dca4 	.word	0x2000dca4

080023a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a8:	e7fe      	b.n	80023a8 <ADC_IRQHandler>
	...

080023ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023b0:	4b0e      	ldr	r3, [pc, #56]	@ (80023ec <HAL_Init+0x40>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0d      	ldr	r2, [pc, #52]	@ (80023ec <HAL_Init+0x40>)
 80023b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <HAL_Init+0x40>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <HAL_Init+0x40>)
 80023c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c8:	4b08      	ldr	r3, [pc, #32]	@ (80023ec <HAL_Init+0x40>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a07      	ldr	r2, [pc, #28]	@ (80023ec <HAL_Init+0x40>)
 80023ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d4:	2003      	movs	r0, #3
 80023d6:	f000 f8d8 	bl	800258a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023da:	200f      	movs	r0, #15
 80023dc:	f7ff fa22 	bl	8001824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023e0:	f7ff f9f4 	bl	80017cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023c00 	.word	0x40023c00

080023f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f4:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <HAL_IncTick+0x20>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_IncTick+0x24>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	4a04      	ldr	r2, [pc, #16]	@ (8002414 <HAL_IncTick+0x24>)
 8002402:	6013      	str	r3, [r2, #0]
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	2000009c 	.word	0x2000009c
 8002414:	200005c4 	.word	0x200005c4

08002418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b03      	ldr	r3, [pc, #12]	@ (800242c <HAL_GetTick+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	200005c4 	.word	0x200005c4

08002430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002458:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800245c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002462:	4a04      	ldr	r2, [pc, #16]	@ (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	60d3      	str	r3, [r2, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800247c:	4b04      	ldr	r3, [pc, #16]	@ (8002490 <__NVIC_GetPriorityGrouping+0x18>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	f003 0307 	and.w	r3, r3, #7
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	db0b      	blt.n	80024be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	f003 021f 	and.w	r2, r3, #31
 80024ac:	4907      	ldr	r1, [pc, #28]	@ (80024cc <__NVIC_EnableIRQ+0x38>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2001      	movs	r0, #1
 80024b6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000e100 	.word	0xe000e100

080024d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	db0a      	blt.n	80024fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	490c      	ldr	r1, [pc, #48]	@ (800251c <__NVIC_SetPriority+0x4c>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	440b      	add	r3, r1
 80024f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f8:	e00a      	b.n	8002510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4908      	ldr	r1, [pc, #32]	@ (8002520 <__NVIC_SetPriority+0x50>)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	3b04      	subs	r3, #4
 8002508:	0112      	lsls	r2, r2, #4
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	440b      	add	r3, r1
 800250e:	761a      	strb	r2, [r3, #24]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000e100 	.word	0xe000e100
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	@ 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f1c3 0307 	rsb	r3, r3, #7
 800253e:	2b04      	cmp	r3, #4
 8002540:	bf28      	it	cs
 8002542:	2304      	movcs	r3, #4
 8002544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3304      	adds	r3, #4
 800254a:	2b06      	cmp	r3, #6
 800254c:	d902      	bls.n	8002554 <NVIC_EncodePriority+0x30>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3b03      	subs	r3, #3
 8002552:	e000      	b.n	8002556 <NVIC_EncodePriority+0x32>
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	f04f 32ff 	mov.w	r2, #4294967295
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	401a      	ands	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800256c:	f04f 31ff 	mov.w	r1, #4294967295
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43d9      	mvns	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	4313      	orrs	r3, r2
         );
}
 800257e:	4618      	mov	r0, r3
 8002580:	3724      	adds	r7, #36	@ 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ff4c 	bl	8002430 <__NVIC_SetPriorityGrouping>
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b2:	f7ff ff61 	bl	8002478 <__NVIC_GetPriorityGrouping>
 80025b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68b9      	ldr	r1, [r7, #8]
 80025bc:	6978      	ldr	r0, [r7, #20]
 80025be:	f7ff ffb1 	bl	8002524 <NVIC_EncodePriority>
 80025c2:	4602      	mov	r2, r0
 80025c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ff80 	bl	80024d0 <__NVIC_SetPriority>
}
 80025d0:	bf00      	nop
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ff54 	bl	8002494 <__NVIC_EnableIRQ>
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	@ 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	e159      	b.n	80028c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002610:	2201      	movs	r2, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	429a      	cmp	r2, r3
 800262a:	f040 8148 	bne.w	80028be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b01      	cmp	r3, #1
 8002638:	d005      	beq.n	8002646 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002642:	2b02      	cmp	r3, #2
 8002644:	d130      	bne.n	80026a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	2203      	movs	r2, #3
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800267c:	2201      	movs	r2, #1
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f003 0201 	and.w	r2, r3, #1
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d017      	beq.n	80026e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d123      	bne.n	8002738 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	08da      	lsrs	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3208      	adds	r2, #8
 80026f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	220f      	movs	r2, #15
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	08da      	lsrs	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3208      	adds	r2, #8
 8002732:	69b9      	ldr	r1, [r7, #24]
 8002734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	2203      	movs	r2, #3
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0203 	and.w	r2, r3, #3
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80a2 	beq.w	80028be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b57      	ldr	r3, [pc, #348]	@ (80028dc <HAL_GPIO_Init+0x2e8>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002782:	4a56      	ldr	r2, [pc, #344]	@ (80028dc <HAL_GPIO_Init+0x2e8>)
 8002784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002788:	6453      	str	r3, [r2, #68]	@ 0x44
 800278a:	4b54      	ldr	r3, [pc, #336]	@ (80028dc <HAL_GPIO_Init+0x2e8>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002796:	4a52      	ldr	r2, [pc, #328]	@ (80028e0 <HAL_GPIO_Init+0x2ec>)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	089b      	lsrs	r3, r3, #2
 800279c:	3302      	adds	r3, #2
 800279e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	220f      	movs	r2, #15
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a49      	ldr	r2, [pc, #292]	@ (80028e4 <HAL_GPIO_Init+0x2f0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d019      	beq.n	80027f6 <HAL_GPIO_Init+0x202>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a48      	ldr	r2, [pc, #288]	@ (80028e8 <HAL_GPIO_Init+0x2f4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <HAL_GPIO_Init+0x1fe>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a47      	ldr	r2, [pc, #284]	@ (80028ec <HAL_GPIO_Init+0x2f8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00d      	beq.n	80027ee <HAL_GPIO_Init+0x1fa>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a46      	ldr	r2, [pc, #280]	@ (80028f0 <HAL_GPIO_Init+0x2fc>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d007      	beq.n	80027ea <HAL_GPIO_Init+0x1f6>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a45      	ldr	r2, [pc, #276]	@ (80028f4 <HAL_GPIO_Init+0x300>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d101      	bne.n	80027e6 <HAL_GPIO_Init+0x1f2>
 80027e2:	2304      	movs	r3, #4
 80027e4:	e008      	b.n	80027f8 <HAL_GPIO_Init+0x204>
 80027e6:	2307      	movs	r3, #7
 80027e8:	e006      	b.n	80027f8 <HAL_GPIO_Init+0x204>
 80027ea:	2303      	movs	r3, #3
 80027ec:	e004      	b.n	80027f8 <HAL_GPIO_Init+0x204>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e002      	b.n	80027f8 <HAL_GPIO_Init+0x204>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <HAL_GPIO_Init+0x204>
 80027f6:	2300      	movs	r3, #0
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	f002 0203 	and.w	r2, r2, #3
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	4093      	lsls	r3, r2
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002808:	4935      	ldr	r1, [pc, #212]	@ (80028e0 <HAL_GPIO_Init+0x2ec>)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	3302      	adds	r3, #2
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002816:	4b38      	ldr	r3, [pc, #224]	@ (80028f8 <HAL_GPIO_Init+0x304>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283a:	4a2f      	ldr	r2, [pc, #188]	@ (80028f8 <HAL_GPIO_Init+0x304>)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002840:	4b2d      	ldr	r3, [pc, #180]	@ (80028f8 <HAL_GPIO_Init+0x304>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002864:	4a24      	ldr	r2, [pc, #144]	@ (80028f8 <HAL_GPIO_Init+0x304>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800286a:	4b23      	ldr	r3, [pc, #140]	@ (80028f8 <HAL_GPIO_Init+0x304>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800288e:	4a1a      	ldr	r2, [pc, #104]	@ (80028f8 <HAL_GPIO_Init+0x304>)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002894:	4b18      	ldr	r3, [pc, #96]	@ (80028f8 <HAL_GPIO_Init+0x304>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028b8:	4a0f      	ldr	r2, [pc, #60]	@ (80028f8 <HAL_GPIO_Init+0x304>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3301      	adds	r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b0f      	cmp	r3, #15
 80028c8:	f67f aea2 	bls.w	8002610 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	3724      	adds	r7, #36	@ 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40013800 	.word	0x40013800
 80028e4:	40020000 	.word	0x40020000
 80028e8:	40020400 	.word	0x40020400
 80028ec:	40020800 	.word	0x40020800
 80028f0:	40020c00 	.word	0x40020c00
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40013c00 	.word	0x40013c00

080028fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]
 8002908:	4613      	mov	r3, r2
 800290a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800290c:	787b      	ldrb	r3, [r7, #1]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002918:	e003      	b.n	8002922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800291a:	887b      	ldrh	r3, [r7, #2]
 800291c:	041a      	lsls	r2, r3, #16
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	619a      	str	r2, [r3, #24]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800293a:	4b08      	ldr	r3, [pc, #32]	@ (800295c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d006      	beq.n	8002954 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002946:	4a05      	ldr	r2, [pc, #20]	@ (800295c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fd54 	bl	80013fc <HAL_GPIO_EXTI_Callback>
  }
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40013c00 	.word	0x40013c00

08002960 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e267      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d075      	beq.n	8002a6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800297e:	4b88      	ldr	r3, [pc, #544]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b04      	cmp	r3, #4
 8002988:	d00c      	beq.n	80029a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800298a:	4b85      	ldr	r3, [pc, #532]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002992:	2b08      	cmp	r3, #8
 8002994:	d112      	bne.n	80029bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002996:	4b82      	ldr	r3, [pc, #520]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800299e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029a2:	d10b      	bne.n	80029bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d05b      	beq.n	8002a68 <HAL_RCC_OscConfig+0x108>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d157      	bne.n	8002a68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e242      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c4:	d106      	bne.n	80029d4 <HAL_RCC_OscConfig+0x74>
 80029c6:	4b76      	ldr	r3, [pc, #472]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a75      	ldr	r2, [pc, #468]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e01d      	b.n	8002a10 <HAL_RCC_OscConfig+0xb0>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x98>
 80029de:	4b70      	ldr	r3, [pc, #448]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a6f      	ldr	r2, [pc, #444]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	4b6d      	ldr	r3, [pc, #436]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a6c      	ldr	r2, [pc, #432]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e00b      	b.n	8002a10 <HAL_RCC_OscConfig+0xb0>
 80029f8:	4b69      	ldr	r3, [pc, #420]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a68      	ldr	r2, [pc, #416]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b66      	ldr	r3, [pc, #408]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a65      	ldr	r2, [pc, #404]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d013      	beq.n	8002a40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7ff fcfe 	bl	8002418 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a20:	f7ff fcfa 	bl	8002418 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	@ 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e207      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b5b      	ldr	r3, [pc, #364]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0xc0>
 8002a3e:	e014      	b.n	8002a6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7ff fcea 	bl	8002418 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a48:	f7ff fce6 	bl	8002418 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	@ 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e1f3      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	4b51      	ldr	r3, [pc, #324]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0xe8>
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d063      	beq.n	8002b3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a82:	4b47      	ldr	r3, [pc, #284]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d11c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8e:	4b44      	ldr	r3, [pc, #272]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d116      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x152>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e1c7      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4937      	ldr	r1, [pc, #220]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	e03a      	b.n	8002b3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d020      	beq.n	8002b12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad0:	4b34      	ldr	r3, [pc, #208]	@ (8002ba4 <HAL_RCC_OscConfig+0x244>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7ff fc9f 	bl	8002418 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ade:	f7ff fc9b 	bl	8002418 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e1a8      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af0:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afc:	4b28      	ldr	r3, [pc, #160]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4925      	ldr	r1, [pc, #148]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]
 8002b10:	e015      	b.n	8002b3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b12:	4b24      	ldr	r3, [pc, #144]	@ (8002ba4 <HAL_RCC_OscConfig+0x244>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7ff fc7e 	bl	8002418 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b20:	f7ff fc7a 	bl	8002418 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e187      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d036      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d016      	beq.n	8002b80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b52:	4b15      	ldr	r3, [pc, #84]	@ (8002ba8 <HAL_RCC_OscConfig+0x248>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b58:	f7ff fc5e 	bl	8002418 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b60:	f7ff fc5a 	bl	8002418 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e167      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x200>
 8002b7e:	e01b      	b.n	8002bb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b80:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <HAL_RCC_OscConfig+0x248>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b86:	f7ff fc47 	bl	8002418 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b8c:	e00e      	b.n	8002bac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8e:	f7ff fc43 	bl	8002418 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d907      	bls.n	8002bac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e150      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	42470000 	.word	0x42470000
 8002ba8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bac:	4b88      	ldr	r3, [pc, #544]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1ea      	bne.n	8002b8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 8097 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bca:	4b81      	ldr	r3, [pc, #516]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10f      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	4b7d      	ldr	r3, [pc, #500]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	4a7c      	ldr	r2, [pc, #496]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002be6:	4b7a      	ldr	r3, [pc, #488]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf6:	4b77      	ldr	r3, [pc, #476]	@ (8002dd4 <HAL_RCC_OscConfig+0x474>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d118      	bne.n	8002c34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c02:	4b74      	ldr	r3, [pc, #464]	@ (8002dd4 <HAL_RCC_OscConfig+0x474>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a73      	ldr	r2, [pc, #460]	@ (8002dd4 <HAL_RCC_OscConfig+0x474>)
 8002c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0e:	f7ff fc03 	bl	8002418 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c16:	f7ff fbff 	bl	8002418 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e10c      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd4 <HAL_RCC_OscConfig+0x474>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x2ea>
 8002c3c:	4b64      	ldr	r3, [pc, #400]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c40:	4a63      	ldr	r2, [pc, #396]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c48:	e01c      	b.n	8002c84 <HAL_RCC_OscConfig+0x324>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b05      	cmp	r3, #5
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x30c>
 8002c52:	4b5f      	ldr	r3, [pc, #380]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c56:	4a5e      	ldr	r2, [pc, #376]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c5e:	4b5c      	ldr	r3, [pc, #368]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c62:	4a5b      	ldr	r2, [pc, #364]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0x324>
 8002c6c:	4b58      	ldr	r3, [pc, #352]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c70:	4a57      	ldr	r2, [pc, #348]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c78:	4b55      	ldr	r3, [pc, #340]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7c:	4a54      	ldr	r2, [pc, #336]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c7e:	f023 0304 	bic.w	r3, r3, #4
 8002c82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d015      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7ff fbc4 	bl	8002418 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7ff fbc0 	bl	8002418 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0cb      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002caa:	4b49      	ldr	r3, [pc, #292]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ee      	beq.n	8002c94 <HAL_RCC_OscConfig+0x334>
 8002cb6:	e014      	b.n	8002ce2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb8:	f7ff fbae 	bl	8002418 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7ff fbaa 	bl	8002418 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e0b5      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1ee      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d105      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce8:	4b39      	ldr	r3, [pc, #228]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	4a38      	ldr	r2, [pc, #224]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80a1 	beq.w	8002e40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cfe:	4b34      	ldr	r3, [pc, #208]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d05c      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d141      	bne.n	8002d96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d12:	4b31      	ldr	r3, [pc, #196]	@ (8002dd8 <HAL_RCC_OscConfig+0x478>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7ff fb7e 	bl	8002418 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7ff fb7a 	bl	8002418 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e087      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	4b27      	ldr	r3, [pc, #156]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69da      	ldr	r2, [r3, #28]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	019b      	lsls	r3, r3, #6
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	3b01      	subs	r3, #1
 8002d58:	041b      	lsls	r3, r3, #16
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d60:	061b      	lsls	r3, r3, #24
 8002d62:	491b      	ldr	r1, [pc, #108]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d68:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd8 <HAL_RCC_OscConfig+0x478>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6e:	f7ff fb53 	bl	8002418 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d76:	f7ff fb4f 	bl	8002418 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e05c      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d88:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x416>
 8002d94:	e054      	b.n	8002e40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d96:	4b10      	ldr	r3, [pc, #64]	@ (8002dd8 <HAL_RCC_OscConfig+0x478>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7ff fb3c 	bl	8002418 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da4:	f7ff fb38 	bl	8002418 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e045      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x444>
 8002dc2:	e03d      	b.n	8002e40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e038      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40007000 	.word	0x40007000
 8002dd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <HAL_RCC_OscConfig+0x4ec>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d028      	beq.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d121      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d11a      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d111      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	3b01      	subs	r3, #1
 8002e26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800

08002e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0cc      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e64:	4b68      	ldr	r3, [pc, #416]	@ (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d90c      	bls.n	8002e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b65      	ldr	r3, [pc, #404]	@ (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b63      	ldr	r3, [pc, #396]	@ (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0b8      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d020      	beq.n	8002eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea4:	4b59      	ldr	r3, [pc, #356]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4a58      	ldr	r2, [pc, #352]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002eae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ebc:	4b53      	ldr	r3, [pc, #332]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a52      	ldr	r2, [pc, #328]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec8:	4b50      	ldr	r3, [pc, #320]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	494d      	ldr	r1, [pc, #308]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d044      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b47      	ldr	r3, [pc, #284]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d119      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e07f      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d003      	beq.n	8002f0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e06f      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e067      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f2e:	4b37      	ldr	r3, [pc, #220]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f023 0203 	bic.w	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4934      	ldr	r1, [pc, #208]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f40:	f7ff fa6a 	bl	8002418 <HAL_GetTick>
 8002f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f46:	e00a      	b.n	8002f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f48:	f7ff fa66 	bl	8002418 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e04f      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 020c 	and.w	r2, r3, #12
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d1eb      	bne.n	8002f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f70:	4b25      	ldr	r3, [pc, #148]	@ (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d20c      	bcs.n	8002f98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b22      	ldr	r3, [pc, #136]	@ (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b20      	ldr	r3, [pc, #128]	@ (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e032      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa4:	4b19      	ldr	r3, [pc, #100]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4916      	ldr	r1, [pc, #88]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc2:	4b12      	ldr	r3, [pc, #72]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	490e      	ldr	r1, [pc, #56]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fd6:	f000 f82d 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	490a      	ldr	r1, [pc, #40]	@ (8003010 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	5ccb      	ldrb	r3, [r1, r3]
 8002fea:	fa22 f303 	lsr.w	r3, r2, r3
 8002fee:	4a09      	ldr	r2, [pc, #36]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ff2:	4b09      	ldr	r3, [pc, #36]	@ (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe fc14 	bl	8001824 <HAL_InitTick>

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40023c00 	.word	0x40023c00
 800300c:	40023800 	.word	0x40023800
 8003010:	0800cce0 	.word	0x0800cce0
 8003014:	20000094 	.word	0x20000094
 8003018:	20000098 	.word	0x20000098

0800301c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003020:	4b03      	ldr	r3, [pc, #12]	@ (8003030 <HAL_RCC_EnableCSS+0x14>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]
}
 8003026:	bf00      	nop
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	4247004c 	.word	0x4247004c

08003034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003038:	b090      	sub	sp, #64	@ 0x40
 800303a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800304c:	4b59      	ldr	r3, [pc, #356]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b08      	cmp	r3, #8
 8003056:	d00d      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x40>
 8003058:	2b08      	cmp	r3, #8
 800305a:	f200 80a1 	bhi.w	80031a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x34>
 8003062:	2b04      	cmp	r3, #4
 8003064:	d003      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x3a>
 8003066:	e09b      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003068:	4b53      	ldr	r3, [pc, #332]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800306a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800306c:	e09b      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800306e:	4b53      	ldr	r3, [pc, #332]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x188>)
 8003070:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003072:	e098      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003074:	4b4f      	ldr	r3, [pc, #316]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800307c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800307e:	4b4d      	ldr	r3, [pc, #308]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d028      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308a:	4b4a      	ldr	r3, [pc, #296]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	2200      	movs	r2, #0
 8003092:	623b      	str	r3, [r7, #32]
 8003094:	627a      	str	r2, [r7, #36]	@ 0x24
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800309c:	2100      	movs	r1, #0
 800309e:	4b47      	ldr	r3, [pc, #284]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x188>)
 80030a0:	fb03 f201 	mul.w	r2, r3, r1
 80030a4:	2300      	movs	r3, #0
 80030a6:	fb00 f303 	mul.w	r3, r0, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	4a43      	ldr	r2, [pc, #268]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x188>)
 80030ae:	fba0 1202 	umull	r1, r2, r0, r2
 80030b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030b4:	460a      	mov	r2, r1
 80030b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030ba:	4413      	add	r3, r2
 80030bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c0:	2200      	movs	r2, #0
 80030c2:	61bb      	str	r3, [r7, #24]
 80030c4:	61fa      	str	r2, [r7, #28]
 80030c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80030ce:	f7fd fd55 	bl	8000b7c <__aeabi_uldivmod>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4613      	mov	r3, r2
 80030d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030da:	e053      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030dc:	4b35      	ldr	r3, [pc, #212]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	2200      	movs	r2, #0
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	617a      	str	r2, [r7, #20]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030ee:	f04f 0b00 	mov.w	fp, #0
 80030f2:	4652      	mov	r2, sl
 80030f4:	465b      	mov	r3, fp
 80030f6:	f04f 0000 	mov.w	r0, #0
 80030fa:	f04f 0100 	mov.w	r1, #0
 80030fe:	0159      	lsls	r1, r3, #5
 8003100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003104:	0150      	lsls	r0, r2, #5
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	ebb2 080a 	subs.w	r8, r2, sl
 800310e:	eb63 090b 	sbc.w	r9, r3, fp
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800311e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003122:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003126:	ebb2 0408 	subs.w	r4, r2, r8
 800312a:	eb63 0509 	sbc.w	r5, r3, r9
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	00eb      	lsls	r3, r5, #3
 8003138:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800313c:	00e2      	lsls	r2, r4, #3
 800313e:	4614      	mov	r4, r2
 8003140:	461d      	mov	r5, r3
 8003142:	eb14 030a 	adds.w	r3, r4, sl
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	eb45 030b 	adc.w	r3, r5, fp
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800315a:	4629      	mov	r1, r5
 800315c:	028b      	lsls	r3, r1, #10
 800315e:	4621      	mov	r1, r4
 8003160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003164:	4621      	mov	r1, r4
 8003166:	028a      	lsls	r2, r1, #10
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316e:	2200      	movs	r2, #0
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	60fa      	str	r2, [r7, #12]
 8003174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003178:	f7fd fd00 	bl	8000b7c <__aeabi_uldivmod>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4613      	mov	r3, r2
 8003182:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003184:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	3301      	adds	r3, #1
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003194:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800319e:	e002      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031a0:	4b05      	ldr	r3, [pc, #20]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80031a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3740      	adds	r7, #64	@ 0x40
 80031ac:	46bd      	mov	sp, r7
 80031ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
 80031b8:	00f42400 	.word	0x00f42400
 80031bc:	017d7840 	.word	0x017d7840

080031c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c4:	4b03      	ldr	r3, [pc, #12]	@ (80031d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000094 	.word	0x20000094

080031d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031dc:	f7ff fff0 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	0a9b      	lsrs	r3, r3, #10
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4903      	ldr	r1, [pc, #12]	@ (80031fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40023800 	.word	0x40023800
 80031fc:	0800ccf0 	.word	0x0800ccf0

08003200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003204:	f7ff ffdc 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b05      	ldr	r3, [pc, #20]	@ (8003220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	0b5b      	lsrs	r3, r3, #13
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	4903      	ldr	r1, [pc, #12]	@ (8003224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003216:	5ccb      	ldrb	r3, [r1, r3]
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40023800 	.word	0x40023800
 8003224:	0800ccf0 	.word	0x0800ccf0

08003228 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	220f      	movs	r2, #15
 8003236:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003238:	4b12      	ldr	r3, [pc, #72]	@ (8003284 <HAL_RCC_GetClockConfig+0x5c>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0203 	and.w	r2, r3, #3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003244:	4b0f      	ldr	r3, [pc, #60]	@ (8003284 <HAL_RCC_GetClockConfig+0x5c>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003250:	4b0c      	ldr	r3, [pc, #48]	@ (8003284 <HAL_RCC_GetClockConfig+0x5c>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800325c:	4b09      	ldr	r3, [pc, #36]	@ (8003284 <HAL_RCC_GetClockConfig+0x5c>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	08db      	lsrs	r3, r3, #3
 8003262:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800326a:	4b07      	ldr	r3, [pc, #28]	@ (8003288 <HAL_RCC_GetClockConfig+0x60>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0207 	and.w	r2, r3, #7
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	601a      	str	r2, [r3, #0]
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800
 8003288:	40023c00 	.word	0x40023c00

0800328c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003290:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <HAL_RCC_NMI_IRQHandler+0x20>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003298:	2b80      	cmp	r3, #128	@ 0x80
 800329a:	d104      	bne.n	80032a6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800329c:	f000 f80a 	bl	80032b4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80032a0:	4b03      	ldr	r3, [pc, #12]	@ (80032b0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80032a2:	2280      	movs	r2, #128	@ 0x80
 80032a4:	701a      	strb	r2, [r3, #0]
  }
}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	4002380e 	.word	0x4002380e

080032b4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e09b      	b.n	800340e <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d108      	bne.n	80032f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032e6:	d009      	beq.n	80032fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	61da      	str	r2, [r3, #28]
 80032ee:	e005      	b.n	80032fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d126      	bne.n	800335c <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a3f      	ldr	r2, [pc, #252]	@ (8003418 <HAL_SPI_Init+0x154>)
 800331a:	659a      	str	r2, [r3, #88]	@ 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a3f      	ldr	r2, [pc, #252]	@ (800341c <HAL_SPI_Init+0x158>)
 8003320:	65da      	str	r2, [r3, #92]	@ 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a3e      	ldr	r2, [pc, #248]	@ (8003420 <HAL_SPI_Init+0x15c>)
 8003326:	661a      	str	r2, [r3, #96]	@ 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a3e      	ldr	r2, [pc, #248]	@ (8003424 <HAL_SPI_Init+0x160>)
 800332c:	665a      	str	r2, [r3, #100]	@ 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a3d      	ldr	r2, [pc, #244]	@ (8003428 <HAL_SPI_Init+0x164>)
 8003332:	669a      	str	r2, [r3, #104]	@ 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a3d      	ldr	r2, [pc, #244]	@ (800342c <HAL_SPI_Init+0x168>)
 8003338:	66da      	str	r2, [r3, #108]	@ 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a3c      	ldr	r2, [pc, #240]	@ (8003430 <HAL_SPI_Init+0x16c>)
 800333e:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a3c      	ldr	r2, [pc, #240]	@ (8003434 <HAL_SPI_Init+0x170>)
 8003344:	675a      	str	r2, [r3, #116]	@ 0x74

    if (hspi->MspInitCallback == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800334a:	2b00      	cmp	r3, #0
 800334c:	d102      	bne.n	8003354 <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a39      	ldr	r2, [pc, #228]	@ (8003438 <HAL_SPI_Init+0x174>)
 8003352:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003372:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033c0:	ea42 0103 	orr.w	r1, r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	0c1b      	lsrs	r3, r3, #16
 80033da:	f003 0104 	and.w	r1, r3, #4
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	f003 0210 	and.w	r2, r3, #16
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	08003c49 	.word	0x08003c49
 800341c:	08003c5d 	.word	0x08003c5d
 8003420:	08003c71 	.word	0x08003c71
 8003424:	08003c85 	.word	0x08003c85
 8003428:	08003c99 	.word	0x08003c99
 800342c:	08003cad 	.word	0x08003cad
 8003430:	08003cc1 	.word	0x08003cc1
 8003434:	08003cd5 	.word	0x08003cd5
 8003438:	0800173d 	.word	0x0800173d

0800343c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	4613      	mov	r3, r2
 800344a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800344c:	f7fe ffe4 	bl	8002418 <HAL_GetTick>
 8003450:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d001      	beq.n	8003466 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
 8003464:	e12a      	b.n	80036bc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_SPI_Transmit+0x36>
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e122      	b.n	80036bc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_SPI_Transmit+0x48>
 8003480:	2302      	movs	r3, #2
 8003482:	e11b      	b.n	80036bc <HAL_SPI_Transmit+0x280>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2203      	movs	r2, #3
 8003490:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	88fa      	ldrh	r2, [r7, #6]
 80034a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	88fa      	ldrh	r2, [r7, #6]
 80034aa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034d2:	d10f      	bne.n	80034f4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fe:	2b40      	cmp	r3, #64	@ 0x40
 8003500:	d007      	beq.n	8003512 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003510:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800351a:	d152      	bne.n	80035c2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HAL_SPI_Transmit+0xee>
 8003524:	8b7b      	ldrh	r3, [r7, #26]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d145      	bne.n	80035b6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352e:	881a      	ldrh	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	1c9a      	adds	r2, r3, #2
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800354e:	e032      	b.n	80035b6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b02      	cmp	r3, #2
 800355c:	d112      	bne.n	8003584 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003562:	881a      	ldrh	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356e:	1c9a      	adds	r2, r3, #2
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003582:	e018      	b.n	80035b6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003584:	f7fe ff48 	bl	8002418 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d803      	bhi.n	800359c <HAL_SPI_Transmit+0x160>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d102      	bne.n	80035a2 <HAL_SPI_Transmit+0x166>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e082      	b.n	80036bc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1c7      	bne.n	8003550 <HAL_SPI_Transmit+0x114>
 80035c0:	e053      	b.n	800366a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_SPI_Transmit+0x194>
 80035ca:	8b7b      	ldrh	r3, [r7, #26]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d147      	bne.n	8003660 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	330c      	adds	r3, #12
 80035da:	7812      	ldrb	r2, [r2, #0]
 80035dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035f6:	e033      	b.n	8003660 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b02      	cmp	r3, #2
 8003604:	d113      	bne.n	800362e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	330c      	adds	r3, #12
 8003610:	7812      	ldrb	r2, [r2, #0]
 8003612:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800362c:	e018      	b.n	8003660 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800362e:	f7fe fef3 	bl	8002418 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d803      	bhi.n	8003646 <HAL_SPI_Transmit+0x20a>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d102      	bne.n	800364c <HAL_SPI_Transmit+0x210>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d109      	bne.n	8003660 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e02d      	b.n	80036bc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1c6      	bne.n	80035f8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	6839      	ldr	r1, [r7, #0]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fc36 	bl	8003ee0 <SPI_EndRxTxTransaction>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10a      	bne.n	800369e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80036ba:	2300      	movs	r3, #0
  }
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3720      	adds	r7, #32
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d001      	beq.n	80036e4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80036e0:	2302      	movs	r3, #2
 80036e2:	e104      	b.n	80038ee <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036ec:	d112      	bne.n	8003714 <HAL_SPI_Receive+0x50>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10e      	bne.n	8003714 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2204      	movs	r2, #4
 80036fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80036fe:	88fa      	ldrh	r2, [r7, #6]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	4613      	mov	r3, r2
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f8f3 	bl	80038f6 <HAL_SPI_TransmitReceive>
 8003710:	4603      	mov	r3, r0
 8003712:	e0ec      	b.n	80038ee <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003714:	f7fe fe80 	bl	8002418 <HAL_GetTick>
 8003718:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_SPI_Receive+0x62>
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e0e1      	b.n	80038ee <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_SPI_Receive+0x74>
 8003734:	2302      	movs	r3, #2
 8003736:	e0da      	b.n	80038ee <HAL_SPI_Receive+0x22a>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2204      	movs	r2, #4
 8003744:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	88fa      	ldrh	r2, [r7, #6]
 8003758:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	88fa      	ldrh	r2, [r7, #6]
 800375e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003786:	d10f      	bne.n	80037a8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003796:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80037a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b2:	2b40      	cmp	r3, #64	@ 0x40
 80037b4:	d007      	beq.n	80037c6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d170      	bne.n	80038b0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80037ce:	e035      	b.n	800383c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d115      	bne.n	800380a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f103 020c 	add.w	r2, r3, #12
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ea:	7812      	ldrb	r2, [r2, #0]
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003808:	e018      	b.n	800383c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800380a:	f7fe fe05 	bl	8002418 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d803      	bhi.n	8003822 <HAL_SPI_Receive+0x15e>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d102      	bne.n	8003828 <HAL_SPI_Receive+0x164>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d109      	bne.n	800383c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e058      	b.n	80038ee <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1c4      	bne.n	80037d0 <HAL_SPI_Receive+0x10c>
 8003846:	e038      	b.n	80038ba <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d113      	bne.n	800387e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003860:	b292      	uxth	r2, r2
 8003862:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003868:	1c9a      	adds	r2, r3, #2
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800387c:	e018      	b.n	80038b0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800387e:	f7fe fdcb 	bl	8002418 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d803      	bhi.n	8003896 <HAL_SPI_Receive+0x1d2>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d102      	bne.n	800389c <HAL_SPI_Receive+0x1d8>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d109      	bne.n	80038b0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e01e      	b.n	80038ee <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1c6      	bne.n	8003848 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	6839      	ldr	r1, [r7, #0]
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 faa8 	bl	8003e14 <SPI_EndRxTransaction>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80038ec:	2300      	movs	r3, #0
  }
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b08a      	sub	sp, #40	@ 0x28
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003904:	2301      	movs	r3, #1
 8003906:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003908:	f7fe fd86 	bl	8002418 <HAL_GetTick>
 800390c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003914:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800391c:	887b      	ldrh	r3, [r7, #2]
 800391e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003920:	7ffb      	ldrb	r3, [r7, #31]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d00c      	beq.n	8003940 <HAL_SPI_TransmitReceive+0x4a>
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800392c:	d106      	bne.n	800393c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d102      	bne.n	800393c <HAL_SPI_TransmitReceive+0x46>
 8003936:	7ffb      	ldrb	r3, [r7, #31]
 8003938:	2b04      	cmp	r3, #4
 800393a:	d001      	beq.n	8003940 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800393c:	2302      	movs	r3, #2
 800393e:	e17f      	b.n	8003c40 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_SPI_TransmitReceive+0x5c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_SPI_TransmitReceive+0x5c>
 800394c:	887b      	ldrh	r3, [r7, #2]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e174      	b.n	8003c40 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_SPI_TransmitReceive+0x6e>
 8003960:	2302      	movs	r3, #2
 8003962:	e16d      	b.n	8003c40 <HAL_SPI_TransmitReceive+0x34a>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b04      	cmp	r3, #4
 8003976:	d003      	beq.n	8003980 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2205      	movs	r2, #5
 800397c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	887a      	ldrh	r2, [r7, #2]
 8003990:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	887a      	ldrh	r2, [r7, #2]
 8003996:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	887a      	ldrh	r2, [r7, #2]
 80039a2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	887a      	ldrh	r2, [r7, #2]
 80039a8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c0:	2b40      	cmp	r3, #64	@ 0x40
 80039c2:	d007      	beq.n	80039d4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039dc:	d17e      	bne.n	8003adc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_SPI_TransmitReceive+0xf6>
 80039e6:	8afb      	ldrh	r3, [r7, #22]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d16c      	bne.n	8003ac6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f0:	881a      	ldrh	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fc:	1c9a      	adds	r2, r3, #2
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a10:	e059      	b.n	8003ac6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d11b      	bne.n	8003a58 <HAL_SPI_TransmitReceive+0x162>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d016      	beq.n	8003a58 <HAL_SPI_TransmitReceive+0x162>
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d113      	bne.n	8003a58 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a34:	881a      	ldrh	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a40:	1c9a      	adds	r2, r3, #2
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d119      	bne.n	8003a9a <HAL_SPI_TransmitReceive+0x1a4>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d014      	beq.n	8003a9a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7a:	b292      	uxth	r2, r2
 8003a7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a82:	1c9a      	adds	r2, r3, #2
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a96:	2301      	movs	r3, #1
 8003a98:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a9a:	f7fe fcbd 	bl	8002418 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d80d      	bhi.n	8003ac6 <HAL_SPI_TransmitReceive+0x1d0>
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d009      	beq.n	8003ac6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e0bc      	b.n	8003c40 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1a0      	bne.n	8003a12 <HAL_SPI_TransmitReceive+0x11c>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d19b      	bne.n	8003a12 <HAL_SPI_TransmitReceive+0x11c>
 8003ada:	e082      	b.n	8003be2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_SPI_TransmitReceive+0x1f4>
 8003ae4:	8afb      	ldrh	r3, [r7, #22]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d171      	bne.n	8003bce <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	330c      	adds	r3, #12
 8003af4:	7812      	ldrb	r2, [r2, #0]
 8003af6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b10:	e05d      	b.n	8003bce <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d11c      	bne.n	8003b5a <HAL_SPI_TransmitReceive+0x264>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d017      	beq.n	8003b5a <HAL_SPI_TransmitReceive+0x264>
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d114      	bne.n	8003b5a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	330c      	adds	r3, #12
 8003b3a:	7812      	ldrb	r2, [r2, #0]
 8003b3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d119      	bne.n	8003b9c <HAL_SPI_TransmitReceive+0x2a6>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d014      	beq.n	8003b9c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b9c:	f7fe fc3c 	bl	8002418 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d803      	bhi.n	8003bb4 <HAL_SPI_TransmitReceive+0x2be>
 8003bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb2:	d102      	bne.n	8003bba <HAL_SPI_TransmitReceive+0x2c4>
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e038      	b.n	8003c40 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d19c      	bne.n	8003b12 <HAL_SPI_TransmitReceive+0x21c>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d197      	bne.n	8003b12 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003be2:	6a3a      	ldr	r2, [r7, #32]
 8003be4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f97a 	bl	8003ee0 <SPI_EndRxTxTransaction>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e01d      	b.n	8003c40 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
  }
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3728      	adds	r7, #40	@ 0x28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cf6:	b2db      	uxtb	r3, r3
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d14:	f7fe fb80 	bl	8002418 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	4413      	add	r3, r2
 8003d22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d24:	f7fe fb78 	bl	8002418 <HAL_GetTick>
 8003d28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d2a:	4b39      	ldr	r3, [pc, #228]	@ (8003e10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	015b      	lsls	r3, r3, #5
 8003d30:	0d1b      	lsrs	r3, r3, #20
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	fb02 f303 	mul.w	r3, r2, r3
 8003d38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d3a:	e054      	b.n	8003de6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d050      	beq.n	8003de6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d44:	f7fe fb68 	bl	8002418 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d902      	bls.n	8003d5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d13d      	bne.n	8003dd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d72:	d111      	bne.n	8003d98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d7c:	d004      	beq.n	8003d88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d86:	d107      	bne.n	8003d98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da0:	d10f      	bne.n	8003dc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e017      	b.n	8003e06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4013      	ands	r3, r2
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	bf0c      	ite	eq
 8003df6:	2301      	moveq	r3, #1
 8003df8:	2300      	movne	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d19b      	bne.n	8003d3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3720      	adds	r7, #32
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000094 	.word	0x20000094

08003e14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e28:	d111      	bne.n	8003e4e <SPI_EndRxTransaction+0x3a>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e32:	d004      	beq.n	8003e3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e3c:	d107      	bne.n	8003e4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e4c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e56:	d12a      	bne.n	8003eae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e60:	d012      	beq.n	8003e88 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2180      	movs	r1, #128	@ 0x80
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7ff ff49 	bl	8003d04 <SPI_WaitFlagStateUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d02d      	beq.n	8003ed4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7c:	f043 0220 	orr.w	r2, r3, #32
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e026      	b.n	8003ed6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2101      	movs	r1, #1
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f7ff ff36 	bl	8003d04 <SPI_WaitFlagStateUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01a      	beq.n	8003ed4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea2:	f043 0220 	orr.w	r2, r3, #32
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e013      	b.n	8003ed6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7ff ff23 	bl	8003d04 <SPI_WaitFlagStateUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d007      	beq.n	8003ed4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec8:	f043 0220 	orr.w	r2, r3, #32
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e000      	b.n	8003ed6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff ff04 	bl	8003d04 <SPI_WaitFlagStateUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f06:	f043 0220 	orr.w	r2, r3, #32
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e032      	b.n	8003f78 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f12:	4b1b      	ldr	r3, [pc, #108]	@ (8003f80 <SPI_EndRxTxTransaction+0xa0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1b      	ldr	r2, [pc, #108]	@ (8003f84 <SPI_EndRxTxTransaction+0xa4>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	0d5b      	lsrs	r3, r3, #21
 8003f1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f30:	d112      	bne.n	8003f58 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2180      	movs	r1, #128	@ 0x80
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f7ff fee1 	bl	8003d04 <SPI_WaitFlagStateUntilTimeout>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d016      	beq.n	8003f76 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4c:	f043 0220 	orr.w	r2, r3, #32
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e00f      	b.n	8003f78 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f6e:	2b80      	cmp	r3, #128	@ 0x80
 8003f70:	d0f2      	beq.n	8003f58 <SPI_EndRxTxTransaction+0x78>
 8003f72:	e000      	b.n	8003f76 <SPI_EndRxTxTransaction+0x96>
        break;
 8003f74:	bf00      	nop
  }

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20000094 	.word	0x20000094
 8003f84:	165e9f81 	.word	0x165e9f81

08003f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e041      	b.n	800401e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fe f8b6 	bl	8002120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f000 fc9e 	bl	8004908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d001      	beq.n	8004040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e044      	b.n	80040ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a1e      	ldr	r2, [pc, #120]	@ (80040d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d018      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x6c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406a:	d013      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x6c>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1a      	ldr	r2, [pc, #104]	@ (80040dc <HAL_TIM_Base_Start_IT+0xb4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00e      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x6c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a19      	ldr	r2, [pc, #100]	@ (80040e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d009      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x6c>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a17      	ldr	r2, [pc, #92]	@ (80040e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x6c>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a16      	ldr	r2, [pc, #88]	@ (80040e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d111      	bne.n	80040b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b06      	cmp	r3, #6
 80040a4:	d010      	beq.n	80040c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0201 	orr.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b6:	e007      	b.n	80040c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40000c00 	.word	0x40000c00
 80040e8:	40014000 	.word	0x40014000

080040ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e041      	b.n	8004182 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fd ffcc 	bl	80020b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3304      	adds	r3, #4
 8004128:	4619      	mov	r1, r3
 800412a:	4610      	mov	r0, r2
 800412c:	f000 fbec 	bl	8004908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d109      	bne.n	80041b0 <HAL_TIM_PWM_Start+0x24>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	bf14      	ite	ne
 80041a8:	2301      	movne	r3, #1
 80041aa:	2300      	moveq	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	e022      	b.n	80041f6 <HAL_TIM_PWM_Start+0x6a>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d109      	bne.n	80041ca <HAL_TIM_PWM_Start+0x3e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b01      	cmp	r3, #1
 80041c0:	bf14      	ite	ne
 80041c2:	2301      	movne	r3, #1
 80041c4:	2300      	moveq	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	e015      	b.n	80041f6 <HAL_TIM_PWM_Start+0x6a>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d109      	bne.n	80041e4 <HAL_TIM_PWM_Start+0x58>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	bf14      	ite	ne
 80041dc:	2301      	movne	r3, #1
 80041de:	2300      	moveq	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	e008      	b.n	80041f6 <HAL_TIM_PWM_Start+0x6a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	bf14      	ite	ne
 80041f0:	2301      	movne	r3, #1
 80041f2:	2300      	moveq	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e068      	b.n	80042d0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d104      	bne.n	800420e <HAL_TIM_PWM_Start+0x82>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800420c:	e013      	b.n	8004236 <HAL_TIM_PWM_Start+0xaa>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b04      	cmp	r3, #4
 8004212:	d104      	bne.n	800421e <HAL_TIM_PWM_Start+0x92>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800421c:	e00b      	b.n	8004236 <HAL_TIM_PWM_Start+0xaa>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b08      	cmp	r3, #8
 8004222:	d104      	bne.n	800422e <HAL_TIM_PWM_Start+0xa2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800422c:	e003      	b.n	8004236 <HAL_TIM_PWM_Start+0xaa>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2201      	movs	r2, #1
 800423c:	6839      	ldr	r1, [r7, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fd7a 	bl	8004d38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a23      	ldr	r2, [pc, #140]	@ (80042d8 <HAL_TIM_PWM_Start+0x14c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d107      	bne.n	800425e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800425c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1d      	ldr	r2, [pc, #116]	@ (80042d8 <HAL_TIM_PWM_Start+0x14c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d018      	beq.n	800429a <HAL_TIM_PWM_Start+0x10e>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004270:	d013      	beq.n	800429a <HAL_TIM_PWM_Start+0x10e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a19      	ldr	r2, [pc, #100]	@ (80042dc <HAL_TIM_PWM_Start+0x150>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d00e      	beq.n	800429a <HAL_TIM_PWM_Start+0x10e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a17      	ldr	r2, [pc, #92]	@ (80042e0 <HAL_TIM_PWM_Start+0x154>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d009      	beq.n	800429a <HAL_TIM_PWM_Start+0x10e>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a16      	ldr	r2, [pc, #88]	@ (80042e4 <HAL_TIM_PWM_Start+0x158>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d004      	beq.n	800429a <HAL_TIM_PWM_Start+0x10e>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a14      	ldr	r2, [pc, #80]	@ (80042e8 <HAL_TIM_PWM_Start+0x15c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d111      	bne.n	80042be <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b06      	cmp	r3, #6
 80042aa:	d010      	beq.n	80042ce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042bc:	e007      	b.n	80042ce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0201 	orr.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40010000 	.word	0x40010000
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800
 80042e4:	40000c00 	.word	0x40000c00
 80042e8:	40014000 	.word	0x40014000

080042ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e097      	b.n	8004430 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d106      	bne.n	800431a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7fd fdbf 	bl	8001e98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004330:	f023 0307 	bic.w	r3, r3, #7
 8004334:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3304      	adds	r3, #4
 800433e:	4619      	mov	r1, r3
 8004340:	4610      	mov	r0, r2
 8004342:	f000 fae1 	bl	8004908 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800436e:	f023 0303 	bic.w	r3, r3, #3
 8004372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	4313      	orrs	r3, r2
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800438c:	f023 030c 	bic.w	r3, r3, #12
 8004390:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004398:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800439c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	021b      	lsls	r3, r3, #8
 80043a8:	4313      	orrs	r3, r2
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	011a      	lsls	r2, r3, #4
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	031b      	lsls	r3, r3, #12
 80043bc:	4313      	orrs	r3, r2
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80043ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80043d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	4313      	orrs	r3, r2
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004448:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004450:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004458:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004460:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d110      	bne.n	800448a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d102      	bne.n	8004474 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800446e:	7b7b      	ldrb	r3, [r7, #13]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d001      	beq.n	8004478 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e069      	b.n	800454c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004488:	e031      	b.n	80044ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b04      	cmp	r3, #4
 800448e:	d110      	bne.n	80044b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004490:	7bbb      	ldrb	r3, [r7, #14]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d102      	bne.n	800449c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004496:	7b3b      	ldrb	r3, [r7, #12]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d001      	beq.n	80044a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e055      	b.n	800454c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044b0:	e01d      	b.n	80044ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d108      	bne.n	80044ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044b8:	7bbb      	ldrb	r3, [r7, #14]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d105      	bne.n	80044ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044be:	7b7b      	ldrb	r3, [r7, #13]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d102      	bne.n	80044ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044c4:	7b3b      	ldrb	r3, [r7, #12]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d001      	beq.n	80044ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e03e      	b.n	800454c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2202      	movs	r2, #2
 80044d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2202      	movs	r2, #2
 80044da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2202      	movs	r2, #2
 80044e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2202      	movs	r2, #2
 80044ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_TIM_Encoder_Start+0xc4>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d008      	beq.n	800450c <HAL_TIM_Encoder_Start+0xd4>
 80044fa:	e00f      	b.n	800451c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2201      	movs	r2, #1
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fc17 	bl	8004d38 <TIM_CCxChannelCmd>
      break;
 800450a:	e016      	b.n	800453a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2201      	movs	r2, #1
 8004512:	2104      	movs	r1, #4
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fc0f 	bl	8004d38 <TIM_CCxChannelCmd>
      break;
 800451a:	e00e      	b.n	800453a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2201      	movs	r2, #1
 8004522:	2100      	movs	r1, #0
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fc07 	bl	8004d38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2201      	movs	r2, #1
 8004530:	2104      	movs	r1, #4
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fc00 	bl	8004d38 <TIM_CCxChannelCmd>
      break;
 8004538:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0201 	orr.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d020      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01b      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0202 	mvn.w	r2, #2
 8004588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f994 	bl	80048cc <HAL_TIM_IC_CaptureCallback>
 80045a4:	e005      	b.n	80045b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f986 	bl	80048b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f997 	bl	80048e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d020      	beq.n	8004604 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01b      	beq.n	8004604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0204 	mvn.w	r2, #4
 80045d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2202      	movs	r2, #2
 80045da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f96e 	bl	80048cc <HAL_TIM_IC_CaptureCallback>
 80045f0:	e005      	b.n	80045fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f960 	bl	80048b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f971 	bl	80048e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d020      	beq.n	8004650 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01b      	beq.n	8004650 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0208 	mvn.w	r2, #8
 8004620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2204      	movs	r2, #4
 8004626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f948 	bl	80048cc <HAL_TIM_IC_CaptureCallback>
 800463c:	e005      	b.n	800464a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f93a 	bl	80048b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f94b 	bl	80048e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f003 0310 	and.w	r3, r3, #16
 8004656:	2b00      	cmp	r3, #0
 8004658:	d020      	beq.n	800469c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f003 0310 	and.w	r3, r3, #16
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01b      	beq.n	800469c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0210 	mvn.w	r2, #16
 800466c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2208      	movs	r2, #8
 8004672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f922 	bl	80048cc <HAL_TIM_IC_CaptureCallback>
 8004688:	e005      	b.n	8004696 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f914 	bl	80048b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f925 	bl	80048e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00c      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0201 	mvn.w	r2, #1
 80046b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fc fff0 	bl	80016a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00c      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fbc8 	bl	8004e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00c      	beq.n	8004708 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f8f6 	bl	80048f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00c      	beq.n	800472c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0220 	mvn.w	r2, #32
 8004724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fb9a 	bl	8004e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800474e:	2302      	movs	r3, #2
 8004750:	e0ae      	b.n	80048b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b0c      	cmp	r3, #12
 800475e:	f200 809f 	bhi.w	80048a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004762:	a201      	add	r2, pc, #4	@ (adr r2, 8004768 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004768:	0800479d 	.word	0x0800479d
 800476c:	080048a1 	.word	0x080048a1
 8004770:	080048a1 	.word	0x080048a1
 8004774:	080048a1 	.word	0x080048a1
 8004778:	080047dd 	.word	0x080047dd
 800477c:	080048a1 	.word	0x080048a1
 8004780:	080048a1 	.word	0x080048a1
 8004784:	080048a1 	.word	0x080048a1
 8004788:	0800481f 	.word	0x0800481f
 800478c:	080048a1 	.word	0x080048a1
 8004790:	080048a1 	.word	0x080048a1
 8004794:	080048a1 	.word	0x080048a1
 8004798:	0800485f 	.word	0x0800485f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f93c 	bl	8004a20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0208 	orr.w	r2, r2, #8
 80047b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0204 	bic.w	r2, r2, #4
 80047c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6999      	ldr	r1, [r3, #24]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	619a      	str	r2, [r3, #24]
      break;
 80047da:	e064      	b.n	80048a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 f982 	bl	8004aec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6999      	ldr	r1, [r3, #24]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	021a      	lsls	r2, r3, #8
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	619a      	str	r2, [r3, #24]
      break;
 800481c:	e043      	b.n	80048a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	4618      	mov	r0, r3
 8004826:	f000 f9cd 	bl	8004bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69da      	ldr	r2, [r3, #28]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 0208 	orr.w	r2, r2, #8
 8004838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0204 	bic.w	r2, r2, #4
 8004848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69d9      	ldr	r1, [r3, #28]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	61da      	str	r2, [r3, #28]
      break;
 800485c:	e023      	b.n	80048a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fa17 	bl	8004c98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69da      	ldr	r2, [r3, #28]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69d9      	ldr	r1, [r3, #28]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	021a      	lsls	r2, r3, #8
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	61da      	str	r2, [r3, #28]
      break;
 800489e:	e002      	b.n	80048a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	75fb      	strb	r3, [r7, #23]
      break;
 80048a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a3a      	ldr	r2, [pc, #232]	@ (8004a04 <TIM_Base_SetConfig+0xfc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00f      	beq.n	8004940 <TIM_Base_SetConfig+0x38>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004926:	d00b      	beq.n	8004940 <TIM_Base_SetConfig+0x38>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a37      	ldr	r2, [pc, #220]	@ (8004a08 <TIM_Base_SetConfig+0x100>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d007      	beq.n	8004940 <TIM_Base_SetConfig+0x38>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a36      	ldr	r2, [pc, #216]	@ (8004a0c <TIM_Base_SetConfig+0x104>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d003      	beq.n	8004940 <TIM_Base_SetConfig+0x38>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a35      	ldr	r2, [pc, #212]	@ (8004a10 <TIM_Base_SetConfig+0x108>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d108      	bne.n	8004952 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a2b      	ldr	r2, [pc, #172]	@ (8004a04 <TIM_Base_SetConfig+0xfc>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d01b      	beq.n	8004992 <TIM_Base_SetConfig+0x8a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004960:	d017      	beq.n	8004992 <TIM_Base_SetConfig+0x8a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a28      	ldr	r2, [pc, #160]	@ (8004a08 <TIM_Base_SetConfig+0x100>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d013      	beq.n	8004992 <TIM_Base_SetConfig+0x8a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a27      	ldr	r2, [pc, #156]	@ (8004a0c <TIM_Base_SetConfig+0x104>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00f      	beq.n	8004992 <TIM_Base_SetConfig+0x8a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a26      	ldr	r2, [pc, #152]	@ (8004a10 <TIM_Base_SetConfig+0x108>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00b      	beq.n	8004992 <TIM_Base_SetConfig+0x8a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a25      	ldr	r2, [pc, #148]	@ (8004a14 <TIM_Base_SetConfig+0x10c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d007      	beq.n	8004992 <TIM_Base_SetConfig+0x8a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a24      	ldr	r2, [pc, #144]	@ (8004a18 <TIM_Base_SetConfig+0x110>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d003      	beq.n	8004992 <TIM_Base_SetConfig+0x8a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a23      	ldr	r2, [pc, #140]	@ (8004a1c <TIM_Base_SetConfig+0x114>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d108      	bne.n	80049a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004a04 <TIM_Base_SetConfig+0xfc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d103      	bne.n	80049d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d105      	bne.n	80049f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f023 0201 	bic.w	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	611a      	str	r2, [r3, #16]
  }
}
 80049f6:	bf00      	nop
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40010000 	.word	0x40010000
 8004a08:	40000400 	.word	0x40000400
 8004a0c:	40000800 	.word	0x40000800
 8004a10:	40000c00 	.word	0x40000c00
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40014400 	.word	0x40014400
 8004a1c:	40014800 	.word	0x40014800

08004a20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f023 0201 	bic.w	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0303 	bic.w	r3, r3, #3
 8004a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f023 0302 	bic.w	r3, r3, #2
 8004a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae8 <TIM_OC1_SetConfig+0xc8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d10c      	bne.n	8004a96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f023 0308 	bic.w	r3, r3, #8
 8004a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f023 0304 	bic.w	r3, r3, #4
 8004a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a13      	ldr	r2, [pc, #76]	@ (8004ae8 <TIM_OC1_SetConfig+0xc8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d111      	bne.n	8004ac2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	621a      	str	r2, [r3, #32]
}
 8004adc:	bf00      	nop
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	40010000 	.word	0x40010000

08004aec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	f023 0210 	bic.w	r2, r3, #16
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	021b      	lsls	r3, r3, #8
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f023 0320 	bic.w	r3, r3, #32
 8004b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a1e      	ldr	r2, [pc, #120]	@ (8004bc0 <TIM_OC2_SetConfig+0xd4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d10d      	bne.n	8004b68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a15      	ldr	r2, [pc, #84]	@ (8004bc0 <TIM_OC2_SetConfig+0xd4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d113      	bne.n	8004b98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	621a      	str	r2, [r3, #32]
}
 8004bb2:	bf00      	nop
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40010000 	.word	0x40010000

08004bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0303 	bic.w	r3, r3, #3
 8004bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004c94 <TIM_OC3_SetConfig+0xd0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d10d      	bne.n	8004c3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a14      	ldr	r2, [pc, #80]	@ (8004c94 <TIM_OC3_SetConfig+0xd0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d113      	bne.n	8004c6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	621a      	str	r2, [r3, #32]
}
 8004c88:	bf00      	nop
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	40010000 	.word	0x40010000

08004c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	031b      	lsls	r3, r3, #12
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a10      	ldr	r2, [pc, #64]	@ (8004d34 <TIM_OC4_SetConfig+0x9c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d109      	bne.n	8004d0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	019b      	lsls	r3, r3, #6
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000

08004d38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a1a      	ldr	r2, [r3, #32]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	401a      	ands	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a1a      	ldr	r2, [r3, #32]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f003 031f 	and.w	r3, r3, #31
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d70:	431a      	orrs	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e050      	b.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1c      	ldr	r2, [pc, #112]	@ (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d018      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de8:	d013      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a18      	ldr	r2, [pc, #96]	@ (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00e      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a16      	ldr	r2, [pc, #88]	@ (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a15      	ldr	r2, [pc, #84]	@ (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a13      	ldr	r2, [pc, #76]	@ (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d10c      	bne.n	8004e2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40000800 	.word	0x40000800
 8004e58:	40000c00 	.word	0x40000c00
 8004e5c:	40014000 	.word	0x40014000

08004e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e042      	b.n	8004f20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fd fa0a 	bl	80022c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2224      	movs	r2, #36	@ 0x24
 8004eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004eca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f82b 	bl	8004f28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695a      	ldr	r2, [r3, #20]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f2c:	b0c0      	sub	sp, #256	@ 0x100
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f44:	68d9      	ldr	r1, [r3, #12]
 8004f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	ea40 0301 	orr.w	r3, r0, r1
 8004f50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f80:	f021 010c 	bic.w	r1, r1, #12
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa2:	6999      	ldr	r1, [r3, #24]
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	ea40 0301 	orr.w	r3, r0, r1
 8004fae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b8f      	ldr	r3, [pc, #572]	@ (80051f4 <UART_SetConfig+0x2cc>)
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d005      	beq.n	8004fc8 <UART_SetConfig+0xa0>
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	4b8d      	ldr	r3, [pc, #564]	@ (80051f8 <UART_SetConfig+0x2d0>)
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d104      	bne.n	8004fd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fc8:	f7fe f91a 	bl	8003200 <HAL_RCC_GetPCLK2Freq>
 8004fcc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004fd0:	e003      	b.n	8004fda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fd2:	f7fe f901 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 8004fd6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fe4:	f040 810c 	bne.w	8005200 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ff2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ff6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	1891      	adds	r1, r2, r2
 8005000:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005002:	415b      	adcs	r3, r3
 8005004:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005006:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800500a:	4621      	mov	r1, r4
 800500c:	eb12 0801 	adds.w	r8, r2, r1
 8005010:	4629      	mov	r1, r5
 8005012:	eb43 0901 	adc.w	r9, r3, r1
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005022:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005026:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800502a:	4690      	mov	r8, r2
 800502c:	4699      	mov	r9, r3
 800502e:	4623      	mov	r3, r4
 8005030:	eb18 0303 	adds.w	r3, r8, r3
 8005034:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005038:	462b      	mov	r3, r5
 800503a:	eb49 0303 	adc.w	r3, r9, r3
 800503e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800504e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005052:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005056:	460b      	mov	r3, r1
 8005058:	18db      	adds	r3, r3, r3
 800505a:	653b      	str	r3, [r7, #80]	@ 0x50
 800505c:	4613      	mov	r3, r2
 800505e:	eb42 0303 	adc.w	r3, r2, r3
 8005062:	657b      	str	r3, [r7, #84]	@ 0x54
 8005064:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005068:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800506c:	f7fb fd86 	bl	8000b7c <__aeabi_uldivmod>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4b61      	ldr	r3, [pc, #388]	@ (80051fc <UART_SetConfig+0x2d4>)
 8005076:	fba3 2302 	umull	r2, r3, r3, r2
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	011c      	lsls	r4, r3, #4
 800507e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005082:	2200      	movs	r2, #0
 8005084:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005088:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800508c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005090:	4642      	mov	r2, r8
 8005092:	464b      	mov	r3, r9
 8005094:	1891      	adds	r1, r2, r2
 8005096:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005098:	415b      	adcs	r3, r3
 800509a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800509c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80050a0:	4641      	mov	r1, r8
 80050a2:	eb12 0a01 	adds.w	sl, r2, r1
 80050a6:	4649      	mov	r1, r9
 80050a8:	eb43 0b01 	adc.w	fp, r3, r1
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050c0:	4692      	mov	sl, r2
 80050c2:	469b      	mov	fp, r3
 80050c4:	4643      	mov	r3, r8
 80050c6:	eb1a 0303 	adds.w	r3, sl, r3
 80050ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050ce:	464b      	mov	r3, r9
 80050d0:	eb4b 0303 	adc.w	r3, fp, r3
 80050d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80050e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80050ec:	460b      	mov	r3, r1
 80050ee:	18db      	adds	r3, r3, r3
 80050f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80050f2:	4613      	mov	r3, r2
 80050f4:	eb42 0303 	adc.w	r3, r2, r3
 80050f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80050fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80050fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005102:	f7fb fd3b 	bl	8000b7c <__aeabi_uldivmod>
 8005106:	4602      	mov	r2, r0
 8005108:	460b      	mov	r3, r1
 800510a:	4611      	mov	r1, r2
 800510c:	4b3b      	ldr	r3, [pc, #236]	@ (80051fc <UART_SetConfig+0x2d4>)
 800510e:	fba3 2301 	umull	r2, r3, r3, r1
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	2264      	movs	r2, #100	@ 0x64
 8005116:	fb02 f303 	mul.w	r3, r2, r3
 800511a:	1acb      	subs	r3, r1, r3
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005122:	4b36      	ldr	r3, [pc, #216]	@ (80051fc <UART_SetConfig+0x2d4>)
 8005124:	fba3 2302 	umull	r2, r3, r3, r2
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005130:	441c      	add	r4, r3
 8005132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005136:	2200      	movs	r2, #0
 8005138:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800513c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005140:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005144:	4642      	mov	r2, r8
 8005146:	464b      	mov	r3, r9
 8005148:	1891      	adds	r1, r2, r2
 800514a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800514c:	415b      	adcs	r3, r3
 800514e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005150:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005154:	4641      	mov	r1, r8
 8005156:	1851      	adds	r1, r2, r1
 8005158:	6339      	str	r1, [r7, #48]	@ 0x30
 800515a:	4649      	mov	r1, r9
 800515c:	414b      	adcs	r3, r1
 800515e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800516c:	4659      	mov	r1, fp
 800516e:	00cb      	lsls	r3, r1, #3
 8005170:	4651      	mov	r1, sl
 8005172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005176:	4651      	mov	r1, sl
 8005178:	00ca      	lsls	r2, r1, #3
 800517a:	4610      	mov	r0, r2
 800517c:	4619      	mov	r1, r3
 800517e:	4603      	mov	r3, r0
 8005180:	4642      	mov	r2, r8
 8005182:	189b      	adds	r3, r3, r2
 8005184:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005188:	464b      	mov	r3, r9
 800518a:	460a      	mov	r2, r1
 800518c:	eb42 0303 	adc.w	r3, r2, r3
 8005190:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80051a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051a8:	460b      	mov	r3, r1
 80051aa:	18db      	adds	r3, r3, r3
 80051ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051ae:	4613      	mov	r3, r2
 80051b0:	eb42 0303 	adc.w	r3, r2, r3
 80051b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80051be:	f7fb fcdd 	bl	8000b7c <__aeabi_uldivmod>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4b0d      	ldr	r3, [pc, #52]	@ (80051fc <UART_SetConfig+0x2d4>)
 80051c8:	fba3 1302 	umull	r1, r3, r3, r2
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	2164      	movs	r1, #100	@ 0x64
 80051d0:	fb01 f303 	mul.w	r3, r1, r3
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	3332      	adds	r3, #50	@ 0x32
 80051da:	4a08      	ldr	r2, [pc, #32]	@ (80051fc <UART_SetConfig+0x2d4>)
 80051dc:	fba2 2303 	umull	r2, r3, r2, r3
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	f003 0207 	and.w	r2, r3, #7
 80051e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4422      	add	r2, r4
 80051ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051f0:	e106      	b.n	8005400 <UART_SetConfig+0x4d8>
 80051f2:	bf00      	nop
 80051f4:	40011000 	.word	0x40011000
 80051f8:	40011400 	.word	0x40011400
 80051fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005204:	2200      	movs	r2, #0
 8005206:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800520a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800520e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005212:	4642      	mov	r2, r8
 8005214:	464b      	mov	r3, r9
 8005216:	1891      	adds	r1, r2, r2
 8005218:	6239      	str	r1, [r7, #32]
 800521a:	415b      	adcs	r3, r3
 800521c:	627b      	str	r3, [r7, #36]	@ 0x24
 800521e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005222:	4641      	mov	r1, r8
 8005224:	1854      	adds	r4, r2, r1
 8005226:	4649      	mov	r1, r9
 8005228:	eb43 0501 	adc.w	r5, r3, r1
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	00eb      	lsls	r3, r5, #3
 8005236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800523a:	00e2      	lsls	r2, r4, #3
 800523c:	4614      	mov	r4, r2
 800523e:	461d      	mov	r5, r3
 8005240:	4643      	mov	r3, r8
 8005242:	18e3      	adds	r3, r4, r3
 8005244:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005248:	464b      	mov	r3, r9
 800524a:	eb45 0303 	adc.w	r3, r5, r3
 800524e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800525e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800526e:	4629      	mov	r1, r5
 8005270:	008b      	lsls	r3, r1, #2
 8005272:	4621      	mov	r1, r4
 8005274:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005278:	4621      	mov	r1, r4
 800527a:	008a      	lsls	r2, r1, #2
 800527c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005280:	f7fb fc7c 	bl	8000b7c <__aeabi_uldivmod>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4b60      	ldr	r3, [pc, #384]	@ (800540c <UART_SetConfig+0x4e4>)
 800528a:	fba3 2302 	umull	r2, r3, r3, r2
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	011c      	lsls	r4, r3, #4
 8005292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005296:	2200      	movs	r2, #0
 8005298:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800529c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80052a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80052a4:	4642      	mov	r2, r8
 80052a6:	464b      	mov	r3, r9
 80052a8:	1891      	adds	r1, r2, r2
 80052aa:	61b9      	str	r1, [r7, #24]
 80052ac:	415b      	adcs	r3, r3
 80052ae:	61fb      	str	r3, [r7, #28]
 80052b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052b4:	4641      	mov	r1, r8
 80052b6:	1851      	adds	r1, r2, r1
 80052b8:	6139      	str	r1, [r7, #16]
 80052ba:	4649      	mov	r1, r9
 80052bc:	414b      	adcs	r3, r1
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052cc:	4659      	mov	r1, fp
 80052ce:	00cb      	lsls	r3, r1, #3
 80052d0:	4651      	mov	r1, sl
 80052d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052d6:	4651      	mov	r1, sl
 80052d8:	00ca      	lsls	r2, r1, #3
 80052da:	4610      	mov	r0, r2
 80052dc:	4619      	mov	r1, r3
 80052de:	4603      	mov	r3, r0
 80052e0:	4642      	mov	r2, r8
 80052e2:	189b      	adds	r3, r3, r2
 80052e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052e8:	464b      	mov	r3, r9
 80052ea:	460a      	mov	r2, r1
 80052ec:	eb42 0303 	adc.w	r3, r2, r3
 80052f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800530c:	4649      	mov	r1, r9
 800530e:	008b      	lsls	r3, r1, #2
 8005310:	4641      	mov	r1, r8
 8005312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005316:	4641      	mov	r1, r8
 8005318:	008a      	lsls	r2, r1, #2
 800531a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800531e:	f7fb fc2d 	bl	8000b7c <__aeabi_uldivmod>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4611      	mov	r1, r2
 8005328:	4b38      	ldr	r3, [pc, #224]	@ (800540c <UART_SetConfig+0x4e4>)
 800532a:	fba3 2301 	umull	r2, r3, r3, r1
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	2264      	movs	r2, #100	@ 0x64
 8005332:	fb02 f303 	mul.w	r3, r2, r3
 8005336:	1acb      	subs	r3, r1, r3
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	3332      	adds	r3, #50	@ 0x32
 800533c:	4a33      	ldr	r2, [pc, #204]	@ (800540c <UART_SetConfig+0x4e4>)
 800533e:	fba2 2303 	umull	r2, r3, r2, r3
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005348:	441c      	add	r4, r3
 800534a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800534e:	2200      	movs	r2, #0
 8005350:	673b      	str	r3, [r7, #112]	@ 0x70
 8005352:	677a      	str	r2, [r7, #116]	@ 0x74
 8005354:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005358:	4642      	mov	r2, r8
 800535a:	464b      	mov	r3, r9
 800535c:	1891      	adds	r1, r2, r2
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	415b      	adcs	r3, r3
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005368:	4641      	mov	r1, r8
 800536a:	1851      	adds	r1, r2, r1
 800536c:	6039      	str	r1, [r7, #0]
 800536e:	4649      	mov	r1, r9
 8005370:	414b      	adcs	r3, r1
 8005372:	607b      	str	r3, [r7, #4]
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005380:	4659      	mov	r1, fp
 8005382:	00cb      	lsls	r3, r1, #3
 8005384:	4651      	mov	r1, sl
 8005386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800538a:	4651      	mov	r1, sl
 800538c:	00ca      	lsls	r2, r1, #3
 800538e:	4610      	mov	r0, r2
 8005390:	4619      	mov	r1, r3
 8005392:	4603      	mov	r3, r0
 8005394:	4642      	mov	r2, r8
 8005396:	189b      	adds	r3, r3, r2
 8005398:	66bb      	str	r3, [r7, #104]	@ 0x68
 800539a:	464b      	mov	r3, r9
 800539c:	460a      	mov	r2, r1
 800539e:	eb42 0303 	adc.w	r3, r2, r3
 80053a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80053ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80053bc:	4649      	mov	r1, r9
 80053be:	008b      	lsls	r3, r1, #2
 80053c0:	4641      	mov	r1, r8
 80053c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053c6:	4641      	mov	r1, r8
 80053c8:	008a      	lsls	r2, r1, #2
 80053ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80053ce:	f7fb fbd5 	bl	8000b7c <__aeabi_uldivmod>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4b0d      	ldr	r3, [pc, #52]	@ (800540c <UART_SetConfig+0x4e4>)
 80053d8:	fba3 1302 	umull	r1, r3, r3, r2
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	2164      	movs	r1, #100	@ 0x64
 80053e0:	fb01 f303 	mul.w	r3, r1, r3
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	3332      	adds	r3, #50	@ 0x32
 80053ea:	4a08      	ldr	r2, [pc, #32]	@ (800540c <UART_SetConfig+0x4e4>)
 80053ec:	fba2 2303 	umull	r2, r3, r2, r3
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	f003 020f 	and.w	r2, r3, #15
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4422      	add	r2, r4
 80053fe:	609a      	str	r2, [r3, #8]
}
 8005400:	bf00      	nop
 8005402:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005406:	46bd      	mov	sp, r7
 8005408:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800540c:	51eb851f 	.word	0x51eb851f

08005410 <CANSPI_Initialize>:
    return l_EcuStatus;
}

/* Initialize CAN */
ecu_status_t CANSPI_Initialize(Can_t *p_CAN)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08c      	sub	sp, #48	@ 0x30
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (NULL == p_CAN)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d103      	bne.n	800542c <CANSPI_Initialize+0x1c>
    {
        l_EcuStatus = ECU_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800542a:	e19b      	b.n	8005764 <CANSPI_Initialize+0x354>
        RXF5 RXF5reg;
        RXM0 RXM0reg;
        RXM1 RXM1reg;

        /* Intialize Rx Mask values */
        RXM0reg.RXM0SIDH = 0x00;
 800542c:	2300      	movs	r3, #0
 800542e:	743b      	strb	r3, [r7, #16]
        RXM0reg.RXM0SIDL = 0x00;
 8005430:	2300      	movs	r3, #0
 8005432:	747b      	strb	r3, [r7, #17]
        RXM0reg.RXM0EID8 = 0x00;
 8005434:	2300      	movs	r3, #0
 8005436:	74bb      	strb	r3, [r7, #18]
        RXM0reg.RXM0EID0 = 0x00;
 8005438:	2300      	movs	r3, #0
 800543a:	74fb      	strb	r3, [r7, #19]

        RXM1reg.RXM1SIDH = 0x00;
 800543c:	2300      	movs	r3, #0
 800543e:	733b      	strb	r3, [r7, #12]
        RXM1reg.RXM1SIDL = 0x00;
 8005440:	2300      	movs	r3, #0
 8005442:	737b      	strb	r3, [r7, #13]
        RXM1reg.RXM1EID8 = 0x00;
 8005444:	2300      	movs	r3, #0
 8005446:	73bb      	strb	r3, [r7, #14]
        RXM1reg.RXM1EID0 = 0x00;
 8005448:	2300      	movs	r3, #0
 800544a:	73fb      	strb	r3, [r7, #15]

        /* Intialize Rx Filter values */
        RXF0reg.RXF0SIDH = 0x00;
 800544c:	2300      	movs	r3, #0
 800544e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        RXF0reg.RXF0SIDL = 0x00; // Starndard Filter
 8005452:	2300      	movs	r3, #0
 8005454:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
        RXF0reg.RXF0EID8 = 0x00;
 8005458:	2300      	movs	r3, #0
 800545a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        RXF0reg.RXF0EID0 = 0x00;
 800545e:	2300      	movs	r3, #0
 8005460:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        RXF1reg.RXF1SIDH = 0x00;
 8005464:	2300      	movs	r3, #0
 8005466:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        RXF1reg.RXF1SIDL = 0x08; // Exntended Filter
 800546a:	2308      	movs	r3, #8
 800546c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        RXF1reg.RXF1EID8 = 0x00;
 8005470:	2300      	movs	r3, #0
 8005472:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        RXF1reg.RXF1EID0 = 0x00;
 8005476:	2300      	movs	r3, #0
 8005478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        RXF2reg.RXF2SIDH = 0x00;
 800547c:	2300      	movs	r3, #0
 800547e:	f887 3020 	strb.w	r3, [r7, #32]
        RXF2reg.RXF2SIDL = 0x00;
 8005482:	2300      	movs	r3, #0
 8005484:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        RXF2reg.RXF2EID8 = 0x00;
 8005488:	2300      	movs	r3, #0
 800548a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        RXF2reg.RXF2EID0 = 0x00;
 800548e:	2300      	movs	r3, #0
 8005490:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        RXF3reg.RXF3SIDH = 0x00;
 8005494:	2300      	movs	r3, #0
 8005496:	773b      	strb	r3, [r7, #28]
        RXF3reg.RXF3SIDL = 0x00;
 8005498:	2300      	movs	r3, #0
 800549a:	777b      	strb	r3, [r7, #29]
        RXF3reg.RXF3EID8 = 0x00;
 800549c:	2300      	movs	r3, #0
 800549e:	77bb      	strb	r3, [r7, #30]
        RXF3reg.RXF3EID0 = 0x00;
 80054a0:	2300      	movs	r3, #0
 80054a2:	77fb      	strb	r3, [r7, #31]

        RXF4reg.RXF4SIDH = 0x00;
 80054a4:	2300      	movs	r3, #0
 80054a6:	763b      	strb	r3, [r7, #24]
        RXF4reg.RXF4SIDL = 0x00;
 80054a8:	2300      	movs	r3, #0
 80054aa:	767b      	strb	r3, [r7, #25]
        RXF4reg.RXF4EID8 = 0x00;
 80054ac:	2300      	movs	r3, #0
 80054ae:	76bb      	strb	r3, [r7, #26]
        RXF4reg.RXF4EID0 = 0x00;
 80054b0:	2300      	movs	r3, #0
 80054b2:	76fb      	strb	r3, [r7, #27]

        RXF5reg.RXF5SIDH = 0x00;
 80054b4:	2300      	movs	r3, #0
 80054b6:	753b      	strb	r3, [r7, #20]
        RXF5reg.RXF5SIDL = 0x08;
 80054b8:	2308      	movs	r3, #8
 80054ba:	757b      	strb	r3, [r7, #21]
        RXF5reg.RXF5EID8 = 0x00;
 80054bc:	2300      	movs	r3, #0
 80054be:	75bb      	strb	r3, [r7, #22]
        RXF5reg.RXF5EID0 = 0x00;
 80054c0:	2300      	movs	r3, #0
 80054c2:	75fb      	strb	r3, [r7, #23]

        /* Intialize MCP2515, check SPI */
        l_EcuStatus |= MCP2515_Initialize(p_CAN->UsedSPI);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 fbdd 	bl	8005c88 <MCP2515_Initialize>
 80054ce:	4603      	mov	r3, r0
 80054d0:	461a      	mov	r2, r3
 80054d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        
        if (l_EcuStatus == ECU_OK)
 80054dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f040 813f 	bne.w	8005764 <CANSPI_Initialize+0x354>
        {
            l_EcuStatus |= MCP2515_Reset(p_CAN->UsedSPI);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fc6e 	bl	8005dcc <MCP2515_Reset>
 80054f0:	4603      	mov	r3, r0
 80054f2:	461a      	mov	r2, r3
 80054f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            /* Change mode as configuration mode */
            l_EcuStatus |= MCP2515_SetConfigMode(p_CAN->UsedSPI);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fbec 	bl	8005ce0 <MCP2515_SetConfigMode>
 8005508:	4603      	mov	r3, r0
 800550a:	461a      	mov	r2, r3
 800550c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005510:	4313      	orrs	r3, r2
 8005512:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (l_EcuStatus == ECU_OK)
 8005516:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800551a:	2b00      	cmp	r3, #0
 800551c:	f040 8122 	bne.w	8005764 <CANSPI_Initialize+0x354>
            {
                /* enable interrupt on receiving */
                l_EcuStatus |= MCP2515_WriteByte(p_CAN->UsedSPI, MCP2515_CANINTE, CAN_RX_INTERRUPT);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2203      	movs	r2, #3
 8005526:	212b      	movs	r1, #43	@ 0x2b
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fcf5 	bl	8005f18 <MCP2515_WriteByte>
 800552e:	4603      	mov	r3, r0
 8005530:	461a      	mov	r2, r3
 8005532:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005536:	4313      	orrs	r3, r2
 8005538:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

                /* Configure filter & mask */
                l_EcuStatus |= MCP2515_WriteByteSequence(p_CAN->UsedSPI, MCP2515_RXM0SIDH, MCP2515_RXM0EID0, 
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	f107 0310 	add.w	r3, r7, #16
 8005544:	2223      	movs	r2, #35	@ 0x23
 8005546:	2120      	movs	r1, #32
 8005548:	f000 fd26 	bl	8005f98 <MCP2515_WriteByteSequence>
 800554c:	4603      	mov	r3, r0
 800554e:	461a      	mov	r2, r3
 8005550:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005554:	4313      	orrs	r3, r2
 8005556:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                                                           &(RXM0reg.RXM0SIDH));
                l_EcuStatus |= MCP2515_WriteByteSequence(p_CAN->UsedSPI, MCP2515_RXM1SIDH, MCP2515_RXM1EID0, 
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	f107 030c 	add.w	r3, r7, #12
 8005562:	2227      	movs	r2, #39	@ 0x27
 8005564:	2124      	movs	r1, #36	@ 0x24
 8005566:	f000 fd17 	bl	8005f98 <MCP2515_WriteByteSequence>
 800556a:	4603      	mov	r3, r0
 800556c:	461a      	mov	r2, r3
 800556e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005572:	4313      	orrs	r3, r2
 8005574:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                                                           &(RXM1reg.RXM1SIDH));
                l_EcuStatus |= MCP2515_WriteByteSequence(p_CAN->UsedSPI, MCP2515_RXF0SIDH, MCP2515_RXF0EID0, 
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6818      	ldr	r0, [r3, #0]
 800557c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005580:	2203      	movs	r2, #3
 8005582:	2100      	movs	r1, #0
 8005584:	f000 fd08 	bl	8005f98 <MCP2515_WriteByteSequence>
 8005588:	4603      	mov	r3, r0
 800558a:	461a      	mov	r2, r3
 800558c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005590:	4313      	orrs	r3, r2
 8005592:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                                                           &(RXF0reg.RXF0SIDH));
                l_EcuStatus |= MCP2515_WriteByteSequence(p_CAN->UsedSPI, MCP2515_RXF1SIDH, MCP2515_RXF1EID0, 
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800559e:	2207      	movs	r2, #7
 80055a0:	2104      	movs	r1, #4
 80055a2:	f000 fcf9 	bl	8005f98 <MCP2515_WriteByteSequence>
 80055a6:	4603      	mov	r3, r0
 80055a8:	461a      	mov	r2, r3
 80055aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                                                           &(RXF1reg.RXF1SIDH));
                l_EcuStatus |= MCP2515_WriteByteSequence(p_CAN->UsedSPI, MCP2515_RXF2SIDH, MCP2515_RXF2EID0, 
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	f107 0320 	add.w	r3, r7, #32
 80055bc:	220b      	movs	r2, #11
 80055be:	2108      	movs	r1, #8
 80055c0:	f000 fcea 	bl	8005f98 <MCP2515_WriteByteSequence>
 80055c4:	4603      	mov	r3, r0
 80055c6:	461a      	mov	r2, r3
 80055c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                                                           &(RXF2reg.RXF2SIDH));
                l_EcuStatus |= MCP2515_WriteByteSequence(p_CAN->UsedSPI, MCP2515_RXF3SIDH, MCP2515_RXF3EID0, 
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	f107 031c 	add.w	r3, r7, #28
 80055da:	2213      	movs	r2, #19
 80055dc:	2110      	movs	r1, #16
 80055de:	f000 fcdb 	bl	8005f98 <MCP2515_WriteByteSequence>
 80055e2:	4603      	mov	r3, r0
 80055e4:	461a      	mov	r2, r3
 80055e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                                                           &(RXF3reg.RXF3SIDH));
                l_EcuStatus |= MCP2515_WriteByteSequence(p_CAN->UsedSPI, MCP2515_RXF4SIDH, MCP2515_RXF4EID0, 
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6818      	ldr	r0, [r3, #0]
 80055f4:	f107 0318 	add.w	r3, r7, #24
 80055f8:	2217      	movs	r2, #23
 80055fa:	2114      	movs	r1, #20
 80055fc:	f000 fccc 	bl	8005f98 <MCP2515_WriteByteSequence>
 8005600:	4603      	mov	r3, r0
 8005602:	461a      	mov	r2, r3
 8005604:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005608:	4313      	orrs	r3, r2
 800560a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                                                           &(RXF4reg.RXF4SIDH));
                l_EcuStatus |= MCP2515_WriteByteSequence(p_CAN->UsedSPI, MCP2515_RXF5SIDH, MCP2515_RXF5EID0, 
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	f107 0314 	add.w	r3, r7, #20
 8005616:	221b      	movs	r2, #27
 8005618:	2118      	movs	r1, #24
 800561a:	f000 fcbd 	bl	8005f98 <MCP2515_WriteByteSequence>
 800561e:	4603      	mov	r3, r0
 8005620:	461a      	mov	r2, r3
 8005622:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005626:	4313      	orrs	r3, r2
 8005628:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                                                           &(RXF5reg.RXF5SIDH));

                /* Accept All (Standard + Extended) */
                // Enable BUKT, Accept Filter 0
                l_EcuStatus |= MCP2515_WriteByte(p_CAN->UsedSPI, MCP2515_RXB0CTRL, 0x04); 
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2204      	movs	r2, #4
 8005632:	2160      	movs	r1, #96	@ 0x60
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fc6f 	bl	8005f18 <MCP2515_WriteByte>
 800563a:	4603      	mov	r3, r0
 800563c:	461a      	mov	r2, r3
 800563e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005642:	4313      	orrs	r3, r2
 8005644:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                // Accept Filter 1
                l_EcuStatus |= MCP2515_WriteByte(p_CAN->UsedSPI, MCP2515_RXB1CTRL, 0x01); 
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2201      	movs	r2, #1
 800564e:	2170      	movs	r1, #112	@ 0x70
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fc61 	bl	8005f18 <MCP2515_WriteByte>
 8005656:	4603      	mov	r3, r0
 8005658:	461a      	mov	r2, r3
 800565a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800565e:	4313      	orrs	r3, r2
 8005660:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                
                
                uint8_t l_CNF_val[3] = {0, 0, 0};
 8005664:	4a42      	ldr	r2, [pc, #264]	@ (8005770 <CANSPI_Initialize+0x360>)
 8005666:	f107 0308 	add.w	r3, r7, #8
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	4611      	mov	r1, r2
 800566e:	8019      	strh	r1, [r3, #0]
 8005670:	3302      	adds	r3, #2
 8005672:	0c12      	lsrs	r2, r2, #16
 8005674:	701a      	strb	r2, [r3, #0]

                switch (p_CAN->Speed)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	791b      	ldrb	r3, [r3, #4]
 800567a:	2b05      	cmp	r3, #5
 800567c:	d838      	bhi.n	80056f0 <CANSPI_Initialize+0x2e0>
 800567e:	a201      	add	r2, pc, #4	@ (adr r2, 8005684 <CANSPI_Initialize+0x274>)
 8005680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005684:	0800569d 	.word	0x0800569d
 8005688:	080056ab 	.word	0x080056ab
 800568c:	080056b9 	.word	0x080056b9
 8005690:	080056c7 	.word	0x080056c7
 8005694:	080056d5 	.word	0x080056d5
 8005698:	080056e3 	.word	0x080056e3
                {
                case MCP_8MHz_1000kBPS:
                    l_CNF_val[0] = 0x00;
 800569c:	2300      	movs	r3, #0
 800569e:	723b      	strb	r3, [r7, #8]
                    l_CNF_val[1] = 0xC0;
 80056a0:	23c0      	movs	r3, #192	@ 0xc0
 80056a2:	727b      	strb	r3, [r7, #9]
                    l_CNF_val[2] = 0x80;
 80056a4:	2380      	movs	r3, #128	@ 0x80
 80056a6:	72bb      	strb	r3, [r7, #10]
                    break;
 80056a8:	e026      	b.n	80056f8 <CANSPI_Initialize+0x2e8>

                case MCP_8MHz_500kBPS:
                    l_CNF_val[0] = 0x00;
 80056aa:	2300      	movs	r3, #0
 80056ac:	723b      	strb	r3, [r7, #8]
                    l_CNF_val[1] = 0xD1;
 80056ae:	23d1      	movs	r3, #209	@ 0xd1
 80056b0:	727b      	strb	r3, [r7, #9]
                    l_CNF_val[2] = 0x81;
 80056b2:	2381      	movs	r3, #129	@ 0x81
 80056b4:	72bb      	strb	r3, [r7, #10]
                    break;
 80056b6:	e01f      	b.n	80056f8 <CANSPI_Initialize+0x2e8>

                case MCP_8MHz_250kBPS:
                    l_CNF_val[0] = 0x80;
 80056b8:	2380      	movs	r3, #128	@ 0x80
 80056ba:	723b      	strb	r3, [r7, #8]
                    l_CNF_val[1] = 0xE5;
 80056bc:	23e5      	movs	r3, #229	@ 0xe5
 80056be:	727b      	strb	r3, [r7, #9]
                    l_CNF_val[2] = 0x83;
 80056c0:	2383      	movs	r3, #131	@ 0x83
 80056c2:	72bb      	strb	r3, [r7, #10]
                    break;
 80056c4:	e018      	b.n	80056f8 <CANSPI_Initialize+0x2e8>

                case MCP_8MHz_200kBPS:
                    l_CNF_val[0] = 0x80;
 80056c6:	2380      	movs	r3, #128	@ 0x80
 80056c8:	723b      	strb	r3, [r7, #8]
                    l_CNF_val[1] = 0xF6;
 80056ca:	23f6      	movs	r3, #246	@ 0xf6
 80056cc:	727b      	strb	r3, [r7, #9]
                    l_CNF_val[2] = 0x84;
 80056ce:	2384      	movs	r3, #132	@ 0x84
 80056d0:	72bb      	strb	r3, [r7, #10]
                    break;
 80056d2:	e011      	b.n	80056f8 <CANSPI_Initialize+0x2e8>

                case MCP_8MHz_125kBPS:
                    l_CNF_val[0] = 0x81;
 80056d4:	2381      	movs	r3, #129	@ 0x81
 80056d6:	723b      	strb	r3, [r7, #8]
                    l_CNF_val[1] = 0xE5;
 80056d8:	23e5      	movs	r3, #229	@ 0xe5
 80056da:	727b      	strb	r3, [r7, #9]
                    l_CNF_val[2] = 0x83;
 80056dc:	2383      	movs	r3, #131	@ 0x83
 80056de:	72bb      	strb	r3, [r7, #10]
                    break;
 80056e0:	e00a      	b.n	80056f8 <CANSPI_Initialize+0x2e8>

                case MCP_8MHz_100kBPS:
                    l_CNF_val[0] = 0x81;
 80056e2:	2381      	movs	r3, #129	@ 0x81
 80056e4:	723b      	strb	r3, [r7, #8]
                    l_CNF_val[1] = 0xF6;
 80056e6:	23f6      	movs	r3, #246	@ 0xf6
 80056e8:	727b      	strb	r3, [r7, #9]
                    l_CNF_val[2] = 0x84;
 80056ea:	2384      	movs	r3, #132	@ 0x84
 80056ec:	72bb      	strb	r3, [r7, #10]
                    break;
 80056ee:	e003      	b.n	80056f8 <CANSPI_Initialize+0x2e8>
                
                default:
                    l_EcuStatus = ECU_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                    break;
 80056f6:	bf00      	nop
                }

                l_EcuStatus |= MCP2515_WriteByte(p_CAN->UsedSPI, MCP2515_CNF1, l_CNF_val[0]);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	7a3a      	ldrb	r2, [r7, #8]
 80056fe:	212a      	movs	r1, #42	@ 0x2a
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fc09 	bl	8005f18 <MCP2515_WriteByte>
 8005706:	4603      	mov	r3, r0
 8005708:	461a      	mov	r2, r3
 800570a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800570e:	4313      	orrs	r3, r2
 8005710:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                l_EcuStatus |= MCP2515_WriteByte(p_CAN->UsedSPI, MCP2515_CNF2, l_CNF_val[1]);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	7a7a      	ldrb	r2, [r7, #9]
 800571a:	2129      	movs	r1, #41	@ 0x29
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fbfb 	bl	8005f18 <MCP2515_WriteByte>
 8005722:	4603      	mov	r3, r0
 8005724:	461a      	mov	r2, r3
 8005726:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800572a:	4313      	orrs	r3, r2
 800572c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                l_EcuStatus |= MCP2515_WriteByte(p_CAN->UsedSPI, MCP2515_CNF3, l_CNF_val[2]);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	7aba      	ldrb	r2, [r7, #10]
 8005736:	2128      	movs	r1, #40	@ 0x28
 8005738:	4618      	mov	r0, r3
 800573a:	f000 fbed 	bl	8005f18 <MCP2515_WriteByte>
 800573e:	4603      	mov	r3, r0
 8005740:	461a      	mov	r2, r3
 8005742:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005746:	4313      	orrs	r3, r2
 8005748:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

                l_EcuStatus |= MCP2515_SetNormalMode(p_CAN->UsedSPI);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fb00 	bl	8005d56 <MCP2515_SetNormalMode>
 8005756:	4603      	mov	r3, r0
 8005758:	461a      	mov	r2, r3
 800575a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800575e:	4313      	orrs	r3, r2
 8005760:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }
        }
    }
    return l_EcuStatus;
 8005764:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005768:	4618      	mov	r0, r3
 800576a:	3730      	adds	r7, #48	@ 0x30
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	0800cc00 	.word	0x0800cc00

08005774 <CANSPI_Transmit>:

/* Transmit CAN message */
ecu_status_t CANSPI_Transmit(Can_t *p_CAN, uCAN_MSG *tempCanMsg)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af02      	add	r7, sp, #8
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
    ecu_status_t l_EcuStatus = ECU_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	73fb      	strb	r3, [r7, #15]
    if ((NULL == p_CAN) || (NULL == tempCanMsg))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <CANSPI_Transmit+0x1a>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d102      	bne.n	8005794 <CANSPI_Transmit+0x20>
    {
        l_EcuStatus = ECU_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	73fb      	strb	r3, [r7, #15]
 8005792:	e0ab      	b.n	80058ec <CANSPI_Transmit+0x178>
    }
    else
    {
        idReg.tempSIDH = 0;
 8005794:	4b58      	ldr	r3, [pc, #352]	@ (80058f8 <CANSPI_Transmit+0x184>)
 8005796:	2200      	movs	r2, #0
 8005798:	701a      	strb	r2, [r3, #0]
        idReg.tempSIDL = 0;
 800579a:	4b57      	ldr	r3, [pc, #348]	@ (80058f8 <CANSPI_Transmit+0x184>)
 800579c:	2200      	movs	r2, #0
 800579e:	705a      	strb	r2, [r3, #1]
        idReg.tempEID8 = 0;
 80057a0:	4b55      	ldr	r3, [pc, #340]	@ (80058f8 <CANSPI_Transmit+0x184>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	709a      	strb	r2, [r3, #2]
        idReg.tempEID0 = 0;
 80057a6:	4b54      	ldr	r3, [pc, #336]	@ (80058f8 <CANSPI_Transmit+0x184>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	70da      	strb	r2, [r3, #3]

        l_EcuStatus |= MCP2515_ReadStatus(p_CAN->UsedSPI, &ctrlStatus.ctrl_status);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4952      	ldr	r1, [pc, #328]	@ (80058fc <CANSPI_Transmit+0x188>)
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fcb2 	bl	800611c <MCP2515_ReadStatus>
 80057b8:	4603      	mov	r3, r0
 80057ba:	461a      	mov	r2, r3
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	4313      	orrs	r3, r2
 80057c0:	73fb      	strb	r3, [r7, #15]

        /* Finding empty buffer */
        if (ctrlStatus.TXB0REQ != 1)
 80057c2:	4b4e      	ldr	r3, [pc, #312]	@ (80058fc <CANSPI_Transmit+0x188>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d129      	bne.n	8005824 <CANSPI_Transmit+0xb0>
        {
            /* convert CAN ID for register */
            l_EcuStatus |= convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	6858      	ldr	r0, [r3, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	4a47      	ldr	r2, [pc, #284]	@ (80058f8 <CANSPI_Transmit+0x184>)
 80057da:	4619      	mov	r1, r3
 80057dc:	f000 f9fb 	bl	8005bd6 <convertCANid2Reg>
 80057e0:	4603      	mov	r3, r0
 80057e2:	461a      	mov	r2, r3
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	73fb      	strb	r3, [r7, #15]

            /* Load data to Tx Buffer */
            l_EcuStatus |= MCP2515_LoadTxSequence(p_CAN->UsedSPI, MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), 
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	7a1a      	ldrb	r2, [r3, #8]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	3309      	adds	r3, #9
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	4613      	mov	r3, r2
 80057fa:	4a3f      	ldr	r2, [pc, #252]	@ (80058f8 <CANSPI_Transmit+0x184>)
 80057fc:	2140      	movs	r1, #64	@ 0x40
 80057fe:	f000 fc13 	bl	8006028 <MCP2515_LoadTxSequence>
 8005802:	4603      	mov	r3, r0
 8005804:	461a      	mov	r2, r3
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	4313      	orrs	r3, r2
 800580a:	73fb      	strb	r3, [r7, #15]
                                                  tempCanMsg->frame.dlc, &(tempCanMsg->frame.data[0]));

            /* Request to transmit */
            l_EcuStatus |= MCP2515_RequestToSend(p_CAN->UsedSPI, MCP2515_RTS_TX0);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2181      	movs	r1, #129	@ 0x81
 8005812:	4618      	mov	r0, r3
 8005814:	f000 fc56 	bl	80060c4 <MCP2515_RequestToSend>
 8005818:	4603      	mov	r3, r0
 800581a:	461a      	mov	r2, r3
 800581c:	7bfb      	ldrb	r3, [r7, #15]
 800581e:	4313      	orrs	r3, r2
 8005820:	73fb      	strb	r3, [r7, #15]
 8005822:	e063      	b.n	80058ec <CANSPI_Transmit+0x178>
        }
        else if (ctrlStatus.TXB1REQ != 1)
 8005824:	4b35      	ldr	r3, [pc, #212]	@ (80058fc <CANSPI_Transmit+0x188>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d129      	bne.n	8005886 <CANSPI_Transmit+0x112>
        {
            l_EcuStatus |= convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	6858      	ldr	r0, [r3, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	4a2f      	ldr	r2, [pc, #188]	@ (80058f8 <CANSPI_Transmit+0x184>)
 800583c:	4619      	mov	r1, r3
 800583e:	f000 f9ca 	bl	8005bd6 <convertCANid2Reg>
 8005842:	4603      	mov	r3, r0
 8005844:	461a      	mov	r2, r3
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	4313      	orrs	r3, r2
 800584a:	73fb      	strb	r3, [r7, #15]

            l_EcuStatus |= MCP2515_LoadTxSequence(p_CAN->UsedSPI, MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), 
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6818      	ldr	r0, [r3, #0]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	7a1a      	ldrb	r2, [r3, #8]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	3309      	adds	r3, #9
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	4613      	mov	r3, r2
 800585c:	4a26      	ldr	r2, [pc, #152]	@ (80058f8 <CANSPI_Transmit+0x184>)
 800585e:	2142      	movs	r1, #66	@ 0x42
 8005860:	f000 fbe2 	bl	8006028 <MCP2515_LoadTxSequence>
 8005864:	4603      	mov	r3, r0
 8005866:	461a      	mov	r2, r3
 8005868:	7bfb      	ldrb	r3, [r7, #15]
 800586a:	4313      	orrs	r3, r2
 800586c:	73fb      	strb	r3, [r7, #15]
                                                  tempCanMsg->frame.dlc, &(tempCanMsg->frame.data[0]));
            l_EcuStatus |= MCP2515_RequestToSend(p_CAN->UsedSPI, MCP2515_RTS_TX1);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2182      	movs	r1, #130	@ 0x82
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fc25 	bl	80060c4 <MCP2515_RequestToSend>
 800587a:	4603      	mov	r3, r0
 800587c:	461a      	mov	r2, r3
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	4313      	orrs	r3, r2
 8005882:	73fb      	strb	r3, [r7, #15]
 8005884:	e032      	b.n	80058ec <CANSPI_Transmit+0x178>
        }
        else if (ctrlStatus.TXB2REQ != 1)
 8005886:	4b1d      	ldr	r3, [pc, #116]	@ (80058fc <CANSPI_Transmit+0x188>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d129      	bne.n	80058e8 <CANSPI_Transmit+0x174>
        {
            l_EcuStatus |= convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	6858      	ldr	r0, [r3, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	4a16      	ldr	r2, [pc, #88]	@ (80058f8 <CANSPI_Transmit+0x184>)
 800589e:	4619      	mov	r1, r3
 80058a0:	f000 f999 	bl	8005bd6 <convertCANid2Reg>
 80058a4:	4603      	mov	r3, r0
 80058a6:	461a      	mov	r2, r3
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	73fb      	strb	r3, [r7, #15]

            l_EcuStatus |= MCP2515_LoadTxSequence(p_CAN->UsedSPI, MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), 
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	7a1a      	ldrb	r2, [r3, #8]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	3309      	adds	r3, #9
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	4613      	mov	r3, r2
 80058be:	4a0e      	ldr	r2, [pc, #56]	@ (80058f8 <CANSPI_Transmit+0x184>)
 80058c0:	2144      	movs	r1, #68	@ 0x44
 80058c2:	f000 fbb1 	bl	8006028 <MCP2515_LoadTxSequence>
 80058c6:	4603      	mov	r3, r0
 80058c8:	461a      	mov	r2, r3
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	73fb      	strb	r3, [r7, #15]
                                                  tempCanMsg->frame.dlc, &(tempCanMsg->frame.data[0]));
            l_EcuStatus |= MCP2515_RequestToSend(p_CAN->UsedSPI, MCP2515_RTS_TX2);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2184      	movs	r1, #132	@ 0x84
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fbf4 	bl	80060c4 <MCP2515_RequestToSend>
 80058dc:	4603      	mov	r3, r0
 80058de:	461a      	mov	r2, r3
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	73fb      	strb	r3, [r7, #15]
 80058e6:	e001      	b.n	80058ec <CANSPI_Transmit+0x178>
        }
        else
        {
            l_EcuStatus = ECU_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_EcuStatus;
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	200005d0 	.word	0x200005d0
 80058fc:	200005c8 	.word	0x200005c8

08005900 <CANSPI_Receive>:

/* Receive CAN message */
ecu_status_t CANSPI_Receive(Can_t *p_CAN, uCAN_MSG *tempCanMsg)
{
 8005900:	b590      	push	{r4, r7, lr}
 8005902:	b08b      	sub	sp, #44	@ 0x2c
 8005904:	af02      	add	r7, sp, #8
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
    ecu_status_t l_EcuStatus = ECU_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	77fb      	strb	r3, [r7, #31]
    if ((NULL == p_CAN) || (NULL == tempCanMsg))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <CANSPI_Receive+0x1a>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d102      	bne.n	8005920 <CANSPI_Receive+0x20>
    {
        l_EcuStatus = ECU_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	77fb      	strb	r3, [r7, #31]
 800591e:	e0a8      	b.n	8005a72 <CANSPI_Receive+0x172>
    else
    {
        rx_reg_t rxReg;
        ctrl_rx_status_t rxStatus;

        l_EcuStatus |= MCP2515_GetRxStatus(p_CAN->UsedSPI, &rxStatus.ctrl_rx_status);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f107 020c 	add.w	r2, r7, #12
 8005928:	4611      	mov	r1, r2
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fc2e 	bl	800618c <MCP2515_GetRxStatus>
 8005930:	4603      	mov	r3, r0
 8005932:	461a      	mov	r2, r3
 8005934:	7ffb      	ldrb	r3, [r7, #31]
 8005936:	4313      	orrs	r3, r2
 8005938:	77fb      	strb	r3, [r7, #31]

        /* Check receive buffer */
        if (rxStatus.rxBuffer != 0)
 800593a:	7b3b      	ldrb	r3, [r7, #12]
 800593c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 8093 	beq.w	8005a6e <CANSPI_Receive+0x16e>
        {
            /* finding buffer which has a message */
            if ((rxStatus.rxBuffer == MSG_IN_RXB0) | (rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8005948:	7b3b      	ldrb	r3, [r7, #12]
 800594a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b40      	cmp	r3, #64	@ 0x40
 8005952:	bf0c      	ite	eq
 8005954:	2301      	moveq	r3, #1
 8005956:	2300      	movne	r3, #0
 8005958:	b2da      	uxtb	r2, r3
 800595a:	7b3b      	ldrb	r3, [r7, #12]
 800595c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2bc0      	cmp	r3, #192	@ 0xc0
 8005964:	bf0c      	ite	eq
 8005966:	2301      	moveq	r3, #1
 8005968:	2300      	movne	r3, #0
 800596a:	b2db      	uxtb	r3, r3
 800596c:	4313      	orrs	r3, r2
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d019      	beq.n	80059a8 <CANSPI_Receive+0xa8>
            {
                l_EcuStatus |= MCP2515_ReadRxSequence(p_CAN->UsedSPI, MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, 
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	f107 0210 	add.w	r2, r7, #16
 800597c:	230d      	movs	r3, #13
 800597e:	2190      	movs	r1, #144	@ 0x90
 8005980:	f000 fa90 	bl	8005ea4 <MCP2515_ReadRxSequence>
 8005984:	4603      	mov	r3, r0
 8005986:	461a      	mov	r2, r3
 8005988:	7ffb      	ldrb	r3, [r7, #31]
 800598a:	4313      	orrs	r3, r2
 800598c:	77fb      	strb	r3, [r7, #31]
                                                      sizeof(rxReg.rx_reg_array));
                #if CAN_RX_INTERRUPT == CAN_RX_INTERRUP_ENABLE
                l_EcuStatus |= MCP2515_BitModify(p_CAN->UsedSPI, MCP2515_CANINTF, 0xFF, 0x00);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6818      	ldr	r0, [r3, #0]
 8005992:	2300      	movs	r3, #0
 8005994:	22ff      	movs	r2, #255	@ 0xff
 8005996:	212c      	movs	r1, #44	@ 0x2c
 8005998:	f000 fc30 	bl	80061fc <MCP2515_BitModify>
 800599c:	4603      	mov	r3, r0
 800599e:	461a      	mov	r2, r3
 80059a0:	7ffb      	ldrb	r3, [r7, #31]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	77fb      	strb	r3, [r7, #31]
 80059a6:	e01e      	b.n	80059e6 <CANSPI_Receive+0xe6>
                #endif
            }
            else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80059a8:	7b3b      	ldrb	r3, [r7, #12]
 80059aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b80      	cmp	r3, #128	@ 0x80
 80059b2:	d118      	bne.n	80059e6 <CANSPI_Receive+0xe6>
            {
                l_EcuStatus |= MCP2515_ReadRxSequence(p_CAN->UsedSPI, MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, 
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	f107 0210 	add.w	r2, r7, #16
 80059bc:	230d      	movs	r3, #13
 80059be:	2194      	movs	r1, #148	@ 0x94
 80059c0:	f000 fa70 	bl	8005ea4 <MCP2515_ReadRxSequence>
 80059c4:	4603      	mov	r3, r0
 80059c6:	461a      	mov	r2, r3
 80059c8:	7ffb      	ldrb	r3, [r7, #31]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	77fb      	strb	r3, [r7, #31]
                                                      sizeof(rxReg.rx_reg_array));
                #if CAN_RX_INTERRUPT == CAN_RX_INTERRUP_ENABLE
                l_EcuStatus |= MCP2515_BitModify(p_CAN->UsedSPI, MCP2515_CANINTF, 0xFF, 0x00);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	2300      	movs	r3, #0
 80059d4:	22ff      	movs	r2, #255	@ 0xff
 80059d6:	212c      	movs	r1, #44	@ 0x2c
 80059d8:	f000 fc10 	bl	80061fc <MCP2515_BitModify>
 80059dc:	4603      	mov	r3, r0
 80059de:	461a      	mov	r2, r3
 80059e0:	7ffb      	ldrb	r3, [r7, #31]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	77fb      	strb	r3, [r7, #31]
                #endif
            }

            /* if the message is extended CAN type */
            if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80059e6:	7b3b      	ldrb	r3, [r7, #12]
 80059e8:	f003 0318 	and.w	r3, r3, #24
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b10      	cmp	r3, #16
 80059f0:	d112      	bne.n	8005a18 <CANSPI_Receive+0x118>
            {
                tempCanMsg->frame.idType = (uint8_t)dEXTENDED_CAN_MSG_ID_2_0B;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2202      	movs	r2, #2
 80059f6:	701a      	strb	r2, [r3, #0]
                l_EcuStatus |= convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, 
 80059f8:	7cb8      	ldrb	r0, [r7, #18]
 80059fa:	7cf9      	ldrb	r1, [r7, #19]
 80059fc:	7c3a      	ldrb	r2, [r7, #16]
 80059fe:	7c7c      	ldrb	r4, [r7, #17]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	3304      	adds	r3, #4
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	4623      	mov	r3, r4
 8005a08:	f000 f888 	bl	8005b1c <convertReg2ExtendedCANid>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	461a      	mov	r2, r3
 8005a10:	7ffb      	ldrb	r3, [r7, #31]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	77fb      	strb	r3, [r7, #31]
 8005a16:	e00e      	b.n	8005a36 <CANSPI_Receive+0x136>
                                                        rxReg.RXBnSIDL, &tempCanMsg->frame.id);
            }
            else
            {
                /* Standard type */
                tempCanMsg->frame.idType = (uint8_t)dSTANDARD_CAN_MSG_ID_2_0B;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	701a      	strb	r2, [r3, #0]
                l_EcuStatus |= convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL, &tempCanMsg->frame.id);
 8005a1e:	7c38      	ldrb	r0, [r7, #16]
 8005a20:	7c79      	ldrb	r1, [r7, #17]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	3304      	adds	r3, #4
 8005a26:	461a      	mov	r2, r3
 8005a28:	f000 f8b7 	bl	8005b9a <convertReg2StandardCANid>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	461a      	mov	r2, r3
 8005a30:	7ffb      	ldrb	r3, [r7, #31]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	77fb      	strb	r3, [r7, #31]
            }

            tempCanMsg->frame.dlc = rxReg.RXBnDLC;
 8005a36:	7d3a      	ldrb	r2, [r7, #20]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	721a      	strb	r2, [r3, #8]
            tempCanMsg->frame.data[0] = rxReg.RXBnD0;
 8005a3c:	7d7a      	ldrb	r2, [r7, #21]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	725a      	strb	r2, [r3, #9]
            tempCanMsg->frame.data[1] = rxReg.RXBnD1;
 8005a42:	7dba      	ldrb	r2, [r7, #22]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	729a      	strb	r2, [r3, #10]
            tempCanMsg->frame.data[2] = rxReg.RXBnD2;
 8005a48:	7dfa      	ldrb	r2, [r7, #23]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	72da      	strb	r2, [r3, #11]
            tempCanMsg->frame.data[3] = rxReg.RXBnD3;
 8005a4e:	7e3a      	ldrb	r2, [r7, #24]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	731a      	strb	r2, [r3, #12]
            tempCanMsg->frame.data[4] = rxReg.RXBnD4;
 8005a54:	7e7a      	ldrb	r2, [r7, #25]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	735a      	strb	r2, [r3, #13]
            tempCanMsg->frame.data[5] = rxReg.RXBnD5;
 8005a5a:	7eba      	ldrb	r2, [r7, #26]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	739a      	strb	r2, [r3, #14]
            tempCanMsg->frame.data[6] = rxReg.RXBnD6;
 8005a60:	7efa      	ldrb	r2, [r7, #27]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	73da      	strb	r2, [r3, #15]
            tempCanMsg->frame.data[7] = rxReg.RXBnD7;
 8005a66:	7f3a      	ldrb	r2, [r7, #28]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	741a      	strb	r2, [r3, #16]
 8005a6c:	e001      	b.n	8005a72 <CANSPI_Receive+0x172>
        }
        else
        {
            l_EcuStatus = ECU_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	77fb      	strb	r3, [r7, #31]
        }
    }
    return l_EcuStatus;
 8005a72:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3724      	adds	r7, #36	@ 0x24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd90      	pop	{r4, r7, pc}

08005a7c <CANSPI_isBussOff>:
    return l_EcuStatus;
}

/* check BUS off */
ecu_status_t CANSPI_isBussOff(Can_t *p_CAN)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_CAN)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d102      	bne.n	8005a94 <CANSPI_isBussOff+0x18>
    {
        l_EcuStatus = ECU_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	73fb      	strb	r3, [r7, #15]
 8005a92:	e014      	b.n	8005abe <CANSPI_isBussOff+0x42>
    }
    else
    {
        l_EcuStatus |= MCP2515_ReadByte(p_CAN->UsedSPI, MCP2515_EFLG, &errorStatus.error_flag_reg);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a0b      	ldr	r2, [pc, #44]	@ (8005ac8 <CANSPI_isBussOff+0x4c>)
 8005a9a:	212d      	movs	r1, #45	@ 0x2d
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 f9bd 	bl	8005e1c <MCP2515_ReadByte>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	73fb      	strb	r3, [r7, #15]

        if (errorStatus.TXBO == 1)
 8005aac:	4b06      	ldr	r3, [pc, #24]	@ (8005ac8 <CANSPI_isBussOff+0x4c>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	f003 0320 	and.w	r3, r3, #32
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <CANSPI_isBussOff+0x42>
        {
            l_EcuStatus = ECU_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_EcuStatus;
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	200005cc 	.word	0x200005cc

08005acc <CANSPI_isTxErrorPassive>:
    return l_EcuStatus;
}

/* check Tx Passive Error */
ecu_status_t CANSPI_isTxErrorPassive(Can_t *p_CAN)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_CAN)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <CANSPI_isTxErrorPassive+0x18>
    {
        l_EcuStatus = ECU_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	73fb      	strb	r3, [r7, #15]
 8005ae2:	e014      	b.n	8005b0e <CANSPI_isTxErrorPassive+0x42>
    }
    else
    {
        l_EcuStatus |= MCP2515_ReadByte(p_CAN->UsedSPI, MCP2515_EFLG, &errorStatus.error_flag_reg);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8005b18 <CANSPI_isTxErrorPassive+0x4c>)
 8005aea:	212d      	movs	r1, #45	@ 0x2d
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 f995 	bl	8005e1c <MCP2515_ReadByte>
 8005af2:	4603      	mov	r3, r0
 8005af4:	461a      	mov	r2, r3
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	73fb      	strb	r3, [r7, #15]

        if (errorStatus.TXEP == 1)
 8005afc:	4b06      	ldr	r3, [pc, #24]	@ (8005b18 <CANSPI_isTxErrorPassive+0x4c>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <CANSPI_isTxErrorPassive+0x42>
        {
            l_EcuStatus = ECU_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_EcuStatus;
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	200005cc 	.word	0x200005cc

08005b1c <convertReg2ExtendedCANid>:

/* convert register value to extended CAN ID */
static ecu_status_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, 
                                             uint8_t tempRXBn_SIDL, uint32_t *p_ConvID)
{
 8005b1c:	b490      	push	{r4, r7}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	4604      	mov	r4, r0
 8005b24:	4608      	mov	r0, r1
 8005b26:	4611      	mov	r1, r2
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4623      	mov	r3, r4
 8005b2c:	71fb      	strb	r3, [r7, #7]
 8005b2e:	4603      	mov	r3, r0
 8005b30:	71bb      	strb	r3, [r7, #6]
 8005b32:	460b      	mov	r3, r1
 8005b34:	717b      	strb	r3, [r7, #5]
 8005b36:	4613      	mov	r3, r2
 8005b38:	713b      	strb	r3, [r7, #4]
    uint32_t returnValue = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	617b      	str	r3, [r7, #20]
    uint32_t ConvertedID = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	613b      	str	r3, [r7, #16]
    uint8_t CAN_standardLo_ID_lo2bits;
    uint8_t CAN_standardLo_ID_hi3bits;

    CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8005b42:	793b      	ldrb	r3, [r7, #4]
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	73fb      	strb	r3, [r7, #15]
    CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8005b4a:	793b      	ldrb	r3, [r7, #4]
 8005b4c:	095b      	lsrs	r3, r3, #5
 8005b4e:	73bb      	strb	r3, [r7, #14]
    ConvertedID = (tempRXBn_SIDH << 3);
 8005b50:	797b      	ldrb	r3, [r7, #5]
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	613b      	str	r3, [r7, #16]
    ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8005b56:	7bbb      	ldrb	r3, [r7, #14]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
    ConvertedID = (ConvertedID << 2);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	613b      	str	r3, [r7, #16]
    ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4413      	add	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
    ConvertedID = (ConvertedID << 8);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	021b      	lsls	r3, r3, #8
 8005b70:	613b      	str	r3, [r7, #16]
    ConvertedID = ConvertedID + tempRXBn_EIDH;
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4413      	add	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]
    ConvertedID = (ConvertedID << 8);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	613b      	str	r3, [r7, #16]
    ConvertedID = ConvertedID + tempRXBn_EIDL;
 8005b80:	79bb      	ldrb	r3, [r7, #6]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	4413      	add	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
    returnValue = ConvertedID;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	617b      	str	r3, [r7, #20]
    return (returnValue);
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	b2db      	uxtb	r3, r3
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc90      	pop	{r4, r7}
 8005b98:	4770      	bx	lr

08005b9a <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static ecu_status_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL, uint32_t *p_ConvID)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	603a      	str	r2, [r7, #0]
 8005ba4:	71fb      	strb	r3, [r7, #7]
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	71bb      	strb	r3, [r7, #6]
	ecu_status_t l_EcuStatus = ECU_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	73fb      	strb	r3, [r7, #15]
    uint32_t ConvertedID;

    ConvertedID = (tempRXBn_SIDH << 3);
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	60bb      	str	r3, [r7, #8]
    ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8005bb4:	79bb      	ldrb	r3, [r7, #6]
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	461a      	mov	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	60bb      	str	r3, [r7, #8]
    *p_ConvID = ConvertedID;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	601a      	str	r2, [r3, #0]

    return (l_EcuStatus);
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <convertCANid2Reg>:

/* convert CAN ID to register value */
static ecu_status_t convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b087      	sub	sp, #28
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	460b      	mov	r3, r1
 8005be0:	607a      	str	r2, [r7, #4]
 8005be2:	72fb      	strb	r3, [r7, #11]
	ecu_status_t l_EcuStatus = ECU_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	75fb      	strb	r3, [r7, #23]
    uint8_t wipSIDL = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	75bb      	strb	r3, [r7, #22]

    if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 8005bec:	7afb      	ldrb	r3, [r7, #11]
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d12e      	bne.n	8005c50 <convertCANid2Reg+0x7a>
    {
        // EID0
        passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	70da      	strb	r2, [r3, #3]
        tempPassedInID = tempPassedInID >> 8;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	0a1b      	lsrs	r3, r3, #8
 8005bfe:	60fb      	str	r3, [r7, #12]

        // EID8
        passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	709a      	strb	r2, [r3, #2]
        tempPassedInID = tempPassedInID >> 8;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	0a1b      	lsrs	r3, r3, #8
 8005c0c:	60fb      	str	r3, [r7, #12]

        // SIDL
        wipSIDL = 0x03 & tempPassedInID;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	75bb      	strb	r3, [r7, #22]
        tempPassedInID = tempPassedInID << 3;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	60fb      	str	r3, [r7, #12]
        wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	f023 031f 	bic.w	r3, r3, #31
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	7dbb      	ldrb	r3, [r7, #22]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	75bb      	strb	r3, [r7, #22]
        wipSIDL = wipSIDL + 0x08;
 8005c2e:	7dbb      	ldrb	r3, [r7, #22]
 8005c30:	3308      	adds	r3, #8
 8005c32:	75bb      	strb	r3, [r7, #22]
        passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8005c34:	7dbb      	ldrb	r3, [r7, #22]
 8005c36:	f023 0314 	bic.w	r3, r3, #20
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	705a      	strb	r2, [r3, #1]

        // SIDH
        tempPassedInID = tempPassedInID >> 8;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	0a1b      	lsrs	r3, r3, #8
 8005c44:	60fb      	str	r3, [r7, #12]
        passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	e013      	b.n	8005c78 <convertCANid2Reg+0xa2>
    }
    else
    {
        passedIdReg->tempEID8 = 0;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	709a      	strb	r2, [r3, #2]
        passedIdReg->tempEID0 = 0;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	70da      	strb	r2, [r3, #3]
        tempPassedInID = tempPassedInID << 5;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	015b      	lsls	r3, r3, #5
 8005c60:	60fb      	str	r3, [r7, #12]
        passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	705a      	strb	r2, [r3, #1]
        tempPassedInID = tempPassedInID >> 8;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	0a1b      	lsrs	r3, r3, #8
 8005c6e:	60fb      	str	r3, [r7, #12]
        passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	701a      	strb	r2, [r3, #0]
    }
    return (l_EcuStatus);
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <MCP2515_Initialize>:
static ecu_status_t SPI_Rx(SPI_HandleTypeDef *p_UsedSPI, uint8_t *p_Buffer);
static ecu_status_t SPI_RxBuffer(SPI_HandleTypeDef *p_UsedSPI, uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
ecu_status_t MCP2515_Initialize(SPI_HandleTypeDef *p_UsedSPI)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d102      	bne.n	8005ca0 <MCP2515_Initialize+0x18>
    {
        l_EcuStatus = ECU_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	73fb      	strb	r3, [r7, #15]
 8005c9e:	e018      	b.n	8005cd2 <MCP2515_Initialize+0x4a>
    }
    else
    {
        MCP2515_CS_HIGH();
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005ca6:	480d      	ldr	r0, [pc, #52]	@ (8005cdc <MCP2515_Initialize+0x54>)
 8005ca8:	f7fc fe28 	bl	80028fc <HAL_GPIO_WritePin>

        uint8_t loop = 10;
 8005cac:	230a      	movs	r3, #10
 8005cae:	73bb      	strb	r3, [r7, #14]

        do
        {
            /* check SPI Ready */
            if (HAL_SPI_GetState(p_UsedSPI) == HAL_SPI_STATE_READY)
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7fe f819 	bl	8003ce8 <HAL_SPI_GetState>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d102      	bne.n	8005cc2 <MCP2515_Initialize+0x3a>
            {
                l_EcuStatus = ECU_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	73fb      	strb	r3, [r7, #15]
                break;
 8005cc0:	e007      	b.n	8005cd2 <MCP2515_Initialize+0x4a>
            }
            else
            {
                loop--;
 8005cc2:	7bbb      	ldrb	r3, [r7, #14]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	73bb      	strb	r3, [r7, #14]
                l_EcuStatus = ECU_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	73fb      	strb	r3, [r7, #15]
            }
        } while (loop > 0);
 8005ccc:	7bbb      	ldrb	r3, [r7, #14]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1ee      	bne.n	8005cb0 <MCP2515_Initialize+0x28>
    }
    return l_EcuStatus;
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40020400 	.word	0x40020400

08005ce0 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
ecu_status_t MCP2515_SetConfigMode(SPI_HandleTypeDef *p_UsedSPI)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d102      	bne.n	8005cf8 <MCP2515_SetConfigMode+0x18>
    {
        l_EcuStatus = ECU_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	73fb      	strb	r3, [r7, #15]
 8005cf6:	e029      	b.n	8005d4c <MCP2515_SetConfigMode+0x6c>
    }
    else
    {
        /* configure CANCTRL Register */
        l_EcuStatus |= MCP2515_WriteByte(p_UsedSPI, MCP2515_CANCTRL, 0x80);
 8005cf8:	2280      	movs	r2, #128	@ 0x80
 8005cfa:	210f      	movs	r1, #15
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f90b 	bl	8005f18 <MCP2515_WriteByte>
 8005d02:	4603      	mov	r3, r0
 8005d04:	461a      	mov	r2, r3
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	73fb      	strb	r3, [r7, #15]

        uint8_t loop = 10;
 8005d0c:	230a      	movs	r3, #10
 8005d0e:	73bb      	strb	r3, [r7, #14]

        do
        {
            /* confirm mode configuration */
            uint8_t temp = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	737b      	strb	r3, [r7, #13]
            l_EcuStatus |= MCP2515_ReadByte(p_UsedSPI, MCP2515_CANSTAT, &temp);
 8005d14:	f107 030d 	add.w	r3, r7, #13
 8005d18:	461a      	mov	r2, r3
 8005d1a:	210e      	movs	r1, #14
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f87d 	bl	8005e1c <MCP2515_ReadByte>
 8005d22:	4603      	mov	r3, r0
 8005d24:	461a      	mov	r2, r3
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	73fb      	strb	r3, [r7, #15]
            if ((temp & 0xE0) == 0x80)
 8005d2c:	7b7b      	ldrb	r3, [r7, #13]
 8005d2e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005d32:	2b80      	cmp	r3, #128	@ 0x80
 8005d34:	d102      	bne.n	8005d3c <MCP2515_SetConfigMode+0x5c>
            {
                l_EcuStatus = ECU_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	73fb      	strb	r3, [r7, #15]
 8005d3a:	e001      	b.n	8005d40 <MCP2515_SetConfigMode+0x60>
            }
            else
            {
                l_EcuStatus = ECU_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]
            }

            loop--;
 8005d40:	7bbb      	ldrb	r3, [r7, #14]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	73bb      	strb	r3, [r7, #14]
        } while (loop > 0);
 8005d46:	7bbb      	ldrb	r3, [r7, #14]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e1      	bne.n	8005d10 <MCP2515_SetConfigMode+0x30>
    }
    return l_EcuStatus;    
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
ecu_status_t MCP2515_SetNormalMode(SPI_HandleTypeDef *p_UsedSPI)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d102      	bne.n	8005d6e <MCP2515_SetNormalMode+0x18>
    {
        l_EcuStatus = ECU_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	73fb      	strb	r3, [r7, #15]
 8005d6c:	e029      	b.n	8005dc2 <MCP2515_SetNormalMode+0x6c>
    }
    else
    {
        /* configure CANCTRL Register */
        l_EcuStatus |= MCP2515_WriteByte(p_UsedSPI, MCP2515_CANCTRL, 0x00);
 8005d6e:	2200      	movs	r2, #0
 8005d70:	210f      	movs	r1, #15
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f8d0 	bl	8005f18 <MCP2515_WriteByte>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	73fb      	strb	r3, [r7, #15]

        uint8_t loop = 10;
 8005d82:	230a      	movs	r3, #10
 8005d84:	73bb      	strb	r3, [r7, #14]

        do
        {
            /* confirm mode configuration */
            uint8_t temp = 0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	737b      	strb	r3, [r7, #13]
            l_EcuStatus |= MCP2515_ReadByte(p_UsedSPI, MCP2515_CANSTAT, &temp);
 8005d8a:	f107 030d 	add.w	r3, r7, #13
 8005d8e:	461a      	mov	r2, r3
 8005d90:	210e      	movs	r1, #14
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f842 	bl	8005e1c <MCP2515_ReadByte>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	73fb      	strb	r3, [r7, #15]
            if ((temp & 0xE0) == 0x00)
 8005da2:	7b7b      	ldrb	r3, [r7, #13]
 8005da4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d102      	bne.n	8005db2 <MCP2515_SetNormalMode+0x5c>
            {
                l_EcuStatus = ECU_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	73fb      	strb	r3, [r7, #15]
 8005db0:	e001      	b.n	8005db6 <MCP2515_SetNormalMode+0x60>
            }
            else
            {
                l_EcuStatus = ECU_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	73fb      	strb	r3, [r7, #15]
            }

            loop--;
 8005db6:	7bbb      	ldrb	r3, [r7, #14]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	73bb      	strb	r3, [r7, #14]
        } while (loop > 0);
 8005dbc:	7bbb      	ldrb	r3, [r7, #14]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e1      	bne.n	8005d86 <MCP2515_SetNormalMode+0x30>
    }
    return l_EcuStatus;    
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <MCP2515_Reset>:
    return l_EcuStatus;    
}

/* MCP2515 SPI-Reset */
ecu_status_t MCP2515_Reset(SPI_HandleTypeDef *p_UsedSPI)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d102      	bne.n	8005de4 <MCP2515_Reset+0x18>
    {
        l_EcuStatus = ECU_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	73fb      	strb	r3, [r7, #15]
 8005de2:	e014      	b.n	8005e0e <MCP2515_Reset+0x42>
    }
    else
    {
        MCP2515_CS_LOW();
 8005de4:	2200      	movs	r2, #0
 8005de6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005dea:	480b      	ldr	r0, [pc, #44]	@ (8005e18 <MCP2515_Reset+0x4c>)
 8005dec:	f7fc fd86 	bl	80028fc <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, MCP2515_RESET);
 8005df0:	21c0      	movs	r1, #192	@ 0xc0
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fa52 	bl	800629c <SPI_Tx>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	73fb      	strb	r3, [r7, #15]

        MCP2515_CS_HIGH();
 8005e02:	2201      	movs	r2, #1
 8005e04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e08:	4803      	ldr	r0, [pc, #12]	@ (8005e18 <MCP2515_Reset+0x4c>)
 8005e0a:	f7fc fd77 	bl	80028fc <HAL_GPIO_WritePin>
    }
    return l_EcuStatus;
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40020400 	.word	0x40020400

08005e1c <MCP2515_ReadByte>:

/* read single byte */
ecu_status_t MCP2515_ReadByte (SPI_HandleTypeDef *p_UsedSPI,uint8_t address, uint8_t *buffer)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	460b      	mov	r3, r1
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	72fb      	strb	r3, [r7, #11]
    ecu_status_t l_EcuStatus = ECU_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	75fb      	strb	r3, [r7, #23]
    if (NULL == p_UsedSPI)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d102      	bne.n	8005e3a <MCP2515_ReadByte+0x1e>
    {
        l_EcuStatus = ECU_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	75fb      	strb	r3, [r7, #23]
 8005e38:	e02c      	b.n	8005e94 <MCP2515_ReadByte+0x78>
    }
    else
    {
        uint8_t retVal;

        MCP2515_CS_LOW();
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e40:	4817      	ldr	r0, [pc, #92]	@ (8005ea0 <MCP2515_ReadByte+0x84>)
 8005e42:	f7fc fd5b 	bl	80028fc <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, MCP2515_READ);
 8005e46:	2103      	movs	r1, #3
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 fa27 	bl	800629c <SPI_Tx>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	461a      	mov	r2, r3
 8005e52:	7dfb      	ldrb	r3, [r7, #23]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	75fb      	strb	r3, [r7, #23]
        l_EcuStatus |= SPI_Tx(p_UsedSPI, address);
 8005e58:	7afb      	ldrb	r3, [r7, #11]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 fa1d 	bl	800629c <SPI_Tx>
 8005e62:	4603      	mov	r3, r0
 8005e64:	461a      	mov	r2, r3
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	75fb      	strb	r3, [r7, #23]
        l_EcuStatus |= SPI_Rx(p_UsedSPI, &retVal);
 8005e6c:	f107 0316 	add.w	r3, r7, #22
 8005e70:	4619      	mov	r1, r3
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 fa52 	bl	800631c <SPI_Rx>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	7dfb      	ldrb	r3, [r7, #23]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	75fb      	strb	r3, [r7, #23]

        MCP2515_CS_HIGH();
 8005e82:	2201      	movs	r2, #1
 8005e84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e88:	4805      	ldr	r0, [pc, #20]	@ (8005ea0 <MCP2515_ReadByte+0x84>)
 8005e8a:	f7fc fd37 	bl	80028fc <HAL_GPIO_WritePin>

        *buffer = retVal;
 8005e8e:	7dba      	ldrb	r2, [r7, #22]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	701a      	strb	r2, [r3, #0]
    }
    return l_EcuStatus;
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40020400 	.word	0x40020400

08005ea4 <MCP2515_ReadRxSequence>:

/* read buffer */
ecu_status_t MCP2515_ReadRxSequence(SPI_HandleTypeDef *p_UsedSPI, uint8_t instruction, uint8_t *data, uint8_t length)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	607a      	str	r2, [r7, #4]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	72fb      	strb	r3, [r7, #11]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	72bb      	strb	r3, [r7, #10]
    ecu_status_t l_EcuStatus = ECU_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	75fb      	strb	r3, [r7, #23]
    if (NULL == p_UsedSPI)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d102      	bne.n	8005ec8 <MCP2515_ReadRxSequence+0x24>
    {
        l_EcuStatus = ECU_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	75fb      	strb	r3, [r7, #23]
 8005ec6:	e020      	b.n	8005f0a <MCP2515_ReadRxSequence+0x66>
    }
    else
    {
        MCP2515_CS_LOW();
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005ece:	4811      	ldr	r0, [pc, #68]	@ (8005f14 <MCP2515_ReadRxSequence+0x70>)
 8005ed0:	f7fc fd14 	bl	80028fc <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, instruction);
 8005ed4:	7afb      	ldrb	r3, [r7, #11]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 f9df 	bl	800629c <SPI_Tx>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	7dfb      	ldrb	r3, [r7, #23]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	75fb      	strb	r3, [r7, #23]
        l_EcuStatus |= SPI_RxBuffer(p_UsedSPI, data, length);
 8005ee8:	7abb      	ldrb	r3, [r7, #10]
 8005eea:	461a      	mov	r2, r3
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 fa39 	bl	8006366 <SPI_RxBuffer>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	7dfb      	ldrb	r3, [r7, #23]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	75fb      	strb	r3, [r7, #23]

        MCP2515_CS_HIGH();
 8005efe:	2201      	movs	r2, #1
 8005f00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f04:	4803      	ldr	r0, [pc, #12]	@ (8005f14 <MCP2515_ReadRxSequence+0x70>)
 8005f06:	f7fc fcf9 	bl	80028fc <HAL_GPIO_WritePin>
    }
    return l_EcuStatus;
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40020400 	.word	0x40020400

08005f18 <MCP2515_WriteByte>:

/* write single byte */
ecu_status_t MCP2515_WriteByte(SPI_HandleTypeDef *p_UsedSPI, uint8_t address, uint8_t data)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	70fb      	strb	r3, [r7, #3]
 8005f24:	4613      	mov	r3, r2
 8005f26:	70bb      	strb	r3, [r7, #2]
    ecu_status_t l_EcuStatus = ECU_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d102      	bne.n	8005f38 <MCP2515_WriteByte+0x20>
    {
        l_EcuStatus = ECU_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	73fb      	strb	r3, [r7, #15]
 8005f36:	e028      	b.n	8005f8a <MCP2515_WriteByte+0x72>
    }
    else
    {
        MCP2515_CS_LOW();
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f3e:	4815      	ldr	r0, [pc, #84]	@ (8005f94 <MCP2515_WriteByte+0x7c>)
 8005f40:	f7fc fcdc 	bl	80028fc <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, MCP2515_WRITE);
 8005f44:	2102      	movs	r1, #2
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9a8 	bl	800629c <SPI_Tx>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	461a      	mov	r2, r3
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	73fb      	strb	r3, [r7, #15]
        l_EcuStatus |= SPI_Tx(p_UsedSPI, address);
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f99e 	bl	800629c <SPI_Tx>
 8005f60:	4603      	mov	r3, r0
 8005f62:	461a      	mov	r2, r3
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	73fb      	strb	r3, [r7, #15]
        l_EcuStatus |= SPI_Tx(p_UsedSPI, data);
 8005f6a:	78bb      	ldrb	r3, [r7, #2]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f994 	bl	800629c <SPI_Tx>
 8005f74:	4603      	mov	r3, r0
 8005f76:	461a      	mov	r2, r3
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	73fb      	strb	r3, [r7, #15]

        MCP2515_CS_HIGH();
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f84:	4803      	ldr	r0, [pc, #12]	@ (8005f94 <MCP2515_WriteByte+0x7c>)
 8005f86:	f7fc fcb9 	bl	80028fc <HAL_GPIO_WritePin>
    }
    return l_EcuStatus;
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40020400 	.word	0x40020400

08005f98 <MCP2515_WriteByteSequence>:
/* write buffer */
ecu_status_t MCP2515_WriteByteSequence(SPI_HandleTypeDef *p_UsedSPI, 
                                       uint8_t startAddress, 
                                       uint8_t endAddress, 
                                       uint8_t *data)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	607b      	str	r3, [r7, #4]
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	72fb      	strb	r3, [r7, #11]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	72bb      	strb	r3, [r7, #10]
    ecu_status_t l_EcuStatus = ECU_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	75fb      	strb	r3, [r7, #23]
    if (NULL == p_UsedSPI)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <MCP2515_WriteByteSequence+0x22>
    {
        l_EcuStatus = ECU_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	75fb      	strb	r3, [r7, #23]
 8005fb8:	e02e      	b.n	8006018 <MCP2515_WriteByteSequence+0x80>
    }
    else
    {
        MCP2515_CS_LOW();
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005fc0:	4818      	ldr	r0, [pc, #96]	@ (8006024 <MCP2515_WriteByteSequence+0x8c>)
 8005fc2:	f7fc fc9b 	bl	80028fc <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, MCP2515_WRITE);
 8005fc6:	2102      	movs	r1, #2
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 f967 	bl	800629c <SPI_Tx>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	7dfb      	ldrb	r3, [r7, #23]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	75fb      	strb	r3, [r7, #23]
        l_EcuStatus |= SPI_Tx(p_UsedSPI, startAddress);
 8005fd8:	7afb      	ldrb	r3, [r7, #11]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f95d 	bl	800629c <SPI_Tx>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	75fb      	strb	r3, [r7, #23]
        l_EcuStatus |= SPI_TxBuffer(p_UsedSPI, data, (endAddress - startAddress + 1));
 8005fec:	7aba      	ldrb	r2, [r7, #10]
 8005fee:	7afb      	ldrb	r3, [r7, #11]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 f96c 	bl	80062da <SPI_TxBuffer>
 8006002:	4603      	mov	r3, r0
 8006004:	461a      	mov	r2, r3
 8006006:	7dfb      	ldrb	r3, [r7, #23]
 8006008:	4313      	orrs	r3, r2
 800600a:	75fb      	strb	r3, [r7, #23]

        MCP2515_CS_HIGH();
 800600c:	2201      	movs	r2, #1
 800600e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006012:	4804      	ldr	r0, [pc, #16]	@ (8006024 <MCP2515_WriteByteSequence+0x8c>)
 8006014:	f7fc fc72 	bl	80028fc <HAL_GPIO_WritePin>
    }
    return l_EcuStatus;
 8006018:	7dfb      	ldrb	r3, [r7, #23]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	40020400 	.word	0x40020400

08006028 <MCP2515_LoadTxSequence>:
ecu_status_t MCP2515_LoadTxSequence(SPI_HandleTypeDef *p_UsedSPI, 
                                    uint8_t instruction, 
                                    uint8_t *idReg, 
                                    uint8_t dlc, 
                                    uint8_t *data)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	607a      	str	r2, [r7, #4]
 8006032:	461a      	mov	r2, r3
 8006034:	460b      	mov	r3, r1
 8006036:	72fb      	strb	r3, [r7, #11]
 8006038:	4613      	mov	r3, r2
 800603a:	72bb      	strb	r3, [r7, #10]
    ecu_status_t l_EcuStatus = ECU_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	75fb      	strb	r3, [r7, #23]
    if (NULL == p_UsedSPI)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d102      	bne.n	800604c <MCP2515_LoadTxSequence+0x24>
    {
        l_EcuStatus = ECU_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	75fb      	strb	r3, [r7, #23]
 800604a:	e034      	b.n	80060b6 <MCP2515_LoadTxSequence+0x8e>
    }
    else
    {
        MCP2515_CS_LOW();
 800604c:	2200      	movs	r2, #0
 800604e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006052:	481b      	ldr	r0, [pc, #108]	@ (80060c0 <MCP2515_LoadTxSequence+0x98>)
 8006054:	f7fc fc52 	bl	80028fc <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, instruction);
 8006058:	7afb      	ldrb	r3, [r7, #11]
 800605a:	4619      	mov	r1, r3
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f91d 	bl	800629c <SPI_Tx>
 8006062:	4603      	mov	r3, r0
 8006064:	461a      	mov	r2, r3
 8006066:	7dfb      	ldrb	r3, [r7, #23]
 8006068:	4313      	orrs	r3, r2
 800606a:	75fb      	strb	r3, [r7, #23]
        l_EcuStatus |= SPI_TxBuffer(p_UsedSPI, idReg, 4);
 800606c:	2204      	movs	r2, #4
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 f932 	bl	80062da <SPI_TxBuffer>
 8006076:	4603      	mov	r3, r0
 8006078:	461a      	mov	r2, r3
 800607a:	7dfb      	ldrb	r3, [r7, #23]
 800607c:	4313      	orrs	r3, r2
 800607e:	75fb      	strb	r3, [r7, #23]
        l_EcuStatus |= SPI_Tx(p_UsedSPI, dlc);
 8006080:	7abb      	ldrb	r3, [r7, #10]
 8006082:	4619      	mov	r1, r3
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f909 	bl	800629c <SPI_Tx>
 800608a:	4603      	mov	r3, r0
 800608c:	461a      	mov	r2, r3
 800608e:	7dfb      	ldrb	r3, [r7, #23]
 8006090:	4313      	orrs	r3, r2
 8006092:	75fb      	strb	r3, [r7, #23]
        l_EcuStatus |= SPI_TxBuffer(p_UsedSPI, data, dlc);
 8006094:	7abb      	ldrb	r3, [r7, #10]
 8006096:	461a      	mov	r2, r3
 8006098:	6a39      	ldr	r1, [r7, #32]
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f91d 	bl	80062da <SPI_TxBuffer>
 80060a0:	4603      	mov	r3, r0
 80060a2:	461a      	mov	r2, r3
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	75fb      	strb	r3, [r7, #23]

        MCP2515_CS_HIGH();
 80060aa:	2201      	movs	r2, #1
 80060ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80060b0:	4803      	ldr	r0, [pc, #12]	@ (80060c0 <MCP2515_LoadTxSequence+0x98>)
 80060b2:	f7fc fc23 	bl	80028fc <HAL_GPIO_WritePin>

    }
    return l_EcuStatus;
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40020400 	.word	0x40020400

080060c4 <MCP2515_RequestToSend>:
    return l_EcuStatus;
}

/* request to send */
ecu_status_t MCP2515_RequestToSend(SPI_HandleTypeDef *p_UsedSPI, uint8_t instruction)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	70fb      	strb	r3, [r7, #3]
    ecu_status_t l_EcuStatus = ECU_OK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d102      	bne.n	80060e0 <MCP2515_RequestToSend+0x1c>
    {
        l_EcuStatus = ECU_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	73fb      	strb	r3, [r7, #15]
 80060de:	e015      	b.n	800610c <MCP2515_RequestToSend+0x48>
    }
    else
    {
        MCP2515_CS_LOW();
 80060e0:	2200      	movs	r2, #0
 80060e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80060e6:	480c      	ldr	r0, [pc, #48]	@ (8006118 <MCP2515_RequestToSend+0x54>)
 80060e8:	f7fc fc08 	bl	80028fc <HAL_GPIO_WritePin>
 
        l_EcuStatus |= SPI_Tx(p_UsedSPI, instruction);
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	4619      	mov	r1, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f8d3 	bl	800629c <SPI_Tx>
 80060f6:	4603      	mov	r3, r0
 80060f8:	461a      	mov	r2, r3
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	73fb      	strb	r3, [r7, #15]

        MCP2515_CS_HIGH();
 8006100:	2201      	movs	r2, #1
 8006102:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006106:	4804      	ldr	r0, [pc, #16]	@ (8006118 <MCP2515_RequestToSend+0x54>)
 8006108:	f7fc fbf8 	bl	80028fc <HAL_GPIO_WritePin>
    }
    return l_EcuStatus;
 800610c:	7bfb      	ldrb	r3, [r7, #15]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	40020400 	.word	0x40020400

0800611c <MCP2515_ReadStatus>:

/* read status */
ecu_status_t MCP2515_ReadStatus(SPI_HandleTypeDef *p_UsedSPI, uint8_t *p_Buffer)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
    ecu_status_t l_EcuStatus = ECU_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <MCP2515_ReadStatus+0x1a>
    {
        l_EcuStatus = ECU_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	73fb      	strb	r3, [r7, #15]
 8006134:	e022      	b.n	800617c <MCP2515_ReadStatus+0x60>
    }
    else
    {
        uint8_t retVal;

        MCP2515_CS_LOW();
 8006136:	2200      	movs	r2, #0
 8006138:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800613c:	4812      	ldr	r0, [pc, #72]	@ (8006188 <MCP2515_ReadStatus+0x6c>)
 800613e:	f7fc fbdd 	bl	80028fc <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, MCP2515_READ_STATUS);
 8006142:	21a0      	movs	r1, #160	@ 0xa0
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f8a9 	bl	800629c <SPI_Tx>
 800614a:	4603      	mov	r3, r0
 800614c:	461a      	mov	r2, r3
 800614e:	7bfb      	ldrb	r3, [r7, #15]
 8006150:	4313      	orrs	r3, r2
 8006152:	73fb      	strb	r3, [r7, #15]
        l_EcuStatus |= SPI_Rx(p_UsedSPI, &retVal);
 8006154:	f107 030e 	add.w	r3, r7, #14
 8006158:	4619      	mov	r1, r3
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f8de 	bl	800631c <SPI_Rx>
 8006160:	4603      	mov	r3, r0
 8006162:	461a      	mov	r2, r3
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	4313      	orrs	r3, r2
 8006168:	73fb      	strb	r3, [r7, #15]

        MCP2515_CS_HIGH();
 800616a:	2201      	movs	r2, #1
 800616c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006170:	4805      	ldr	r0, [pc, #20]	@ (8006188 <MCP2515_ReadStatus+0x6c>)
 8006172:	f7fc fbc3 	bl	80028fc <HAL_GPIO_WritePin>

        *p_Buffer = retVal;
 8006176:	7bba      	ldrb	r2, [r7, #14]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	701a      	strb	r2, [r3, #0]
    }
    return l_EcuStatus;
 800617c:	7bfb      	ldrb	r3, [r7, #15]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	40020400 	.word	0x40020400

0800618c <MCP2515_GetRxStatus>:

/* read RX STATUS register */
ecu_status_t MCP2515_GetRxStatus(SPI_HandleTypeDef *p_UsedSPI, uint8_t *p_Buffer)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
    ecu_status_t l_EcuStatus = ECU_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d102      	bne.n	80061a6 <MCP2515_GetRxStatus+0x1a>
    {
        l_EcuStatus = ECU_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	73fb      	strb	r3, [r7, #15]
 80061a4:	e022      	b.n	80061ec <MCP2515_GetRxStatus+0x60>
    }
    else
    {
        uint8_t retVal;

        MCP2515_CS_LOW();
 80061a6:	2200      	movs	r2, #0
 80061a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80061ac:	4812      	ldr	r0, [pc, #72]	@ (80061f8 <MCP2515_GetRxStatus+0x6c>)
 80061ae:	f7fc fba5 	bl	80028fc <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, MCP2515_RX_STATUS);
 80061b2:	21b0      	movs	r1, #176	@ 0xb0
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f871 	bl	800629c <SPI_Tx>
 80061ba:	4603      	mov	r3, r0
 80061bc:	461a      	mov	r2, r3
 80061be:	7bfb      	ldrb	r3, [r7, #15]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	73fb      	strb	r3, [r7, #15]
        l_EcuStatus |= SPI_Rx(p_UsedSPI, &retVal);
 80061c4:	f107 030e 	add.w	r3, r7, #14
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f8a6 	bl	800631c <SPI_Rx>
 80061d0:	4603      	mov	r3, r0
 80061d2:	461a      	mov	r2, r3
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	73fb      	strb	r3, [r7, #15]

        MCP2515_CS_HIGH();
 80061da:	2201      	movs	r2, #1
 80061dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80061e0:	4805      	ldr	r0, [pc, #20]	@ (80061f8 <MCP2515_GetRxStatus+0x6c>)
 80061e2:	f7fc fb8b 	bl	80028fc <HAL_GPIO_WritePin>

        *p_Buffer = retVal;
 80061e6:	7bba      	ldrb	r2, [r7, #14]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	701a      	strb	r2, [r3, #0]
    }
    return l_EcuStatus;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40020400 	.word	0x40020400

080061fc <MCP2515_BitModify>:

/* Use when changing register value */
ecu_status_t MCP2515_BitModify(SPI_HandleTypeDef *p_UsedSPI, uint8_t address, uint8_t mask, uint8_t data)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	4608      	mov	r0, r1
 8006206:	4611      	mov	r1, r2
 8006208:	461a      	mov	r2, r3
 800620a:	4603      	mov	r3, r0
 800620c:	70fb      	strb	r3, [r7, #3]
 800620e:	460b      	mov	r3, r1
 8006210:	70bb      	strb	r3, [r7, #2]
 8006212:	4613      	mov	r3, r2
 8006214:	707b      	strb	r3, [r7, #1]
    ecu_status_t l_EcuStatus = ECU_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d102      	bne.n	8006226 <MCP2515_BitModify+0x2a>
    {
        l_EcuStatus = ECU_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	73fb      	strb	r3, [r7, #15]
 8006224:	e032      	b.n	800628c <MCP2515_BitModify+0x90>
    }
    else
    {
        MCP2515_CS_LOW();
 8006226:	2200      	movs	r2, #0
 8006228:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800622c:	481a      	ldr	r0, [pc, #104]	@ (8006298 <MCP2515_BitModify+0x9c>)
 800622e:	f7fc fb65 	bl	80028fc <HAL_GPIO_WritePin>

        l_EcuStatus |= SPI_Tx(p_UsedSPI, MCP2515_BIT_MOD);
 8006232:	2105      	movs	r1, #5
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f831 	bl	800629c <SPI_Tx>
 800623a:	4603      	mov	r3, r0
 800623c:	461a      	mov	r2, r3
 800623e:	7bfb      	ldrb	r3, [r7, #15]
 8006240:	4313      	orrs	r3, r2
 8006242:	73fb      	strb	r3, [r7, #15]
        l_EcuStatus |= SPI_Tx(p_UsedSPI, address);
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f827 	bl	800629c <SPI_Tx>
 800624e:	4603      	mov	r3, r0
 8006250:	461a      	mov	r2, r3
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	4313      	orrs	r3, r2
 8006256:	73fb      	strb	r3, [r7, #15]
        l_EcuStatus |= SPI_Tx(p_UsedSPI, mask);
 8006258:	78bb      	ldrb	r3, [r7, #2]
 800625a:	4619      	mov	r1, r3
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f81d 	bl	800629c <SPI_Tx>
 8006262:	4603      	mov	r3, r0
 8006264:	461a      	mov	r2, r3
 8006266:	7bfb      	ldrb	r3, [r7, #15]
 8006268:	4313      	orrs	r3, r2
 800626a:	73fb      	strb	r3, [r7, #15]
        l_EcuStatus |= SPI_Tx(p_UsedSPI, data);
 800626c:	787b      	ldrb	r3, [r7, #1]
 800626e:	4619      	mov	r1, r3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f813 	bl	800629c <SPI_Tx>
 8006276:	4603      	mov	r3, r0
 8006278:	461a      	mov	r2, r3
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	4313      	orrs	r3, r2
 800627e:	73fb      	strb	r3, [r7, #15]

        MCP2515_CS_HIGH();
 8006280:	2201      	movs	r2, #1
 8006282:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006286:	4804      	ldr	r0, [pc, #16]	@ (8006298 <MCP2515_BitModify+0x9c>)
 8006288:	f7fc fb38 	bl	80028fc <HAL_GPIO_WritePin>
    }
    return l_EcuStatus;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	40020400 	.word	0x40020400

0800629c <SPI_Tx>:

/* SPI Tx wrapper function  */
static ecu_status_t SPI_Tx(SPI_HandleTypeDef *p_UsedSPI, uint8_t data)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	70fb      	strb	r3, [r7, #3]
    ecu_status_t l_EcuStatus = ECU_OK;
 80062a8:	2300      	movs	r3, #0
 80062aa:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <SPI_Tx+0x1c>
    {
        l_EcuStatus = ECU_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	73fb      	strb	r3, [r7, #15]
 80062b6:	e00b      	b.n	80062d0 <SPI_Tx+0x34>
    }
    else
    {
        if (HAL_SPI_Transmit(p_UsedSPI, &data, 1, SPI_TIMEOUT) != HAL_OK)
 80062b8:	1cf9      	adds	r1, r7, #3
 80062ba:	f04f 33ff 	mov.w	r3, #4294967295
 80062be:	2201      	movs	r2, #1
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7fd f8bb 	bl	800343c <HAL_SPI_Transmit>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <SPI_Tx+0x34>
        {
            l_EcuStatus = ECU_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_EcuStatus;
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static ecu_status_t SPI_TxBuffer(SPI_HandleTypeDef *p_UsedSPI, uint8_t *buffer, uint8_t length)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b086      	sub	sp, #24
 80062de:	af00      	add	r7, sp, #0
 80062e0:	60f8      	str	r0, [r7, #12]
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	4613      	mov	r3, r2
 80062e6:	71fb      	strb	r3, [r7, #7]
    ecu_status_t l_EcuStatus = ECU_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	75fb      	strb	r3, [r7, #23]
    if (NULL == p_UsedSPI)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d102      	bne.n	80062f8 <SPI_TxBuffer+0x1e>
    {
        l_EcuStatus = ECU_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	75fb      	strb	r3, [r7, #23]
 80062f6:	e00c      	b.n	8006312 <SPI_TxBuffer+0x38>
    }
    else
    {
        if (HAL_SPI_Transmit(p_UsedSPI, buffer, length, SPI_TIMEOUT) != HAL_OK)
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006300:	68b9      	ldr	r1, [r7, #8]
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f7fd f89a 	bl	800343c <HAL_SPI_Transmit>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <SPI_TxBuffer+0x38>
        {
            l_EcuStatus = ECU_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	75fb      	strb	r3, [r7, #23]
        }
    }
    return l_EcuStatus;
 8006312:	7dfb      	ldrb	r3, [r7, #23]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <SPI_Rx>:

/* SPI Rx wrapper function */
static ecu_status_t SPI_Rx(SPI_HandleTypeDef *p_UsedSPI, uint8_t *p_Buffer)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
    ecu_status_t l_EcuStatus = ECU_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_UsedSPI)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d102      	bne.n	8006336 <SPI_Rx+0x1a>
    {
        l_EcuStatus = ECU_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	73fb      	strb	r3, [r7, #15]
 8006334:	e012      	b.n	800635c <SPI_Rx+0x40>
    }
    else
    {
        uint8_t retVal = 0;
 8006336:	2300      	movs	r3, #0
 8006338:	73bb      	strb	r3, [r7, #14]
        if (HAL_SPI_Receive(p_UsedSPI, &retVal, 1, SPI_TIMEOUT) != HAL_OK)
 800633a:	f107 010e 	add.w	r1, r7, #14
 800633e:	f04f 33ff 	mov.w	r3, #4294967295
 8006342:	2201      	movs	r2, #1
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7fd f9bd 	bl	80036c4 <HAL_SPI_Receive>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <SPI_Rx+0x3a>
        {
            l_EcuStatus = ECU_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	73fb      	strb	r3, [r7, #15]
 8006354:	e002      	b.n	800635c <SPI_Rx+0x40>
        }
        else
        {
            *p_Buffer = retVal;
 8006356:	7bba      	ldrb	r2, [r7, #14]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	701a      	strb	r2, [r3, #0]
        }
    }
    return l_EcuStatus;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static ecu_status_t SPI_RxBuffer(SPI_HandleTypeDef *p_UsedSPI, uint8_t *buffer, uint8_t length)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b086      	sub	sp, #24
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	4613      	mov	r3, r2
 8006372:	71fb      	strb	r3, [r7, #7]
    ecu_status_t l_EcuStatus = ECU_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	75fb      	strb	r3, [r7, #23]
    if (NULL == p_UsedSPI)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d102      	bne.n	8006384 <SPI_RxBuffer+0x1e>
    {
        l_EcuStatus = ECU_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	75fb      	strb	r3, [r7, #23]
 8006382:	e00c      	b.n	800639e <SPI_RxBuffer+0x38>
    }
    else
    {
        if (HAL_SPI_Receive(p_UsedSPI, buffer, length, SPI_TIMEOUT) != HAL_OK)
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	b29a      	uxth	r2, r3
 8006388:	f04f 33ff 	mov.w	r3, #4294967295
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f7fd f998 	bl	80036c4 <HAL_SPI_Receive>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <SPI_RxBuffer+0x38>
        {
            l_EcuStatus = ECU_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	75fb      	strb	r3, [r7, #23]
        }
    }
    return l_EcuStatus;
 800639e:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <encoder_init>:
 * @brief initialize the parameters of the encoder
 * @param p_Encoder pointer to the encoder wanted to be initialized
 * @return ecu_status_t status of operation
 */
ecu_status_t encoder_init(encoder_t *p_Encoder)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	73fb      	strb	r3, [r7, #15]
    if (p_Encoder == NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d102      	bne.n	80063c0 <encoder_init+0x18>
    {
        l_EcuStatus = ECU_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	73fb      	strb	r3, [r7, #15]
 80063be:	e01b      	b.n	80063f8 <encoder_init+0x50>
    }
    else
    {
        p_Encoder->Speed = 0.0f;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f04f 0200 	mov.w	r2, #0
 80063c6:	605a      	str	r2, [r3, #4]
        p_Encoder->Position = 0.0f;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	609a      	str	r2, [r3, #8]
        p_Encoder->LastCount = 0.0f;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	611a      	str	r2, [r3, #16]
        __HAL_TIM_SET_COUNTER(p_Encoder->SelectedTimer, 22000);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f245 52f0 	movw	r2, #22000	@ 0x55f0
 80063e0:	625a      	str	r2, [r3, #36]	@ 0x24
        if (HAL_TIM_Encoder_Start(p_Encoder->SelectedTimer, TIM_CHANNEL_ALL) != HAL_OK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	213c      	movs	r1, #60	@ 0x3c
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fe f825 	bl	8004438 <HAL_TIM_Encoder_Start>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <encoder_init+0x50>
        {
            l_EcuStatus = ECU_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	73fb      	strb	r3, [r7, #15]
        }
    }
    return l_EcuStatus;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	0000      	movs	r0, r0
 8006404:	0000      	movs	r0, r0
	...

08006408 <encoder_periodic_update>:
 * @param p_Encoder pointer to the encoder to be updated
 * @param p_PeriodTime the period time which this function would be called every (ms)
 * @return ecu_status_t status of operation
 */
ecu_status_t encoder_periodic_update(encoder_t *p_Encoder, float_t p_PeriodTime)
{
 8006408:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800640c:	b086      	sub	sp, #24
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	ed87 0a00 	vstr	s0, [r7]
    ecu_status_t l_EcuStatus = ECU_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	75fb      	strb	r3, [r7, #23]
    if (p_Encoder == NULL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d102      	bne.n	8006426 <encoder_periodic_update+0x1e>
    {
        l_EcuStatus = ECU_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	75fb      	strb	r3, [r7, #23]
 8006424:	e093      	b.n	800654e <encoder_periodic_update+0x146>
    }
    else
    {
        uint32_t l_CurrentCount = __HAL_TIM_GET_COUNTER(p_Encoder->SelectedTimer);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642e:	613b      	str	r3, [r7, #16]
        __HAL_TIM_SET_COUNTER(p_Encoder->SelectedTimer, 22000);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f245 52f0 	movw	r2, #22000	@ 0x55f0
 800643a:	625a      	str	r2, [r3, #36]	@ 0x24
        float_t l_MovedCycles = 0;
 800643c:	f04f 0300 	mov.w	r3, #0
 8006440:	60fb      	str	r3, [r7, #12]
        float_t l_Revolutions = 0;
 8006442:	f04f 0300 	mov.w	r3, #0
 8006446:	60bb      	str	r3, [r7, #8]

        l_MovedCycles = (float_t)((float_t)l_CurrentCount - 22000.0);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006452:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8006568 <encoder_periodic_update+0x160>
 8006456:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800645a:	edc7 7a03 	vstr	s15, [r7, #12]

        l_Revolutions = (float_t)((float_t)l_MovedCycles / ((float_t)ENCODER_PULSES_NUMBER * (float_t)40.0));
 800645e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006462:	eddf 6a42 	vldr	s13, [pc, #264]	@ 800656c <encoder_periodic_update+0x164>
 8006466:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800646a:	edc7 7a02 	vstr	s15, [r7, #8]

        p_Encoder->Speed = (((l_Revolutions) * 60)  / (p_PeriodTime / 1000.0));
 800646e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006472:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006570 <encoder_periodic_update+0x168>
 8006476:	ee67 7a87 	vmul.f32	s15, s15, s14
 800647a:	ee17 0a90 	vmov	r0, s15
 800647e:	f7fa f813 	bl	80004a8 <__aeabi_f2d>
 8006482:	4604      	mov	r4, r0
 8006484:	460d      	mov	r5, r1
 8006486:	6838      	ldr	r0, [r7, #0]
 8006488:	f7fa f80e 	bl	80004a8 <__aeabi_f2d>
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	4b38      	ldr	r3, [pc, #224]	@ (8006574 <encoder_periodic_update+0x16c>)
 8006492:	f7fa f98b 	bl	80007ac <__aeabi_ddiv>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4620      	mov	r0, r4
 800649c:	4629      	mov	r1, r5
 800649e:	f7fa f985 	bl	80007ac <__aeabi_ddiv>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4610      	mov	r0, r2
 80064a8:	4619      	mov	r1, r3
 80064aa:	f7fa fb17 	bl	8000adc <__aeabi_d2f>
 80064ae:	4602      	mov	r2, r0
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	605a      	str	r2, [r3, #4]

        if (p_Encoder->Speed < 0)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80064ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064c2:	d512      	bpl.n	80064ea <encoder_periodic_update+0xe2>
            p_Encoder->Speed *= -1.0;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7f9 ffed 	bl	80004a8 <__aeabi_f2d>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4610      	mov	r0, r2
 80064d4:	4619      	mov	r1, r3
 80064d6:	f7fa fb01 	bl	8000adc <__aeabi_d2f>
 80064da:	4603      	mov	r3, r0
 80064dc:	ee07 3a90 	vmov	s15, r3
 80064e0:	eef1 7a67 	vneg.f32	s15, s15
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	edc3 7a01 	vstr	s15, [r3, #4]

        p_Encoder->Position += l_Revolutions * 2 *  M_PI * p_Encoder->WheelRadius;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7f9 ffda 	bl	80004a8 <__aeabi_f2d>
 80064f4:	4604      	mov	r4, r0
 80064f6:	460d      	mov	r5, r1
 80064f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80064fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006500:	ee17 0a90 	vmov	r0, s15
 8006504:	f7f9 ffd0 	bl	80004a8 <__aeabi_f2d>
 8006508:	a315      	add	r3, pc, #84	@ (adr r3, 8006560 <encoder_periodic_update+0x158>)
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	f7fa f823 	bl	8000558 <__aeabi_dmul>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4690      	mov	r8, r2
 8006518:	4699      	mov	r9, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	4618      	mov	r0, r3
 8006520:	f7f9 ffc2 	bl	80004a8 <__aeabi_f2d>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4640      	mov	r0, r8
 800652a:	4649      	mov	r1, r9
 800652c:	f7fa f814 	bl	8000558 <__aeabi_dmul>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4620      	mov	r0, r4
 8006536:	4629      	mov	r1, r5
 8006538:	f7f9 fe58 	bl	80001ec <__adddf3>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4610      	mov	r0, r2
 8006542:	4619      	mov	r1, r3
 8006544:	f7fa faca 	bl	8000adc <__aeabi_d2f>
 8006548:	4602      	mov	r2, r0
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	609a      	str	r2, [r3, #8]

    }
    return l_EcuStatus;
 800654e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800655a:	bf00      	nop
 800655c:	f3af 8000 	nop.w
 8006560:	54442d18 	.word	0x54442d18
 8006564:	400921fb 	.word	0x400921fb
 8006568:	46abe000 	.word	0x46abe000
 800656c:	43dc0000 	.word	0x43dc0000
 8006570:	42700000 	.word	0x42700000
 8006574:	408f4000 	.word	0x408f4000

08006578 <motor_init>:
 * 
 * @param p_Motor object of motor 
 * @return ecu_status_t status of the operation
 */
ecu_status_t motor_init(motor_t *p_Motor)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_Motor)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d102      	bne.n	8006590 <motor_init+0x18>
    {
        l_EcuStatus = ECU_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	73fb      	strb	r3, [r7, #15]
 800658e:	e02d      	b.n	80065ec <motor_init+0x74>
    else
    {
        /* GPIO initializtion is DONE by CubeMX */

        /* start generating pwm with zero duty cycle */
        __HAL_TIM_SetCompare(p_Motor->SelectedTimer, p_Motor->SelectedChannel, ZERO);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	7c1b      	ldrb	r3, [r3, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d105      	bne.n	80065a4 <motor_init+0x2c>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2200      	movs	r2, #0
 80065a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80065a2:	e018      	b.n	80065d6 <motor_init+0x5e>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	7c1b      	ldrb	r3, [r3, #16]
 80065a8:	2b04      	cmp	r3, #4
 80065aa:	d105      	bne.n	80065b8 <motor_init+0x40>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	2300      	movs	r3, #0
 80065b4:	6393      	str	r3, [r2, #56]	@ 0x38
 80065b6:	e00e      	b.n	80065d6 <motor_init+0x5e>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	7c1b      	ldrb	r3, [r3, #16]
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d105      	bne.n	80065cc <motor_init+0x54>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	2300      	movs	r3, #0
 80065c8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80065ca:	e004      	b.n	80065d6 <motor_init+0x5e>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	2300      	movs	r3, #0
 80065d4:	6413      	str	r3, [r2, #64]	@ 0x40
        HAL_TIM_PWM_Start(p_Motor->SelectedTimer, p_Motor->SelectedChannel);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	7c1b      	ldrb	r3, [r3, #16]
 80065de:	4619      	mov	r1, r3
 80065e0:	4610      	mov	r0, r2
 80065e2:	f7fd fdd3 	bl	800418c <HAL_TIM_PWM_Start>

        /* restore the max speed of motor from flash memory */
        MaxClibratedSpeed = DEFUALT_MOTOR_MAX_SPEED;
 80065e6:	4b04      	ldr	r3, [pc, #16]	@ (80065f8 <motor_init+0x80>)
 80065e8:	4a04      	ldr	r2, [pc, #16]	@ (80065fc <motor_init+0x84>)
 80065ea:	601a      	str	r2, [r3, #0]
    }
    return l_EcuStatus;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000214 	.word	0x20000214
 80065fc:	43340000 	.word	0x43340000

08006600 <motor_move_forward>:
  * @param p_Motor object of motor 
  * @param p_Speed speed of motor
  * @return ecu_status_t status of the operation
 */
ecu_status_t motor_move_forward(motor_t *p_Motor , float_t p_Speed)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	ed87 0a00 	vstr	s0, [r7]
    ecu_status_t l_EcuStatus = ECU_OK;
 800660c:	2300      	movs	r3, #0
 800660e:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_Motor)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d102      	bne.n	800661c <motor_move_forward+0x1c>
    {
        l_EcuStatus = ECU_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	73fb      	strb	r3, [r7, #15]
 800661a:	e016      	b.n	800664a <motor_move_forward+0x4a>
    }
    else
    {
    	l_EcuStatus = motor_change_speed(p_Motor , p_Speed);
 800661c:	ed97 0a00 	vldr	s0, [r7]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f86b 	bl	80066fc <motor_change_speed>
 8006626:	4603      	mov	r3, r0
 8006628:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(p_Motor->GpioxMotor[0] , p_Motor->GpioPinMotor[0] , GPIO_PIN_SET);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	891b      	ldrh	r3, [r3, #8]
 8006632:	2201      	movs	r2, #1
 8006634:	4619      	mov	r1, r3
 8006636:	f7fc f961 	bl	80028fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(p_Motor->GpioxMotor[1] , p_Motor->GpioPinMotor[1] , GPIO_PIN_RESET);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6858      	ldr	r0, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	895b      	ldrh	r3, [r3, #10]
 8006642:	2200      	movs	r2, #0
 8006644:	4619      	mov	r1, r3
 8006646:	f7fc f959 	bl	80028fc <HAL_GPIO_WritePin>
    }
    return l_EcuStatus;
 800664a:	7bfb      	ldrb	r3, [r7, #15]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <motor_move_backward>:
  * @param p_Motor object of motor 
  * @param p_Speed speed of motor
  * @return ecu_status_t status of the operation
 */
ecu_status_t motor_move_backward(motor_t *p_Motor , float_t p_Speed)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	ed87 0a00 	vstr	s0, [r7]
    ecu_status_t l_EcuStatus = ECU_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_Motor)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d102      	bne.n	8006670 <motor_move_backward+0x1c>
    {
        l_EcuStatus = ECU_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	73fb      	strb	r3, [r7, #15]
 800666e:	e016      	b.n	800669e <motor_move_backward+0x4a>
    }
    else
    {
    	l_EcuStatus = motor_change_speed(p_Motor , p_Speed);
 8006670:	ed97 0a00 	vldr	s0, [r7]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f841 	bl	80066fc <motor_change_speed>
 800667a:	4603      	mov	r3, r0
 800667c:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(p_Motor->GpioxMotor[0] , p_Motor->GpioPinMotor[0] , GPIO_PIN_RESET);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6818      	ldr	r0, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	891b      	ldrh	r3, [r3, #8]
 8006686:	2200      	movs	r2, #0
 8006688:	4619      	mov	r1, r3
 800668a:	f7fc f937 	bl	80028fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(p_Motor->GpioxMotor[1] , p_Motor->GpioPinMotor[1] , GPIO_PIN_SET);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6858      	ldr	r0, [r3, #4]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	895b      	ldrh	r3, [r3, #10]
 8006696:	2201      	movs	r2, #1
 8006698:	4619      	mov	r1, r3
 800669a:	f7fc f92f 	bl	80028fc <HAL_GPIO_WritePin>
    }
    return l_EcuStatus;
 800669e:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <motor_stop>:
  * @brief This function stops the motor
  * @param p_Motor object of motor
  * @return ecu_status_t status of the operation
 */
ecu_status_t motor_stop(motor_t *p_Motor)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
    ecu_status_t l_EcuStatus = ECU_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_Motor)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d102      	bne.n	80066c0 <motor_stop+0x18>
    {
        l_EcuStatus = ECU_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	73fb      	strb	r3, [r7, #15]
 80066be:	e016      	b.n	80066ee <motor_stop+0x46>
    }
    else
    {
    	l_EcuStatus = motor_change_speed(p_Motor , ZERO);
 80066c0:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80066f8 <motor_stop+0x50>
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f819 	bl	80066fc <motor_change_speed>
 80066ca:	4603      	mov	r3, r0
 80066cc:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(p_Motor->GpioxMotor[0] , p_Motor->GpioPinMotor[0] , GPIO_PIN_RESET);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	891b      	ldrh	r3, [r3, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	4619      	mov	r1, r3
 80066da:	f7fc f90f 	bl	80028fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(p_Motor->GpioxMotor[1] , p_Motor->GpioPinMotor[1] , GPIO_PIN_RESET);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6858      	ldr	r0, [r3, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	895b      	ldrh	r3, [r3, #10]
 80066e6:	2200      	movs	r2, #0
 80066e8:	4619      	mov	r1, r3
 80066ea:	f7fc f907 	bl	80028fc <HAL_GPIO_WritePin>
    }
    return l_EcuStatus;
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	00000000 	.word	0x00000000

080066fc <motor_change_speed>:
  * @param p_Motor pin of motor
  * @param p_Speed speed of motor
  * @return ecu_status_t status of the operation
 */
ecu_status_t motor_change_speed(motor_t *p_Motor , float_t p_Speed)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	ed87 0a00 	vstr	s0, [r7]
    ecu_status_t l_EcuStatus = ECU_OK;
 8006708:	2300      	movs	r3, #0
 800670a:	75fb      	strb	r3, [r7, #23]
    if (NULL == p_Motor)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d102      	bne.n	8006718 <motor_change_speed+0x1c>
    {
        l_EcuStatus = ECU_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	75fb      	strb	r3, [r7, #23]
 8006716:	e036      	b.n	8006786 <motor_change_speed+0x8a>
    }
    else
    {
        // get the value of duty cycle in percentage
        float_t l_PwmDutyCycle = (float_t)((float_t)(p_Speed) / (float_t)MaxClibratedSpeed);
 8006718:	4b1e      	ldr	r3, [pc, #120]	@ (8006794 <motor_change_speed+0x98>)
 800671a:	ed93 7a00 	vldr	s14, [r3]
 800671e:	edd7 6a00 	vldr	s13, [r7]
 8006722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006726:	edc7 7a04 	vstr	s15, [r7, #16]
        // get the value of CCRx Register
        uint32_t l_PwmCCR = (uint32_t)(l_PwmDutyCycle * TIMER_AUTO_RELOAD_VAL);
 800672a:	edd7 7a04 	vldr	s15, [r7, #16]
 800672e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8006798 <motor_change_speed+0x9c>
 8006732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800673a:	ee17 3a90 	vmov	r3, s15
 800673e:	60fb      	str	r3, [r7, #12]
        // change the output duty cycle of the timer
        __HAL_TIM_SetCompare(p_Motor->SelectedTimer, p_Motor->SelectedChannel, l_PwmCCR);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	7c1b      	ldrb	r3, [r3, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d105      	bne.n	8006754 <motor_change_speed+0x58>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	635a      	str	r2, [r3, #52]	@ 0x34
 8006752:	e018      	b.n	8006786 <motor_change_speed+0x8a>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	7c1b      	ldrb	r3, [r3, #16]
 8006758:	2b04      	cmp	r3, #4
 800675a:	d105      	bne.n	8006768 <motor_change_speed+0x6c>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6393      	str	r3, [r2, #56]	@ 0x38
 8006766:	e00e      	b.n	8006786 <motor_change_speed+0x8a>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	7c1b      	ldrb	r3, [r3, #16]
 800676c:	2b08      	cmp	r3, #8
 800676e:	d105      	bne.n	800677c <motor_change_speed+0x80>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800677a:	e004      	b.n	8006786 <motor_change_speed+0x8a>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6413      	str	r3, [r2, #64]	@ 0x40
    }
    return l_EcuStatus;
 8006786:	7dfb      	ldrb	r3, [r7, #23]
}
 8006788:	4618      	mov	r0, r3
 800678a:	371c      	adds	r7, #28
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	20000214 	.word	0x20000214
 8006798:	45833800 	.word	0x45833800
 800679c:	00000000 	.word	0x00000000

080067a0 <robot_manual_move>:
  * @param p_Vy speed in y direction (m/s)
  * @param p_Wz angular speed (radian per second)
  * @return ecu_status_t status of the operation
 */
ecu_status_t robot_manual_move(robot_t *p_Robot , float_t p_Vx , float_t p_Vy, float_t p_Wz)
{
 80067a0:	b5b0      	push	{r4, r5, r7, lr}
 80067a2:	b08c      	sub	sp, #48	@ 0x30
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80067ac:	edc7 0a01 	vstr	s1, [r7, #4]
 80067b0:	ed87 1a00 	vstr	s2, [r7]
	ecu_status_t l_EcuStatus = ECU_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (NULL == p_Robot)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d103      	bne.n	80067c8 <robot_manual_move+0x28>
    {
        l_EcuStatus = ECU_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80067c6:	e1d0      	b.n	8006b6a <robot_manual_move+0x3ca>
    }
    else
    {
    	float_t l_AngularVelocityFrontLeft  = 0;   // Wfl
 80067c8:	f04f 0300 	mov.w	r3, #0
 80067cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    	float_t l_AngularVelocityFrontRight = 0;   // Wfr
 80067ce:	f04f 0300 	mov.w	r3, #0
 80067d2:	627b      	str	r3, [r7, #36]	@ 0x24
    	float_t l_AngularVelocityRearLeft   = 0;   // Wrl
 80067d4:	f04f 0300 	mov.w	r3, #0
 80067d8:	623b      	str	r3, [r7, #32]
    	float_t l_AngularVelocityRearRight  = 0;   // Wrr
 80067da:	f04f 0300 	mov.w	r3, #0
 80067de:	61fb      	str	r3, [r7, #28]
    	float_t l_LinearVelocityXAxis       = 0;   // Vx
 80067e0:	f04f 0300 	mov.w	r3, #0
 80067e4:	61bb      	str	r3, [r7, #24]
    	float_t l_LinearVelocityYAxis       = 0;   // Vy
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	617b      	str	r3, [r7, #20]
    	float_t l_AngularVelocityRobotBase  = 0;   // Wz
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	613b      	str	r3, [r7, #16]

		l_LinearVelocityXAxis      = p_Vx;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	61bb      	str	r3, [r7, #24]
		l_LinearVelocityYAxis      = p_Vy;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	617b      	str	r3, [r7, #20]
		l_AngularVelocityRobotBase = p_Wz;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	613b      	str	r3, [r7, #16]

		p_Robot->Vx = l_LinearVelocityXAxis;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
		p_Robot->Vy = l_LinearVelocityYAxis;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
		p_Robot->Wz = l_AngularVelocityRobotBase;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168

		// calculate the speed of each wheel
    	l_AngularVelocityFrontLeft  = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis - l_LinearVelocityYAxis -
 8006816:	ed97 7a06 	vldr	s14, [r7, #24]
 800681a:	edd7 7a05 	vldr	s15, [r7, #20]
 800681e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006822:	ee17 0a90 	vmov	r0, s15
 8006826:	f7f9 fe3f 	bl	80004a8 <__aeabi_f2d>
 800682a:	4604      	mov	r4, r0
 800682c:	460d      	mov	r5, r1
    								  ((ROBOT_LENGHT_X + ROBOT_LENGHT_Y) * l_AngularVelocityRobotBase)));
 800682e:	6938      	ldr	r0, [r7, #16]
 8006830:	f7f9 fe3a 	bl	80004a8 <__aeabi_f2d>
 8006834:	a3d0      	add	r3, pc, #832	@ (adr r3, 8006b78 <robot_manual_move+0x3d8>)
 8006836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683a:	f7f9 fe8d 	bl	8000558 <__aeabi_dmul>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
    	l_AngularVelocityFrontLeft  = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis - l_LinearVelocityYAxis -
 8006842:	4620      	mov	r0, r4
 8006844:	4629      	mov	r1, r5
 8006846:	f7f9 fccf 	bl	80001e8 <__aeabi_dsub>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4610      	mov	r0, r2
 8006850:	4619      	mov	r1, r3
 8006852:	a3cb      	add	r3, pc, #812	@ (adr r3, 8006b80 <robot_manual_move+0x3e0>)
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	f7f9 fe7e 	bl	8000558 <__aeabi_dmul>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	4610      	mov	r0, r2
 8006862:	4619      	mov	r1, r3
 8006864:	f7fa f93a 	bl	8000adc <__aeabi_d2f>
 8006868:	4603      	mov	r3, r0
 800686a:	62bb      	str	r3, [r7, #40]	@ 0x28
    	l_AngularVelocityFrontRight = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis + l_LinearVelocityYAxis +
 800686c:	ed97 7a06 	vldr	s14, [r7, #24]
 8006870:	edd7 7a05 	vldr	s15, [r7, #20]
 8006874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006878:	ee17 0a90 	vmov	r0, s15
 800687c:	f7f9 fe14 	bl	80004a8 <__aeabi_f2d>
 8006880:	4604      	mov	r4, r0
 8006882:	460d      	mov	r5, r1
    								  ((ROBOT_LENGHT_X + ROBOT_LENGHT_Y) * l_AngularVelocityRobotBase)));
 8006884:	6938      	ldr	r0, [r7, #16]
 8006886:	f7f9 fe0f 	bl	80004a8 <__aeabi_f2d>
 800688a:	a3bb      	add	r3, pc, #748	@ (adr r3, 8006b78 <robot_manual_move+0x3d8>)
 800688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006890:	f7f9 fe62 	bl	8000558 <__aeabi_dmul>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
    	l_AngularVelocityFrontRight = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis + l_LinearVelocityYAxis +
 8006898:	4620      	mov	r0, r4
 800689a:	4629      	mov	r1, r5
 800689c:	f7f9 fca6 	bl	80001ec <__adddf3>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4610      	mov	r0, r2
 80068a6:	4619      	mov	r1, r3
 80068a8:	a3b5      	add	r3, pc, #724	@ (adr r3, 8006b80 <robot_manual_move+0x3e0>)
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	f7f9 fe53 	bl	8000558 <__aeabi_dmul>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	4610      	mov	r0, r2
 80068b8:	4619      	mov	r1, r3
 80068ba:	f7fa f90f 	bl	8000adc <__aeabi_d2f>
 80068be:	4603      	mov	r3, r0
 80068c0:	627b      	str	r3, [r7, #36]	@ 0x24
    	l_AngularVelocityRearLeft   = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis + l_LinearVelocityYAxis -
 80068c2:	ed97 7a06 	vldr	s14, [r7, #24]
 80068c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80068ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ce:	ee17 0a90 	vmov	r0, s15
 80068d2:	f7f9 fde9 	bl	80004a8 <__aeabi_f2d>
 80068d6:	4604      	mov	r4, r0
 80068d8:	460d      	mov	r5, r1
    								  ((ROBOT_LENGHT_X + ROBOT_LENGHT_Y) * l_AngularVelocityRobotBase)));
 80068da:	6938      	ldr	r0, [r7, #16]
 80068dc:	f7f9 fde4 	bl	80004a8 <__aeabi_f2d>
 80068e0:	a3a5      	add	r3, pc, #660	@ (adr r3, 8006b78 <robot_manual_move+0x3d8>)
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	f7f9 fe37 	bl	8000558 <__aeabi_dmul>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
    	l_AngularVelocityRearLeft   = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis + l_LinearVelocityYAxis -
 80068ee:	4620      	mov	r0, r4
 80068f0:	4629      	mov	r1, r5
 80068f2:	f7f9 fc79 	bl	80001e8 <__aeabi_dsub>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	4610      	mov	r0, r2
 80068fc:	4619      	mov	r1, r3
 80068fe:	a3a0      	add	r3, pc, #640	@ (adr r3, 8006b80 <robot_manual_move+0x3e0>)
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	f7f9 fe28 	bl	8000558 <__aeabi_dmul>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	4610      	mov	r0, r2
 800690e:	4619      	mov	r1, r3
 8006910:	f7fa f8e4 	bl	8000adc <__aeabi_d2f>
 8006914:	4603      	mov	r3, r0
 8006916:	623b      	str	r3, [r7, #32]
    	l_AngularVelocityRearRight  = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis - l_LinearVelocityYAxis +
 8006918:	ed97 7a06 	vldr	s14, [r7, #24]
 800691c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006924:	ee17 0a90 	vmov	r0, s15
 8006928:	f7f9 fdbe 	bl	80004a8 <__aeabi_f2d>
 800692c:	4604      	mov	r4, r0
 800692e:	460d      	mov	r5, r1
    								  ((ROBOT_LENGHT_X + ROBOT_LENGHT_Y) * l_AngularVelocityRobotBase)));
 8006930:	6938      	ldr	r0, [r7, #16]
 8006932:	f7f9 fdb9 	bl	80004a8 <__aeabi_f2d>
 8006936:	a390      	add	r3, pc, #576	@ (adr r3, 8006b78 <robot_manual_move+0x3d8>)
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	f7f9 fe0c 	bl	8000558 <__aeabi_dmul>
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
    	l_AngularVelocityRearRight  = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis - l_LinearVelocityYAxis +
 8006944:	4620      	mov	r0, r4
 8006946:	4629      	mov	r1, r5
 8006948:	f7f9 fc50 	bl	80001ec <__adddf3>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4610      	mov	r0, r2
 8006952:	4619      	mov	r1, r3
 8006954:	a38a      	add	r3, pc, #552	@ (adr r3, 8006b80 <robot_manual_move+0x3e0>)
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	f7f9 fdfd 	bl	8000558 <__aeabi_dmul>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4610      	mov	r0, r2
 8006964:	4619      	mov	r1, r3
 8006966:	f7fa f8b9 	bl	8000adc <__aeabi_d2f>
 800696a:	4603      	mov	r3, r0
 800696c:	61fb      	str	r3, [r7, #28]

		// store the speed of each wheel
    	p_Robot->FL.Speed = fabs(RPS_TO_RPM(l_AngularVelocityFrontLeft ));
 800696e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006970:	f7f9 fd9a 	bl	80004a8 <__aeabi_f2d>
 8006974:	a384      	add	r3, pc, #528	@ (adr r3, 8006b88 <robot_manual_move+0x3e8>)
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	f7f9 fded 	bl	8000558 <__aeabi_dmul>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4610      	mov	r0, r2
 8006984:	4619      	mov	r1, r3
 8006986:	f7fa f8a9 	bl	8000adc <__aeabi_d2f>
 800698a:	ee07 0a90 	vmov	s15, r0
 800698e:	eef0 7ae7 	vabs.f32	s15, s15
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	edc3 7a05 	vstr	s15, [r3, #20]
    	p_Robot->FR.Speed = fabs(RPS_TO_RPM(l_AngularVelocityFrontRight));
 8006998:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800699a:	f7f9 fd85 	bl	80004a8 <__aeabi_f2d>
 800699e:	a37a      	add	r3, pc, #488	@ (adr r3, 8006b88 <robot_manual_move+0x3e8>)
 80069a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a4:	f7f9 fdd8 	bl	8000558 <__aeabi_dmul>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4610      	mov	r0, r2
 80069ae:	4619      	mov	r1, r3
 80069b0:	f7fa f894 	bl	8000adc <__aeabi_d2f>
 80069b4:	ee07 0a90 	vmov	s15, r0
 80069b8:	eef0 7ae7 	vabs.f32	s15, s15
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    	p_Robot->RL.Speed = fabs(RPS_TO_RPM(l_AngularVelocityRearLeft  ));
 80069c2:	6a38      	ldr	r0, [r7, #32]
 80069c4:	f7f9 fd70 	bl	80004a8 <__aeabi_f2d>
 80069c8:	a36f      	add	r3, pc, #444	@ (adr r3, 8006b88 <robot_manual_move+0x3e8>)
 80069ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ce:	f7f9 fdc3 	bl	8000558 <__aeabi_dmul>
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	4610      	mov	r0, r2
 80069d8:	4619      	mov	r1, r3
 80069da:	f7fa f87f 	bl	8000adc <__aeabi_d2f>
 80069de:	ee07 0a90 	vmov	s15, r0
 80069e2:	eef0 7ae7 	vabs.f32	s15, s15
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
    	p_Robot->RR.Speed = fabs(RPS_TO_RPM(l_AngularVelocityRearRight ));
 80069ec:	69f8      	ldr	r0, [r7, #28]
 80069ee:	f7f9 fd5b 	bl	80004a8 <__aeabi_f2d>
 80069f2:	a365      	add	r3, pc, #404	@ (adr r3, 8006b88 <robot_manual_move+0x3e8>)
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	f7f9 fdae 	bl	8000558 <__aeabi_dmul>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	4610      	mov	r0, r2
 8006a02:	4619      	mov	r1, r3
 8006a04:	f7fa f86a 	bl	8000adc <__aeabi_d2f>
 8006a08:	ee07 0a90 	vmov	s15, r0
 8006a0c:	eef0 7ae7 	vabs.f32	s15, s15
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4

		// determine the direction of Front Left motor rotation then store and move it 
    	if(l_AngularVelocityFrontLeft < 0)
 8006a16:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006a1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a22:	d50f      	bpl.n	8006a44 <robot_manual_move+0x2a4>
    	{
    		p_Robot->FL.Direction = BACWARD;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2201      	movs	r2, #1
 8006a28:	761a      	strb	r2, [r3, #24]
    		l_EcuStatus = motor_move_backward(&p_Robot->FL.Motor , p_Robot->FL.Speed);
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006a32:	eeb0 0a67 	vmov.f32	s0, s15
 8006a36:	4610      	mov	r0, r2
 8006a38:	f7ff fe0c 	bl	8006654 <motor_move_backward>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006a42:	e00e      	b.n	8006a62 <robot_manual_move+0x2c2>
    	}
    	else
    	{
    		p_Robot->FL.Direction = FORWARD;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	761a      	strb	r2, [r3, #24]
    		l_EcuStatus = motor_move_forward(&p_Robot->FL.Motor , p_Robot->FL.Speed);
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006a52:	eeb0 0a67 	vmov.f32	s0, s15
 8006a56:	4610      	mov	r0, r2
 8006a58:	f7ff fdd2 	bl	8006600 <motor_move_forward>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    	}
		// determine the direction of Front Right motor rotation then store and move it 
    	if(l_AngularVelocityFrontRight < 0)
 8006a62:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006a66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6e:	d512      	bpl.n	8006a96 <robot_manual_move+0x2f6>
    	{
    	    p_Robot->FR.Direction = BACWARD;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    	    l_EcuStatus = motor_move_backward(&p_Robot->FR.Motor , p_Robot->FR.Speed);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8006a84:	eeb0 0a67 	vmov.f32	s0, s15
 8006a88:	4610      	mov	r0, r2
 8006a8a:	f7ff fde3 	bl	8006654 <motor_move_backward>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006a94:	e011      	b.n	8006aba <robot_manual_move+0x31a>
    	}
    	else
    	{
    	    p_Robot->FR.Direction = FORWARD;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    	    l_EcuStatus = motor_move_forward(&p_Robot->FR.Motor , p_Robot->FR.Speed);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8006aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8006aae:	4610      	mov	r0, r2
 8006ab0:	f7ff fda6 	bl	8006600 <motor_move_forward>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    	}
		// determine the direction of Rear Left motor rotation then store and move it 
    	if(l_AngularVelocityRearLeft < 0)
 8006aba:	edd7 7a08 	vldr	s15, [r7, #32]
 8006abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac6:	d512      	bpl.n	8006aee <robot_manual_move+0x34e>
    	{
    	    p_Robot->RL.Direction = BACWARD;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    	    l_EcuStatus = motor_move_backward(&p_Robot->RL.Motor , p_Robot->RL.Speed);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8006adc:	eeb0 0a67 	vmov.f32	s0, s15
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	f7ff fdb7 	bl	8006654 <motor_move_backward>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006aec:	e011      	b.n	8006b12 <robot_manual_move+0x372>
    	}
    	else
    	{
    	    p_Robot->RL.Direction = FORWARD;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    	    l_EcuStatus = motor_move_forward(&p_Robot->RL.Motor , p_Robot->RL.Speed);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8006b02:	eeb0 0a67 	vmov.f32	s0, s15
 8006b06:	4610      	mov	r0, r2
 8006b08:	f7ff fd7a 	bl	8006600 <motor_move_forward>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    	}
		// determine the direction of Rear Right motor rotation then store and move it 
    	if(l_AngularVelocityRearRight < 0)
 8006b12:	edd7 7a07 	vldr	s15, [r7, #28]
 8006b16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b1e:	d512      	bpl.n	8006b46 <robot_manual_move+0x3a6>
    	{
    	    p_Robot->RR.Direction = BACWARD;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    	    l_EcuStatus = motor_move_backward(&p_Robot->RR.Motor , p_Robot->RR.Speed);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 8006b34:	eeb0 0a67 	vmov.f32	s0, s15
 8006b38:	4610      	mov	r0, r2
 8006b3a:	f7ff fd8b 	bl	8006654 <motor_move_backward>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006b44:	e011      	b.n	8006b6a <robot_manual_move+0x3ca>
    	}
    	else
    	{
    	    p_Robot->RR.Direction = FORWARD;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    	    l_EcuStatus = motor_move_forward(&p_Robot->RR.Motor , p_Robot->RR.Speed);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 8006b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8006b5e:	4610      	mov	r0, r2
 8006b60:	f7ff fd4e 	bl	8006600 <motor_move_forward>
 8006b64:	4603      	mov	r3, r0
 8006b66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    	}
    }
	return l_EcuStatus;
 8006b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3730      	adds	r7, #48	@ 0x30
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bdb0      	pop	{r4, r5, r7, pc}
 8006b76:	bf00      	nop
 8006b78:	eb851eb8 	.word	0xeb851eb8
 8006b7c:	3fc6b851 	.word	0x3fc6b851
 8006b80:	aaaaaaab 	.word	0xaaaaaaab
 8006b84:	4040aaaa 	.word	0x4040aaaa
 8006b88:	66ed2bfb 	.word	0x66ed2bfb
 8006b8c:	4023193d 	.word	0x4023193d

08006b90 <robot_move>:
  * @param p_Angle angle of robot of motor
  * @param p_Speed speed of motor
  * @return ecu_status_t status of the operation
 */
ecu_status_t robot_move(robot_t *p_Robot , float_t p_Angle , float_t p_Speed)
{
 8006b90:	b5b0      	push	{r4, r5, r7, lr}
 8006b92:	b08c      	sub	sp, #48	@ 0x30
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	ed87 0a02 	vstr	s0, [r7, #8]
 8006b9c:	edc7 0a01 	vstr	s1, [r7, #4]
	ecu_status_t l_EcuStatus = ECU_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (NULL == p_Robot)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d103      	bne.n	8006bb4 <robot_move+0x24>
    {
        l_EcuStatus = ECU_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006bb2:	e250      	b.n	8007056 <robot_move+0x4c6>
    }
    else
    {
    	float_t l_AngularVelocityFrontLeft  = 0;   // Wfl
 8006bb4:	f04f 0300 	mov.w	r3, #0
 8006bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    	float_t l_AngularVelocityFrontRight = 0;   // Wfr
 8006bba:	f04f 0300 	mov.w	r3, #0
 8006bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    	float_t l_AngularVelocityRearLeft   = 0;   // Wrl
 8006bc0:	f04f 0300 	mov.w	r3, #0
 8006bc4:	623b      	str	r3, [r7, #32]
    	float_t l_AngularVelocityRearRight  = 0;   // Wrr
 8006bc6:	f04f 0300 	mov.w	r3, #0
 8006bca:	61fb      	str	r3, [r7, #28]
    	float_t l_LinearVelocityXAxis       = 0;   // Vx
 8006bcc:	f04f 0300 	mov.w	r3, #0
 8006bd0:	61bb      	str	r3, [r7, #24]
    	float_t l_LinearVelocityYAxis       = 0;   // Vy
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]
    	float_t l_AngularVelocityRobotBase  = p_Robot->Wz;   // Wz
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8006bde:	613b      	str	r3, [r7, #16]

    	p_Speed = roundf(100 * p_Speed) / 100.0;
 8006be0:	edd7 7a01 	vldr	s15, [r7, #4]
 8006be4:	ed9f 7ad0 	vldr	s14, [pc, #832]	@ 8006f28 <robot_move+0x398>
 8006be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bec:	eeb0 0a67 	vmov.f32	s0, s15
 8006bf0:	f004 ffd2 	bl	800bb98 <roundf>
 8006bf4:	eeb0 7a40 	vmov.f32	s14, s0
 8006bf8:	eddf 6acb 	vldr	s13, [pc, #812]	@ 8006f28 <robot_move+0x398>
 8006bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c00:	edc7 7a01 	vstr	s15, [r7, #4]
		// convert velocity and angle to x and y velocity
    	l_LinearVelocityXAxis = p_Speed * cos(DEGREE_TO_RADIAN(p_Angle));
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7f9 fc4f 	bl	80004a8 <__aeabi_f2d>
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	460d      	mov	r5, r1
 8006c0e:	68b8      	ldr	r0, [r7, #8]
 8006c10:	f7f9 fc4a 	bl	80004a8 <__aeabi_f2d>
 8006c14:	a3bc      	add	r3, pc, #752	@ (adr r3, 8006f08 <robot_move+0x378>)
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f7f9 fc9d 	bl	8000558 <__aeabi_dmul>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4610      	mov	r0, r2
 8006c24:	4619      	mov	r1, r3
 8006c26:	f04f 0200 	mov.w	r2, #0
 8006c2a:	4bc0      	ldr	r3, [pc, #768]	@ (8006f2c <robot_move+0x39c>)
 8006c2c:	f7f9 fdbe 	bl	80007ac <__aeabi_ddiv>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	ec43 2b17 	vmov	d7, r2, r3
 8006c38:	eeb0 0a47 	vmov.f32	s0, s14
 8006c3c:	eef0 0a67 	vmov.f32	s1, s15
 8006c40:	f004 ff02 	bl	800ba48 <cos>
 8006c44:	ec53 2b10 	vmov	r2, r3, d0
 8006c48:	4620      	mov	r0, r4
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	f7f9 fc84 	bl	8000558 <__aeabi_dmul>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4610      	mov	r0, r2
 8006c56:	4619      	mov	r1, r3
 8006c58:	f7f9 ff40 	bl	8000adc <__aeabi_d2f>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	61bb      	str	r3, [r7, #24]
    	l_LinearVelocityYAxis = p_Speed * sin(DEGREE_TO_RADIAN(p_Angle));
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7f9 fc21 	bl	80004a8 <__aeabi_f2d>
 8006c66:	4604      	mov	r4, r0
 8006c68:	460d      	mov	r5, r1
 8006c6a:	68b8      	ldr	r0, [r7, #8]
 8006c6c:	f7f9 fc1c 	bl	80004a8 <__aeabi_f2d>
 8006c70:	a3a5      	add	r3, pc, #660	@ (adr r3, 8006f08 <robot_move+0x378>)
 8006c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c76:	f7f9 fc6f 	bl	8000558 <__aeabi_dmul>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4610      	mov	r0, r2
 8006c80:	4619      	mov	r1, r3
 8006c82:	f04f 0200 	mov.w	r2, #0
 8006c86:	4ba9      	ldr	r3, [pc, #676]	@ (8006f2c <robot_move+0x39c>)
 8006c88:	f7f9 fd90 	bl	80007ac <__aeabi_ddiv>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	ec43 2b17 	vmov	d7, r2, r3
 8006c94:	eeb0 0a47 	vmov.f32	s0, s14
 8006c98:	eef0 0a67 	vmov.f32	s1, s15
 8006c9c:	f004 ff28 	bl	800baf0 <sin>
 8006ca0:	ec53 2b10 	vmov	r2, r3, d0
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	f7f9 fc56 	bl	8000558 <__aeabi_dmul>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	f7f9 ff12 	bl	8000adc <__aeabi_d2f>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	617b      	str	r3, [r7, #20]

		p_Robot->Vx = l_LinearVelocityXAxis;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
		p_Robot->Vy = l_LinearVelocityYAxis;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
		p_Robot->Wz = l_AngularVelocityRobotBase;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168

		// calculate the speed of each wheel
    	l_AngularVelocityFrontLeft  = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis - l_LinearVelocityYAxis -
 8006cd4:	ed97 7a06 	vldr	s14, [r7, #24]
 8006cd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8006cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ce0:	ee17 0a90 	vmov	r0, s15
 8006ce4:	f7f9 fbe0 	bl	80004a8 <__aeabi_f2d>
 8006ce8:	4604      	mov	r4, r0
 8006cea:	460d      	mov	r5, r1
    								  ((ROBOT_LENGHT_X + ROBOT_LENGHT_Y) * l_AngularVelocityRobotBase)));
 8006cec:	6938      	ldr	r0, [r7, #16]
 8006cee:	f7f9 fbdb 	bl	80004a8 <__aeabi_f2d>
 8006cf2:	a387      	add	r3, pc, #540	@ (adr r3, 8006f10 <robot_move+0x380>)
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	f7f9 fc2e 	bl	8000558 <__aeabi_dmul>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
    	l_AngularVelocityFrontLeft  = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis - l_LinearVelocityYAxis -
 8006d00:	4620      	mov	r0, r4
 8006d02:	4629      	mov	r1, r5
 8006d04:	f7f9 fa70 	bl	80001e8 <__aeabi_dsub>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	4619      	mov	r1, r3
 8006d10:	a381      	add	r3, pc, #516	@ (adr r3, 8006f18 <robot_move+0x388>)
 8006d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d16:	f7f9 fc1f 	bl	8000558 <__aeabi_dmul>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4610      	mov	r0, r2
 8006d20:	4619      	mov	r1, r3
 8006d22:	f7f9 fedb 	bl	8000adc <__aeabi_d2f>
 8006d26:	4603      	mov	r3, r0
 8006d28:	62bb      	str	r3, [r7, #40]	@ 0x28
    	l_AngularVelocityFrontRight = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis + l_LinearVelocityYAxis +
 8006d2a:	ed97 7a06 	vldr	s14, [r7, #24]
 8006d2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d36:	ee17 0a90 	vmov	r0, s15
 8006d3a:	f7f9 fbb5 	bl	80004a8 <__aeabi_f2d>
 8006d3e:	4604      	mov	r4, r0
 8006d40:	460d      	mov	r5, r1
    								  ((ROBOT_LENGHT_X + ROBOT_LENGHT_Y) * l_AngularVelocityRobotBase)));
 8006d42:	6938      	ldr	r0, [r7, #16]
 8006d44:	f7f9 fbb0 	bl	80004a8 <__aeabi_f2d>
 8006d48:	a371      	add	r3, pc, #452	@ (adr r3, 8006f10 <robot_move+0x380>)
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	f7f9 fc03 	bl	8000558 <__aeabi_dmul>
 8006d52:	4602      	mov	r2, r0
 8006d54:	460b      	mov	r3, r1
    	l_AngularVelocityFrontRight = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis + l_LinearVelocityYAxis +
 8006d56:	4620      	mov	r0, r4
 8006d58:	4629      	mov	r1, r5
 8006d5a:	f7f9 fa47 	bl	80001ec <__adddf3>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4610      	mov	r0, r2
 8006d64:	4619      	mov	r1, r3
 8006d66:	a36c      	add	r3, pc, #432	@ (adr r3, 8006f18 <robot_move+0x388>)
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	f7f9 fbf4 	bl	8000558 <__aeabi_dmul>
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	4610      	mov	r0, r2
 8006d76:	4619      	mov	r1, r3
 8006d78:	f7f9 feb0 	bl	8000adc <__aeabi_d2f>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    	l_AngularVelocityRearLeft   = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis + l_LinearVelocityYAxis -
 8006d80:	ed97 7a06 	vldr	s14, [r7, #24]
 8006d84:	edd7 7a05 	vldr	s15, [r7, #20]
 8006d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d8c:	ee17 0a90 	vmov	r0, s15
 8006d90:	f7f9 fb8a 	bl	80004a8 <__aeabi_f2d>
 8006d94:	4604      	mov	r4, r0
 8006d96:	460d      	mov	r5, r1
    								  ((ROBOT_LENGHT_X + ROBOT_LENGHT_Y) * l_AngularVelocityRobotBase)));
 8006d98:	6938      	ldr	r0, [r7, #16]
 8006d9a:	f7f9 fb85 	bl	80004a8 <__aeabi_f2d>
 8006d9e:	a35c      	add	r3, pc, #368	@ (adr r3, 8006f10 <robot_move+0x380>)
 8006da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da4:	f7f9 fbd8 	bl	8000558 <__aeabi_dmul>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
    	l_AngularVelocityRearLeft   = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis + l_LinearVelocityYAxis -
 8006dac:	4620      	mov	r0, r4
 8006dae:	4629      	mov	r1, r5
 8006db0:	f7f9 fa1a 	bl	80001e8 <__aeabi_dsub>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4610      	mov	r0, r2
 8006dba:	4619      	mov	r1, r3
 8006dbc:	a356      	add	r3, pc, #344	@ (adr r3, 8006f18 <robot_move+0x388>)
 8006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc2:	f7f9 fbc9 	bl	8000558 <__aeabi_dmul>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4610      	mov	r0, r2
 8006dcc:	4619      	mov	r1, r3
 8006dce:	f7f9 fe85 	bl	8000adc <__aeabi_d2f>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	623b      	str	r3, [r7, #32]
    	l_AngularVelocityRearRight  = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis - l_LinearVelocityYAxis +
 8006dd6:	ed97 7a06 	vldr	s14, [r7, #24]
 8006dda:	edd7 7a05 	vldr	s15, [r7, #20]
 8006dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006de2:	ee17 0a90 	vmov	r0, s15
 8006de6:	f7f9 fb5f 	bl	80004a8 <__aeabi_f2d>
 8006dea:	4604      	mov	r4, r0
 8006dec:	460d      	mov	r5, r1
    								  ((ROBOT_LENGHT_X + ROBOT_LENGHT_Y) * l_AngularVelocityRobotBase)));
 8006dee:	6938      	ldr	r0, [r7, #16]
 8006df0:	f7f9 fb5a 	bl	80004a8 <__aeabi_f2d>
 8006df4:	a346      	add	r3, pc, #280	@ (adr r3, 8006f10 <robot_move+0x380>)
 8006df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfa:	f7f9 fbad 	bl	8000558 <__aeabi_dmul>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
    	l_AngularVelocityRearRight  = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis - l_LinearVelocityYAxis +
 8006e02:	4620      	mov	r0, r4
 8006e04:	4629      	mov	r1, r5
 8006e06:	f7f9 f9f1 	bl	80001ec <__adddf3>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4610      	mov	r0, r2
 8006e10:	4619      	mov	r1, r3
 8006e12:	a341      	add	r3, pc, #260	@ (adr r3, 8006f18 <robot_move+0x388>)
 8006e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e18:	f7f9 fb9e 	bl	8000558 <__aeabi_dmul>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4610      	mov	r0, r2
 8006e22:	4619      	mov	r1, r3
 8006e24:	f7f9 fe5a 	bl	8000adc <__aeabi_d2f>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	61fb      	str	r3, [r7, #28]

		// store the speed of each wheel
    	p_Robot->FL.Speed = fabs(RPS_TO_RPM(l_AngularVelocityFrontLeft ));
 8006e2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e2e:	f7f9 fb3b 	bl	80004a8 <__aeabi_f2d>
 8006e32:	a33b      	add	r3, pc, #236	@ (adr r3, 8006f20 <robot_move+0x390>)
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	f7f9 fb8e 	bl	8000558 <__aeabi_dmul>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4610      	mov	r0, r2
 8006e42:	4619      	mov	r1, r3
 8006e44:	f7f9 fe4a 	bl	8000adc <__aeabi_d2f>
 8006e48:	ee07 0a90 	vmov	s15, r0
 8006e4c:	eef0 7ae7 	vabs.f32	s15, s15
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	edc3 7a05 	vstr	s15, [r3, #20]
    	p_Robot->FR.Speed = fabs(RPS_TO_RPM(l_AngularVelocityFrontRight));
 8006e56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006e58:	f7f9 fb26 	bl	80004a8 <__aeabi_f2d>
 8006e5c:	a330      	add	r3, pc, #192	@ (adr r3, 8006f20 <robot_move+0x390>)
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	f7f9 fb79 	bl	8000558 <__aeabi_dmul>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	f7f9 fe35 	bl	8000adc <__aeabi_d2f>
 8006e72:	ee07 0a90 	vmov	s15, r0
 8006e76:	eef0 7ae7 	vabs.f32	s15, s15
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    	p_Robot->RL.Speed = fabs(RPS_TO_RPM(l_AngularVelocityRearLeft  ));
 8006e80:	6a38      	ldr	r0, [r7, #32]
 8006e82:	f7f9 fb11 	bl	80004a8 <__aeabi_f2d>
 8006e86:	a326      	add	r3, pc, #152	@ (adr r3, 8006f20 <robot_move+0x390>)
 8006e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8c:	f7f9 fb64 	bl	8000558 <__aeabi_dmul>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4610      	mov	r0, r2
 8006e96:	4619      	mov	r1, r3
 8006e98:	f7f9 fe20 	bl	8000adc <__aeabi_d2f>
 8006e9c:	ee07 0a90 	vmov	s15, r0
 8006ea0:	eef0 7ae7 	vabs.f32	s15, s15
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
    	p_Robot->RR.Speed = fabs(RPS_TO_RPM(l_AngularVelocityRearRight ));
 8006eaa:	69f8      	ldr	r0, [r7, #28]
 8006eac:	f7f9 fafc 	bl	80004a8 <__aeabi_f2d>
 8006eb0:	a31b      	add	r3, pc, #108	@ (adr r3, 8006f20 <robot_move+0x390>)
 8006eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb6:	f7f9 fb4f 	bl	8000558 <__aeabi_dmul>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	f7f9 fe0b 	bl	8000adc <__aeabi_d2f>
 8006ec6:	ee07 0a90 	vmov	s15, r0
 8006eca:	eef0 7ae7 	vabs.f32	s15, s15
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4

		// determine the direction of Front Left motor rotation then store and move it 
    	if(l_AngularVelocityFrontLeft < 0)
 8006ed4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006ed8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee0:	d526      	bpl.n	8006f30 <robot_move+0x3a0>
    	{
    		p_Robot->FL.Direction = BACWARD;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	761a      	strb	r2, [r3, #24]
    		l_EcuStatus = motor_move_backward(&p_Robot->FL.Motor , p_Robot->FL.Speed);
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	edd3 7a05 	vldr	s15, [r3, #20]
 8006ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	f7ff fbad 	bl	8006654 <motor_move_backward>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006f00:	e025      	b.n	8006f4e <robot_move+0x3be>
 8006f02:	bf00      	nop
 8006f04:	f3af 8000 	nop.w
 8006f08:	54442d18 	.word	0x54442d18
 8006f0c:	400921fb 	.word	0x400921fb
 8006f10:	eb851eb8 	.word	0xeb851eb8
 8006f14:	3fc6b851 	.word	0x3fc6b851
 8006f18:	aaaaaaab 	.word	0xaaaaaaab
 8006f1c:	4040aaaa 	.word	0x4040aaaa
 8006f20:	66ed2bfb 	.word	0x66ed2bfb
 8006f24:	4023193d 	.word	0x4023193d
 8006f28:	42c80000 	.word	0x42c80000
 8006f2c:	40668000 	.word	0x40668000
    	}
    	else
    	{
    		p_Robot->FL.Direction = FORWARD;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	761a      	strb	r2, [r3, #24]
    		l_EcuStatus = motor_move_forward(&p_Robot->FL.Motor , p_Robot->FL.Speed);
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	edd3 7a05 	vldr	s15, [r3, #20]
 8006f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8006f42:	4610      	mov	r0, r2
 8006f44:	f7ff fb5c 	bl	8006600 <motor_move_forward>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    	}
		// determine the direction of Front Right motor rotation then store and move it 
    	if(l_AngularVelocityFrontRight < 0)
 8006f4e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006f52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f5a:	d512      	bpl.n	8006f82 <robot_move+0x3f2>
    	{
    	    p_Robot->FR.Direction = BACWARD;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    	    l_EcuStatus = motor_move_backward(&p_Robot->FR.Motor , p_Robot->FR.Speed);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8006f70:	eeb0 0a67 	vmov.f32	s0, s15
 8006f74:	4610      	mov	r0, r2
 8006f76:	f7ff fb6d 	bl	8006654 <motor_move_backward>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006f80:	e011      	b.n	8006fa6 <robot_move+0x416>
    	}
    	else
    	{
    	    p_Robot->FR.Direction = FORWARD;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    	    l_EcuStatus = motor_move_forward(&p_Robot->FR.Motor , p_Robot->FR.Speed);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8006f96:	eeb0 0a67 	vmov.f32	s0, s15
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	f7ff fb30 	bl	8006600 <motor_move_forward>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    	}
		// determine the direction of Rear Left motor rotation then store and move it 
    	if(l_AngularVelocityRearLeft < 0)
 8006fa6:	edd7 7a08 	vldr	s15, [r7, #32]
 8006faa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb2:	d512      	bpl.n	8006fda <robot_move+0x44a>
    	{
    	    p_Robot->RL.Direction = BACWARD;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    	    l_EcuStatus = motor_move_backward(&p_Robot->RL.Motor , p_Robot->RL.Speed);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8006fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f7ff fb41 	bl	8006654 <motor_move_backward>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006fd8:	e011      	b.n	8006ffe <robot_move+0x46e>
    	}
    	else
    	{
    	    p_Robot->RL.Direction = FORWARD;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    	    l_EcuStatus = motor_move_forward(&p_Robot->RL.Motor , p_Robot->RL.Speed);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8006fee:	eeb0 0a67 	vmov.f32	s0, s15
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	f7ff fb04 	bl	8006600 <motor_move_forward>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    	}
		// determine the direction of Rear Right motor rotation then store and move it 
    	if(l_AngularVelocityRearRight < 0)
 8006ffe:	edd7 7a07 	vldr	s15, [r7, #28]
 8007002:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800700a:	d512      	bpl.n	8007032 <robot_move+0x4a2>
    	{
    	    p_Robot->RR.Direction = BACWARD;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    	    l_EcuStatus = motor_move_backward(&p_Robot->RR.Motor , p_Robot->RR.Speed);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 8007020:	eeb0 0a67 	vmov.f32	s0, s15
 8007024:	4610      	mov	r0, r2
 8007026:	f7ff fb15 	bl	8006654 <motor_move_backward>
 800702a:	4603      	mov	r3, r0
 800702c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007030:	e011      	b.n	8007056 <robot_move+0x4c6>
    	}
    	else
    	{
    	    p_Robot->RR.Direction = FORWARD;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    	    l_EcuStatus = motor_move_forward(&p_Robot->RR.Motor , p_Robot->RR.Speed);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 8007046:	eeb0 0a67 	vmov.f32	s0, s15
 800704a:	4610      	mov	r0, r2
 800704c:	f7ff fad8 	bl	8006600 <motor_move_forward>
 8007050:	4603      	mov	r3, r0
 8007052:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    	}
    }
	return l_EcuStatus;
 8007056:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800705a:	4618      	mov	r0, r3
 800705c:	3730      	adds	r7, #48	@ 0x30
 800705e:	46bd      	mov	sp, r7
 8007060:	bdb0      	pop	{r4, r5, r7, pc}
 8007062:	bf00      	nop
 8007064:	0000      	movs	r0, r0
	...

08007068 <robot_rotate>:
  * @param p_Radius radius of the path
  * @param p_AngularSpeed the angular speed of the robot around this path in RPM
  * @return ecu_status_t status of the operation
 */
ecu_status_t robot_rotate(robot_t *p_Robot , float_t p_Radius , float_t p_AngularSpeed)
{
 8007068:	b5b0      	push	{r4, r5, r7, lr}
 800706a:	b08c      	sub	sp, #48	@ 0x30
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	ed87 0a02 	vstr	s0, [r7, #8]
 8007074:	edc7 0a01 	vstr	s1, [r7, #4]
	ecu_status_t l_EcuStatus = ECU_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (NULL == p_Robot)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d103      	bne.n	800708c <robot_rotate+0x24>
    {
        l_EcuStatus = ECU_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800708a:	e219      	b.n	80074c0 <robot_rotate+0x458>
    }
    else
    {
    	float_t l_AngularVelocityFrontLeft  = 0;   // Wfl
 800708c:	f04f 0300 	mov.w	r3, #0
 8007090:	62bb      	str	r3, [r7, #40]	@ 0x28
    	float_t l_AngularVelocityFrontRight = 0;   // Wfr
 8007092:	f04f 0300 	mov.w	r3, #0
 8007096:	627b      	str	r3, [r7, #36]	@ 0x24
    	float_t l_AngularVelocityRearLeft   = 0;   // Wrl
 8007098:	f04f 0300 	mov.w	r3, #0
 800709c:	623b      	str	r3, [r7, #32]
    	float_t l_AngularVelocityRearRight  = 0;   // Wrr
 800709e:	f04f 0300 	mov.w	r3, #0
 80070a2:	61fb      	str	r3, [r7, #28]
    	float_t l_LinearVelocityXAxis       = 0;   // Vx
 80070a4:	f04f 0300 	mov.w	r3, #0
 80070a8:	61bb      	str	r3, [r7, #24]
    	float_t l_LinearVelocityYAxis       = 0;   // Vy
 80070aa:	f04f 0300 	mov.w	r3, #0
 80070ae:	617b      	str	r3, [r7, #20]
    	float_t l_AngularVelocityRobotBase  = 0;   // Wz
 80070b0:	f04f 0300 	mov.w	r3, #0
 80070b4:	613b      	str	r3, [r7, #16]

		p_AngularSpeed = RPM_TO_RPS(p_AngularSpeed);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7f9 f9f6 	bl	80004a8 <__aeabi_f2d>
 80070bc:	a3df      	add	r3, pc, #892	@ (adr r3, 800743c <robot_rotate+0x3d4>)
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	f7f9 fa49 	bl	8000558 <__aeabi_dmul>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4610      	mov	r0, r2
 80070cc:	4619      	mov	r1, r3
 80070ce:	f7f9 fd05 	bl	8000adc <__aeabi_d2f>
 80070d2:	4603      	mov	r3, r0
 80070d4:	607b      	str	r3, [r7, #4]
    	p_AngularSpeed = roundf(100 * p_AngularSpeed) / 100.0;
 80070d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80070da:	ed9f 7ad7 	vldr	s14, [pc, #860]	@ 8007438 <robot_rotate+0x3d0>
 80070de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80070e2:	eeb0 0a67 	vmov.f32	s0, s15
 80070e6:	f004 fd57 	bl	800bb98 <roundf>
 80070ea:	eeb0 7a40 	vmov.f32	s14, s0
 80070ee:	eddf 6ad2 	vldr	s13, [pc, #840]	@ 8007438 <robot_rotate+0x3d0>
 80070f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070f6:	edc7 7a01 	vstr	s15, [r7, #4]
		// convert velocity and angle to x and y velocity
    	l_LinearVelocityXAxis = p_AngularSpeed * p_Radius;
 80070fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80070fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8007102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007106:	edc7 7a06 	vstr	s15, [r7, #24]
    	l_LinearVelocityYAxis = 0;
 800710a:	f04f 0300 	mov.w	r3, #0
 800710e:	617b      	str	r3, [r7, #20]
		l_AngularVelocityRobotBase = (-1.0) * p_AngularSpeed;
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7f9 f9c9 	bl	80004a8 <__aeabi_f2d>
 8007116:	4602      	mov	r2, r0
 8007118:	460b      	mov	r3, r1
 800711a:	4610      	mov	r0, r2
 800711c:	4619      	mov	r1, r3
 800711e:	f7f9 fcdd 	bl	8000adc <__aeabi_d2f>
 8007122:	4603      	mov	r3, r0
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef1 7a67 	vneg.f32	s15, s15
 800712c:	edc7 7a04 	vstr	s15, [r7, #16]

		p_Robot->Vx = l_LinearVelocityXAxis;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	69ba      	ldr	r2, [r7, #24]
 8007134:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
		p_Robot->Vy = l_LinearVelocityYAxis;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
		p_Robot->Wz = l_AngularVelocityRobotBase;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168

		// calculate the speed of each wheel
    	l_AngularVelocityFrontLeft  = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis - l_LinearVelocityYAxis -
 8007148:	ed97 7a06 	vldr	s14, [r7, #24]
 800714c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007154:	ee17 0a90 	vmov	r0, s15
 8007158:	f7f9 f9a6 	bl	80004a8 <__aeabi_f2d>
 800715c:	4604      	mov	r4, r0
 800715e:	460d      	mov	r5, r1
    								  ((ROBOT_LENGHT_X + ROBOT_LENGHT_Y) * l_AngularVelocityRobotBase)));
 8007160:	6938      	ldr	r0, [r7, #16]
 8007162:	f7f9 f9a1 	bl	80004a8 <__aeabi_f2d>
 8007166:	a3ae      	add	r3, pc, #696	@ (adr r3, 8007420 <robot_rotate+0x3b8>)
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	f7f9 f9f4 	bl	8000558 <__aeabi_dmul>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
    	l_AngularVelocityFrontLeft  = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis - l_LinearVelocityYAxis -
 8007174:	4620      	mov	r0, r4
 8007176:	4629      	mov	r1, r5
 8007178:	f7f9 f836 	bl	80001e8 <__aeabi_dsub>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	4610      	mov	r0, r2
 8007182:	4619      	mov	r1, r3
 8007184:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007428 <robot_rotate+0x3c0>)
 8007186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718a:	f7f9 f9e5 	bl	8000558 <__aeabi_dmul>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	4610      	mov	r0, r2
 8007194:	4619      	mov	r1, r3
 8007196:	f7f9 fca1 	bl	8000adc <__aeabi_d2f>
 800719a:	4603      	mov	r3, r0
 800719c:	62bb      	str	r3, [r7, #40]	@ 0x28
    	l_AngularVelocityFrontRight = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis + l_LinearVelocityYAxis +
 800719e:	ed97 7a06 	vldr	s14, [r7, #24]
 80071a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80071a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071aa:	ee17 0a90 	vmov	r0, s15
 80071ae:	f7f9 f97b 	bl	80004a8 <__aeabi_f2d>
 80071b2:	4604      	mov	r4, r0
 80071b4:	460d      	mov	r5, r1
    								  ((ROBOT_LENGHT_X + ROBOT_LENGHT_Y) * l_AngularVelocityRobotBase)));
 80071b6:	6938      	ldr	r0, [r7, #16]
 80071b8:	f7f9 f976 	bl	80004a8 <__aeabi_f2d>
 80071bc:	a398      	add	r3, pc, #608	@ (adr r3, 8007420 <robot_rotate+0x3b8>)
 80071be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c2:	f7f9 f9c9 	bl	8000558 <__aeabi_dmul>
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
    	l_AngularVelocityFrontRight = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis + l_LinearVelocityYAxis +
 80071ca:	4620      	mov	r0, r4
 80071cc:	4629      	mov	r1, r5
 80071ce:	f7f9 f80d 	bl	80001ec <__adddf3>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4610      	mov	r0, r2
 80071d8:	4619      	mov	r1, r3
 80071da:	a393      	add	r3, pc, #588	@ (adr r3, 8007428 <robot_rotate+0x3c0>)
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	f7f9 f9ba 	bl	8000558 <__aeabi_dmul>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	4610      	mov	r0, r2
 80071ea:	4619      	mov	r1, r3
 80071ec:	f7f9 fc76 	bl	8000adc <__aeabi_d2f>
 80071f0:	4603      	mov	r3, r0
 80071f2:	627b      	str	r3, [r7, #36]	@ 0x24
    	l_AngularVelocityRearLeft   = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis + l_LinearVelocityYAxis -
 80071f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80071f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80071fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007200:	ee17 0a90 	vmov	r0, s15
 8007204:	f7f9 f950 	bl	80004a8 <__aeabi_f2d>
 8007208:	4604      	mov	r4, r0
 800720a:	460d      	mov	r5, r1
    								  ((ROBOT_LENGHT_X + ROBOT_LENGHT_Y) * l_AngularVelocityRobotBase)));
 800720c:	6938      	ldr	r0, [r7, #16]
 800720e:	f7f9 f94b 	bl	80004a8 <__aeabi_f2d>
 8007212:	a383      	add	r3, pc, #524	@ (adr r3, 8007420 <robot_rotate+0x3b8>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f7f9 f99e 	bl	8000558 <__aeabi_dmul>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
    	l_AngularVelocityRearLeft   = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis + l_LinearVelocityYAxis -
 8007220:	4620      	mov	r0, r4
 8007222:	4629      	mov	r1, r5
 8007224:	f7f8 ffe0 	bl	80001e8 <__aeabi_dsub>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	4610      	mov	r0, r2
 800722e:	4619      	mov	r1, r3
 8007230:	a37d      	add	r3, pc, #500	@ (adr r3, 8007428 <robot_rotate+0x3c0>)
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	f7f9 f98f 	bl	8000558 <__aeabi_dmul>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	4610      	mov	r0, r2
 8007240:	4619      	mov	r1, r3
 8007242:	f7f9 fc4b 	bl	8000adc <__aeabi_d2f>
 8007246:	4603      	mov	r3, r0
 8007248:	623b      	str	r3, [r7, #32]
    	l_AngularVelocityRearRight  = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis - l_LinearVelocityYAxis +
 800724a:	ed97 7a06 	vldr	s14, [r7, #24]
 800724e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007252:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007256:	ee17 0a90 	vmov	r0, s15
 800725a:	f7f9 f925 	bl	80004a8 <__aeabi_f2d>
 800725e:	4604      	mov	r4, r0
 8007260:	460d      	mov	r5, r1
    								  ((ROBOT_LENGHT_X + ROBOT_LENGHT_Y) * l_AngularVelocityRobotBase)));
 8007262:	6938      	ldr	r0, [r7, #16]
 8007264:	f7f9 f920 	bl	80004a8 <__aeabi_f2d>
 8007268:	a36d      	add	r3, pc, #436	@ (adr r3, 8007420 <robot_rotate+0x3b8>)
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	f7f9 f973 	bl	8000558 <__aeabi_dmul>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
    	l_AngularVelocityRearRight  = ((1.0 / RADIUS_WHEEL) * (l_LinearVelocityXAxis - l_LinearVelocityYAxis +
 8007276:	4620      	mov	r0, r4
 8007278:	4629      	mov	r1, r5
 800727a:	f7f8 ffb7 	bl	80001ec <__adddf3>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4610      	mov	r0, r2
 8007284:	4619      	mov	r1, r3
 8007286:	a368      	add	r3, pc, #416	@ (adr r3, 8007428 <robot_rotate+0x3c0>)
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	f7f9 f964 	bl	8000558 <__aeabi_dmul>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	4610      	mov	r0, r2
 8007296:	4619      	mov	r1, r3
 8007298:	f7f9 fc20 	bl	8000adc <__aeabi_d2f>
 800729c:	4603      	mov	r3, r0
 800729e:	61fb      	str	r3, [r7, #28]

		// store the speed of each wheel
    	p_Robot->FL.Speed = fabs(RPS_TO_RPM(l_AngularVelocityFrontLeft ));
 80072a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072a2:	f7f9 f901 	bl	80004a8 <__aeabi_f2d>
 80072a6:	a362      	add	r3, pc, #392	@ (adr r3, 8007430 <robot_rotate+0x3c8>)
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	f7f9 f954 	bl	8000558 <__aeabi_dmul>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	4610      	mov	r0, r2
 80072b6:	4619      	mov	r1, r3
 80072b8:	f7f9 fc10 	bl	8000adc <__aeabi_d2f>
 80072bc:	ee07 0a90 	vmov	s15, r0
 80072c0:	eef0 7ae7 	vabs.f32	s15, s15
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	edc3 7a05 	vstr	s15, [r3, #20]
    	p_Robot->FR.Speed = fabs(RPS_TO_RPM(l_AngularVelocityFrontRight));
 80072ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80072cc:	f7f9 f8ec 	bl	80004a8 <__aeabi_f2d>
 80072d0:	a357      	add	r3, pc, #348	@ (adr r3, 8007430 <robot_rotate+0x3c8>)
 80072d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d6:	f7f9 f93f 	bl	8000558 <__aeabi_dmul>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	4610      	mov	r0, r2
 80072e0:	4619      	mov	r1, r3
 80072e2:	f7f9 fbfb 	bl	8000adc <__aeabi_d2f>
 80072e6:	ee07 0a90 	vmov	s15, r0
 80072ea:	eef0 7ae7 	vabs.f32	s15, s15
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    	p_Robot->RL.Speed = fabs(RPS_TO_RPM(l_AngularVelocityRearLeft  ));
 80072f4:	6a38      	ldr	r0, [r7, #32]
 80072f6:	f7f9 f8d7 	bl	80004a8 <__aeabi_f2d>
 80072fa:	a34d      	add	r3, pc, #308	@ (adr r3, 8007430 <robot_rotate+0x3c8>)
 80072fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007300:	f7f9 f92a 	bl	8000558 <__aeabi_dmul>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4610      	mov	r0, r2
 800730a:	4619      	mov	r1, r3
 800730c:	f7f9 fbe6 	bl	8000adc <__aeabi_d2f>
 8007310:	ee07 0a90 	vmov	s15, r0
 8007314:	eef0 7ae7 	vabs.f32	s15, s15
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
    	p_Robot->RR.Speed = fabs(RPS_TO_RPM(l_AngularVelocityRearRight ));
 800731e:	69f8      	ldr	r0, [r7, #28]
 8007320:	f7f9 f8c2 	bl	80004a8 <__aeabi_f2d>
 8007324:	a342      	add	r3, pc, #264	@ (adr r3, 8007430 <robot_rotate+0x3c8>)
 8007326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732a:	f7f9 f915 	bl	8000558 <__aeabi_dmul>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	4610      	mov	r0, r2
 8007334:	4619      	mov	r1, r3
 8007336:	f7f9 fbd1 	bl	8000adc <__aeabi_d2f>
 800733a:	ee07 0a90 	vmov	s15, r0
 800733e:	eef0 7ae7 	vabs.f32	s15, s15
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4

		// determine the direction of Front Left motor rotation then store and move it 
    	if(l_AngularVelocityFrontLeft < 0)
 8007348:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800734c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007354:	d50f      	bpl.n	8007376 <robot_rotate+0x30e>
    	{
    		p_Robot->FL.Direction = BACWARD;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	761a      	strb	r2, [r3, #24]
    		l_EcuStatus = motor_move_backward(&p_Robot->FL.Motor , p_Robot->FL.Speed);
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	edd3 7a05 	vldr	s15, [r3, #20]
 8007364:	eeb0 0a67 	vmov.f32	s0, s15
 8007368:	4610      	mov	r0, r2
 800736a:	f7ff f973 	bl	8006654 <motor_move_backward>
 800736e:	4603      	mov	r3, r0
 8007370:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007374:	e00e      	b.n	8007394 <robot_rotate+0x32c>
    	}
    	else
    	{
    		p_Robot->FL.Direction = FORWARD;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	761a      	strb	r2, [r3, #24]
    		l_EcuStatus = motor_move_forward(&p_Robot->FL.Motor , p_Robot->FL.Speed);
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	edd3 7a05 	vldr	s15, [r3, #20]
 8007384:	eeb0 0a67 	vmov.f32	s0, s15
 8007388:	4610      	mov	r0, r2
 800738a:	f7ff f939 	bl	8006600 <motor_move_forward>
 800738e:	4603      	mov	r3, r0
 8007390:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    	}
		// determine the direction of Front Right motor rotation then store and move it 
    	if(l_AngularVelocityFrontRight < 0)
 8007394:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8007398:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800739c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a0:	d512      	bpl.n	80073c8 <robot_rotate+0x360>
    	{
    	    p_Robot->FR.Direction = BACWARD;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    	    l_EcuStatus = motor_move_backward(&p_Robot->FR.Motor , p_Robot->FR.Speed);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80073b6:	eeb0 0a67 	vmov.f32	s0, s15
 80073ba:	4610      	mov	r0, r2
 80073bc:	f7ff f94a 	bl	8006654 <motor_move_backward>
 80073c0:	4603      	mov	r3, r0
 80073c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80073c6:	e011      	b.n	80073ec <robot_rotate+0x384>
    	}
    	else
    	{
    	    p_Robot->FR.Direction = FORWARD;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    	    l_EcuStatus = motor_move_forward(&p_Robot->FR.Motor , p_Robot->FR.Speed);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80073dc:	eeb0 0a67 	vmov.f32	s0, s15
 80073e0:	4610      	mov	r0, r2
 80073e2:	f7ff f90d 	bl	8006600 <motor_move_forward>
 80073e6:	4603      	mov	r3, r0
 80073e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    	}
		// determine the direction of Rear Left motor rotation then store and move it 
    	if(l_AngularVelocityRearLeft < 0)
 80073ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80073f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f8:	d524      	bpl.n	8007444 <robot_rotate+0x3dc>
    	{
    	    p_Robot->RL.Direction = BACWARD;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    	    l_EcuStatus = motor_move_backward(&p_Robot->RL.Motor , p_Robot->RL.Speed);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 800740e:	eeb0 0a67 	vmov.f32	s0, s15
 8007412:	4610      	mov	r0, r2
 8007414:	f7ff f91e 	bl	8006654 <motor_move_backward>
 8007418:	4603      	mov	r3, r0
 800741a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800741e:	e023      	b.n	8007468 <robot_rotate+0x400>
 8007420:	eb851eb8 	.word	0xeb851eb8
 8007424:	3fc6b851 	.word	0x3fc6b851
 8007428:	aaaaaaab 	.word	0xaaaaaaab
 800742c:	4040aaaa 	.word	0x4040aaaa
 8007430:	66ed2bfb 	.word	0x66ed2bfb
 8007434:	4023193d 	.word	0x4023193d
 8007438:	42c80000 	.word	0x42c80000
 800743c:	f37bebd5 	.word	0xf37bebd5
 8007440:	3fbacee9 	.word	0x3fbacee9
    	}
    	else
    	{
    	    p_Robot->RL.Direction = FORWARD;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    	    l_EcuStatus = motor_move_forward(&p_Robot->RL.Motor , p_Robot->RL.Speed);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8007458:	eeb0 0a67 	vmov.f32	s0, s15
 800745c:	4610      	mov	r0, r2
 800745e:	f7ff f8cf 	bl	8006600 <motor_move_forward>
 8007462:	4603      	mov	r3, r0
 8007464:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    	}
		// determine the direction of Rear Right motor rotation then store and move it 
    	if(l_AngularVelocityRearRight < 0)
 8007468:	edd7 7a07 	vldr	s15, [r7, #28]
 800746c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007474:	d512      	bpl.n	800749c <robot_rotate+0x434>
    	{
    	    p_Robot->RR.Direction = BACWARD;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    	    l_EcuStatus = motor_move_backward(&p_Robot->RR.Motor , p_Robot->RR.Speed);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 800748a:	eeb0 0a67 	vmov.f32	s0, s15
 800748e:	4610      	mov	r0, r2
 8007490:	f7ff f8e0 	bl	8006654 <motor_move_backward>
 8007494:	4603      	mov	r3, r0
 8007496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800749a:	e011      	b.n	80074c0 <robot_rotate+0x458>
    	}
    	else
    	{
    	    p_Robot->RR.Direction = FORWARD;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    	    l_EcuStatus = motor_move_forward(&p_Robot->RR.Motor , p_Robot->RR.Speed);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 80074b0:	eeb0 0a67 	vmov.f32	s0, s15
 80074b4:	4610      	mov	r0, r2
 80074b6:	f7ff f8a3 	bl	8006600 <motor_move_forward>
 80074ba:	4603      	mov	r3, r0
 80074bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    	}
    }
	return l_EcuStatus;
 80074c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3730      	adds	r7, #48	@ 0x30
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bdb0      	pop	{r4, r5, r7, pc}

080074cc <robot_stop>:
  *
  * @param p_Robot pointer to robot object
  * @return ecu_status_t status of the operation
 */
ecu_status_t robot_stop(robot_t *p_Robot)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
	ecu_status_t l_EcuStatus = ECU_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_Robot)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d102      	bne.n	80074e4 <robot_stop+0x18>
    {
        l_EcuStatus = ECU_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	73fb      	strb	r3, [r7, #15]
 80074e2:	e05b      	b.n	800759c <robot_stop+0xd0>
    }
    else
    {
		// store the speed of each wheel
    	p_Robot->FL.Speed = 0.0f;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f04f 0200 	mov.w	r2, #0
 80074ea:	615a      	str	r2, [r3, #20]
    	p_Robot->FR.Speed = 0.0f;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	645a      	str	r2, [r3, #68]	@ 0x44
    	p_Robot->RL.Speed = 0.0f;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f04f 0200 	mov.w	r2, #0
 80074fa:	675a      	str	r2, [r3, #116]	@ 0x74
    	p_Robot->RR.Speed = 0.0f;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f04f 0200 	mov.w	r2, #0
 8007502:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

		p_Robot->Vx = 0.0f;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f04f 0200 	mov.w	r2, #0
 800750c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
		p_Robot->Vy = 0.0f;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f04f 0200 	mov.w	r2, #0
 8007516:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
		p_Robot->Wz = 0.0f;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f04f 0200 	mov.w	r2, #0
 8007520:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168

		// determine the direction of Front Left motor rotation then store and move it
		p_Robot->FL.Direction = STOPED;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	761a      	strb	r2, [r3, #24]
    	l_EcuStatus = motor_stop(&p_Robot->FL.Motor);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4618      	mov	r0, r3
 800752e:	f7ff f8bb 	bl	80066a8 <motor_stop>
 8007532:	4603      	mov	r3, r0
 8007534:	73fb      	strb	r3, [r7, #15]
		p_Robot->FR.Direction = STOPED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2202      	movs	r2, #2
 800753a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    	l_EcuStatus = motor_stop(&p_Robot->FR.Motor);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3330      	adds	r3, #48	@ 0x30
 8007542:	4618      	mov	r0, r3
 8007544:	f7ff f8b0 	bl	80066a8 <motor_stop>
 8007548:	4603      	mov	r3, r0
 800754a:	73fb      	strb	r3, [r7, #15]
		p_Robot->RL.Direction = STOPED;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    	l_EcuStatus = motor_stop(&p_Robot->RL.Motor);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3360      	adds	r3, #96	@ 0x60
 8007558:	4618      	mov	r0, r3
 800755a:	f7ff f8a5 	bl	80066a8 <motor_stop>
 800755e:	4603      	mov	r3, r0
 8007560:	73fb      	strb	r3, [r7, #15]
		p_Robot->RR.Direction = STOPED;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2202      	movs	r2, #2
 8007566:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    	l_EcuStatus = motor_stop(&p_Robot->RR.Motor);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	3390      	adds	r3, #144	@ 0x90
 800756e:	4618      	mov	r0, r3
 8007570:	f7ff f89a 	bl	80066a8 <motor_stop>
 8007574:	4603      	mov	r3, r0
 8007576:	73fb      	strb	r3, [r7, #15]
		p_Robot->FL.Encoder.Speed = 0.0f;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f04f 0200 	mov.w	r2, #0
 800757e:	621a      	str	r2, [r3, #32]
		p_Robot->FR.Encoder.Speed = 0.0f;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	651a      	str	r2, [r3, #80]	@ 0x50
		p_Robot->RL.Encoder.Speed = 0.0f;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f04f 0200 	mov.w	r2, #0
 800758e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
		p_Robot->RR.Encoder.Speed = 0.0f;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f04f 0200 	mov.w	r2, #0
 8007598:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	}
	return l_EcuStatus;
 800759c:	7bfb      	ldrb	r3, [r7, #15]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <robot_init>:
 * @param p_Robot pointer to the robot object needed to be initialized
 * @param p_TimeStep value which the speed will be modifed every time (in ms)
 * @return ecu_status_t status of the operation
 */
ecu_status_t robot_init(robot_t *p_Robot, float_t p_TimeStep)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	ed87 0a00 	vstr	s0, [r7]
	ecu_status_t l_EcuStatus = ECU_OK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	73fb      	strb	r3, [r7, #15]
    if (NULL == p_Robot)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d102      	bne.n	80075c4 <robot_init+0x1c>
    {
        l_EcuStatus = ECU_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	73fb      	strb	r3, [r7, #15]
 80075c2:	e110      	b.n	80077e6 <robot_init+0x23e>
    }
    else
    {
		/* initialize wheels of the robot (front left) */
		l_EcuStatus |= motor_init(&p_Robot->FL.Motor);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fe ffd6 	bl	8006578 <motor_init>
 80075cc:	4603      	mov	r3, r0
 80075ce:	461a      	mov	r2, r3
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	73fb      	strb	r3, [r7, #15]
		l_EcuStatus |= encoder_init(&p_Robot->FL.Encoder);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	331c      	adds	r3, #28
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fe fee4 	bl	80063a8 <encoder_init>
 80075e0:	4603      	mov	r3, r0
 80075e2:	461a      	mov	r2, r3
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	73fb      	strb	r3, [r7, #15]
		p_Robot->FL.Speed = 0.0;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f04f 0200 	mov.w	r2, #0
 80075f0:	615a      	str	r2, [r3, #20]
		p_Robot->FL.Direction = STOPED;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2202      	movs	r2, #2
 80075f6:	761a      	strb	r2, [r3, #24]
		/* initialize wheels of the robot (front right) */
		l_EcuStatus |= motor_init(&p_Robot->FR.Motor);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3330      	adds	r3, #48	@ 0x30
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fe ffbb 	bl	8006578 <motor_init>
 8007602:	4603      	mov	r3, r0
 8007604:	461a      	mov	r2, r3
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	4313      	orrs	r3, r2
 800760a:	73fb      	strb	r3, [r7, #15]
		l_EcuStatus |= encoder_init(&p_Robot->FR.Encoder);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	334c      	adds	r3, #76	@ 0x4c
 8007610:	4618      	mov	r0, r3
 8007612:	f7fe fec9 	bl	80063a8 <encoder_init>
 8007616:	4603      	mov	r3, r0
 8007618:	461a      	mov	r2, r3
 800761a:	7bfb      	ldrb	r3, [r7, #15]
 800761c:	4313      	orrs	r3, r2
 800761e:	73fb      	strb	r3, [r7, #15]
		p_Robot->FR.Speed = 0.0;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f04f 0200 	mov.w	r2, #0
 8007626:	645a      	str	r2, [r3, #68]	@ 0x44
		p_Robot->FR.Direction = STOPED;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		/* initialize wheels of the robot (rear left) */
		l_EcuStatus |= motor_init(&p_Robot->RL.Motor);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3360      	adds	r3, #96	@ 0x60
 8007634:	4618      	mov	r0, r3
 8007636:	f7fe ff9f 	bl	8006578 <motor_init>
 800763a:	4603      	mov	r3, r0
 800763c:	461a      	mov	r2, r3
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	4313      	orrs	r3, r2
 8007642:	73fb      	strb	r3, [r7, #15]
		l_EcuStatus |= encoder_init(&p_Robot->RL.Encoder);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	337c      	adds	r3, #124	@ 0x7c
 8007648:	4618      	mov	r0, r3
 800764a:	f7fe fead 	bl	80063a8 <encoder_init>
 800764e:	4603      	mov	r3, r0
 8007650:	461a      	mov	r2, r3
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	4313      	orrs	r3, r2
 8007656:	73fb      	strb	r3, [r7, #15]
		p_Robot->RL.Speed = 0.0;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f04f 0200 	mov.w	r2, #0
 800765e:	675a      	str	r2, [r3, #116]	@ 0x74
		p_Robot->RL.Direction = STOPED;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
		/* initialize wheels of the robot (rear right) */
		l_EcuStatus |= motor_init(&p_Robot->RR.Motor);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3390      	adds	r3, #144	@ 0x90
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe ff83 	bl	8006578 <motor_init>
 8007672:	4603      	mov	r3, r0
 8007674:	461a      	mov	r2, r3
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	4313      	orrs	r3, r2
 800767a:	73fb      	strb	r3, [r7, #15]
		l_EcuStatus |= encoder_init(&p_Robot->RR.Encoder);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	33ac      	adds	r3, #172	@ 0xac
 8007680:	4618      	mov	r0, r3
 8007682:	f7fe fe91 	bl	80063a8 <encoder_init>
 8007686:	4603      	mov	r3, r0
 8007688:	461a      	mov	r2, r3
 800768a:	7bfb      	ldrb	r3, [r7, #15]
 800768c:	4313      	orrs	r3, r2
 800768e:	73fb      	strb	r3, [r7, #15]
		p_Robot->RR.Speed = 0.0;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		p_Robot->RR.Direction = STOPED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2202      	movs	r2, #2
 800769e:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

		/* restore the PID constants from flash */
		Kp = DEFUALT_Kp_VALUE;
 80076a2:	4b53      	ldr	r3, [pc, #332]	@ (80077f0 <robot_init+0x248>)
 80076a4:	4a53      	ldr	r2, [pc, #332]	@ (80077f4 <robot_init+0x24c>)
 80076a6:	601a      	str	r2, [r3, #0]
		Ki = DEFUALT_Ki_VALUE;
 80076a8:	4b53      	ldr	r3, [pc, #332]	@ (80077f8 <robot_init+0x250>)
 80076aa:	4a54      	ldr	r2, [pc, #336]	@ (80077fc <robot_init+0x254>)
 80076ac:	601a      	str	r2, [r3, #0]
		Kd = DEFUALT_Kd_VALUE;
 80076ae:	4b54      	ldr	r3, [pc, #336]	@ (8007800 <robot_init+0x258>)
 80076b0:	4a54      	ldr	r2, [pc, #336]	@ (8007804 <robot_init+0x25c>)
 80076b2:	601a      	str	r2, [r3, #0]
		N  = DEFUALT_N_VALUE;
 80076b4:	4b54      	ldr	r3, [pc, #336]	@ (8007808 <robot_init+0x260>)
 80076b6:	4a55      	ldr	r2, [pc, #340]	@ (800780c <robot_init+0x264>)
 80076b8:	601a      	str	r2, [r3, #0]

		// initialize the controller
		PID_Init(&p_Robot->PID_FL, Kp, Ki, Kd, N, p_TimeStep / 1000.0 , PID_ROBOT_MIN_OUT, PID_ROBOT_MAX_OUT);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	33c0      	adds	r3, #192	@ 0xc0
 80076be:	4a4c      	ldr	r2, [pc, #304]	@ (80077f0 <robot_init+0x248>)
 80076c0:	ed92 7a00 	vldr	s14, [r2]
 80076c4:	4a4c      	ldr	r2, [pc, #304]	@ (80077f8 <robot_init+0x250>)
 80076c6:	edd2 6a00 	vldr	s13, [r2]
 80076ca:	4a4d      	ldr	r2, [pc, #308]	@ (8007800 <robot_init+0x258>)
 80076cc:	ed92 6a00 	vldr	s12, [r2]
 80076d0:	4a4d      	ldr	r2, [pc, #308]	@ (8007808 <robot_init+0x260>)
 80076d2:	edd2 5a00 	vldr	s11, [r2]
 80076d6:	edd7 7a00 	vldr	s15, [r7]
 80076da:	eddf 4a4d 	vldr	s9, [pc, #308]	@ 8007810 <robot_init+0x268>
 80076de:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 80076e2:	ed9f 3a4c 	vldr	s6, [pc, #304]	@ 8007814 <robot_init+0x26c>
 80076e6:	eddf 2a4c 	vldr	s5, [pc, #304]	@ 8007818 <robot_init+0x270>
 80076ea:	eeb0 2a45 	vmov.f32	s4, s10
 80076ee:	eef0 1a65 	vmov.f32	s3, s11
 80076f2:	eeb0 1a46 	vmov.f32	s2, s12
 80076f6:	eef0 0a66 	vmov.f32	s1, s13
 80076fa:	eeb0 0a47 	vmov.f32	s0, s14
 80076fe:	4618      	mov	r0, r3
 8007700:	f003 ff0a 	bl	800b518 <PID_Init>
		PID_Init(&p_Robot->PID_FR, Kp, Ki, Kd, N, p_TimeStep / 1000.0 , PID_ROBOT_MIN_OUT, PID_ROBOT_MAX_OUT);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	33e8      	adds	r3, #232	@ 0xe8
 8007708:	4a39      	ldr	r2, [pc, #228]	@ (80077f0 <robot_init+0x248>)
 800770a:	ed92 7a00 	vldr	s14, [r2]
 800770e:	4a3a      	ldr	r2, [pc, #232]	@ (80077f8 <robot_init+0x250>)
 8007710:	edd2 6a00 	vldr	s13, [r2]
 8007714:	4a3a      	ldr	r2, [pc, #232]	@ (8007800 <robot_init+0x258>)
 8007716:	ed92 6a00 	vldr	s12, [r2]
 800771a:	4a3b      	ldr	r2, [pc, #236]	@ (8007808 <robot_init+0x260>)
 800771c:	edd2 5a00 	vldr	s11, [r2]
 8007720:	edd7 7a00 	vldr	s15, [r7]
 8007724:	eddf 4a3a 	vldr	s9, [pc, #232]	@ 8007810 <robot_init+0x268>
 8007728:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 800772c:	ed9f 3a39 	vldr	s6, [pc, #228]	@ 8007814 <robot_init+0x26c>
 8007730:	eddf 2a39 	vldr	s5, [pc, #228]	@ 8007818 <robot_init+0x270>
 8007734:	eeb0 2a45 	vmov.f32	s4, s10
 8007738:	eef0 1a65 	vmov.f32	s3, s11
 800773c:	eeb0 1a46 	vmov.f32	s2, s12
 8007740:	eef0 0a66 	vmov.f32	s1, s13
 8007744:	eeb0 0a47 	vmov.f32	s0, s14
 8007748:	4618      	mov	r0, r3
 800774a:	f003 fee5 	bl	800b518 <PID_Init>
		PID_Init(&p_Robot->PID_RL, Kp, Ki, Kd, N, p_TimeStep / 1000.0 , PID_ROBOT_MIN_OUT, PID_ROBOT_MAX_OUT);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8007754:	4a26      	ldr	r2, [pc, #152]	@ (80077f0 <robot_init+0x248>)
 8007756:	ed92 7a00 	vldr	s14, [r2]
 800775a:	4a27      	ldr	r2, [pc, #156]	@ (80077f8 <robot_init+0x250>)
 800775c:	edd2 6a00 	vldr	s13, [r2]
 8007760:	4a27      	ldr	r2, [pc, #156]	@ (8007800 <robot_init+0x258>)
 8007762:	ed92 6a00 	vldr	s12, [r2]
 8007766:	4a28      	ldr	r2, [pc, #160]	@ (8007808 <robot_init+0x260>)
 8007768:	edd2 5a00 	vldr	s11, [r2]
 800776c:	edd7 7a00 	vldr	s15, [r7]
 8007770:	eddf 4a27 	vldr	s9, [pc, #156]	@ 8007810 <robot_init+0x268>
 8007774:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 8007778:	ed9f 3a26 	vldr	s6, [pc, #152]	@ 8007814 <robot_init+0x26c>
 800777c:	eddf 2a26 	vldr	s5, [pc, #152]	@ 8007818 <robot_init+0x270>
 8007780:	eeb0 2a45 	vmov.f32	s4, s10
 8007784:	eef0 1a65 	vmov.f32	s3, s11
 8007788:	eeb0 1a46 	vmov.f32	s2, s12
 800778c:	eef0 0a66 	vmov.f32	s1, s13
 8007790:	eeb0 0a47 	vmov.f32	s0, s14
 8007794:	4618      	mov	r0, r3
 8007796:	f003 febf 	bl	800b518 <PID_Init>
		PID_Init(&p_Robot->PID_RR, Kp, Ki, Kd, N, p_TimeStep / 1000.0 , PID_ROBOT_MIN_OUT, PID_ROBOT_MAX_OUT);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80077a0:	4a13      	ldr	r2, [pc, #76]	@ (80077f0 <robot_init+0x248>)
 80077a2:	ed92 7a00 	vldr	s14, [r2]
 80077a6:	4a14      	ldr	r2, [pc, #80]	@ (80077f8 <robot_init+0x250>)
 80077a8:	edd2 6a00 	vldr	s13, [r2]
 80077ac:	4a14      	ldr	r2, [pc, #80]	@ (8007800 <robot_init+0x258>)
 80077ae:	ed92 6a00 	vldr	s12, [r2]
 80077b2:	4a15      	ldr	r2, [pc, #84]	@ (8007808 <robot_init+0x260>)
 80077b4:	edd2 5a00 	vldr	s11, [r2]
 80077b8:	edd7 7a00 	vldr	s15, [r7]
 80077bc:	eddf 4a14 	vldr	s9, [pc, #80]	@ 8007810 <robot_init+0x268>
 80077c0:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 80077c4:	ed9f 3a13 	vldr	s6, [pc, #76]	@ 8007814 <robot_init+0x26c>
 80077c8:	eddf 2a13 	vldr	s5, [pc, #76]	@ 8007818 <robot_init+0x270>
 80077cc:	eeb0 2a45 	vmov.f32	s4, s10
 80077d0:	eef0 1a65 	vmov.f32	s3, s11
 80077d4:	eeb0 1a46 	vmov.f32	s2, s12
 80077d8:	eef0 0a66 	vmov.f32	s1, s13
 80077dc:	eeb0 0a47 	vmov.f32	s0, s14
 80077e0:	4618      	mov	r0, r3
 80077e2:	f003 fe99 	bl	800b518 <PID_Init>
	}
	return l_EcuStatus;
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20000218 	.word	0x20000218
 80077f4:	3f59999a 	.word	0x3f59999a
 80077f8:	2000021c 	.word	0x2000021c
 80077fc:	41180000 	.word	0x41180000
 8007800:	20000220 	.word	0x20000220
 8007804:	3d8f5c29 	.word	0x3d8f5c29
 8007808:	20000224 	.word	0x20000224
 800780c:	3f4ccccd 	.word	0x3f4ccccd
 8007810:	447a0000 	.word	0x447a0000
 8007814:	437f0000 	.word	0x437f0000
 8007818:	00000000 	.word	0x00000000

0800781c <robot_PID>:
 * @param p_Robot pointer to the robot object needed to be controlled
 * @param p_TimeStep this functions should be called with time step - time is in (ms)
 * @return ecu_status_t status of the operation
 */
ecu_status_t robot_PID(robot_t *p_Robot, float_t p_TimeStep)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	ed87 0a00 	vstr	s0, [r7]
	ecu_status_t l_EcuStatus = ECU_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	73fb      	strb	r3, [r7, #15]
	static float_t l_FilterdSpeed_RR = 0;
	static float_t l_PID_Out_FL = 0;
	static float_t l_PID_Out_FR = 0;
	static float_t l_PID_Out_RL = 0;
	static float_t l_PID_Out_RR = 0;
    if (NULL == p_Robot)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d102      	bne.n	8007838 <robot_PID+0x1c>
    {
        l_EcuStatus = ECU_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	73fb      	strb	r3, [r7, #15]
 8007836:	e146      	b.n	8007ac6 <robot_PID+0x2aa>
    }
    else
    {
		// Update the speed come from each encoder
		l_EcuStatus |= encoder_periodic_update(&p_Robot->FL.Encoder, p_TimeStep);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	331c      	adds	r3, #28
 800783c:	ed97 0a00 	vldr	s0, [r7]
 8007840:	4618      	mov	r0, r3
 8007842:	f7fe fde1 	bl	8006408 <encoder_periodic_update>
 8007846:	4603      	mov	r3, r0
 8007848:	461a      	mov	r2, r3
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	4313      	orrs	r3, r2
 800784e:	73fb      	strb	r3, [r7, #15]
		l_EcuStatus |= encoder_periodic_update(&p_Robot->FR.Encoder, p_TimeStep);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	334c      	adds	r3, #76	@ 0x4c
 8007854:	ed97 0a00 	vldr	s0, [r7]
 8007858:	4618      	mov	r0, r3
 800785a:	f7fe fdd5 	bl	8006408 <encoder_periodic_update>
 800785e:	4603      	mov	r3, r0
 8007860:	461a      	mov	r2, r3
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	4313      	orrs	r3, r2
 8007866:	73fb      	strb	r3, [r7, #15]
		l_EcuStatus |= encoder_periodic_update(&p_Robot->RL.Encoder, p_TimeStep);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	337c      	adds	r3, #124	@ 0x7c
 800786c:	ed97 0a00 	vldr	s0, [r7]
 8007870:	4618      	mov	r0, r3
 8007872:	f7fe fdc9 	bl	8006408 <encoder_periodic_update>
 8007876:	4603      	mov	r3, r0
 8007878:	461a      	mov	r2, r3
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	4313      	orrs	r3, r2
 800787e:	73fb      	strb	r3, [r7, #15]
		l_EcuStatus |= encoder_periodic_update(&p_Robot->RR.Encoder, p_TimeStep);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	33ac      	adds	r3, #172	@ 0xac
 8007884:	ed97 0a00 	vldr	s0, [r7]
 8007888:	4618      	mov	r0, r3
 800788a:	f7fe fdbd 	bl	8006408 <encoder_periodic_update>
 800788e:	4603      	mov	r3, r0
 8007890:	461a      	mov	r2, r3
 8007892:	7bfb      	ldrb	r3, [r7, #15]
 8007894:	4313      	orrs	r3, r2
 8007896:	73fb      	strb	r3, [r7, #15]

		// Filter the final speed using low pass filter
		l_FilterdSpeed_FL = ENCODER_READ_FILTER_CONST * p_Robot->FL.Encoder.Speed + 
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	edd3 7a08 	vldr	s15, [r3, #32]
 800789e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80078a2:	ee27 7a87 	vmul.f32	s14, s15, s14
							(1 - ENCODER_READ_FILTER_CONST) * l_FilterdSpeed_FL;
 80078a6:	4b8a      	ldr	r3, [pc, #552]	@ (8007ad0 <robot_PID+0x2b4>)
 80078a8:	edd3 7a00 	vldr	s15, [r3]
 80078ac:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80078b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
		l_FilterdSpeed_FL = ENCODER_READ_FILTER_CONST * p_Robot->FL.Encoder.Speed + 
 80078b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078b8:	4b85      	ldr	r3, [pc, #532]	@ (8007ad0 <robot_PID+0x2b4>)
 80078ba:	edc3 7a00 	vstr	s15, [r3]
		l_FilterdSpeed_FR = ENCODER_READ_FILTER_CONST * p_Robot->FR.Encoder.Speed + 
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80078c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80078c8:	ee27 7a87 	vmul.f32	s14, s15, s14
							(1 - ENCODER_READ_FILTER_CONST) * l_FilterdSpeed_FR;
 80078cc:	4b81      	ldr	r3, [pc, #516]	@ (8007ad4 <robot_PID+0x2b8>)
 80078ce:	edd3 7a00 	vldr	s15, [r3]
 80078d2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80078d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
		l_FilterdSpeed_FR = ENCODER_READ_FILTER_CONST * p_Robot->FR.Encoder.Speed + 
 80078da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078de:	4b7d      	ldr	r3, [pc, #500]	@ (8007ad4 <robot_PID+0x2b8>)
 80078e0:	edc3 7a00 	vstr	s15, [r3]
		l_FilterdSpeed_RL = ENCODER_READ_FILTER_CONST * p_Robot->RL.Encoder.Speed + 
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 80078ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80078ee:	ee27 7a87 	vmul.f32	s14, s15, s14
							(1 - ENCODER_READ_FILTER_CONST) * l_FilterdSpeed_RL;
 80078f2:	4b79      	ldr	r3, [pc, #484]	@ (8007ad8 <robot_PID+0x2bc>)
 80078f4:	edd3 7a00 	vldr	s15, [r3]
 80078f8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80078fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
		l_FilterdSpeed_RL = ENCODER_READ_FILTER_CONST * p_Robot->RL.Encoder.Speed + 
 8007900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007904:	4b74      	ldr	r3, [pc, #464]	@ (8007ad8 <robot_PID+0x2bc>)
 8007906:	edc3 7a00 	vstr	s15, [r3]
		l_FilterdSpeed_RR = ENCODER_READ_FILTER_CONST * p_Robot->RR.Encoder.Speed + 
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8007910:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007914:	ee27 7a87 	vmul.f32	s14, s15, s14
							(1 - ENCODER_READ_FILTER_CONST) * l_FilterdSpeed_RR;
 8007918:	4b70      	ldr	r3, [pc, #448]	@ (8007adc <robot_PID+0x2c0>)
 800791a:	edd3 7a00 	vldr	s15, [r3]
 800791e:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8007922:	ee67 7aa6 	vmul.f32	s15, s15, s13
		l_FilterdSpeed_RR = ENCODER_READ_FILTER_CONST * p_Robot->RR.Encoder.Speed + 
 8007926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800792a:	4b6c      	ldr	r3, [pc, #432]	@ (8007adc <robot_PID+0x2c0>)
 800792c:	edc3 7a00 	vstr	s15, [r3]
		
		// PID output 
		l_PID_Out_FL = PID_Compute(&p_Robot->PID_FL, p_Robot->FL.Speed, l_FilterdSpeed_FL);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	edd3 7a05 	vldr	s15, [r3, #20]
 800793c:	4b64      	ldr	r3, [pc, #400]	@ (8007ad0 <robot_PID+0x2b4>)
 800793e:	ed93 7a00 	vldr	s14, [r3]
 8007942:	eef0 0a47 	vmov.f32	s1, s14
 8007946:	eeb0 0a67 	vmov.f32	s0, s15
 800794a:	4610      	mov	r0, r2
 800794c:	f003 fe1d 	bl	800b58a <PID_Compute>
 8007950:	eef0 7a40 	vmov.f32	s15, s0
 8007954:	4b62      	ldr	r3, [pc, #392]	@ (8007ae0 <robot_PID+0x2c4>)
 8007956:	edc3 7a00 	vstr	s15, [r3]
		l_PID_Out_FR = PID_Compute(&p_Robot->PID_FR, p_Robot->FR.Speed, l_FilterdSpeed_FR);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f103 02e8 	add.w	r2, r3, #232	@ 0xe8
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8007966:	4b5b      	ldr	r3, [pc, #364]	@ (8007ad4 <robot_PID+0x2b8>)
 8007968:	ed93 7a00 	vldr	s14, [r3]
 800796c:	eef0 0a47 	vmov.f32	s1, s14
 8007970:	eeb0 0a67 	vmov.f32	s0, s15
 8007974:	4610      	mov	r0, r2
 8007976:	f003 fe08 	bl	800b58a <PID_Compute>
 800797a:	eef0 7a40 	vmov.f32	s15, s0
 800797e:	4b59      	ldr	r3, [pc, #356]	@ (8007ae4 <robot_PID+0x2c8>)
 8007980:	edc3 7a00 	vstr	s15, [r3]
		l_PID_Out_RL = PID_Compute(&p_Robot->PID_RL, p_Robot->RL.Speed, l_FilterdSpeed_RL);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8007990:	4b51      	ldr	r3, [pc, #324]	@ (8007ad8 <robot_PID+0x2bc>)
 8007992:	ed93 7a00 	vldr	s14, [r3]
 8007996:	eef0 0a47 	vmov.f32	s1, s14
 800799a:	eeb0 0a67 	vmov.f32	s0, s15
 800799e:	4610      	mov	r0, r2
 80079a0:	f003 fdf3 	bl	800b58a <PID_Compute>
 80079a4:	eef0 7a40 	vmov.f32	s15, s0
 80079a8:	4b4f      	ldr	r3, [pc, #316]	@ (8007ae8 <robot_PID+0x2cc>)
 80079aa:	edc3 7a00 	vstr	s15, [r3]
		l_PID_Out_RR = PID_Compute(&p_Robot->PID_RR, p_Robot->RR.Speed, l_FilterdSpeed_RR);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f503 729c 	add.w	r2, r3, #312	@ 0x138
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 80079ba:	4b48      	ldr	r3, [pc, #288]	@ (8007adc <robot_PID+0x2c0>)
 80079bc:	ed93 7a00 	vldr	s14, [r3]
 80079c0:	eef0 0a47 	vmov.f32	s1, s14
 80079c4:	eeb0 0a67 	vmov.f32	s0, s15
 80079c8:	4610      	mov	r0, r2
 80079ca:	f003 fdde 	bl	800b58a <PID_Compute>
 80079ce:	eef0 7a40 	vmov.f32	s15, s0
 80079d2:	4b46      	ldr	r3, [pc, #280]	@ (8007aec <robot_PID+0x2d0>)
 80079d4:	edc3 7a00 	vstr	s15, [r3]

		// Map PID output from (0 - 255) to be (0 - MaxClibratedSpeed of motors)
		l_PID_Out_FL *= (MaxClibratedSpeed / PID_ROBOT_MAX_OUT);
 80079d8:	4b45      	ldr	r3, [pc, #276]	@ (8007af0 <robot_PID+0x2d4>)
 80079da:	edd3 7a00 	vldr	s15, [r3]
 80079de:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8007af4 <robot_PID+0x2d8>
 80079e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80079e6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ae0 <robot_PID+0x2c4>)
 80079e8:	edd3 7a00 	vldr	s15, [r3]
 80079ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f0:	4b3b      	ldr	r3, [pc, #236]	@ (8007ae0 <robot_PID+0x2c4>)
 80079f2:	edc3 7a00 	vstr	s15, [r3]
		l_PID_Out_FR *= (MaxClibratedSpeed / PID_ROBOT_MAX_OUT);
 80079f6:	4b3e      	ldr	r3, [pc, #248]	@ (8007af0 <robot_PID+0x2d4>)
 80079f8:	edd3 7a00 	vldr	s15, [r3]
 80079fc:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007af4 <robot_PID+0x2d8>
 8007a00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007a04:	4b37      	ldr	r3, [pc, #220]	@ (8007ae4 <robot_PID+0x2c8>)
 8007a06:	edd3 7a00 	vldr	s15, [r3]
 8007a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a0e:	4b35      	ldr	r3, [pc, #212]	@ (8007ae4 <robot_PID+0x2c8>)
 8007a10:	edc3 7a00 	vstr	s15, [r3]
		l_PID_Out_RL *= (MaxClibratedSpeed / PID_ROBOT_MAX_OUT);
 8007a14:	4b36      	ldr	r3, [pc, #216]	@ (8007af0 <robot_PID+0x2d4>)
 8007a16:	edd3 7a00 	vldr	s15, [r3]
 8007a1a:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8007af4 <robot_PID+0x2d8>
 8007a1e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007a22:	4b31      	ldr	r3, [pc, #196]	@ (8007ae8 <robot_PID+0x2cc>)
 8007a24:	edd3 7a00 	vldr	s15, [r3]
 8007a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8007ae8 <robot_PID+0x2cc>)
 8007a2e:	edc3 7a00 	vstr	s15, [r3]
		l_PID_Out_RR *= (MaxClibratedSpeed / PID_ROBOT_MAX_OUT);
 8007a32:	4b2f      	ldr	r3, [pc, #188]	@ (8007af0 <robot_PID+0x2d4>)
 8007a34:	edd3 7a00 	vldr	s15, [r3]
 8007a38:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8007af4 <robot_PID+0x2d8>
 8007a3c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007a40:	4b2a      	ldr	r3, [pc, #168]	@ (8007aec <robot_PID+0x2d0>)
 8007a42:	edd3 7a00 	vldr	s15, [r3]
 8007a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4a:	4b28      	ldr	r3, [pc, #160]	@ (8007aec <robot_PID+0x2d0>)
 8007a4c:	edc3 7a00 	vstr	s15, [r3]

		// change the speed of the motor according to the PID output
		l_EcuStatus |= motor_change_speed(&p_Robot->FL.Motor, l_PID_Out_FL);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a23      	ldr	r2, [pc, #140]	@ (8007ae0 <robot_PID+0x2c4>)
 8007a54:	edd2 7a00 	vldr	s15, [r2]
 8007a58:	eeb0 0a67 	vmov.f32	s0, s15
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe fe4d 	bl	80066fc <motor_change_speed>
 8007a62:	4603      	mov	r3, r0
 8007a64:	461a      	mov	r2, r3
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	73fb      	strb	r3, [r7, #15]
		l_EcuStatus |= motor_change_speed(&p_Robot->FR.Motor, l_PID_Out_FR);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3330      	adds	r3, #48	@ 0x30
 8007a70:	4a1c      	ldr	r2, [pc, #112]	@ (8007ae4 <robot_PID+0x2c8>)
 8007a72:	edd2 7a00 	vldr	s15, [r2]
 8007a76:	eeb0 0a67 	vmov.f32	s0, s15
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe fe3e 	bl	80066fc <motor_change_speed>
 8007a80:	4603      	mov	r3, r0
 8007a82:	461a      	mov	r2, r3
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	73fb      	strb	r3, [r7, #15]
		l_EcuStatus |= motor_change_speed(&p_Robot->RL.Motor, l_PID_Out_RL);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	3360      	adds	r3, #96	@ 0x60
 8007a8e:	4a16      	ldr	r2, [pc, #88]	@ (8007ae8 <robot_PID+0x2cc>)
 8007a90:	edd2 7a00 	vldr	s15, [r2]
 8007a94:	eeb0 0a67 	vmov.f32	s0, s15
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fe fe2f 	bl	80066fc <motor_change_speed>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	73fb      	strb	r3, [r7, #15]
		l_EcuStatus |= motor_change_speed(&p_Robot->RR.Motor, l_PID_Out_RR);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3390      	adds	r3, #144	@ 0x90
 8007aac:	4a0f      	ldr	r2, [pc, #60]	@ (8007aec <robot_PID+0x2d0>)
 8007aae:	edd2 7a00 	vldr	s15, [r2]
 8007ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fe fe20 	bl	80066fc <motor_change_speed>
 8007abc:	4603      	mov	r3, r0
 8007abe:	461a      	mov	r2, r3
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	73fb      	strb	r3, [r7, #15]

	}
	return l_EcuStatus;
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	200005d4 	.word	0x200005d4
 8007ad4:	200005d8 	.word	0x200005d8
 8007ad8:	200005dc 	.word	0x200005dc
 8007adc:	200005e0 	.word	0x200005e0
 8007ae0:	200005e4 	.word	0x200005e4
 8007ae4:	200005e8 	.word	0x200005e8
 8007ae8:	200005ec 	.word	0x200005ec
 8007aec:	200005f0 	.word	0x200005f0
 8007af0:	20000214 	.word	0x20000214
 8007af4:	437f0000 	.word	0x437f0000

08007af8 <__NVIC_SetPriority>:
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	6039      	str	r1, [r7, #0]
 8007b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	db0a      	blt.n	8007b22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	490c      	ldr	r1, [pc, #48]	@ (8007b44 <__NVIC_SetPriority+0x4c>)
 8007b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b16:	0112      	lsls	r2, r2, #4
 8007b18:	b2d2      	uxtb	r2, r2
 8007b1a:	440b      	add	r3, r1
 8007b1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007b20:	e00a      	b.n	8007b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	4908      	ldr	r1, [pc, #32]	@ (8007b48 <__NVIC_SetPriority+0x50>)
 8007b28:	79fb      	ldrb	r3, [r7, #7]
 8007b2a:	f003 030f 	and.w	r3, r3, #15
 8007b2e:	3b04      	subs	r3, #4
 8007b30:	0112      	lsls	r2, r2, #4
 8007b32:	b2d2      	uxtb	r2, r2
 8007b34:	440b      	add	r3, r1
 8007b36:	761a      	strb	r2, [r3, #24]
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	e000e100 	.word	0xe000e100
 8007b48:	e000ed00 	.word	0xe000ed00

08007b4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007b50:	4b05      	ldr	r3, [pc, #20]	@ (8007b68 <SysTick_Handler+0x1c>)
 8007b52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007b54:	f002 fb62 	bl	800a21c <xTaskGetSchedulerState>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d001      	beq.n	8007b62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007b5e:	f003 fa5b 	bl	800b018 <xPortSysTickHandler>
  }
}
 8007b62:	bf00      	nop
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	e000e010 	.word	0xe000e010

08007b6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b70:	2100      	movs	r1, #0
 8007b72:	f06f 0004 	mvn.w	r0, #4
 8007b76:	f7ff ffbf 	bl	8007af8 <__NVIC_SetPriority>
#endif
}
 8007b7a:	bf00      	nop
 8007b7c:	bd80      	pop	{r7, pc}
	...

08007b80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b86:	f3ef 8305 	mrs	r3, IPSR
 8007b8a:	603b      	str	r3, [r7, #0]
  return(result);
 8007b8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b92:	f06f 0305 	mvn.w	r3, #5
 8007b96:	607b      	str	r3, [r7, #4]
 8007b98:	e00c      	b.n	8007bb4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc4 <osKernelInitialize+0x44>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d105      	bne.n	8007bae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007ba2:	4b08      	ldr	r3, [pc, #32]	@ (8007bc4 <osKernelInitialize+0x44>)
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	607b      	str	r3, [r7, #4]
 8007bac:	e002      	b.n	8007bb4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007bae:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bb4:	687b      	ldr	r3, [r7, #4]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	200005f4 	.word	0x200005f4

08007bc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bce:	f3ef 8305 	mrs	r3, IPSR
 8007bd2:	603b      	str	r3, [r7, #0]
  return(result);
 8007bd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007bda:	f06f 0305 	mvn.w	r3, #5
 8007bde:	607b      	str	r3, [r7, #4]
 8007be0:	e010      	b.n	8007c04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007be2:	4b0b      	ldr	r3, [pc, #44]	@ (8007c10 <osKernelStart+0x48>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d109      	bne.n	8007bfe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007bea:	f7ff ffbf 	bl	8007b6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007bee:	4b08      	ldr	r3, [pc, #32]	@ (8007c10 <osKernelStart+0x48>)
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007bf4:	f001 fe96 	bl	8009924 <vTaskStartScheduler>
      stat = osOK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	607b      	str	r3, [r7, #4]
 8007bfc:	e002      	b.n	8007c04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8007c02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c04:	687b      	ldr	r3, [r7, #4]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	200005f4 	.word	0x200005f4

08007c14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b08e      	sub	sp, #56	@ 0x38
 8007c18:	af04      	add	r7, sp, #16
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007c20:	2300      	movs	r3, #0
 8007c22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c24:	f3ef 8305 	mrs	r3, IPSR
 8007c28:	617b      	str	r3, [r7, #20]
  return(result);
 8007c2a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d17e      	bne.n	8007d2e <osThreadNew+0x11a>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d07b      	beq.n	8007d2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007c36:	2380      	movs	r3, #128	@ 0x80
 8007c38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007c3a:	2318      	movs	r3, #24
 8007c3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007c42:	f04f 33ff 	mov.w	r3, #4294967295
 8007c46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d045      	beq.n	8007cda <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d002      	beq.n	8007c5c <osThreadNew+0x48>
        name = attr->name;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d008      	beq.n	8007c82 <osThreadNew+0x6e>
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	2b38      	cmp	r3, #56	@ 0x38
 8007c74:	d805      	bhi.n	8007c82 <osThreadNew+0x6e>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <osThreadNew+0x72>
        return (NULL);
 8007c82:	2300      	movs	r3, #0
 8007c84:	e054      	b.n	8007d30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	089b      	lsrs	r3, r3, #2
 8007c94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00e      	beq.n	8007cbc <osThreadNew+0xa8>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	2b63      	cmp	r3, #99	@ 0x63
 8007ca4:	d90a      	bls.n	8007cbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d006      	beq.n	8007cbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <osThreadNew+0xa8>
        mem = 1;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	61bb      	str	r3, [r7, #24]
 8007cba:	e010      	b.n	8007cde <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10c      	bne.n	8007cde <osThreadNew+0xca>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d108      	bne.n	8007cde <osThreadNew+0xca>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d104      	bne.n	8007cde <osThreadNew+0xca>
          mem = 0;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	61bb      	str	r3, [r7, #24]
 8007cd8:	e001      	b.n	8007cde <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d110      	bne.n	8007d06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007cec:	9202      	str	r2, [sp, #8]
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	6a3a      	ldr	r2, [r7, #32]
 8007cf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f001 fc30 	bl	8009560 <xTaskCreateStatic>
 8007d00:	4603      	mov	r3, r0
 8007d02:	613b      	str	r3, [r7, #16]
 8007d04:	e013      	b.n	8007d2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d110      	bne.n	8007d2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	f107 0310 	add.w	r3, r7, #16
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f001 fc7e 	bl	8009620 <xTaskCreate>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d001      	beq.n	8007d2e <osThreadNew+0x11a>
            hTask = NULL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007d2e:	693b      	ldr	r3, [r7, #16]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3728      	adds	r7, #40	@ 0x28
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d40:	f3ef 8305 	mrs	r3, IPSR
 8007d44:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d46:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <osDelay+0x1c>
    stat = osErrorISR;
 8007d4c:	f06f 0305 	mvn.w	r3, #5
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	e007      	b.n	8007d64 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f001 fdaa 	bl	80098b8 <vTaskDelay>
    }
  }

  return (stat);
 8007d64:	68fb      	ldr	r3, [r7, #12]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b088      	sub	sp, #32
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d7a:	f3ef 8305 	mrs	r3, IPSR
 8007d7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d80:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d174      	bne.n	8007e70 <osMutexNew+0x102>
    if (attr != NULL) {
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	61bb      	str	r3, [r7, #24]
 8007d92:	e001      	b.n	8007d98 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007d94:	2300      	movs	r3, #0
 8007d96:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <osMutexNew+0x3a>
      rmtx = 1U;
 8007da2:	2301      	movs	r3, #1
 8007da4:	617b      	str	r3, [r7, #20]
 8007da6:	e001      	b.n	8007dac <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007da8:	2300      	movs	r3, #0
 8007daa:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	f003 0308 	and.w	r3, r3, #8
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d15c      	bne.n	8007e70 <osMutexNew+0x102>
      mem = -1;
 8007db6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dba:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d015      	beq.n	8007dee <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d006      	beq.n	8007dd8 <osMutexNew+0x6a>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	2b4f      	cmp	r3, #79	@ 0x4f
 8007dd0:	d902      	bls.n	8007dd8 <osMutexNew+0x6a>
          mem = 1;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	613b      	str	r3, [r7, #16]
 8007dd6:	e00c      	b.n	8007df2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d108      	bne.n	8007df2 <osMutexNew+0x84>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d104      	bne.n	8007df2 <osMutexNew+0x84>
            mem = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	613b      	str	r3, [r7, #16]
 8007dec:	e001      	b.n	8007df2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d112      	bne.n	8007e1e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d007      	beq.n	8007e0e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	4619      	mov	r1, r3
 8007e04:	2004      	movs	r0, #4
 8007e06:	f000 fc3e 	bl	8008686 <xQueueCreateMutexStatic>
 8007e0a:	61f8      	str	r0, [r7, #28]
 8007e0c:	e016      	b.n	8007e3c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	4619      	mov	r1, r3
 8007e14:	2001      	movs	r0, #1
 8007e16:	f000 fc36 	bl	8008686 <xQueueCreateMutexStatic>
 8007e1a:	61f8      	str	r0, [r7, #28]
 8007e1c:	e00e      	b.n	8007e3c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10b      	bne.n	8007e3c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d004      	beq.n	8007e34 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007e2a:	2004      	movs	r0, #4
 8007e2c:	f000 fc13 	bl	8008656 <xQueueCreateMutex>
 8007e30:	61f8      	str	r0, [r7, #28]
 8007e32:	e003      	b.n	8007e3c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007e34:	2001      	movs	r0, #1
 8007e36:	f000 fc0e 	bl	8008656 <xQueueCreateMutex>
 8007e3a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00c      	beq.n	8007e5c <osMutexNew+0xee>
        if (attr != NULL) {
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d003      	beq.n	8007e50 <osMutexNew+0xe2>
          name = attr->name;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	e001      	b.n	8007e54 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007e50:	2300      	movs	r3, #0
 8007e52:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007e54:	68f9      	ldr	r1, [r7, #12]
 8007e56:	69f8      	ldr	r0, [r7, #28]
 8007e58:	f001 fafa 	bl	8009450 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d006      	beq.n	8007e70 <osMutexNew+0x102>
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d003      	beq.n	8007e70 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	f043 0301 	orr.w	r3, r3, #1
 8007e6e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007e70:	69fb      	ldr	r3, [r7, #28]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3720      	adds	r7, #32
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b086      	sub	sp, #24
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f023 0301 	bic.w	r3, r3, #1
 8007e8a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e98:	f3ef 8305 	mrs	r3, IPSR
 8007e9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e9e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d003      	beq.n	8007eac <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007ea4:	f06f 0305 	mvn.w	r3, #5
 8007ea8:	617b      	str	r3, [r7, #20]
 8007eaa:	e02c      	b.n	8007f06 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d103      	bne.n	8007eba <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007eb2:	f06f 0303 	mvn.w	r3, #3
 8007eb6:	617b      	str	r3, [r7, #20]
 8007eb8:	e025      	b.n	8007f06 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d011      	beq.n	8007ee4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6938      	ldr	r0, [r7, #16]
 8007ec4:	f000 fc2f 	bl	8008726 <xQueueTakeMutexRecursive>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d01b      	beq.n	8007f06 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007ed4:	f06f 0301 	mvn.w	r3, #1
 8007ed8:	617b      	str	r3, [r7, #20]
 8007eda:	e014      	b.n	8007f06 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007edc:	f06f 0302 	mvn.w	r3, #2
 8007ee0:	617b      	str	r3, [r7, #20]
 8007ee2:	e010      	b.n	8007f06 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6938      	ldr	r0, [r7, #16]
 8007ee8:	f000 ffd4 	bl	8008e94 <xQueueSemaphoreTake>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d009      	beq.n	8007f06 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d003      	beq.n	8007f00 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007ef8:	f06f 0301 	mvn.w	r3, #1
 8007efc:	617b      	str	r3, [r7, #20]
 8007efe:	e002      	b.n	8007f06 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007f00:	f06f 0302 	mvn.w	r3, #2
 8007f04:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007f06:	697b      	ldr	r3, [r7, #20]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3718      	adds	r7, #24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f023 0301 	bic.w	r3, r3, #1
 8007f1e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f2c:	f3ef 8305 	mrs	r3, IPSR
 8007f30:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f32:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d003      	beq.n	8007f40 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007f38:	f06f 0305 	mvn.w	r3, #5
 8007f3c:	617b      	str	r3, [r7, #20]
 8007f3e:	e01f      	b.n	8007f80 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d103      	bne.n	8007f4e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007f46:	f06f 0303 	mvn.w	r3, #3
 8007f4a:	617b      	str	r3, [r7, #20]
 8007f4c:	e018      	b.n	8007f80 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d009      	beq.n	8007f68 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007f54:	6938      	ldr	r0, [r7, #16]
 8007f56:	f000 fbb1 	bl	80086bc <xQueueGiveMutexRecursive>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d00f      	beq.n	8007f80 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007f60:	f06f 0302 	mvn.w	r3, #2
 8007f64:	617b      	str	r3, [r7, #20]
 8007f66:	e00b      	b.n	8007f80 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007f68:	2300      	movs	r3, #0
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	6938      	ldr	r0, [r7, #16]
 8007f70:	f000 fc7e 	bl	8008870 <xQueueGenericSend>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d002      	beq.n	8007f80 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007f7a:	f06f 0302 	mvn.w	r3, #2
 8007f7e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007f80:	697b      	ldr	r3, [r7, #20]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3718      	adds	r7, #24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b08a      	sub	sp, #40	@ 0x28
 8007f8e:	af02      	add	r7, sp, #8
 8007f90:	60f8      	str	r0, [r7, #12]
 8007f92:	60b9      	str	r1, [r7, #8]
 8007f94:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007f96:	2300      	movs	r3, #0
 8007f98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f9a:	f3ef 8305 	mrs	r3, IPSR
 8007f9e:	613b      	str	r3, [r7, #16]
  return(result);
 8007fa0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d175      	bne.n	8008092 <osSemaphoreNew+0x108>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d072      	beq.n	8008092 <osSemaphoreNew+0x108>
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d86e      	bhi.n	8008092 <osSemaphoreNew+0x108>
    mem = -1;
 8007fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d015      	beq.n	8007fec <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d006      	beq.n	8007fd6 <osSemaphoreNew+0x4c>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	2b4f      	cmp	r3, #79	@ 0x4f
 8007fce:	d902      	bls.n	8007fd6 <osSemaphoreNew+0x4c>
        mem = 1;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	61bb      	str	r3, [r7, #24]
 8007fd4:	e00c      	b.n	8007ff0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d108      	bne.n	8007ff0 <osSemaphoreNew+0x66>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d104      	bne.n	8007ff0 <osSemaphoreNew+0x66>
          mem = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	61bb      	str	r3, [r7, #24]
 8007fea:	e001      	b.n	8007ff0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff6:	d04c      	beq.n	8008092 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d128      	bne.n	8008050 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d10a      	bne.n	800801a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	2203      	movs	r2, #3
 800800a:	9200      	str	r2, [sp, #0]
 800800c:	2200      	movs	r2, #0
 800800e:	2100      	movs	r1, #0
 8008010:	2001      	movs	r0, #1
 8008012:	f000 fa2b 	bl	800846c <xQueueGenericCreateStatic>
 8008016:	61f8      	str	r0, [r7, #28]
 8008018:	e005      	b.n	8008026 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800801a:	2203      	movs	r2, #3
 800801c:	2100      	movs	r1, #0
 800801e:	2001      	movs	r0, #1
 8008020:	f000 faa1 	bl	8008566 <xQueueGenericCreate>
 8008024:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d022      	beq.n	8008072 <osSemaphoreNew+0xe8>
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d01f      	beq.n	8008072 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008032:	2300      	movs	r3, #0
 8008034:	2200      	movs	r2, #0
 8008036:	2100      	movs	r1, #0
 8008038:	69f8      	ldr	r0, [r7, #28]
 800803a:	f000 fc19 	bl	8008870 <xQueueGenericSend>
 800803e:	4603      	mov	r3, r0
 8008040:	2b01      	cmp	r3, #1
 8008042:	d016      	beq.n	8008072 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008044:	69f8      	ldr	r0, [r7, #28]
 8008046:	f001 f8b7 	bl	80091b8 <vQueueDelete>
            hSemaphore = NULL;
 800804a:	2300      	movs	r3, #0
 800804c:	61fb      	str	r3, [r7, #28]
 800804e:	e010      	b.n	8008072 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d108      	bne.n	8008068 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	461a      	mov	r2, r3
 800805c:	68b9      	ldr	r1, [r7, #8]
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 fb98 	bl	8008794 <xQueueCreateCountingSemaphoreStatic>
 8008064:	61f8      	str	r0, [r7, #28]
 8008066:	e004      	b.n	8008072 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008068:	68b9      	ldr	r1, [r7, #8]
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f000 fbcb 	bl	8008806 <xQueueCreateCountingSemaphore>
 8008070:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00c      	beq.n	8008092 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <osSemaphoreNew+0xfc>
          name = attr->name;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	617b      	str	r3, [r7, #20]
 8008084:	e001      	b.n	800808a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008086:	2300      	movs	r3, #0
 8008088:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800808a:	6979      	ldr	r1, [r7, #20]
 800808c:	69f8      	ldr	r0, [r7, #28]
 800808e:	f001 f9df 	bl	8009450 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008092:	69fb      	ldr	r3, [r7, #28]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3720      	adds	r7, #32
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d103      	bne.n	80080bc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80080b4:	f06f 0303 	mvn.w	r3, #3
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	e039      	b.n	8008130 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080bc:	f3ef 8305 	mrs	r3, IPSR
 80080c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80080c2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d022      	beq.n	800810e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80080ce:	f06f 0303 	mvn.w	r3, #3
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	e02c      	b.n	8008130 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80080d6:	2300      	movs	r3, #0
 80080d8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80080da:	f107 0308 	add.w	r3, r7, #8
 80080de:	461a      	mov	r2, r3
 80080e0:	2100      	movs	r1, #0
 80080e2:	6938      	ldr	r0, [r7, #16]
 80080e4:	f000 ffe6 	bl	80090b4 <xQueueReceiveFromISR>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d003      	beq.n	80080f6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80080ee:	f06f 0302 	mvn.w	r3, #2
 80080f2:	617b      	str	r3, [r7, #20]
 80080f4:	e01c      	b.n	8008130 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d019      	beq.n	8008130 <osSemaphoreAcquire+0x94>
 80080fc:	4b0f      	ldr	r3, [pc, #60]	@ (800813c <osSemaphoreAcquire+0xa0>)
 80080fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	e010      	b.n	8008130 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6938      	ldr	r0, [r7, #16]
 8008112:	f000 febf 	bl	8008e94 <xQueueSemaphoreTake>
 8008116:	4603      	mov	r3, r0
 8008118:	2b01      	cmp	r3, #1
 800811a:	d009      	beq.n	8008130 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008122:	f06f 0301 	mvn.w	r3, #1
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	e002      	b.n	8008130 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800812a:	f06f 0302 	mvn.w	r3, #2
 800812e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008130:	697b      	ldr	r3, [r7, #20]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3718      	adds	r7, #24
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	e000ed04 	.word	0xe000ed04

08008140 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800814c:	2300      	movs	r3, #0
 800814e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d103      	bne.n	800815e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008156:	f06f 0303 	mvn.w	r3, #3
 800815a:	617b      	str	r3, [r7, #20]
 800815c:	e02c      	b.n	80081b8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800815e:	f3ef 8305 	mrs	r3, IPSR
 8008162:	60fb      	str	r3, [r7, #12]
  return(result);
 8008164:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008166:	2b00      	cmp	r3, #0
 8008168:	d01a      	beq.n	80081a0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800816a:	2300      	movs	r3, #0
 800816c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800816e:	f107 0308 	add.w	r3, r7, #8
 8008172:	4619      	mov	r1, r3
 8008174:	6938      	ldr	r0, [r7, #16]
 8008176:	f000 fd1b 	bl	8008bb0 <xQueueGiveFromISR>
 800817a:	4603      	mov	r3, r0
 800817c:	2b01      	cmp	r3, #1
 800817e:	d003      	beq.n	8008188 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008180:	f06f 0302 	mvn.w	r3, #2
 8008184:	617b      	str	r3, [r7, #20]
 8008186:	e017      	b.n	80081b8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d014      	beq.n	80081b8 <osSemaphoreRelease+0x78>
 800818e:	4b0d      	ldr	r3, [pc, #52]	@ (80081c4 <osSemaphoreRelease+0x84>)
 8008190:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	e00b      	b.n	80081b8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80081a0:	2300      	movs	r3, #0
 80081a2:	2200      	movs	r2, #0
 80081a4:	2100      	movs	r1, #0
 80081a6:	6938      	ldr	r0, [r7, #16]
 80081a8:	f000 fb62 	bl	8008870 <xQueueGenericSend>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d002      	beq.n	80081b8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80081b2:	f06f 0302 	mvn.w	r3, #2
 80081b6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80081b8:	697b      	ldr	r3, [r7, #20]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	e000ed04 	.word	0xe000ed04

080081c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4a07      	ldr	r2, [pc, #28]	@ (80081f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80081d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	4a06      	ldr	r2, [pc, #24]	@ (80081f8 <vApplicationGetIdleTaskMemory+0x30>)
 80081de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2280      	movs	r2, #128	@ 0x80
 80081e4:	601a      	str	r2, [r3, #0]
}
 80081e6:	bf00      	nop
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	200005f8 	.word	0x200005f8
 80081f8:	2000065c 	.word	0x2000065c

080081fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4a07      	ldr	r2, [pc, #28]	@ (8008228 <vApplicationGetTimerTaskMemory+0x2c>)
 800820c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	4a06      	ldr	r2, [pc, #24]	@ (800822c <vApplicationGetTimerTaskMemory+0x30>)
 8008212:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800821a:	601a      	str	r2, [r3, #0]
}
 800821c:	bf00      	nop
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	2000085c 	.word	0x2000085c
 800822c:	200008c0 	.word	0x200008c0

08008230 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f103 0208 	add.w	r2, r3, #8
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f04f 32ff 	mov.w	r2, #4294967295
 8008248:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f103 0208 	add.w	r2, r3, #8
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f103 0208 	add.w	r2, r3, #8
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800828a:	b480      	push	{r7}
 800828c:	b085      	sub	sp, #20
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	689a      	ldr	r2, [r3, #8]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	601a      	str	r2, [r3, #0]
}
 80082c6:	bf00      	nop
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082d2:	b480      	push	{r7}
 80082d4:	b085      	sub	sp, #20
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e8:	d103      	bne.n	80082f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	e00c      	b.n	800830c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	3308      	adds	r3, #8
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	e002      	b.n	8008300 <vListInsert+0x2e>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	429a      	cmp	r2, r3
 800830a:	d2f6      	bcs.n	80082fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	683a      	ldr	r2, [r7, #0]
 800831a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	683a      	ldr	r2, [r7, #0]
 8008326:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	1c5a      	adds	r2, r3, #1
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	601a      	str	r2, [r3, #0]
}
 8008338:	bf00      	nop
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	6892      	ldr	r2, [r2, #8]
 800835a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	6852      	ldr	r2, [r2, #4]
 8008364:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	429a      	cmp	r2, r3
 800836e:	d103      	bne.n	8008378 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	689a      	ldr	r2, [r3, #8]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	1e5a      	subs	r2, r3, #1
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10b      	bne.n	80083c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80083ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80083be:	bf00      	nop
 80083c0:	bf00      	nop
 80083c2:	e7fd      	b.n	80083c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80083c4:	f002 fd98 	bl	800aef8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d0:	68f9      	ldr	r1, [r7, #12]
 80083d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80083d4:	fb01 f303 	mul.w	r3, r1, r3
 80083d8:	441a      	add	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083f4:	3b01      	subs	r3, #1
 80083f6:	68f9      	ldr	r1, [r7, #12]
 80083f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80083fa:	fb01 f303 	mul.w	r3, r1, r3
 80083fe:	441a      	add	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	22ff      	movs	r2, #255	@ 0xff
 8008408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	22ff      	movs	r2, #255	@ 0xff
 8008410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d114      	bne.n	8008444 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d01a      	beq.n	8008458 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	3310      	adds	r3, #16
 8008426:	4618      	mov	r0, r3
 8008428:	f001 fd28 	bl	8009e7c <xTaskRemoveFromEventList>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d012      	beq.n	8008458 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008432:	4b0d      	ldr	r3, [pc, #52]	@ (8008468 <xQueueGenericReset+0xd0>)
 8008434:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	e009      	b.n	8008458 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3310      	adds	r3, #16
 8008448:	4618      	mov	r0, r3
 800844a:	f7ff fef1 	bl	8008230 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3324      	adds	r3, #36	@ 0x24
 8008452:	4618      	mov	r0, r3
 8008454:	f7ff feec 	bl	8008230 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008458:	f002 fd80 	bl	800af5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800845c:	2301      	movs	r3, #1
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800846c:	b580      	push	{r7, lr}
 800846e:	b08e      	sub	sp, #56	@ 0x38
 8008470:	af02      	add	r7, sp, #8
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10b      	bne.n	8008498 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008492:	bf00      	nop
 8008494:	bf00      	nop
 8008496:	e7fd      	b.n	8008494 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10b      	bne.n	80084b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	e7fd      	b.n	80084b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <xQueueGenericCreateStatic+0x56>
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <xQueueGenericCreateStatic+0x5a>
 80084c2:	2301      	movs	r3, #1
 80084c4:	e000      	b.n	80084c8 <xQueueGenericCreateStatic+0x5c>
 80084c6:	2300      	movs	r3, #0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10b      	bne.n	80084e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	623b      	str	r3, [r7, #32]
}
 80084de:	bf00      	nop
 80084e0:	bf00      	nop
 80084e2:	e7fd      	b.n	80084e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d102      	bne.n	80084f0 <xQueueGenericCreateStatic+0x84>
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <xQueueGenericCreateStatic+0x88>
 80084f0:	2301      	movs	r3, #1
 80084f2:	e000      	b.n	80084f6 <xQueueGenericCreateStatic+0x8a>
 80084f4:	2300      	movs	r3, #0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10b      	bne.n	8008512 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	61fb      	str	r3, [r7, #28]
}
 800850c:	bf00      	nop
 800850e:	bf00      	nop
 8008510:	e7fd      	b.n	800850e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008512:	2350      	movs	r3, #80	@ 0x50
 8008514:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b50      	cmp	r3, #80	@ 0x50
 800851a:	d00b      	beq.n	8008534 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	61bb      	str	r3, [r7, #24]
}
 800852e:	bf00      	nop
 8008530:	bf00      	nop
 8008532:	e7fd      	b.n	8008530 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008534:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800853a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00d      	beq.n	800855c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008548:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800854c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	4613      	mov	r3, r2
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	68b9      	ldr	r1, [r7, #8]
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f000 f840 	bl	80085dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800855c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800855e:	4618      	mov	r0, r3
 8008560:	3730      	adds	r7, #48	@ 0x30
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008566:	b580      	push	{r7, lr}
 8008568:	b08a      	sub	sp, #40	@ 0x28
 800856a:	af02      	add	r7, sp, #8
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	4613      	mov	r3, r2
 8008572:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10b      	bne.n	8008592 <xQueueGenericCreate+0x2c>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	613b      	str	r3, [r7, #16]
}
 800858c:	bf00      	nop
 800858e:	bf00      	nop
 8008590:	e7fd      	b.n	800858e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	68ba      	ldr	r2, [r7, #8]
 8008596:	fb02 f303 	mul.w	r3, r2, r3
 800859a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	3350      	adds	r3, #80	@ 0x50
 80085a0:	4618      	mov	r0, r3
 80085a2:	f002 fdcb 	bl	800b13c <pvPortMalloc>
 80085a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d011      	beq.n	80085d2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	3350      	adds	r3, #80	@ 0x50
 80085b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80085c0:	79fa      	ldrb	r2, [r7, #7]
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	4613      	mov	r3, r2
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	68b9      	ldr	r1, [r7, #8]
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 f805 	bl	80085dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085d2:	69bb      	ldr	r3, [r7, #24]
	}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3720      	adds	r7, #32
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d103      	bne.n	80085f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	69ba      	ldr	r2, [r7, #24]
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	e002      	b.n	80085fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800860a:	2101      	movs	r1, #1
 800860c:	69b8      	ldr	r0, [r7, #24]
 800860e:	f7ff fec3 	bl	8008398 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	78fa      	ldrb	r2, [r7, #3]
 8008616:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800861a:	bf00      	nop
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008622:	b580      	push	{r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00e      	beq.n	800864e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008642:	2300      	movs	r3, #0
 8008644:	2200      	movs	r2, #0
 8008646:	2100      	movs	r1, #0
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f911 	bl	8008870 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800864e:	bf00      	nop
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008656:	b580      	push	{r7, lr}
 8008658:	b086      	sub	sp, #24
 800865a:	af00      	add	r7, sp, #0
 800865c:	4603      	mov	r3, r0
 800865e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008660:	2301      	movs	r3, #1
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	2300      	movs	r3, #0
 8008666:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008668:	79fb      	ldrb	r3, [r7, #7]
 800866a:	461a      	mov	r2, r3
 800866c:	6939      	ldr	r1, [r7, #16]
 800866e:	6978      	ldr	r0, [r7, #20]
 8008670:	f7ff ff79 	bl	8008566 <xQueueGenericCreate>
 8008674:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f7ff ffd3 	bl	8008622 <prvInitialiseMutex>

		return xNewQueue;
 800867c:	68fb      	ldr	r3, [r7, #12]
	}
 800867e:	4618      	mov	r0, r3
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008686:	b580      	push	{r7, lr}
 8008688:	b088      	sub	sp, #32
 800868a:	af02      	add	r7, sp, #8
 800868c:	4603      	mov	r3, r0
 800868e:	6039      	str	r1, [r7, #0]
 8008690:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008692:	2301      	movs	r3, #1
 8008694:	617b      	str	r3, [r7, #20]
 8008696:	2300      	movs	r3, #0
 8008698:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800869a:	79fb      	ldrb	r3, [r7, #7]
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2200      	movs	r2, #0
 80086a2:	6939      	ldr	r1, [r7, #16]
 80086a4:	6978      	ldr	r0, [r7, #20]
 80086a6:	f7ff fee1 	bl	800846c <xQueueGenericCreateStatic>
 80086aa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7ff ffb8 	bl	8008622 <prvInitialiseMutex>

		return xNewQueue;
 80086b2:	68fb      	ldr	r3, [r7, #12]
	}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3718      	adds	r7, #24
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80086bc:	b590      	push	{r4, r7, lr}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10b      	bne.n	80086e6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	60fb      	str	r3, [r7, #12]
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	e7fd      	b.n	80086e2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	689c      	ldr	r4, [r3, #8]
 80086ea:	f001 fd87 	bl	800a1fc <xTaskGetCurrentTaskHandle>
 80086ee:	4603      	mov	r3, r0
 80086f0:	429c      	cmp	r4, r3
 80086f2:	d111      	bne.n	8008718 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	1e5a      	subs	r2, r3, #1
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d105      	bne.n	8008712 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008706:	2300      	movs	r3, #0
 8008708:	2200      	movs	r2, #0
 800870a:	2100      	movs	r1, #0
 800870c:	6938      	ldr	r0, [r7, #16]
 800870e:	f000 f8af 	bl	8008870 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008712:	2301      	movs	r3, #1
 8008714:	617b      	str	r3, [r7, #20]
 8008716:	e001      	b.n	800871c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008718:	2300      	movs	r3, #0
 800871a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800871c:	697b      	ldr	r3, [r7, #20]
	}
 800871e:	4618      	mov	r0, r3
 8008720:	371c      	adds	r7, #28
 8008722:	46bd      	mov	sp, r7
 8008724:	bd90      	pop	{r4, r7, pc}

08008726 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008726:	b590      	push	{r4, r7, lr}
 8008728:	b087      	sub	sp, #28
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10b      	bne.n	8008752 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	60fb      	str	r3, [r7, #12]
}
 800874c:	bf00      	nop
 800874e:	bf00      	nop
 8008750:	e7fd      	b.n	800874e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	689c      	ldr	r4, [r3, #8]
 8008756:	f001 fd51 	bl	800a1fc <xTaskGetCurrentTaskHandle>
 800875a:	4603      	mov	r3, r0
 800875c:	429c      	cmp	r4, r3
 800875e:	d107      	bne.n	8008770 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	1c5a      	adds	r2, r3, #1
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800876a:	2301      	movs	r3, #1
 800876c:	617b      	str	r3, [r7, #20]
 800876e:	e00c      	b.n	800878a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6938      	ldr	r0, [r7, #16]
 8008774:	f000 fb8e 	bl	8008e94 <xQueueSemaphoreTake>
 8008778:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d004      	beq.n	800878a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	1c5a      	adds	r2, r3, #1
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800878a:	697b      	ldr	r3, [r7, #20]
	}
 800878c:	4618      	mov	r0, r3
 800878e:	371c      	adds	r7, #28
 8008790:	46bd      	mov	sp, r7
 8008792:	bd90      	pop	{r4, r7, pc}

08008794 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08a      	sub	sp, #40	@ 0x28
 8008798:	af02      	add	r7, sp, #8
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10b      	bne.n	80087be <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80087a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	61bb      	str	r3, [r7, #24]
}
 80087b8:	bf00      	nop
 80087ba:	bf00      	nop
 80087bc:	e7fd      	b.n	80087ba <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d90b      	bls.n	80087de <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80087c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	617b      	str	r3, [r7, #20]
}
 80087d8:	bf00      	nop
 80087da:	bf00      	nop
 80087dc:	e7fd      	b.n	80087da <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80087de:	2302      	movs	r3, #2
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	2100      	movs	r1, #0
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f7ff fe3f 	bl	800846c <xQueueGenericCreateStatic>
 80087ee:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d002      	beq.n	80087fc <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80087fc:	69fb      	ldr	r3, [r7, #28]
	}
 80087fe:	4618      	mov	r0, r3
 8008800:	3720      	adds	r7, #32
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008806:	b580      	push	{r7, lr}
 8008808:	b086      	sub	sp, #24
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10b      	bne.n	800882e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	613b      	str	r3, [r7, #16]
}
 8008828:	bf00      	nop
 800882a:	bf00      	nop
 800882c:	e7fd      	b.n	800882a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	429a      	cmp	r2, r3
 8008834:	d90b      	bls.n	800884e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8008836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	60fb      	str	r3, [r7, #12]
}
 8008848:	bf00      	nop
 800884a:	bf00      	nop
 800884c:	e7fd      	b.n	800884a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800884e:	2202      	movs	r2, #2
 8008850:	2100      	movs	r1, #0
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7ff fe87 	bl	8008566 <xQueueGenericCreate>
 8008858:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008866:	697b      	ldr	r3, [r7, #20]
	}
 8008868:	4618      	mov	r0, r3
 800886a:	3718      	adds	r7, #24
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b08e      	sub	sp, #56	@ 0x38
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
 800887c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800887e:	2300      	movs	r3, #0
 8008880:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10b      	bne.n	80088a4 <xQueueGenericSend+0x34>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800889e:	bf00      	nop
 80088a0:	bf00      	nop
 80088a2:	e7fd      	b.n	80088a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d103      	bne.n	80088b2 <xQueueGenericSend+0x42>
 80088aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <xQueueGenericSend+0x46>
 80088b2:	2301      	movs	r3, #1
 80088b4:	e000      	b.n	80088b8 <xQueueGenericSend+0x48>
 80088b6:	2300      	movs	r3, #0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10b      	bne.n	80088d4 <xQueueGenericSend+0x64>
	__asm volatile
 80088bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80088ce:	bf00      	nop
 80088d0:	bf00      	nop
 80088d2:	e7fd      	b.n	80088d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d103      	bne.n	80088e2 <xQueueGenericSend+0x72>
 80088da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d101      	bne.n	80088e6 <xQueueGenericSend+0x76>
 80088e2:	2301      	movs	r3, #1
 80088e4:	e000      	b.n	80088e8 <xQueueGenericSend+0x78>
 80088e6:	2300      	movs	r3, #0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10b      	bne.n	8008904 <xQueueGenericSend+0x94>
	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	623b      	str	r3, [r7, #32]
}
 80088fe:	bf00      	nop
 8008900:	bf00      	nop
 8008902:	e7fd      	b.n	8008900 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008904:	f001 fc8a 	bl	800a21c <xTaskGetSchedulerState>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d102      	bne.n	8008914 <xQueueGenericSend+0xa4>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <xQueueGenericSend+0xa8>
 8008914:	2301      	movs	r3, #1
 8008916:	e000      	b.n	800891a <xQueueGenericSend+0xaa>
 8008918:	2300      	movs	r3, #0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10b      	bne.n	8008936 <xQueueGenericSend+0xc6>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	61fb      	str	r3, [r7, #28]
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	e7fd      	b.n	8008932 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008936:	f002 fadf 	bl	800aef8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800893a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800893e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008942:	429a      	cmp	r2, r3
 8008944:	d302      	bcc.n	800894c <xQueueGenericSend+0xdc>
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b02      	cmp	r3, #2
 800894a:	d129      	bne.n	80089a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	68b9      	ldr	r1, [r7, #8]
 8008950:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008952:	f000 fc6d 	bl	8009230 <prvCopyDataToQueue>
 8008956:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	d010      	beq.n	8008982 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008962:	3324      	adds	r3, #36	@ 0x24
 8008964:	4618      	mov	r0, r3
 8008966:	f001 fa89 	bl	8009e7c <xTaskRemoveFromEventList>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d013      	beq.n	8008998 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008970:	4b3f      	ldr	r3, [pc, #252]	@ (8008a70 <xQueueGenericSend+0x200>)
 8008972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	e00a      	b.n	8008998 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008984:	2b00      	cmp	r3, #0
 8008986:	d007      	beq.n	8008998 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008988:	4b39      	ldr	r3, [pc, #228]	@ (8008a70 <xQueueGenericSend+0x200>)
 800898a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800898e:	601a      	str	r2, [r3, #0]
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008998:	f002 fae0 	bl	800af5c <vPortExitCritical>
				return pdPASS;
 800899c:	2301      	movs	r3, #1
 800899e:	e063      	b.n	8008a68 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d103      	bne.n	80089ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089a6:	f002 fad9 	bl	800af5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089aa:	2300      	movs	r3, #0
 80089ac:	e05c      	b.n	8008a68 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d106      	bne.n	80089c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089b4:	f107 0314 	add.w	r3, r7, #20
 80089b8:	4618      	mov	r0, r3
 80089ba:	f001 fac3 	bl	8009f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089be:	2301      	movs	r3, #1
 80089c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089c2:	f002 facb 	bl	800af5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089c6:	f001 f817 	bl	80099f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089ca:	f002 fa95 	bl	800aef8 <vPortEnterCritical>
 80089ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089d4:	b25b      	sxtb	r3, r3
 80089d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089da:	d103      	bne.n	80089e4 <xQueueGenericSend+0x174>
 80089dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089ea:	b25b      	sxtb	r3, r3
 80089ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f0:	d103      	bne.n	80089fa <xQueueGenericSend+0x18a>
 80089f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089fa:	f002 faaf 	bl	800af5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089fe:	1d3a      	adds	r2, r7, #4
 8008a00:	f107 0314 	add.w	r3, r7, #20
 8008a04:	4611      	mov	r1, r2
 8008a06:	4618      	mov	r0, r3
 8008a08:	f001 fab2 	bl	8009f70 <xTaskCheckForTimeOut>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d124      	bne.n	8008a5c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a14:	f000 fd04 	bl	8009420 <prvIsQueueFull>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d018      	beq.n	8008a50 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a20:	3310      	adds	r3, #16
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	4611      	mov	r1, r2
 8008a26:	4618      	mov	r0, r3
 8008a28:	f001 f9d6 	bl	8009dd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a2e:	f000 fc8f 	bl	8009350 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a32:	f000 ffef 	bl	8009a14 <xTaskResumeAll>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f47f af7c 	bne.w	8008936 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8008a70 <xQueueGenericSend+0x200>)
 8008a40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a44:	601a      	str	r2, [r3, #0]
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	e772      	b.n	8008936 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a52:	f000 fc7d 	bl	8009350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a56:	f000 ffdd 	bl	8009a14 <xTaskResumeAll>
 8008a5a:	e76c      	b.n	8008936 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a5e:	f000 fc77 	bl	8009350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a62:	f000 ffd7 	bl	8009a14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3738      	adds	r7, #56	@ 0x38
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	e000ed04 	.word	0xe000ed04

08008a74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b090      	sub	sp, #64	@ 0x40
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10b      	bne.n	8008aa4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a9e:	bf00      	nop
 8008aa0:	bf00      	nop
 8008aa2:	e7fd      	b.n	8008aa0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d103      	bne.n	8008ab2 <xQueueGenericSendFromISR+0x3e>
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <xQueueGenericSendFromISR+0x42>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e000      	b.n	8008ab8 <xQueueGenericSendFromISR+0x44>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10b      	bne.n	8008ad4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008ace:	bf00      	nop
 8008ad0:	bf00      	nop
 8008ad2:	e7fd      	b.n	8008ad0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d103      	bne.n	8008ae2 <xQueueGenericSendFromISR+0x6e>
 8008ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d101      	bne.n	8008ae6 <xQueueGenericSendFromISR+0x72>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e000      	b.n	8008ae8 <xQueueGenericSendFromISR+0x74>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10b      	bne.n	8008b04 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	623b      	str	r3, [r7, #32]
}
 8008afe:	bf00      	nop
 8008b00:	bf00      	nop
 8008b02:	e7fd      	b.n	8008b00 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b04:	f002 fad8 	bl	800b0b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b08:	f3ef 8211 	mrs	r2, BASEPRI
 8008b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	61fa      	str	r2, [r7, #28]
 8008b1e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b20:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b22:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d302      	bcc.n	8008b36 <xQueueGenericSendFromISR+0xc2>
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d12f      	bne.n	8008b96 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	68b9      	ldr	r1, [r7, #8]
 8008b4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b4c:	f000 fb70 	bl	8009230 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b50:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b58:	d112      	bne.n	8008b80 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d016      	beq.n	8008b90 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b64:	3324      	adds	r3, #36	@ 0x24
 8008b66:	4618      	mov	r0, r3
 8008b68:	f001 f988 	bl	8009e7c <xTaskRemoveFromEventList>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00e      	beq.n	8008b90 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00b      	beq.n	8008b90 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	e007      	b.n	8008b90 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008b84:	3301      	adds	r3, #1
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	b25a      	sxtb	r2, r3
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008b90:	2301      	movs	r3, #1
 8008b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008b94:	e001      	b.n	8008b9a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b96:	2300      	movs	r3, #0
 8008b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b9c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ba4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3740      	adds	r7, #64	@ 0x40
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b08e      	sub	sp, #56	@ 0x38
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10b      	bne.n	8008bdc <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	623b      	str	r3, [r7, #32]
}
 8008bd6:	bf00      	nop
 8008bd8:	bf00      	nop
 8008bda:	e7fd      	b.n	8008bd8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00b      	beq.n	8008bfc <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	61fb      	str	r3, [r7, #28]
}
 8008bf6:	bf00      	nop
 8008bf8:	bf00      	nop
 8008bfa:	e7fd      	b.n	8008bf8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d103      	bne.n	8008c0c <xQueueGiveFromISR+0x5c>
 8008c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d101      	bne.n	8008c10 <xQueueGiveFromISR+0x60>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e000      	b.n	8008c12 <xQueueGiveFromISR+0x62>
 8008c10:	2300      	movs	r3, #0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10b      	bne.n	8008c2e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	61bb      	str	r3, [r7, #24]
}
 8008c28:	bf00      	nop
 8008c2a:	bf00      	nop
 8008c2c:	e7fd      	b.n	8008c2a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c2e:	f002 fa43 	bl	800b0b8 <vPortValidateInterruptPriority>
	__asm volatile
 8008c32:	f3ef 8211 	mrs	r2, BASEPRI
 8008c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	617a      	str	r2, [r7, #20]
 8008c48:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008c4a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c52:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d22b      	bcs.n	8008cb6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c70:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c78:	d112      	bne.n	8008ca0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d016      	beq.n	8008cb0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c84:	3324      	adds	r3, #36	@ 0x24
 8008c86:	4618      	mov	r0, r3
 8008c88:	f001 f8f8 	bl	8009e7c <xTaskRemoveFromEventList>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00e      	beq.n	8008cb0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00b      	beq.n	8008cb0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	e007      	b.n	8008cb0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	b25a      	sxtb	r2, r3
 8008caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cb4:	e001      	b.n	8008cba <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cbc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f383 8811 	msr	BASEPRI, r3
}
 8008cc4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3738      	adds	r7, #56	@ 0x38
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b08c      	sub	sp, #48	@ 0x30
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10b      	bne.n	8008d02 <xQueueReceive+0x32>
	__asm volatile
 8008cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	623b      	str	r3, [r7, #32]
}
 8008cfc:	bf00      	nop
 8008cfe:	bf00      	nop
 8008d00:	e7fd      	b.n	8008cfe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d103      	bne.n	8008d10 <xQueueReceive+0x40>
 8008d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d101      	bne.n	8008d14 <xQueueReceive+0x44>
 8008d10:	2301      	movs	r3, #1
 8008d12:	e000      	b.n	8008d16 <xQueueReceive+0x46>
 8008d14:	2300      	movs	r3, #0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10b      	bne.n	8008d32 <xQueueReceive+0x62>
	__asm volatile
 8008d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	61fb      	str	r3, [r7, #28]
}
 8008d2c:	bf00      	nop
 8008d2e:	bf00      	nop
 8008d30:	e7fd      	b.n	8008d2e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d32:	f001 fa73 	bl	800a21c <xTaskGetSchedulerState>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d102      	bne.n	8008d42 <xQueueReceive+0x72>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d101      	bne.n	8008d46 <xQueueReceive+0x76>
 8008d42:	2301      	movs	r3, #1
 8008d44:	e000      	b.n	8008d48 <xQueueReceive+0x78>
 8008d46:	2300      	movs	r3, #0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10b      	bne.n	8008d64 <xQueueReceive+0x94>
	__asm volatile
 8008d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d50:	f383 8811 	msr	BASEPRI, r3
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	61bb      	str	r3, [r7, #24]
}
 8008d5e:	bf00      	nop
 8008d60:	bf00      	nop
 8008d62:	e7fd      	b.n	8008d60 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d64:	f002 f8c8 	bl	800aef8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d6c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d01f      	beq.n	8008db4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d74:	68b9      	ldr	r1, [r7, #8]
 8008d76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d78:	f000 fac4 	bl	8009304 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7e:	1e5a      	subs	r2, r3, #1
 8008d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d82:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00f      	beq.n	8008dac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8e:	3310      	adds	r3, #16
 8008d90:	4618      	mov	r0, r3
 8008d92:	f001 f873 	bl	8009e7c <xTaskRemoveFromEventList>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d007      	beq.n	8008dac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d9c:	4b3c      	ldr	r3, [pc, #240]	@ (8008e90 <xQueueReceive+0x1c0>)
 8008d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008dac:	f002 f8d6 	bl	800af5c <vPortExitCritical>
				return pdPASS;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e069      	b.n	8008e88 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d103      	bne.n	8008dc2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008dba:	f002 f8cf 	bl	800af5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e062      	b.n	8008e88 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d106      	bne.n	8008dd6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dc8:	f107 0310 	add.w	r3, r7, #16
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f001 f8b9 	bl	8009f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dd6:	f002 f8c1 	bl	800af5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dda:	f000 fe0d 	bl	80099f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dde:	f002 f88b 	bl	800aef8 <vPortEnterCritical>
 8008de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008de8:	b25b      	sxtb	r3, r3
 8008dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dee:	d103      	bne.n	8008df8 <xQueueReceive+0x128>
 8008df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008dfe:	b25b      	sxtb	r3, r3
 8008e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e04:	d103      	bne.n	8008e0e <xQueueReceive+0x13e>
 8008e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e0e:	f002 f8a5 	bl	800af5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e12:	1d3a      	adds	r2, r7, #4
 8008e14:	f107 0310 	add.w	r3, r7, #16
 8008e18:	4611      	mov	r1, r2
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f001 f8a8 	bl	8009f70 <xTaskCheckForTimeOut>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d123      	bne.n	8008e6e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e28:	f000 fae4 	bl	80093f4 <prvIsQueueEmpty>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d017      	beq.n	8008e62 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e34:	3324      	adds	r3, #36	@ 0x24
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	4611      	mov	r1, r2
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 ffcc 	bl	8009dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e42:	f000 fa85 	bl	8009350 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e46:	f000 fde5 	bl	8009a14 <xTaskResumeAll>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d189      	bne.n	8008d64 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e50:	4b0f      	ldr	r3, [pc, #60]	@ (8008e90 <xQueueReceive+0x1c0>)
 8008e52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	e780      	b.n	8008d64 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e64:	f000 fa74 	bl	8009350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e68:	f000 fdd4 	bl	8009a14 <xTaskResumeAll>
 8008e6c:	e77a      	b.n	8008d64 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e70:	f000 fa6e 	bl	8009350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e74:	f000 fdce 	bl	8009a14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e7a:	f000 fabb 	bl	80093f4 <prvIsQueueEmpty>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f43f af6f 	beq.w	8008d64 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3730      	adds	r7, #48	@ 0x30
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	e000ed04 	.word	0xe000ed04

08008e94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b08e      	sub	sp, #56	@ 0x38
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10b      	bne.n	8008ec8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	623b      	str	r3, [r7, #32]
}
 8008ec2:	bf00      	nop
 8008ec4:	bf00      	nop
 8008ec6:	e7fd      	b.n	8008ec4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00b      	beq.n	8008ee8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	61fb      	str	r3, [r7, #28]
}
 8008ee2:	bf00      	nop
 8008ee4:	bf00      	nop
 8008ee6:	e7fd      	b.n	8008ee4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ee8:	f001 f998 	bl	800a21c <xTaskGetSchedulerState>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d102      	bne.n	8008ef8 <xQueueSemaphoreTake+0x64>
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d101      	bne.n	8008efc <xQueueSemaphoreTake+0x68>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e000      	b.n	8008efe <xQueueSemaphoreTake+0x6a>
 8008efc:	2300      	movs	r3, #0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10b      	bne.n	8008f1a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f06:	f383 8811 	msr	BASEPRI, r3
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	61bb      	str	r3, [r7, #24]
}
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop
 8008f18:	e7fd      	b.n	8008f16 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f1a:	f001 ffed 	bl	800aef8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f22:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d024      	beq.n	8008f74 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2c:	1e5a      	subs	r2, r3, #1
 8008f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f30:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d104      	bne.n	8008f44 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008f3a:	f001 fae9 	bl	800a510 <pvTaskIncrementMutexHeldCount>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f42:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00f      	beq.n	8008f6c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f4e:	3310      	adds	r3, #16
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 ff93 	bl	8009e7c <xTaskRemoveFromEventList>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d007      	beq.n	8008f6c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f5c:	4b54      	ldr	r3, [pc, #336]	@ (80090b0 <xQueueSemaphoreTake+0x21c>)
 8008f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f6c:	f001 fff6 	bl	800af5c <vPortExitCritical>
				return pdPASS;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e098      	b.n	80090a6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d112      	bne.n	8008fa0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00b      	beq.n	8008f98 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	617b      	str	r3, [r7, #20]
}
 8008f92:	bf00      	nop
 8008f94:	bf00      	nop
 8008f96:	e7fd      	b.n	8008f94 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008f98:	f001 ffe0 	bl	800af5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	e082      	b.n	80090a6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d106      	bne.n	8008fb4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fa6:	f107 030c 	add.w	r3, r7, #12
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 ffca 	bl	8009f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fb4:	f001 ffd2 	bl	800af5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fb8:	f000 fd1e 	bl	80099f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fbc:	f001 ff9c 	bl	800aef8 <vPortEnterCritical>
 8008fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fc6:	b25b      	sxtb	r3, r3
 8008fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fcc:	d103      	bne.n	8008fd6 <xQueueSemaphoreTake+0x142>
 8008fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fdc:	b25b      	sxtb	r3, r3
 8008fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe2:	d103      	bne.n	8008fec <xQueueSemaphoreTake+0x158>
 8008fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fec:	f001 ffb6 	bl	800af5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ff0:	463a      	mov	r2, r7
 8008ff2:	f107 030c 	add.w	r3, r7, #12
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 ffb9 	bl	8009f70 <xTaskCheckForTimeOut>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d132      	bne.n	800906a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009004:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009006:	f000 f9f5 	bl	80093f4 <prvIsQueueEmpty>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d026      	beq.n	800905e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d109      	bne.n	800902c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009018:	f001 ff6e 	bl	800aef8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800901c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	4618      	mov	r0, r3
 8009022:	f001 f919 	bl	800a258 <xTaskPriorityInherit>
 8009026:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009028:	f001 ff98 	bl	800af5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800902c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800902e:	3324      	adds	r3, #36	@ 0x24
 8009030:	683a      	ldr	r2, [r7, #0]
 8009032:	4611      	mov	r1, r2
 8009034:	4618      	mov	r0, r3
 8009036:	f000 fecf 	bl	8009dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800903a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800903c:	f000 f988 	bl	8009350 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009040:	f000 fce8 	bl	8009a14 <xTaskResumeAll>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	f47f af67 	bne.w	8008f1a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800904c:	4b18      	ldr	r3, [pc, #96]	@ (80090b0 <xQueueSemaphoreTake+0x21c>)
 800904e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009052:	601a      	str	r2, [r3, #0]
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	e75d      	b.n	8008f1a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800905e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009060:	f000 f976 	bl	8009350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009064:	f000 fcd6 	bl	8009a14 <xTaskResumeAll>
 8009068:	e757      	b.n	8008f1a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800906a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800906c:	f000 f970 	bl	8009350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009070:	f000 fcd0 	bl	8009a14 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009074:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009076:	f000 f9bd 	bl	80093f4 <prvIsQueueEmpty>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	f43f af4c 	beq.w	8008f1a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009084:	2b00      	cmp	r3, #0
 8009086:	d00d      	beq.n	80090a4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009088:	f001 ff36 	bl	800aef8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800908c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800908e:	f000 f8b7 	bl	8009200 <prvGetDisinheritPriorityAfterTimeout>
 8009092:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800909a:	4618      	mov	r0, r3
 800909c:	f001 f9b4 	bl	800a408 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80090a0:	f001 ff5c 	bl	800af5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3738      	adds	r7, #56	@ 0x38
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	e000ed04 	.word	0xe000ed04

080090b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b08e      	sub	sp, #56	@ 0x38
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80090c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10b      	bne.n	80090e2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	623b      	str	r3, [r7, #32]
}
 80090dc:	bf00      	nop
 80090de:	bf00      	nop
 80090e0:	e7fd      	b.n	80090de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d103      	bne.n	80090f0 <xQueueReceiveFromISR+0x3c>
 80090e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <xQueueReceiveFromISR+0x40>
 80090f0:	2301      	movs	r3, #1
 80090f2:	e000      	b.n	80090f6 <xQueueReceiveFromISR+0x42>
 80090f4:	2300      	movs	r3, #0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10b      	bne.n	8009112 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	61fb      	str	r3, [r7, #28]
}
 800910c:	bf00      	nop
 800910e:	bf00      	nop
 8009110:	e7fd      	b.n	800910e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009112:	f001 ffd1 	bl	800b0b8 <vPortValidateInterruptPriority>
	__asm volatile
 8009116:	f3ef 8211 	mrs	r2, BASEPRI
 800911a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	61ba      	str	r2, [r7, #24]
 800912c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800912e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009130:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009136:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913a:	2b00      	cmp	r3, #0
 800913c:	d02f      	beq.n	800919e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800913e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009140:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009144:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009148:	68b9      	ldr	r1, [r7, #8]
 800914a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800914c:	f000 f8da 	bl	8009304 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009152:	1e5a      	subs	r2, r3, #1
 8009154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009156:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009158:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800915c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009160:	d112      	bne.n	8009188 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d016      	beq.n	8009198 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800916a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916c:	3310      	adds	r3, #16
 800916e:	4618      	mov	r0, r3
 8009170:	f000 fe84 	bl	8009e7c <xTaskRemoveFromEventList>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00e      	beq.n	8009198 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00b      	beq.n	8009198 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	e007      	b.n	8009198 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009188:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800918c:	3301      	adds	r3, #1
 800918e:	b2db      	uxtb	r3, r3
 8009190:	b25a      	sxtb	r2, r3
 8009192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009198:	2301      	movs	r3, #1
 800919a:	637b      	str	r3, [r7, #52]	@ 0x34
 800919c:	e001      	b.n	80091a2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800919e:	2300      	movs	r3, #0
 80091a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80091a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f383 8811 	msr	BASEPRI, r3
}
 80091ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3738      	adds	r7, #56	@ 0x38
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d10b      	bne.n	80091e2 <vQueueDelete+0x2a>
	__asm volatile
 80091ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	60bb      	str	r3, [r7, #8]
}
 80091dc:	bf00      	nop
 80091de:	bf00      	nop
 80091e0:	e7fd      	b.n	80091de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f000 f95e 	bl	80094a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d102      	bne.n	80091f8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f002 f870 	bl	800b2d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80091f8:	bf00      	nop
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920c:	2b00      	cmp	r3, #0
 800920e:	d006      	beq.n	800921e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	e001      	b.n	8009222 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800921e:	2300      	movs	r3, #0
 8009220:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009222:	68fb      	ldr	r3, [r7, #12]
	}
 8009224:	4618      	mov	r0, r3
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800923c:	2300      	movs	r3, #0
 800923e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009244:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10d      	bne.n	800926a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d14d      	bne.n	80092f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	4618      	mov	r0, r3
 800925c:	f001 f864 	bl	800a328 <xTaskPriorityDisinherit>
 8009260:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	609a      	str	r2, [r3, #8]
 8009268:	e043      	b.n	80092f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d119      	bne.n	80092a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6858      	ldr	r0, [r3, #4]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009278:	461a      	mov	r2, r3
 800927a:	68b9      	ldr	r1, [r7, #8]
 800927c:	f002 fbd6 	bl	800ba2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	685a      	ldr	r2, [r3, #4]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009288:	441a      	add	r2, r3
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	685a      	ldr	r2, [r3, #4]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	429a      	cmp	r2, r3
 8009298:	d32b      	bcc.n	80092f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	605a      	str	r2, [r3, #4]
 80092a2:	e026      	b.n	80092f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	68d8      	ldr	r0, [r3, #12]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ac:	461a      	mov	r2, r3
 80092ae:	68b9      	ldr	r1, [r7, #8]
 80092b0:	f002 fbbc 	bl	800ba2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	68da      	ldr	r2, [r3, #12]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092bc:	425b      	negs	r3, r3
 80092be:	441a      	add	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	68da      	ldr	r2, [r3, #12]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d207      	bcs.n	80092e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	689a      	ldr	r2, [r3, #8]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d8:	425b      	negs	r3, r3
 80092da:	441a      	add	r2, r3
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d105      	bne.n	80092f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	3b01      	subs	r3, #1
 80092f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	1c5a      	adds	r2, r3, #1
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80092fa:	697b      	ldr	r3, [r7, #20]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3718      	adds	r7, #24
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009312:	2b00      	cmp	r3, #0
 8009314:	d018      	beq.n	8009348 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68da      	ldr	r2, [r3, #12]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800931e:	441a      	add	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	68da      	ldr	r2, [r3, #12]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	429a      	cmp	r2, r3
 800932e:	d303      	bcc.n	8009338 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68d9      	ldr	r1, [r3, #12]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009340:	461a      	mov	r2, r3
 8009342:	6838      	ldr	r0, [r7, #0]
 8009344:	f002 fb72 	bl	800ba2c <memcpy>
	}
}
 8009348:	bf00      	nop
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009358:	f001 fdce 	bl	800aef8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009362:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009364:	e011      	b.n	800938a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800936a:	2b00      	cmp	r3, #0
 800936c:	d012      	beq.n	8009394 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	3324      	adds	r3, #36	@ 0x24
 8009372:	4618      	mov	r0, r3
 8009374:	f000 fd82 	bl	8009e7c <xTaskRemoveFromEventList>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d001      	beq.n	8009382 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800937e:	f000 fe5b 	bl	800a038 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	3b01      	subs	r3, #1
 8009386:	b2db      	uxtb	r3, r3
 8009388:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800938a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800938e:	2b00      	cmp	r3, #0
 8009390:	dce9      	bgt.n	8009366 <prvUnlockQueue+0x16>
 8009392:	e000      	b.n	8009396 <prvUnlockQueue+0x46>
					break;
 8009394:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	22ff      	movs	r2, #255	@ 0xff
 800939a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800939e:	f001 fddd 	bl	800af5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80093a2:	f001 fda9 	bl	800aef8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093ae:	e011      	b.n	80093d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d012      	beq.n	80093de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	3310      	adds	r3, #16
 80093bc:	4618      	mov	r0, r3
 80093be:	f000 fd5d 	bl	8009e7c <xTaskRemoveFromEventList>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80093c8:	f000 fe36 	bl	800a038 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
 80093ce:	3b01      	subs	r3, #1
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	dce9      	bgt.n	80093b0 <prvUnlockQueue+0x60>
 80093dc:	e000      	b.n	80093e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80093de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	22ff      	movs	r2, #255	@ 0xff
 80093e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80093e8:	f001 fdb8 	bl	800af5c <vPortExitCritical>
}
 80093ec:	bf00      	nop
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093fc:	f001 fd7c 	bl	800aef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009404:	2b00      	cmp	r3, #0
 8009406:	d102      	bne.n	800940e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009408:	2301      	movs	r3, #1
 800940a:	60fb      	str	r3, [r7, #12]
 800940c:	e001      	b.n	8009412 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800940e:	2300      	movs	r3, #0
 8009410:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009412:	f001 fda3 	bl	800af5c <vPortExitCritical>

	return xReturn;
 8009416:	68fb      	ldr	r3, [r7, #12]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009428:	f001 fd66 	bl	800aef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009434:	429a      	cmp	r2, r3
 8009436:	d102      	bne.n	800943e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009438:	2301      	movs	r3, #1
 800943a:	60fb      	str	r3, [r7, #12]
 800943c:	e001      	b.n	8009442 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800943e:	2300      	movs	r3, #0
 8009440:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009442:	f001 fd8b 	bl	800af5c <vPortExitCritical>

	return xReturn;
 8009446:	68fb      	ldr	r3, [r7, #12]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800945a:	2300      	movs	r3, #0
 800945c:	60fb      	str	r3, [r7, #12]
 800945e:	e014      	b.n	800948a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009460:	4a0f      	ldr	r2, [pc, #60]	@ (80094a0 <vQueueAddToRegistry+0x50>)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10b      	bne.n	8009484 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800946c:	490c      	ldr	r1, [pc, #48]	@ (80094a0 <vQueueAddToRegistry+0x50>)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009476:	4a0a      	ldr	r2, [pc, #40]	@ (80094a0 <vQueueAddToRegistry+0x50>)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	00db      	lsls	r3, r3, #3
 800947c:	4413      	add	r3, r2
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009482:	e006      	b.n	8009492 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	3301      	adds	r3, #1
 8009488:	60fb      	str	r3, [r7, #12]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2b07      	cmp	r3, #7
 800948e:	d9e7      	bls.n	8009460 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009490:	bf00      	nop
 8009492:	bf00      	nop
 8009494:	3714      	adds	r7, #20
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	20000cc0 	.word	0x20000cc0

080094a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094ac:	2300      	movs	r3, #0
 80094ae:	60fb      	str	r3, [r7, #12]
 80094b0:	e016      	b.n	80094e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80094b2:	4a10      	ldr	r2, [pc, #64]	@ (80094f4 <vQueueUnregisterQueue+0x50>)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	00db      	lsls	r3, r3, #3
 80094b8:	4413      	add	r3, r2
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d10b      	bne.n	80094da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80094c2:	4a0c      	ldr	r2, [pc, #48]	@ (80094f4 <vQueueUnregisterQueue+0x50>)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2100      	movs	r1, #0
 80094c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80094cc:	4a09      	ldr	r2, [pc, #36]	@ (80094f4 <vQueueUnregisterQueue+0x50>)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	00db      	lsls	r3, r3, #3
 80094d2:	4413      	add	r3, r2
 80094d4:	2200      	movs	r2, #0
 80094d6:	605a      	str	r2, [r3, #4]
				break;
 80094d8:	e006      	b.n	80094e8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3301      	adds	r3, #1
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2b07      	cmp	r3, #7
 80094e4:	d9e5      	bls.n	80094b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80094e6:	bf00      	nop
 80094e8:	bf00      	nop
 80094ea:	3714      	adds	r7, #20
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr
 80094f4:	20000cc0 	.word	0x20000cc0

080094f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009508:	f001 fcf6 	bl	800aef8 <vPortEnterCritical>
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009512:	b25b      	sxtb	r3, r3
 8009514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009518:	d103      	bne.n	8009522 <vQueueWaitForMessageRestricted+0x2a>
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009528:	b25b      	sxtb	r3, r3
 800952a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800952e:	d103      	bne.n	8009538 <vQueueWaitForMessageRestricted+0x40>
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009538:	f001 fd10 	bl	800af5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009540:	2b00      	cmp	r3, #0
 8009542:	d106      	bne.n	8009552 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	3324      	adds	r3, #36	@ 0x24
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	68b9      	ldr	r1, [r7, #8]
 800954c:	4618      	mov	r0, r3
 800954e:	f000 fc69 	bl	8009e24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009552:	6978      	ldr	r0, [r7, #20]
 8009554:	f7ff fefc 	bl	8009350 <prvUnlockQueue>
	}
 8009558:	bf00      	nop
 800955a:	3718      	adds	r7, #24
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009560:	b580      	push	{r7, lr}
 8009562:	b08e      	sub	sp, #56	@ 0x38
 8009564:	af04      	add	r7, sp, #16
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
 800956c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800956e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10b      	bne.n	800958c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	623b      	str	r3, [r7, #32]
}
 8009586:	bf00      	nop
 8009588:	bf00      	nop
 800958a:	e7fd      	b.n	8009588 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800958c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10b      	bne.n	80095aa <xTaskCreateStatic+0x4a>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	61fb      	str	r3, [r7, #28]
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop
 80095a8:	e7fd      	b.n	80095a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80095aa:	2364      	movs	r3, #100	@ 0x64
 80095ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	2b64      	cmp	r3, #100	@ 0x64
 80095b2:	d00b      	beq.n	80095cc <xTaskCreateStatic+0x6c>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	61bb      	str	r3, [r7, #24]
}
 80095c6:	bf00      	nop
 80095c8:	bf00      	nop
 80095ca:	e7fd      	b.n	80095c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80095cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80095ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d01e      	beq.n	8009612 <xTaskCreateStatic+0xb2>
 80095d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d01b      	beq.n	8009612 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e6:	2202      	movs	r2, #2
 80095e8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095ec:	2300      	movs	r3, #0
 80095ee:	9303      	str	r3, [sp, #12]
 80095f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f2:	9302      	str	r3, [sp, #8]
 80095f4:	f107 0314 	add.w	r3, r7, #20
 80095f8:	9301      	str	r3, [sp, #4]
 80095fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	68b9      	ldr	r1, [r7, #8]
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f000 f850 	bl	80096aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800960a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800960c:	f000 f8e4 	bl	80097d8 <prvAddNewTaskToReadyList>
 8009610:	e001      	b.n	8009616 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009612:	2300      	movs	r3, #0
 8009614:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009616:	697b      	ldr	r3, [r7, #20]
	}
 8009618:	4618      	mov	r0, r3
 800961a:	3728      	adds	r7, #40	@ 0x28
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009620:	b580      	push	{r7, lr}
 8009622:	b08c      	sub	sp, #48	@ 0x30
 8009624:	af04      	add	r7, sp, #16
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	603b      	str	r3, [r7, #0]
 800962c:	4613      	mov	r3, r2
 800962e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009630:	88fb      	ldrh	r3, [r7, #6]
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4618      	mov	r0, r3
 8009636:	f001 fd81 	bl	800b13c <pvPortMalloc>
 800963a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00e      	beq.n	8009660 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009642:	2064      	movs	r0, #100	@ 0x64
 8009644:	f001 fd7a 	bl	800b13c <pvPortMalloc>
 8009648:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d003      	beq.n	8009658 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	631a      	str	r2, [r3, #48]	@ 0x30
 8009656:	e005      	b.n	8009664 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009658:	6978      	ldr	r0, [r7, #20]
 800965a:	f001 fe3d 	bl	800b2d8 <vPortFree>
 800965e:	e001      	b.n	8009664 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009660:	2300      	movs	r3, #0
 8009662:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d017      	beq.n	800969a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	2200      	movs	r2, #0
 800966e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009672:	88fa      	ldrh	r2, [r7, #6]
 8009674:	2300      	movs	r3, #0
 8009676:	9303      	str	r3, [sp, #12]
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	9302      	str	r3, [sp, #8]
 800967c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967e:	9301      	str	r3, [sp, #4]
 8009680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	68b9      	ldr	r1, [r7, #8]
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f000 f80e 	bl	80096aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800968e:	69f8      	ldr	r0, [r7, #28]
 8009690:	f000 f8a2 	bl	80097d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009694:	2301      	movs	r3, #1
 8009696:	61bb      	str	r3, [r7, #24]
 8009698:	e002      	b.n	80096a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800969a:	f04f 33ff 	mov.w	r3, #4294967295
 800969e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096a0:	69bb      	ldr	r3, [r7, #24]
	}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3720      	adds	r7, #32
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b088      	sub	sp, #32
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	60f8      	str	r0, [r7, #12]
 80096b2:	60b9      	str	r1, [r7, #8]
 80096b4:	607a      	str	r2, [r7, #4]
 80096b6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80096b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	461a      	mov	r2, r3
 80096c2:	21a5      	movs	r1, #165	@ 0xa5
 80096c4:	f002 f96e 	bl	800b9a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80096d2:	3b01      	subs	r3, #1
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	f023 0307 	bic.w	r3, r3, #7
 80096e0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	f003 0307 	and.w	r3, r3, #7
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00b      	beq.n	8009704 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	617b      	str	r3, [r7, #20]
}
 80096fe:	bf00      	nop
 8009700:	bf00      	nop
 8009702:	e7fd      	b.n	8009700 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8009704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009706:	69ba      	ldr	r2, [r7, #24]
 8009708:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d01f      	beq.n	8009750 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009710:	2300      	movs	r3, #0
 8009712:	61fb      	str	r3, [r7, #28]
 8009714:	e012      	b.n	800973c <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	4413      	add	r3, r2
 800971c:	7819      	ldrb	r1, [r3, #0]
 800971e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	4413      	add	r3, r2
 8009724:	3334      	adds	r3, #52	@ 0x34
 8009726:	460a      	mov	r2, r1
 8009728:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800972a:	68ba      	ldr	r2, [r7, #8]
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	4413      	add	r3, r2
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d006      	beq.n	8009744 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	3301      	adds	r3, #1
 800973a:	61fb      	str	r3, [r7, #28]
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	2b0f      	cmp	r3, #15
 8009740:	d9e9      	bls.n	8009716 <prvInitialiseNewTask+0x6c>
 8009742:	e000      	b.n	8009746 <prvInitialiseNewTask+0x9c>
			{
				break;
 8009744:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009748:	2200      	movs	r2, #0
 800974a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800974e:	e003      	b.n	8009758 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009752:	2200      	movs	r2, #0
 8009754:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800975a:	2b37      	cmp	r3, #55	@ 0x37
 800975c:	d901      	bls.n	8009762 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800975e:	2337      	movs	r3, #55	@ 0x37
 8009760:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009764:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009766:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800976c:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800976e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009770:	2200      	movs	r2, #0
 8009772:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009776:	3304      	adds	r3, #4
 8009778:	4618      	mov	r0, r3
 800977a:	f7fe fd79 	bl	8008270 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800977e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009780:	3318      	adds	r3, #24
 8009782:	4618      	mov	r0, r3
 8009784:	f7fe fd74 	bl	8008270 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800978c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800978e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009790:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009796:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800979c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800979e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a0:	2200      	movs	r2, #0
 80097a2:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a6:	2200      	movs	r2, #0
 80097a8:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	68f9      	ldr	r1, [r7, #12]
 80097b6:	69b8      	ldr	r0, [r7, #24]
 80097b8:	f001 fa6c 	bl	800ac94 <pxPortInitialiseStack>
 80097bc:	4602      	mov	r2, r0
 80097be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80097c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d002      	beq.n	80097ce <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80097c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097ce:	bf00      	nop
 80097d0:	3720      	adds	r7, #32
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
	...

080097d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80097e0:	f001 fb8a 	bl	800aef8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80097e4:	4b2d      	ldr	r3, [pc, #180]	@ (800989c <prvAddNewTaskToReadyList+0xc4>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	3301      	adds	r3, #1
 80097ea:	4a2c      	ldr	r2, [pc, #176]	@ (800989c <prvAddNewTaskToReadyList+0xc4>)
 80097ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80097ee:	4b2c      	ldr	r3, [pc, #176]	@ (80098a0 <prvAddNewTaskToReadyList+0xc8>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d109      	bne.n	800980a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80097f6:	4a2a      	ldr	r2, [pc, #168]	@ (80098a0 <prvAddNewTaskToReadyList+0xc8>)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80097fc:	4b27      	ldr	r3, [pc, #156]	@ (800989c <prvAddNewTaskToReadyList+0xc4>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d110      	bne.n	8009826 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009804:	f000 fc3c 	bl	800a080 <prvInitialiseTaskLists>
 8009808:	e00d      	b.n	8009826 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800980a:	4b26      	ldr	r3, [pc, #152]	@ (80098a4 <prvAddNewTaskToReadyList+0xcc>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d109      	bne.n	8009826 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009812:	4b23      	ldr	r3, [pc, #140]	@ (80098a0 <prvAddNewTaskToReadyList+0xc8>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800981c:	429a      	cmp	r2, r3
 800981e:	d802      	bhi.n	8009826 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009820:	4a1f      	ldr	r2, [pc, #124]	@ (80098a0 <prvAddNewTaskToReadyList+0xc8>)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009826:	4b20      	ldr	r3, [pc, #128]	@ (80098a8 <prvAddNewTaskToReadyList+0xd0>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	3301      	adds	r3, #1
 800982c:	4a1e      	ldr	r2, [pc, #120]	@ (80098a8 <prvAddNewTaskToReadyList+0xd0>)
 800982e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009830:	4b1d      	ldr	r3, [pc, #116]	@ (80098a8 <prvAddNewTaskToReadyList+0xd0>)
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800983c:	4b1b      	ldr	r3, [pc, #108]	@ (80098ac <prvAddNewTaskToReadyList+0xd4>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	429a      	cmp	r2, r3
 8009842:	d903      	bls.n	800984c <prvAddNewTaskToReadyList+0x74>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009848:	4a18      	ldr	r2, [pc, #96]	@ (80098ac <prvAddNewTaskToReadyList+0xd4>)
 800984a:	6013      	str	r3, [r2, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009850:	4613      	mov	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	4a15      	ldr	r2, [pc, #84]	@ (80098b0 <prvAddNewTaskToReadyList+0xd8>)
 800985a:	441a      	add	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3304      	adds	r3, #4
 8009860:	4619      	mov	r1, r3
 8009862:	4610      	mov	r0, r2
 8009864:	f7fe fd11 	bl	800828a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009868:	f001 fb78 	bl	800af5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800986c:	4b0d      	ldr	r3, [pc, #52]	@ (80098a4 <prvAddNewTaskToReadyList+0xcc>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00e      	beq.n	8009892 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009874:	4b0a      	ldr	r3, [pc, #40]	@ (80098a0 <prvAddNewTaskToReadyList+0xc8>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800987e:	429a      	cmp	r2, r3
 8009880:	d207      	bcs.n	8009892 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009882:	4b0c      	ldr	r3, [pc, #48]	@ (80098b4 <prvAddNewTaskToReadyList+0xdc>)
 8009884:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009888:	601a      	str	r2, [r3, #0]
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009892:	bf00      	nop
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	200011d4 	.word	0x200011d4
 80098a0:	20000d00 	.word	0x20000d00
 80098a4:	200011e0 	.word	0x200011e0
 80098a8:	200011f0 	.word	0x200011f0
 80098ac:	200011dc 	.word	0x200011dc
 80098b0:	20000d04 	.word	0x20000d04
 80098b4:	e000ed04 	.word	0xe000ed04

080098b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80098c0:	2300      	movs	r3, #0
 80098c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d018      	beq.n	80098fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80098ca:	4b14      	ldr	r3, [pc, #80]	@ (800991c <vTaskDelay+0x64>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00b      	beq.n	80098ea <vTaskDelay+0x32>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	60bb      	str	r3, [r7, #8]
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop
 80098e8:	e7fd      	b.n	80098e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80098ea:	f000 f885 	bl	80099f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80098ee:	2100      	movs	r1, #0
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fe21 	bl	800a538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80098f6:	f000 f88d 	bl	8009a14 <xTaskResumeAll>
 80098fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d107      	bne.n	8009912 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009902:	4b07      	ldr	r3, [pc, #28]	@ (8009920 <vTaskDelay+0x68>)
 8009904:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009912:	bf00      	nop
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	200011fc 	.word	0x200011fc
 8009920:	e000ed04 	.word	0xe000ed04

08009924 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b08a      	sub	sp, #40	@ 0x28
 8009928:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800992a:	2300      	movs	r3, #0
 800992c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800992e:	2300      	movs	r3, #0
 8009930:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009932:	463a      	mov	r2, r7
 8009934:	1d39      	adds	r1, r7, #4
 8009936:	f107 0308 	add.w	r3, r7, #8
 800993a:	4618      	mov	r0, r3
 800993c:	f7fe fc44 	bl	80081c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	9202      	str	r2, [sp, #8]
 8009948:	9301      	str	r3, [sp, #4]
 800994a:	2300      	movs	r3, #0
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	2300      	movs	r3, #0
 8009950:	460a      	mov	r2, r1
 8009952:	4923      	ldr	r1, [pc, #140]	@ (80099e0 <vTaskStartScheduler+0xbc>)
 8009954:	4823      	ldr	r0, [pc, #140]	@ (80099e4 <vTaskStartScheduler+0xc0>)
 8009956:	f7ff fe03 	bl	8009560 <xTaskCreateStatic>
 800995a:	4603      	mov	r3, r0
 800995c:	4a22      	ldr	r2, [pc, #136]	@ (80099e8 <vTaskStartScheduler+0xc4>)
 800995e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009960:	4b21      	ldr	r3, [pc, #132]	@ (80099e8 <vTaskStartScheduler+0xc4>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d002      	beq.n	800996e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009968:	2301      	movs	r3, #1
 800996a:	617b      	str	r3, [r7, #20]
 800996c:	e001      	b.n	8009972 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800996e:	2300      	movs	r3, #0
 8009970:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d102      	bne.n	800997e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009978:	f000 fe32 	bl	800a5e0 <xTimerCreateTimerTask>
 800997c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d118      	bne.n	80099b6 <vTaskStartScheduler+0x92>
	__asm volatile
 8009984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	613b      	str	r3, [r7, #16]
}
 8009996:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009998:	4b14      	ldr	r3, [pc, #80]	@ (80099ec <vTaskStartScheduler+0xc8>)
 800999a:	f04f 32ff 	mov.w	r2, #4294967295
 800999e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099a0:	4b13      	ldr	r3, [pc, #76]	@ (80099f0 <vTaskStartScheduler+0xcc>)
 80099a2:	2201      	movs	r2, #1
 80099a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099a6:	4b13      	ldr	r3, [pc, #76]	@ (80099f4 <vTaskStartScheduler+0xd0>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80099ac:	f7f7 fc22 	bl	80011f4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099b0:	f001 f9fe 	bl	800adb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099b4:	e00f      	b.n	80099d6 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099bc:	d10b      	bne.n	80099d6 <vTaskStartScheduler+0xb2>
	__asm volatile
 80099be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	60fb      	str	r3, [r7, #12]
}
 80099d0:	bf00      	nop
 80099d2:	bf00      	nop
 80099d4:	e7fd      	b.n	80099d2 <vTaskStartScheduler+0xae>
}
 80099d6:	bf00      	nop
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	0800cc04 	.word	0x0800cc04
 80099e4:	0800a051 	.word	0x0800a051
 80099e8:	200011f8 	.word	0x200011f8
 80099ec:	200011f4 	.word	0x200011f4
 80099f0:	200011e0 	.word	0x200011e0
 80099f4:	200011d8 	.word	0x200011d8

080099f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80099f8:	b480      	push	{r7}
 80099fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80099fc:	4b04      	ldr	r3, [pc, #16]	@ (8009a10 <vTaskSuspendAll+0x18>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3301      	adds	r3, #1
 8009a02:	4a03      	ldr	r2, [pc, #12]	@ (8009a10 <vTaskSuspendAll+0x18>)
 8009a04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a06:	bf00      	nop
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	200011fc 	.word	0x200011fc

08009a14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a22:	4b42      	ldr	r3, [pc, #264]	@ (8009b2c <xTaskResumeAll+0x118>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10b      	bne.n	8009a42 <xTaskResumeAll+0x2e>
	__asm volatile
 8009a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a2e:	f383 8811 	msr	BASEPRI, r3
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	603b      	str	r3, [r7, #0]
}
 8009a3c:	bf00      	nop
 8009a3e:	bf00      	nop
 8009a40:	e7fd      	b.n	8009a3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a42:	f001 fa59 	bl	800aef8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a46:	4b39      	ldr	r3, [pc, #228]	@ (8009b2c <xTaskResumeAll+0x118>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	4a37      	ldr	r2, [pc, #220]	@ (8009b2c <xTaskResumeAll+0x118>)
 8009a4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a50:	4b36      	ldr	r3, [pc, #216]	@ (8009b2c <xTaskResumeAll+0x118>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d162      	bne.n	8009b1e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a58:	4b35      	ldr	r3, [pc, #212]	@ (8009b30 <xTaskResumeAll+0x11c>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d05e      	beq.n	8009b1e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a60:	e02f      	b.n	8009ac2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a62:	4b34      	ldr	r3, [pc, #208]	@ (8009b34 <xTaskResumeAll+0x120>)
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	3318      	adds	r3, #24
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fe fc68 	bl	8008344 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	3304      	adds	r3, #4
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fe fc63 	bl	8008344 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a82:	4b2d      	ldr	r3, [pc, #180]	@ (8009b38 <xTaskResumeAll+0x124>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d903      	bls.n	8009a92 <xTaskResumeAll+0x7e>
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8e:	4a2a      	ldr	r2, [pc, #168]	@ (8009b38 <xTaskResumeAll+0x124>)
 8009a90:	6013      	str	r3, [r2, #0]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a96:	4613      	mov	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4a27      	ldr	r2, [pc, #156]	@ (8009b3c <xTaskResumeAll+0x128>)
 8009aa0:	441a      	add	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	f7fe fbee 	bl	800828a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ab2:	4b23      	ldr	r3, [pc, #140]	@ (8009b40 <xTaskResumeAll+0x12c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d302      	bcc.n	8009ac2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009abc:	4b21      	ldr	r3, [pc, #132]	@ (8009b44 <xTaskResumeAll+0x130>)
 8009abe:	2201      	movs	r2, #1
 8009ac0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8009b34 <xTaskResumeAll+0x120>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1cb      	bne.n	8009a62 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ad0:	f000 fb74 	bl	800a1bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8009b48 <xTaskResumeAll+0x134>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d010      	beq.n	8009b02 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ae0:	f000 f846 	bl	8009b70 <xTaskIncrementTick>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d002      	beq.n	8009af0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009aea:	4b16      	ldr	r3, [pc, #88]	@ (8009b44 <xTaskResumeAll+0x130>)
 8009aec:	2201      	movs	r2, #1
 8009aee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	3b01      	subs	r3, #1
 8009af4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1f1      	bne.n	8009ae0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009afc:	4b12      	ldr	r3, [pc, #72]	@ (8009b48 <xTaskResumeAll+0x134>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b02:	4b10      	ldr	r3, [pc, #64]	@ (8009b44 <xTaskResumeAll+0x130>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d009      	beq.n	8009b1e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b4c <xTaskResumeAll+0x138>)
 8009b10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b14:	601a      	str	r2, [r3, #0]
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b1e:	f001 fa1d 	bl	800af5c <vPortExitCritical>

	return xAlreadyYielded;
 8009b22:	68bb      	ldr	r3, [r7, #8]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	200011fc 	.word	0x200011fc
 8009b30:	200011d4 	.word	0x200011d4
 8009b34:	20001194 	.word	0x20001194
 8009b38:	200011dc 	.word	0x200011dc
 8009b3c:	20000d04 	.word	0x20000d04
 8009b40:	20000d00 	.word	0x20000d00
 8009b44:	200011e8 	.word	0x200011e8
 8009b48:	200011e4 	.word	0x200011e4
 8009b4c:	e000ed04 	.word	0xe000ed04

08009b50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b56:	4b05      	ldr	r3, [pc, #20]	@ (8009b6c <xTaskGetTickCount+0x1c>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b5c:	687b      	ldr	r3, [r7, #4]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	200011d8 	.word	0x200011d8

08009b70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b76:	2300      	movs	r3, #0
 8009b78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b7a:	4b4f      	ldr	r3, [pc, #316]	@ (8009cb8 <xTaskIncrementTick+0x148>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f040 8090 	bne.w	8009ca4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b84:	4b4d      	ldr	r3, [pc, #308]	@ (8009cbc <xTaskIncrementTick+0x14c>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b8c:	4a4b      	ldr	r2, [pc, #300]	@ (8009cbc <xTaskIncrementTick+0x14c>)
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d121      	bne.n	8009bdc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b98:	4b49      	ldr	r3, [pc, #292]	@ (8009cc0 <xTaskIncrementTick+0x150>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00b      	beq.n	8009bba <xTaskIncrementTick+0x4a>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	603b      	str	r3, [r7, #0]
}
 8009bb4:	bf00      	nop
 8009bb6:	bf00      	nop
 8009bb8:	e7fd      	b.n	8009bb6 <xTaskIncrementTick+0x46>
 8009bba:	4b41      	ldr	r3, [pc, #260]	@ (8009cc0 <xTaskIncrementTick+0x150>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	4b40      	ldr	r3, [pc, #256]	@ (8009cc4 <xTaskIncrementTick+0x154>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a3e      	ldr	r2, [pc, #248]	@ (8009cc0 <xTaskIncrementTick+0x150>)
 8009bc6:	6013      	str	r3, [r2, #0]
 8009bc8:	4a3e      	ldr	r2, [pc, #248]	@ (8009cc4 <xTaskIncrementTick+0x154>)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6013      	str	r3, [r2, #0]
 8009bce:	4b3e      	ldr	r3, [pc, #248]	@ (8009cc8 <xTaskIncrementTick+0x158>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	4a3c      	ldr	r2, [pc, #240]	@ (8009cc8 <xTaskIncrementTick+0x158>)
 8009bd6:	6013      	str	r3, [r2, #0]
 8009bd8:	f000 faf0 	bl	800a1bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8009ccc <xTaskIncrementTick+0x15c>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d349      	bcc.n	8009c7a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009be6:	4b36      	ldr	r3, [pc, #216]	@ (8009cc0 <xTaskIncrementTick+0x150>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d104      	bne.n	8009bfa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bf0:	4b36      	ldr	r3, [pc, #216]	@ (8009ccc <xTaskIncrementTick+0x15c>)
 8009bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf6:	601a      	str	r2, [r3, #0]
					break;
 8009bf8:	e03f      	b.n	8009c7a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bfa:	4b31      	ldr	r3, [pc, #196]	@ (8009cc0 <xTaskIncrementTick+0x150>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c0a:	693a      	ldr	r2, [r7, #16]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d203      	bcs.n	8009c1a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c12:	4a2e      	ldr	r2, [pc, #184]	@ (8009ccc <xTaskIncrementTick+0x15c>)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c18:	e02f      	b.n	8009c7a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fe fb90 	bl	8008344 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d004      	beq.n	8009c36 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	3318      	adds	r3, #24
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7fe fb87 	bl	8008344 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c3a:	4b25      	ldr	r3, [pc, #148]	@ (8009cd0 <xTaskIncrementTick+0x160>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d903      	bls.n	8009c4a <xTaskIncrementTick+0xda>
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c46:	4a22      	ldr	r2, [pc, #136]	@ (8009cd0 <xTaskIncrementTick+0x160>)
 8009c48:	6013      	str	r3, [r2, #0]
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c4e:	4613      	mov	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4a1f      	ldr	r2, [pc, #124]	@ (8009cd4 <xTaskIncrementTick+0x164>)
 8009c58:	441a      	add	r2, r3
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	4619      	mov	r1, r3
 8009c60:	4610      	mov	r0, r2
 8009c62:	f7fe fb12 	bl	800828a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8009cd8 <xTaskIncrementTick+0x168>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d3b8      	bcc.n	8009be6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009c74:	2301      	movs	r3, #1
 8009c76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c78:	e7b5      	b.n	8009be6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c7a:	4b17      	ldr	r3, [pc, #92]	@ (8009cd8 <xTaskIncrementTick+0x168>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c80:	4914      	ldr	r1, [pc, #80]	@ (8009cd4 <xTaskIncrementTick+0x164>)
 8009c82:	4613      	mov	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	440b      	add	r3, r1
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d901      	bls.n	8009c96 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009c92:	2301      	movs	r3, #1
 8009c94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009c96:	4b11      	ldr	r3, [pc, #68]	@ (8009cdc <xTaskIncrementTick+0x16c>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d007      	beq.n	8009cae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	617b      	str	r3, [r7, #20]
 8009ca2:	e004      	b.n	8009cae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8009ce0 <xTaskIncrementTick+0x170>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	4a0d      	ldr	r2, [pc, #52]	@ (8009ce0 <xTaskIncrementTick+0x170>)
 8009cac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009cae:	697b      	ldr	r3, [r7, #20]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3718      	adds	r7, #24
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	200011fc 	.word	0x200011fc
 8009cbc:	200011d8 	.word	0x200011d8
 8009cc0:	2000118c 	.word	0x2000118c
 8009cc4:	20001190 	.word	0x20001190
 8009cc8:	200011ec 	.word	0x200011ec
 8009ccc:	200011f4 	.word	0x200011f4
 8009cd0:	200011dc 	.word	0x200011dc
 8009cd4:	20000d04 	.word	0x20000d04
 8009cd8:	20000d00 	.word	0x20000d00
 8009cdc:	200011e8 	.word	0x200011e8
 8009ce0:	200011e4 	.word	0x200011e4

08009ce4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009cea:	4b34      	ldr	r3, [pc, #208]	@ (8009dbc <vTaskSwitchContext+0xd8>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009cf2:	4b33      	ldr	r3, [pc, #204]	@ (8009dc0 <vTaskSwitchContext+0xdc>)
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009cf8:	e05b      	b.n	8009db2 <vTaskSwitchContext+0xce>
		xYieldPending = pdFALSE;
 8009cfa:	4b31      	ldr	r3, [pc, #196]	@ (8009dc0 <vTaskSwitchContext+0xdc>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009d00:	f7f7 fa7f 	bl	8001202 <getRunTimeCounterValue>
 8009d04:	4603      	mov	r3, r0
 8009d06:	4a2f      	ldr	r2, [pc, #188]	@ (8009dc4 <vTaskSwitchContext+0xe0>)
 8009d08:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8009dc4 <vTaskSwitchContext+0xe0>)
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	4b2e      	ldr	r3, [pc, #184]	@ (8009dc8 <vTaskSwitchContext+0xe4>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d909      	bls.n	8009d2a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009d16:	4b2d      	ldr	r3, [pc, #180]	@ (8009dcc <vTaskSwitchContext+0xe8>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8009d1c:	4a29      	ldr	r2, [pc, #164]	@ (8009dc4 <vTaskSwitchContext+0xe0>)
 8009d1e:	6810      	ldr	r0, [r2, #0]
 8009d20:	4a29      	ldr	r2, [pc, #164]	@ (8009dc8 <vTaskSwitchContext+0xe4>)
 8009d22:	6812      	ldr	r2, [r2, #0]
 8009d24:	1a82      	subs	r2, r0, r2
 8009d26:	440a      	add	r2, r1
 8009d28:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009d2a:	4b26      	ldr	r3, [pc, #152]	@ (8009dc4 <vTaskSwitchContext+0xe0>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a26      	ldr	r2, [pc, #152]	@ (8009dc8 <vTaskSwitchContext+0xe4>)
 8009d30:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d32:	4b27      	ldr	r3, [pc, #156]	@ (8009dd0 <vTaskSwitchContext+0xec>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	60fb      	str	r3, [r7, #12]
 8009d38:	e011      	b.n	8009d5e <vTaskSwitchContext+0x7a>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10b      	bne.n	8009d58 <vTaskSwitchContext+0x74>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	607b      	str	r3, [r7, #4]
}
 8009d52:	bf00      	nop
 8009d54:	bf00      	nop
 8009d56:	e7fd      	b.n	8009d54 <vTaskSwitchContext+0x70>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	60fb      	str	r3, [r7, #12]
 8009d5e:	491d      	ldr	r1, [pc, #116]	@ (8009dd4 <vTaskSwitchContext+0xf0>)
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4613      	mov	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	440b      	add	r3, r1
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d0e3      	beq.n	8009d3a <vTaskSwitchContext+0x56>
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	4613      	mov	r3, r2
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4a15      	ldr	r2, [pc, #84]	@ (8009dd4 <vTaskSwitchContext+0xf0>)
 8009d7e:	4413      	add	r3, r2
 8009d80:	60bb      	str	r3, [r7, #8]
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	605a      	str	r2, [r3, #4]
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	3308      	adds	r3, #8
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d104      	bne.n	8009da2 <vTaskSwitchContext+0xbe>
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	605a      	str	r2, [r3, #4]
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	4a08      	ldr	r2, [pc, #32]	@ (8009dcc <vTaskSwitchContext+0xe8>)
 8009daa:	6013      	str	r3, [r2, #0]
 8009dac:	4a08      	ldr	r2, [pc, #32]	@ (8009dd0 <vTaskSwitchContext+0xec>)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6013      	str	r3, [r2, #0]
}
 8009db2:	bf00      	nop
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	200011fc 	.word	0x200011fc
 8009dc0:	200011e8 	.word	0x200011e8
 8009dc4:	20001204 	.word	0x20001204
 8009dc8:	20001200 	.word	0x20001200
 8009dcc:	20000d00 	.word	0x20000d00
 8009dd0:	200011dc 	.word	0x200011dc
 8009dd4:	20000d04 	.word	0x20000d04

08009dd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10b      	bne.n	8009e00 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	60fb      	str	r3, [r7, #12]
}
 8009dfa:	bf00      	nop
 8009dfc:	bf00      	nop
 8009dfe:	e7fd      	b.n	8009dfc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e00:	4b07      	ldr	r3, [pc, #28]	@ (8009e20 <vTaskPlaceOnEventList+0x48>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3318      	adds	r3, #24
 8009e06:	4619      	mov	r1, r3
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f7fe fa62 	bl	80082d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e0e:	2101      	movs	r1, #1
 8009e10:	6838      	ldr	r0, [r7, #0]
 8009e12:	f000 fb91 	bl	800a538 <prvAddCurrentTaskToDelayedList>
}
 8009e16:	bf00      	nop
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	20000d00 	.word	0x20000d00

08009e24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10b      	bne.n	8009e4e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	617b      	str	r3, [r7, #20]
}
 8009e48:	bf00      	nop
 8009e4a:	bf00      	nop
 8009e4c:	e7fd      	b.n	8009e4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009e78 <vTaskPlaceOnEventListRestricted+0x54>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	3318      	adds	r3, #24
 8009e54:	4619      	mov	r1, r3
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f7fe fa17 	bl	800828a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d002      	beq.n	8009e68 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009e62:	f04f 33ff 	mov.w	r3, #4294967295
 8009e66:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e68:	6879      	ldr	r1, [r7, #4]
 8009e6a:	68b8      	ldr	r0, [r7, #8]
 8009e6c:	f000 fb64 	bl	800a538 <prvAddCurrentTaskToDelayedList>
	}
 8009e70:	bf00      	nop
 8009e72:	3718      	adds	r7, #24
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	20000d00 	.word	0x20000d00

08009e7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10b      	bne.n	8009eaa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e96:	f383 8811 	msr	BASEPRI, r3
 8009e9a:	f3bf 8f6f 	isb	sy
 8009e9e:	f3bf 8f4f 	dsb	sy
 8009ea2:	60fb      	str	r3, [r7, #12]
}
 8009ea4:	bf00      	nop
 8009ea6:	bf00      	nop
 8009ea8:	e7fd      	b.n	8009ea6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	3318      	adds	r3, #24
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fe fa48 	bl	8008344 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8009f2c <xTaskRemoveFromEventList+0xb0>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d11d      	bne.n	8009ef8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fe fa3f 	bl	8008344 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eca:	4b19      	ldr	r3, [pc, #100]	@ (8009f30 <xTaskRemoveFromEventList+0xb4>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d903      	bls.n	8009eda <xTaskRemoveFromEventList+0x5e>
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed6:	4a16      	ldr	r2, [pc, #88]	@ (8009f30 <xTaskRemoveFromEventList+0xb4>)
 8009ed8:	6013      	str	r3, [r2, #0]
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ede:	4613      	mov	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	4a13      	ldr	r2, [pc, #76]	@ (8009f34 <xTaskRemoveFromEventList+0xb8>)
 8009ee8:	441a      	add	r2, r3
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	3304      	adds	r3, #4
 8009eee:	4619      	mov	r1, r3
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	f7fe f9ca 	bl	800828a <vListInsertEnd>
 8009ef6:	e005      	b.n	8009f04 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	3318      	adds	r3, #24
 8009efc:	4619      	mov	r1, r3
 8009efe:	480e      	ldr	r0, [pc, #56]	@ (8009f38 <xTaskRemoveFromEventList+0xbc>)
 8009f00:	f7fe f9c3 	bl	800828a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f08:	4b0c      	ldr	r3, [pc, #48]	@ (8009f3c <xTaskRemoveFromEventList+0xc0>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d905      	bls.n	8009f1e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f12:	2301      	movs	r3, #1
 8009f14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f16:	4b0a      	ldr	r3, [pc, #40]	@ (8009f40 <xTaskRemoveFromEventList+0xc4>)
 8009f18:	2201      	movs	r2, #1
 8009f1a:	601a      	str	r2, [r3, #0]
 8009f1c:	e001      	b.n	8009f22 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f22:	697b      	ldr	r3, [r7, #20]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3718      	adds	r7, #24
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	200011fc 	.word	0x200011fc
 8009f30:	200011dc 	.word	0x200011dc
 8009f34:	20000d04 	.word	0x20000d04
 8009f38:	20001194 	.word	0x20001194
 8009f3c:	20000d00 	.word	0x20000d00
 8009f40:	200011e8 	.word	0x200011e8

08009f44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f4c:	4b06      	ldr	r3, [pc, #24]	@ (8009f68 <vTaskInternalSetTimeOutState+0x24>)
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f54:	4b05      	ldr	r3, [pc, #20]	@ (8009f6c <vTaskInternalSetTimeOutState+0x28>)
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	605a      	str	r2, [r3, #4]
}
 8009f5c:	bf00      	nop
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	200011ec 	.word	0x200011ec
 8009f6c:	200011d8 	.word	0x200011d8

08009f70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b088      	sub	sp, #32
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10b      	bne.n	8009f98 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	613b      	str	r3, [r7, #16]
}
 8009f92:	bf00      	nop
 8009f94:	bf00      	nop
 8009f96:	e7fd      	b.n	8009f94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10b      	bne.n	8009fb6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	60fb      	str	r3, [r7, #12]
}
 8009fb0:	bf00      	nop
 8009fb2:	bf00      	nop
 8009fb4:	e7fd      	b.n	8009fb2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009fb6:	f000 ff9f 	bl	800aef8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009fba:	4b1d      	ldr	r3, [pc, #116]	@ (800a030 <xTaskCheckForTimeOut+0xc0>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	69ba      	ldr	r2, [r7, #24]
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd2:	d102      	bne.n	8009fda <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	61fb      	str	r3, [r7, #28]
 8009fd8:	e023      	b.n	800a022 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	4b15      	ldr	r3, [pc, #84]	@ (800a034 <xTaskCheckForTimeOut+0xc4>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d007      	beq.n	8009ff6 <xTaskCheckForTimeOut+0x86>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	69ba      	ldr	r2, [r7, #24]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d302      	bcc.n	8009ff6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	61fb      	str	r3, [r7, #28]
 8009ff4:	e015      	b.n	800a022 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	697a      	ldr	r2, [r7, #20]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d20b      	bcs.n	800a018 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	1ad2      	subs	r2, r2, r3
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f7ff ff99 	bl	8009f44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a012:	2300      	movs	r3, #0
 800a014:	61fb      	str	r3, [r7, #28]
 800a016:	e004      	b.n	800a022 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2200      	movs	r2, #0
 800a01c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a01e:	2301      	movs	r3, #1
 800a020:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a022:	f000 ff9b 	bl	800af5c <vPortExitCritical>

	return xReturn;
 800a026:	69fb      	ldr	r3, [r7, #28]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3720      	adds	r7, #32
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	200011d8 	.word	0x200011d8
 800a034:	200011ec 	.word	0x200011ec

0800a038 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a038:	b480      	push	{r7}
 800a03a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a03c:	4b03      	ldr	r3, [pc, #12]	@ (800a04c <vTaskMissedYield+0x14>)
 800a03e:	2201      	movs	r2, #1
 800a040:	601a      	str	r2, [r3, #0]
}
 800a042:	bf00      	nop
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	200011e8 	.word	0x200011e8

0800a050 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a058:	f000 f852 	bl	800a100 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a05c:	4b06      	ldr	r3, [pc, #24]	@ (800a078 <prvIdleTask+0x28>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d9f9      	bls.n	800a058 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a064:	4b05      	ldr	r3, [pc, #20]	@ (800a07c <prvIdleTask+0x2c>)
 800a066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a06a:	601a      	str	r2, [r3, #0]
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a074:	e7f0      	b.n	800a058 <prvIdleTask+0x8>
 800a076:	bf00      	nop
 800a078:	20000d04 	.word	0x20000d04
 800a07c:	e000ed04 	.word	0xe000ed04

0800a080 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a086:	2300      	movs	r3, #0
 800a088:	607b      	str	r3, [r7, #4]
 800a08a:	e00c      	b.n	800a0a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	4613      	mov	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4a12      	ldr	r2, [pc, #72]	@ (800a0e0 <prvInitialiseTaskLists+0x60>)
 800a098:	4413      	add	r3, r2
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fe f8c8 	bl	8008230 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	607b      	str	r3, [r7, #4]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b37      	cmp	r3, #55	@ 0x37
 800a0aa:	d9ef      	bls.n	800a08c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0ac:	480d      	ldr	r0, [pc, #52]	@ (800a0e4 <prvInitialiseTaskLists+0x64>)
 800a0ae:	f7fe f8bf 	bl	8008230 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0b2:	480d      	ldr	r0, [pc, #52]	@ (800a0e8 <prvInitialiseTaskLists+0x68>)
 800a0b4:	f7fe f8bc 	bl	8008230 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a0b8:	480c      	ldr	r0, [pc, #48]	@ (800a0ec <prvInitialiseTaskLists+0x6c>)
 800a0ba:	f7fe f8b9 	bl	8008230 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a0be:	480c      	ldr	r0, [pc, #48]	@ (800a0f0 <prvInitialiseTaskLists+0x70>)
 800a0c0:	f7fe f8b6 	bl	8008230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a0c4:	480b      	ldr	r0, [pc, #44]	@ (800a0f4 <prvInitialiseTaskLists+0x74>)
 800a0c6:	f7fe f8b3 	bl	8008230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a0ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a0f8 <prvInitialiseTaskLists+0x78>)
 800a0cc:	4a05      	ldr	r2, [pc, #20]	@ (800a0e4 <prvInitialiseTaskLists+0x64>)
 800a0ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a0d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a0fc <prvInitialiseTaskLists+0x7c>)
 800a0d2:	4a05      	ldr	r2, [pc, #20]	@ (800a0e8 <prvInitialiseTaskLists+0x68>)
 800a0d4:	601a      	str	r2, [r3, #0]
}
 800a0d6:	bf00      	nop
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	20000d04 	.word	0x20000d04
 800a0e4:	20001164 	.word	0x20001164
 800a0e8:	20001178 	.word	0x20001178
 800a0ec:	20001194 	.word	0x20001194
 800a0f0:	200011a8 	.word	0x200011a8
 800a0f4:	200011c0 	.word	0x200011c0
 800a0f8:	2000118c 	.word	0x2000118c
 800a0fc:	20001190 	.word	0x20001190

0800a100 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a106:	e019      	b.n	800a13c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a108:	f000 fef6 	bl	800aef8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a10c:	4b10      	ldr	r3, [pc, #64]	@ (800a150 <prvCheckTasksWaitingTermination+0x50>)
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	3304      	adds	r3, #4
 800a118:	4618      	mov	r0, r3
 800a11a:	f7fe f913 	bl	8008344 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a11e:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <prvCheckTasksWaitingTermination+0x54>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3b01      	subs	r3, #1
 800a124:	4a0b      	ldr	r2, [pc, #44]	@ (800a154 <prvCheckTasksWaitingTermination+0x54>)
 800a126:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a128:	4b0b      	ldr	r3, [pc, #44]	@ (800a158 <prvCheckTasksWaitingTermination+0x58>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3b01      	subs	r3, #1
 800a12e:	4a0a      	ldr	r2, [pc, #40]	@ (800a158 <prvCheckTasksWaitingTermination+0x58>)
 800a130:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a132:	f000 ff13 	bl	800af5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f810 	bl	800a15c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a13c:	4b06      	ldr	r3, [pc, #24]	@ (800a158 <prvCheckTasksWaitingTermination+0x58>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1e1      	bne.n	800a108 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a144:	bf00      	nop
 800a146:	bf00      	nop
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	200011a8 	.word	0x200011a8
 800a154:	200011d4 	.word	0x200011d4
 800a158:	200011bc 	.word	0x200011bc

0800a15c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d108      	bne.n	800a180 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a172:	4618      	mov	r0, r3
 800a174:	f001 f8b0 	bl	800b2d8 <vPortFree>
				vPortFree( pxTCB );
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f001 f8ad 	bl	800b2d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a17e:	e019      	b.n	800a1b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a186:	2b01      	cmp	r3, #1
 800a188:	d103      	bne.n	800a192 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f001 f8a4 	bl	800b2d8 <vPortFree>
	}
 800a190:	e010      	b.n	800a1b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a198:	2b02      	cmp	r3, #2
 800a19a:	d00b      	beq.n	800a1b4 <prvDeleteTCB+0x58>
	__asm volatile
 800a19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	60fb      	str	r3, [r7, #12]
}
 800a1ae:	bf00      	nop
 800a1b0:	bf00      	nop
 800a1b2:	e7fd      	b.n	800a1b0 <prvDeleteTCB+0x54>
	}
 800a1b4:	bf00      	nop
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a1f4 <prvResetNextTaskUnblockTime+0x38>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d104      	bne.n	800a1d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a1f8 <prvResetNextTaskUnblockTime+0x3c>)
 800a1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a1d4:	e008      	b.n	800a1e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1d6:	4b07      	ldr	r3, [pc, #28]	@ (800a1f4 <prvResetNextTaskUnblockTime+0x38>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	4a04      	ldr	r2, [pc, #16]	@ (800a1f8 <prvResetNextTaskUnblockTime+0x3c>)
 800a1e6:	6013      	str	r3, [r2, #0]
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	2000118c 	.word	0x2000118c
 800a1f8:	200011f4 	.word	0x200011f4

0800a1fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a202:	4b05      	ldr	r3, [pc, #20]	@ (800a218 <xTaskGetCurrentTaskHandle+0x1c>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a208:	687b      	ldr	r3, [r7, #4]
	}
 800a20a:	4618      	mov	r0, r3
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	20000d00 	.word	0x20000d00

0800a21c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a222:	4b0b      	ldr	r3, [pc, #44]	@ (800a250 <xTaskGetSchedulerState+0x34>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d102      	bne.n	800a230 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a22a:	2301      	movs	r3, #1
 800a22c:	607b      	str	r3, [r7, #4]
 800a22e:	e008      	b.n	800a242 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a230:	4b08      	ldr	r3, [pc, #32]	@ (800a254 <xTaskGetSchedulerState+0x38>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d102      	bne.n	800a23e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a238:	2302      	movs	r3, #2
 800a23a:	607b      	str	r3, [r7, #4]
 800a23c:	e001      	b.n	800a242 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a23e:	2300      	movs	r3, #0
 800a240:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a242:	687b      	ldr	r3, [r7, #4]
	}
 800a244:	4618      	mov	r0, r3
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr
 800a250:	200011e0 	.word	0x200011e0
 800a254:	200011fc 	.word	0x200011fc

0800a258 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a264:	2300      	movs	r3, #0
 800a266:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d051      	beq.n	800a312 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a272:	4b2a      	ldr	r3, [pc, #168]	@ (800a31c <xTaskPriorityInherit+0xc4>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a278:	429a      	cmp	r2, r3
 800a27a:	d241      	bcs.n	800a300 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	2b00      	cmp	r3, #0
 800a282:	db06      	blt.n	800a292 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a284:	4b25      	ldr	r3, [pc, #148]	@ (800a31c <xTaskPriorityInherit+0xc4>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a28a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	6959      	ldr	r1, [r3, #20]
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a29a:	4613      	mov	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4413      	add	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4a1f      	ldr	r2, [pc, #124]	@ (800a320 <xTaskPriorityInherit+0xc8>)
 800a2a4:	4413      	add	r3, r2
 800a2a6:	4299      	cmp	r1, r3
 800a2a8:	d122      	bne.n	800a2f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fe f848 	bl	8008344 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a2b4:	4b19      	ldr	r3, [pc, #100]	@ (800a31c <xTaskPriorityInherit+0xc4>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2c2:	4b18      	ldr	r3, [pc, #96]	@ (800a324 <xTaskPriorityInherit+0xcc>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d903      	bls.n	800a2d2 <xTaskPriorityInherit+0x7a>
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ce:	4a15      	ldr	r2, [pc, #84]	@ (800a324 <xTaskPriorityInherit+0xcc>)
 800a2d0:	6013      	str	r3, [r2, #0]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	4413      	add	r3, r2
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	4a10      	ldr	r2, [pc, #64]	@ (800a320 <xTaskPriorityInherit+0xc8>)
 800a2e0:	441a      	add	r2, r3
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	f7fd ffce 	bl	800828a <vListInsertEnd>
 800a2ee:	e004      	b.n	800a2fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a2f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a31c <xTaskPriorityInherit+0xc4>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	60fb      	str	r3, [r7, #12]
 800a2fe:	e008      	b.n	800a312 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a304:	4b05      	ldr	r3, [pc, #20]	@ (800a31c <xTaskPriorityInherit+0xc4>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d201      	bcs.n	800a312 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a30e:	2301      	movs	r3, #1
 800a310:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a312:	68fb      	ldr	r3, [r7, #12]
	}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	20000d00 	.word	0x20000d00
 800a320:	20000d04 	.word	0x20000d04
 800a324:	200011dc 	.word	0x200011dc

0800a328 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a334:	2300      	movs	r3, #0
 800a336:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d058      	beq.n	800a3f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a33e:	4b2f      	ldr	r3, [pc, #188]	@ (800a3fc <xTaskPriorityDisinherit+0xd4>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	693a      	ldr	r2, [r7, #16]
 800a344:	429a      	cmp	r2, r3
 800a346:	d00b      	beq.n	800a360 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a34c:	f383 8811 	msr	BASEPRI, r3
 800a350:	f3bf 8f6f 	isb	sy
 800a354:	f3bf 8f4f 	dsb	sy
 800a358:	60fb      	str	r3, [r7, #12]
}
 800a35a:	bf00      	nop
 800a35c:	bf00      	nop
 800a35e:	e7fd      	b.n	800a35c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10b      	bne.n	800a380 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	60bb      	str	r3, [r7, #8]
}
 800a37a:	bf00      	nop
 800a37c:	bf00      	nop
 800a37e:	e7fd      	b.n	800a37c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a384:	1e5a      	subs	r2, r3, #1
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a392:	429a      	cmp	r2, r3
 800a394:	d02c      	beq.n	800a3f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d128      	bne.n	800a3f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	3304      	adds	r3, #4
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fd ffce 	bl	8008344 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a400 <xTaskPriorityDisinherit+0xd8>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d903      	bls.n	800a3d0 <xTaskPriorityDisinherit+0xa8>
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3cc:	4a0c      	ldr	r2, [pc, #48]	@ (800a400 <xTaskPriorityDisinherit+0xd8>)
 800a3ce:	6013      	str	r3, [r2, #0]
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	4413      	add	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4a09      	ldr	r2, [pc, #36]	@ (800a404 <xTaskPriorityDisinherit+0xdc>)
 800a3de:	441a      	add	r2, r3
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	4610      	mov	r0, r2
 800a3e8:	f7fd ff4f 	bl	800828a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3f0:	697b      	ldr	r3, [r7, #20]
	}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3718      	adds	r7, #24
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20000d00 	.word	0x20000d00
 800a400:	200011dc 	.word	0x200011dc
 800a404:	20000d04 	.word	0x20000d04

0800a408 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b088      	sub	sp, #32
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a416:	2301      	movs	r3, #1
 800a418:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d06c      	beq.n	800a4fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10b      	bne.n	800a440 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	60fb      	str	r3, [r7, #12]
}
 800a43a:	bf00      	nop
 800a43c:	bf00      	nop
 800a43e:	e7fd      	b.n	800a43c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a444:	683a      	ldr	r2, [r7, #0]
 800a446:	429a      	cmp	r2, r3
 800a448:	d902      	bls.n	800a450 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	61fb      	str	r3, [r7, #28]
 800a44e:	e002      	b.n	800a456 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a454:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a45a:	69fa      	ldr	r2, [r7, #28]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d04c      	beq.n	800a4fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	429a      	cmp	r2, r3
 800a468:	d147      	bne.n	800a4fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a46a:	4b26      	ldr	r3, [pc, #152]	@ (800a504 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	69ba      	ldr	r2, [r7, #24]
 800a470:	429a      	cmp	r2, r3
 800a472:	d10b      	bne.n	800a48c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	60bb      	str	r3, [r7, #8]
}
 800a486:	bf00      	nop
 800a488:	bf00      	nop
 800a48a:	e7fd      	b.n	800a488 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a490:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	69fa      	ldr	r2, [r7, #28]
 800a496:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	db04      	blt.n	800a4aa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	6959      	ldr	r1, [r3, #20]
 800a4ae:	693a      	ldr	r2, [r7, #16]
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4413      	add	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	4a13      	ldr	r2, [pc, #76]	@ (800a508 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a4ba:	4413      	add	r3, r2
 800a4bc:	4299      	cmp	r1, r3
 800a4be:	d11c      	bne.n	800a4fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	3304      	adds	r3, #4
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7fd ff3d 	bl	8008344 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a50c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d903      	bls.n	800a4de <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4da:	4a0c      	ldr	r2, [pc, #48]	@ (800a50c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a4dc:	6013      	str	r3, [r2, #0]
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4413      	add	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4a07      	ldr	r2, [pc, #28]	@ (800a508 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a4ec:	441a      	add	r2, r3
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	4610      	mov	r0, r2
 800a4f6:	f7fd fec8 	bl	800828a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4fa:	bf00      	nop
 800a4fc:	3720      	adds	r7, #32
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	20000d00 	.word	0x20000d00
 800a508:	20000d04 	.word	0x20000d04
 800a50c:	200011dc 	.word	0x200011dc

0800a510 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a510:	b480      	push	{r7}
 800a512:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a514:	4b07      	ldr	r3, [pc, #28]	@ (800a534 <pvTaskIncrementMutexHeldCount+0x24>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d004      	beq.n	800a526 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a51c:	4b05      	ldr	r3, [pc, #20]	@ (800a534 <pvTaskIncrementMutexHeldCount+0x24>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a522:	3201      	adds	r2, #1
 800a524:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 800a526:	4b03      	ldr	r3, [pc, #12]	@ (800a534 <pvTaskIncrementMutexHeldCount+0x24>)
 800a528:	681b      	ldr	r3, [r3, #0]
	}
 800a52a:	4618      	mov	r0, r3
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	20000d00 	.word	0x20000d00

0800a538 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a542:	4b21      	ldr	r3, [pc, #132]	@ (800a5c8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a548:	4b20      	ldr	r3, [pc, #128]	@ (800a5cc <prvAddCurrentTaskToDelayedList+0x94>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	3304      	adds	r3, #4
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fd fef8 	bl	8008344 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55a:	d10a      	bne.n	800a572 <prvAddCurrentTaskToDelayedList+0x3a>
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d007      	beq.n	800a572 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a562:	4b1a      	ldr	r3, [pc, #104]	@ (800a5cc <prvAddCurrentTaskToDelayedList+0x94>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	3304      	adds	r3, #4
 800a568:	4619      	mov	r1, r3
 800a56a:	4819      	ldr	r0, [pc, #100]	@ (800a5d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a56c:	f7fd fe8d 	bl	800828a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a570:	e026      	b.n	800a5c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4413      	add	r3, r2
 800a578:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a57a:	4b14      	ldr	r3, [pc, #80]	@ (800a5cc <prvAddCurrentTaskToDelayedList+0x94>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68ba      	ldr	r2, [r7, #8]
 800a580:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	429a      	cmp	r2, r3
 800a588:	d209      	bcs.n	800a59e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a58a:	4b12      	ldr	r3, [pc, #72]	@ (800a5d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	4b0f      	ldr	r3, [pc, #60]	@ (800a5cc <prvAddCurrentTaskToDelayedList+0x94>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3304      	adds	r3, #4
 800a594:	4619      	mov	r1, r3
 800a596:	4610      	mov	r0, r2
 800a598:	f7fd fe9b 	bl	80082d2 <vListInsert>
}
 800a59c:	e010      	b.n	800a5c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a59e:	4b0e      	ldr	r3, [pc, #56]	@ (800a5d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a5cc <prvAddCurrentTaskToDelayedList+0x94>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	3304      	adds	r3, #4
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	4610      	mov	r0, r2
 800a5ac:	f7fd fe91 	bl	80082d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a5dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d202      	bcs.n	800a5c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a5ba:	4a08      	ldr	r2, [pc, #32]	@ (800a5dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	6013      	str	r3, [r2, #0]
}
 800a5c0:	bf00      	nop
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	200011d8 	.word	0x200011d8
 800a5cc:	20000d00 	.word	0x20000d00
 800a5d0:	200011c0 	.word	0x200011c0
 800a5d4:	20001190 	.word	0x20001190
 800a5d8:	2000118c 	.word	0x2000118c
 800a5dc:	200011f4 	.word	0x200011f4

0800a5e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08a      	sub	sp, #40	@ 0x28
 800a5e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5ea:	f000 fb13 	bl	800ac14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5ee:	4b1d      	ldr	r3, [pc, #116]	@ (800a664 <xTimerCreateTimerTask+0x84>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d021      	beq.n	800a63a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5fe:	1d3a      	adds	r2, r7, #4
 800a600:	f107 0108 	add.w	r1, r7, #8
 800a604:	f107 030c 	add.w	r3, r7, #12
 800a608:	4618      	mov	r0, r3
 800a60a:	f7fd fdf7 	bl	80081fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a60e:	6879      	ldr	r1, [r7, #4]
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	9202      	str	r2, [sp, #8]
 800a616:	9301      	str	r3, [sp, #4]
 800a618:	2302      	movs	r3, #2
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	2300      	movs	r3, #0
 800a61e:	460a      	mov	r2, r1
 800a620:	4911      	ldr	r1, [pc, #68]	@ (800a668 <xTimerCreateTimerTask+0x88>)
 800a622:	4812      	ldr	r0, [pc, #72]	@ (800a66c <xTimerCreateTimerTask+0x8c>)
 800a624:	f7fe ff9c 	bl	8009560 <xTaskCreateStatic>
 800a628:	4603      	mov	r3, r0
 800a62a:	4a11      	ldr	r2, [pc, #68]	@ (800a670 <xTimerCreateTimerTask+0x90>)
 800a62c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a62e:	4b10      	ldr	r3, [pc, #64]	@ (800a670 <xTimerCreateTimerTask+0x90>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d001      	beq.n	800a63a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a636:	2301      	movs	r3, #1
 800a638:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d10b      	bne.n	800a658 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	613b      	str	r3, [r7, #16]
}
 800a652:	bf00      	nop
 800a654:	bf00      	nop
 800a656:	e7fd      	b.n	800a654 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a658:	697b      	ldr	r3, [r7, #20]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3718      	adds	r7, #24
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	20001238 	.word	0x20001238
 800a668:	0800cc34 	.word	0x0800cc34
 800a66c:	0800a7ad 	.word	0x0800a7ad
 800a670:	2000123c 	.word	0x2000123c

0800a674 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b08a      	sub	sp, #40	@ 0x28
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	607a      	str	r2, [r7, #4]
 800a680:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a682:	2300      	movs	r3, #0
 800a684:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10b      	bne.n	800a6a4 <xTimerGenericCommand+0x30>
	__asm volatile
 800a68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a690:	f383 8811 	msr	BASEPRI, r3
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	623b      	str	r3, [r7, #32]
}
 800a69e:	bf00      	nop
 800a6a0:	bf00      	nop
 800a6a2:	e7fd      	b.n	800a6a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a6a4:	4b19      	ldr	r3, [pc, #100]	@ (800a70c <xTimerGenericCommand+0x98>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d02a      	beq.n	800a702 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	2b05      	cmp	r3, #5
 800a6bc:	dc18      	bgt.n	800a6f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a6be:	f7ff fdad 	bl	800a21c <xTaskGetSchedulerState>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d109      	bne.n	800a6dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a6c8:	4b10      	ldr	r3, [pc, #64]	@ (800a70c <xTimerGenericCommand+0x98>)
 800a6ca:	6818      	ldr	r0, [r3, #0]
 800a6cc:	f107 0110 	add.w	r1, r7, #16
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6d4:	f7fe f8cc 	bl	8008870 <xQueueGenericSend>
 800a6d8:	6278      	str	r0, [r7, #36]	@ 0x24
 800a6da:	e012      	b.n	800a702 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6dc:	4b0b      	ldr	r3, [pc, #44]	@ (800a70c <xTimerGenericCommand+0x98>)
 800a6de:	6818      	ldr	r0, [r3, #0]
 800a6e0:	f107 0110 	add.w	r1, r7, #16
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f7fe f8c2 	bl	8008870 <xQueueGenericSend>
 800a6ec:	6278      	str	r0, [r7, #36]	@ 0x24
 800a6ee:	e008      	b.n	800a702 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a6f0:	4b06      	ldr	r3, [pc, #24]	@ (800a70c <xTimerGenericCommand+0x98>)
 800a6f2:	6818      	ldr	r0, [r3, #0]
 800a6f4:	f107 0110 	add.w	r1, r7, #16
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	f7fe f9ba 	bl	8008a74 <xQueueGenericSendFromISR>
 800a700:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a704:	4618      	mov	r0, r3
 800a706:	3728      	adds	r7, #40	@ 0x28
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	20001238 	.word	0x20001238

0800a710 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b088      	sub	sp, #32
 800a714:	af02      	add	r7, sp, #8
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a71a:	4b23      	ldr	r3, [pc, #140]	@ (800a7a8 <prvProcessExpiredTimer+0x98>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	3304      	adds	r3, #4
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fd fe0b 	bl	8008344 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a734:	f003 0304 	and.w	r3, r3, #4
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d023      	beq.n	800a784 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	699a      	ldr	r2, [r3, #24]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	18d1      	adds	r1, r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	683a      	ldr	r2, [r7, #0]
 800a748:	6978      	ldr	r0, [r7, #20]
 800a74a:	f000 f8d5 	bl	800a8f8 <prvInsertTimerInActiveList>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d020      	beq.n	800a796 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a754:	2300      	movs	r3, #0
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	2300      	movs	r3, #0
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	2100      	movs	r1, #0
 800a75e:	6978      	ldr	r0, [r7, #20]
 800a760:	f7ff ff88 	bl	800a674 <xTimerGenericCommand>
 800a764:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d114      	bne.n	800a796 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	60fb      	str	r3, [r7, #12]
}
 800a77e:	bf00      	nop
 800a780:	bf00      	nop
 800a782:	e7fd      	b.n	800a780 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a78a:	f023 0301 	bic.w	r3, r3, #1
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	6a1b      	ldr	r3, [r3, #32]
 800a79a:	6978      	ldr	r0, [r7, #20]
 800a79c:	4798      	blx	r3
}
 800a79e:	bf00      	nop
 800a7a0:	3718      	adds	r7, #24
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20001230 	.word	0x20001230

0800a7ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7b4:	f107 0308 	add.w	r3, r7, #8
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 f859 	bl	800a870 <prvGetNextExpireTime>
 800a7be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f000 f805 	bl	800a7d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a7ca:	f000 f8d7 	bl	800a97c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7ce:	bf00      	nop
 800a7d0:	e7f0      	b.n	800a7b4 <prvTimerTask+0x8>
	...

0800a7d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a7de:	f7ff f90b 	bl	80099f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7e2:	f107 0308 	add.w	r3, r7, #8
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f000 f866 	bl	800a8b8 <prvSampleTimeNow>
 800a7ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d130      	bne.n	800a856 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10a      	bne.n	800a810 <prvProcessTimerOrBlockTask+0x3c>
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d806      	bhi.n	800a810 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a802:	f7ff f907 	bl	8009a14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a806:	68f9      	ldr	r1, [r7, #12]
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f7ff ff81 	bl	800a710 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a80e:	e024      	b.n	800a85a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d008      	beq.n	800a828 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a816:	4b13      	ldr	r3, [pc, #76]	@ (800a864 <prvProcessTimerOrBlockTask+0x90>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d101      	bne.n	800a824 <prvProcessTimerOrBlockTask+0x50>
 800a820:	2301      	movs	r3, #1
 800a822:	e000      	b.n	800a826 <prvProcessTimerOrBlockTask+0x52>
 800a824:	2300      	movs	r3, #0
 800a826:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a828:	4b0f      	ldr	r3, [pc, #60]	@ (800a868 <prvProcessTimerOrBlockTask+0x94>)
 800a82a:	6818      	ldr	r0, [r3, #0]
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	4619      	mov	r1, r3
 800a836:	f7fe fe5f 	bl	80094f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a83a:	f7ff f8eb 	bl	8009a14 <xTaskResumeAll>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10a      	bne.n	800a85a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a844:	4b09      	ldr	r3, [pc, #36]	@ (800a86c <prvProcessTimerOrBlockTask+0x98>)
 800a846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	f3bf 8f6f 	isb	sy
}
 800a854:	e001      	b.n	800a85a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a856:	f7ff f8dd 	bl	8009a14 <xTaskResumeAll>
}
 800a85a:	bf00      	nop
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20001234 	.word	0x20001234
 800a868:	20001238 	.word	0x20001238
 800a86c:	e000ed04 	.word	0xe000ed04

0800a870 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a878:	4b0e      	ldr	r3, [pc, #56]	@ (800a8b4 <prvGetNextExpireTime+0x44>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <prvGetNextExpireTime+0x16>
 800a882:	2201      	movs	r2, #1
 800a884:	e000      	b.n	800a888 <prvGetNextExpireTime+0x18>
 800a886:	2200      	movs	r2, #0
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d105      	bne.n	800a8a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a894:	4b07      	ldr	r3, [pc, #28]	@ (800a8b4 <prvGetNextExpireTime+0x44>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	60fb      	str	r3, [r7, #12]
 800a89e:	e001      	b.n	800a8a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3714      	adds	r7, #20
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	20001230 	.word	0x20001230

0800a8b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a8c0:	f7ff f946 	bl	8009b50 <xTaskGetTickCount>
 800a8c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a8c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a8f4 <prvSampleTimeNow+0x3c>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d205      	bcs.n	800a8dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a8d0:	f000 f93a 	bl	800ab48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	601a      	str	r2, [r3, #0]
 800a8da:	e002      	b.n	800a8e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a8e2:	4a04      	ldr	r2, [pc, #16]	@ (800a8f4 <prvSampleTimeNow+0x3c>)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	20001240 	.word	0x20001240

0800a8f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
 800a904:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a906:	2300      	movs	r3, #0
 800a908:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a916:	68ba      	ldr	r2, [r7, #8]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d812      	bhi.n	800a944 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	1ad2      	subs	r2, r2, r3
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d302      	bcc.n	800a932 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a92c:	2301      	movs	r3, #1
 800a92e:	617b      	str	r3, [r7, #20]
 800a930:	e01b      	b.n	800a96a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a932:	4b10      	ldr	r3, [pc, #64]	@ (800a974 <prvInsertTimerInActiveList+0x7c>)
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	3304      	adds	r3, #4
 800a93a:	4619      	mov	r1, r3
 800a93c:	4610      	mov	r0, r2
 800a93e:	f7fd fcc8 	bl	80082d2 <vListInsert>
 800a942:	e012      	b.n	800a96a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d206      	bcs.n	800a95a <prvInsertTimerInActiveList+0x62>
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	429a      	cmp	r2, r3
 800a952:	d302      	bcc.n	800a95a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a954:	2301      	movs	r3, #1
 800a956:	617b      	str	r3, [r7, #20]
 800a958:	e007      	b.n	800a96a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a95a:	4b07      	ldr	r3, [pc, #28]	@ (800a978 <prvInsertTimerInActiveList+0x80>)
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3304      	adds	r3, #4
 800a962:	4619      	mov	r1, r3
 800a964:	4610      	mov	r0, r2
 800a966:	f7fd fcb4 	bl	80082d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a96a:	697b      	ldr	r3, [r7, #20]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3718      	adds	r7, #24
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	20001234 	.word	0x20001234
 800a978:	20001230 	.word	0x20001230

0800a97c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08e      	sub	sp, #56	@ 0x38
 800a980:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a982:	e0ce      	b.n	800ab22 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	da19      	bge.n	800a9be <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a98a:	1d3b      	adds	r3, r7, #4
 800a98c:	3304      	adds	r3, #4
 800a98e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10b      	bne.n	800a9ae <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	61fb      	str	r3, [r7, #28]
}
 800a9a8:	bf00      	nop
 800a9aa:	bf00      	nop
 800a9ac:	e7fd      	b.n	800a9aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9b4:	6850      	ldr	r0, [r2, #4]
 800a9b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9b8:	6892      	ldr	r2, [r2, #8]
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f2c0 80ae 	blt.w	800ab22 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d004      	beq.n	800a9dc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fd fcb4 	bl	8008344 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9dc:	463b      	mov	r3, r7
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7ff ff6a 	bl	800a8b8 <prvSampleTimeNow>
 800a9e4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2b09      	cmp	r3, #9
 800a9ea:	f200 8097 	bhi.w	800ab1c <prvProcessReceivedCommands+0x1a0>
 800a9ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a9f4 <prvProcessReceivedCommands+0x78>)
 800a9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f4:	0800aa1d 	.word	0x0800aa1d
 800a9f8:	0800aa1d 	.word	0x0800aa1d
 800a9fc:	0800aa1d 	.word	0x0800aa1d
 800aa00:	0800aa93 	.word	0x0800aa93
 800aa04:	0800aaa7 	.word	0x0800aaa7
 800aa08:	0800aaf3 	.word	0x0800aaf3
 800aa0c:	0800aa1d 	.word	0x0800aa1d
 800aa10:	0800aa1d 	.word	0x0800aa1d
 800aa14:	0800aa93 	.word	0x0800aa93
 800aa18:	0800aaa7 	.word	0x0800aaa7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa22:	f043 0301 	orr.w	r3, r3, #1
 800aa26:	b2da      	uxtb	r2, r3
 800aa28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa32:	699b      	ldr	r3, [r3, #24]
 800aa34:	18d1      	adds	r1, r2, r3
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa3c:	f7ff ff5c 	bl	800a8f8 <prvInsertTimerInActiveList>
 800aa40:	4603      	mov	r3, r0
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d06c      	beq.n	800ab20 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa48:	6a1b      	ldr	r3, [r3, #32]
 800aa4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa54:	f003 0304 	and.w	r3, r3, #4
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d061      	beq.n	800ab20 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa60:	699b      	ldr	r3, [r3, #24]
 800aa62:	441a      	add	r2, r3
 800aa64:	2300      	movs	r3, #0
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	2300      	movs	r3, #0
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa6e:	f7ff fe01 	bl	800a674 <xTimerGenericCommand>
 800aa72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa74:	6a3b      	ldr	r3, [r7, #32]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d152      	bne.n	800ab20 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800aa7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	61bb      	str	r3, [r7, #24]
}
 800aa8c:	bf00      	nop
 800aa8e:	bf00      	nop
 800aa90:	e7fd      	b.n	800aa8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa98:	f023 0301 	bic.w	r3, r3, #1
 800aa9c:	b2da      	uxtb	r2, r3
 800aa9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800aaa4:	e03d      	b.n	800ab22 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aaa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aaac:	f043 0301 	orr.w	r3, r3, #1
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aabc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac0:	699b      	ldr	r3, [r3, #24]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10b      	bne.n	800aade <prvProcessReceivedCommands+0x162>
	__asm volatile
 800aac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaca:	f383 8811 	msr	BASEPRI, r3
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	617b      	str	r3, [r7, #20]
}
 800aad8:	bf00      	nop
 800aada:	bf00      	nop
 800aadc:	e7fd      	b.n	800aada <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae0:	699a      	ldr	r2, [r3, #24]
 800aae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae4:	18d1      	adds	r1, r2, r3
 800aae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aaea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aaec:	f7ff ff04 	bl	800a8f8 <prvInsertTimerInActiveList>
					break;
 800aaf0:	e017      	b.n	800ab22 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aaf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aaf8:	f003 0302 	and.w	r3, r3, #2
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d103      	bne.n	800ab08 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ab00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab02:	f000 fbe9 	bl	800b2d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab06:	e00c      	b.n	800ab22 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab0e:	f023 0301 	bic.w	r3, r3, #1
 800ab12:	b2da      	uxtb	r2, r3
 800ab14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ab1a:	e002      	b.n	800ab22 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ab1c:	bf00      	nop
 800ab1e:	e000      	b.n	800ab22 <prvProcessReceivedCommands+0x1a6>
					break;
 800ab20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab22:	4b08      	ldr	r3, [pc, #32]	@ (800ab44 <prvProcessReceivedCommands+0x1c8>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	1d39      	adds	r1, r7, #4
 800ab28:	2200      	movs	r2, #0
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fe f8d0 	bl	8008cd0 <xQueueReceive>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	f47f af26 	bne.w	800a984 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ab38:	bf00      	nop
 800ab3a:	bf00      	nop
 800ab3c:	3730      	adds	r7, #48	@ 0x30
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	20001238 	.word	0x20001238

0800ab48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b088      	sub	sp, #32
 800ab4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab4e:	e049      	b.n	800abe4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab50:	4b2e      	ldr	r3, [pc, #184]	@ (800ac0c <prvSwitchTimerLists+0xc4>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab5a:	4b2c      	ldr	r3, [pc, #176]	@ (800ac0c <prvSwitchTimerLists+0xc4>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	3304      	adds	r3, #4
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fd fbeb 	bl	8008344 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6a1b      	ldr	r3, [r3, #32]
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab7c:	f003 0304 	and.w	r3, r3, #4
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d02f      	beq.n	800abe4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	693a      	ldr	r2, [r7, #16]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d90e      	bls.n	800abb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aba2:	4b1a      	ldr	r3, [pc, #104]	@ (800ac0c <prvSwitchTimerLists+0xc4>)
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	3304      	adds	r3, #4
 800abaa:	4619      	mov	r1, r3
 800abac:	4610      	mov	r0, r2
 800abae:	f7fd fb90 	bl	80082d2 <vListInsert>
 800abb2:	e017      	b.n	800abe4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800abb4:	2300      	movs	r3, #0
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	2300      	movs	r3, #0
 800abba:	693a      	ldr	r2, [r7, #16]
 800abbc:	2100      	movs	r1, #0
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f7ff fd58 	bl	800a674 <xTimerGenericCommand>
 800abc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10b      	bne.n	800abe4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800abcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	603b      	str	r3, [r7, #0]
}
 800abde:	bf00      	nop
 800abe0:	bf00      	nop
 800abe2:	e7fd      	b.n	800abe0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abe4:	4b09      	ldr	r3, [pc, #36]	@ (800ac0c <prvSwitchTimerLists+0xc4>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1b0      	bne.n	800ab50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800abee:	4b07      	ldr	r3, [pc, #28]	@ (800ac0c <prvSwitchTimerLists+0xc4>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800abf4:	4b06      	ldr	r3, [pc, #24]	@ (800ac10 <prvSwitchTimerLists+0xc8>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a04      	ldr	r2, [pc, #16]	@ (800ac0c <prvSwitchTimerLists+0xc4>)
 800abfa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800abfc:	4a04      	ldr	r2, [pc, #16]	@ (800ac10 <prvSwitchTimerLists+0xc8>)
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	6013      	str	r3, [r2, #0]
}
 800ac02:	bf00      	nop
 800ac04:	3718      	adds	r7, #24
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	20001230 	.word	0x20001230
 800ac10:	20001234 	.word	0x20001234

0800ac14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac1a:	f000 f96d 	bl	800aef8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac1e:	4b15      	ldr	r3, [pc, #84]	@ (800ac74 <prvCheckForValidListAndQueue+0x60>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d120      	bne.n	800ac68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac26:	4814      	ldr	r0, [pc, #80]	@ (800ac78 <prvCheckForValidListAndQueue+0x64>)
 800ac28:	f7fd fb02 	bl	8008230 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac2c:	4813      	ldr	r0, [pc, #76]	@ (800ac7c <prvCheckForValidListAndQueue+0x68>)
 800ac2e:	f7fd faff 	bl	8008230 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac32:	4b13      	ldr	r3, [pc, #76]	@ (800ac80 <prvCheckForValidListAndQueue+0x6c>)
 800ac34:	4a10      	ldr	r2, [pc, #64]	@ (800ac78 <prvCheckForValidListAndQueue+0x64>)
 800ac36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac38:	4b12      	ldr	r3, [pc, #72]	@ (800ac84 <prvCheckForValidListAndQueue+0x70>)
 800ac3a:	4a10      	ldr	r2, [pc, #64]	@ (800ac7c <prvCheckForValidListAndQueue+0x68>)
 800ac3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac3e:	2300      	movs	r3, #0
 800ac40:	9300      	str	r3, [sp, #0]
 800ac42:	4b11      	ldr	r3, [pc, #68]	@ (800ac88 <prvCheckForValidListAndQueue+0x74>)
 800ac44:	4a11      	ldr	r2, [pc, #68]	@ (800ac8c <prvCheckForValidListAndQueue+0x78>)
 800ac46:	2110      	movs	r1, #16
 800ac48:	200a      	movs	r0, #10
 800ac4a:	f7fd fc0f 	bl	800846c <xQueueGenericCreateStatic>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	4a08      	ldr	r2, [pc, #32]	@ (800ac74 <prvCheckForValidListAndQueue+0x60>)
 800ac52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac54:	4b07      	ldr	r3, [pc, #28]	@ (800ac74 <prvCheckForValidListAndQueue+0x60>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d005      	beq.n	800ac68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac5c:	4b05      	ldr	r3, [pc, #20]	@ (800ac74 <prvCheckForValidListAndQueue+0x60>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	490b      	ldr	r1, [pc, #44]	@ (800ac90 <prvCheckForValidListAndQueue+0x7c>)
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fe fbf4 	bl	8009450 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac68:	f000 f978 	bl	800af5c <vPortExitCritical>
}
 800ac6c:	bf00      	nop
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	20001238 	.word	0x20001238
 800ac78:	20001208 	.word	0x20001208
 800ac7c:	2000121c 	.word	0x2000121c
 800ac80:	20001230 	.word	0x20001230
 800ac84:	20001234 	.word	0x20001234
 800ac88:	200012e4 	.word	0x200012e4
 800ac8c:	20001244 	.word	0x20001244
 800ac90:	0800cc3c 	.word	0x0800cc3c

0800ac94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	3b04      	subs	r3, #4
 800aca4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800acac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	3b04      	subs	r3, #4
 800acb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	f023 0201 	bic.w	r2, r3, #1
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	3b04      	subs	r3, #4
 800acc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800acc4:	4a0c      	ldr	r2, [pc, #48]	@ (800acf8 <pxPortInitialiseStack+0x64>)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	3b14      	subs	r3, #20
 800acce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	3b04      	subs	r3, #4
 800acda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f06f 0202 	mvn.w	r2, #2
 800ace2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	3b20      	subs	r3, #32
 800ace8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800acea:	68fb      	ldr	r3, [r7, #12]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3714      	adds	r7, #20
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr
 800acf8:	0800acfd 	.word	0x0800acfd

0800acfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800acfc:	b480      	push	{r7}
 800acfe:	b085      	sub	sp, #20
 800ad00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad02:	2300      	movs	r3, #0
 800ad04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad06:	4b13      	ldr	r3, [pc, #76]	@ (800ad54 <prvTaskExitError+0x58>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0e:	d00b      	beq.n	800ad28 <prvTaskExitError+0x2c>
	__asm volatile
 800ad10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	60fb      	str	r3, [r7, #12]
}
 800ad22:	bf00      	nop
 800ad24:	bf00      	nop
 800ad26:	e7fd      	b.n	800ad24 <prvTaskExitError+0x28>
	__asm volatile
 800ad28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	60bb      	str	r3, [r7, #8]
}
 800ad3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad3c:	bf00      	nop
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d0fc      	beq.n	800ad3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop
 800ad48:	3714      	adds	r7, #20
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	20000228 	.word	0x20000228
	...

0800ad60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad60:	4b07      	ldr	r3, [pc, #28]	@ (800ad80 <pxCurrentTCBConst2>)
 800ad62:	6819      	ldr	r1, [r3, #0]
 800ad64:	6808      	ldr	r0, [r1, #0]
 800ad66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6a:	f380 8809 	msr	PSP, r0
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f04f 0000 	mov.w	r0, #0
 800ad76:	f380 8811 	msr	BASEPRI, r0
 800ad7a:	4770      	bx	lr
 800ad7c:	f3af 8000 	nop.w

0800ad80 <pxCurrentTCBConst2>:
 800ad80:	20000d00 	.word	0x20000d00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad84:	bf00      	nop
 800ad86:	bf00      	nop

0800ad88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad88:	4808      	ldr	r0, [pc, #32]	@ (800adac <prvPortStartFirstTask+0x24>)
 800ad8a:	6800      	ldr	r0, [r0, #0]
 800ad8c:	6800      	ldr	r0, [r0, #0]
 800ad8e:	f380 8808 	msr	MSP, r0
 800ad92:	f04f 0000 	mov.w	r0, #0
 800ad96:	f380 8814 	msr	CONTROL, r0
 800ad9a:	b662      	cpsie	i
 800ad9c:	b661      	cpsie	f
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	f3bf 8f6f 	isb	sy
 800ada6:	df00      	svc	0
 800ada8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800adaa:	bf00      	nop
 800adac:	e000ed08 	.word	0xe000ed08

0800adb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b086      	sub	sp, #24
 800adb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800adb6:	4b47      	ldr	r3, [pc, #284]	@ (800aed4 <xPortStartScheduler+0x124>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a47      	ldr	r2, [pc, #284]	@ (800aed8 <xPortStartScheduler+0x128>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d10b      	bne.n	800add8 <xPortStartScheduler+0x28>
	__asm volatile
 800adc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	613b      	str	r3, [r7, #16]
}
 800add2:	bf00      	nop
 800add4:	bf00      	nop
 800add6:	e7fd      	b.n	800add4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800add8:	4b3e      	ldr	r3, [pc, #248]	@ (800aed4 <xPortStartScheduler+0x124>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a3f      	ldr	r2, [pc, #252]	@ (800aedc <xPortStartScheduler+0x12c>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d10b      	bne.n	800adfa <xPortStartScheduler+0x4a>
	__asm volatile
 800ade2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	60fb      	str	r3, [r7, #12]
}
 800adf4:	bf00      	nop
 800adf6:	bf00      	nop
 800adf8:	e7fd      	b.n	800adf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800adfa:	4b39      	ldr	r3, [pc, #228]	@ (800aee0 <xPortStartScheduler+0x130>)
 800adfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	22ff      	movs	r2, #255	@ 0xff
 800ae0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae14:	78fb      	ldrb	r3, [r7, #3]
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	4b31      	ldr	r3, [pc, #196]	@ (800aee4 <xPortStartScheduler+0x134>)
 800ae20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae22:	4b31      	ldr	r3, [pc, #196]	@ (800aee8 <xPortStartScheduler+0x138>)
 800ae24:	2207      	movs	r2, #7
 800ae26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae28:	e009      	b.n	800ae3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ae2a:	4b2f      	ldr	r3, [pc, #188]	@ (800aee8 <xPortStartScheduler+0x138>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	4a2d      	ldr	r2, [pc, #180]	@ (800aee8 <xPortStartScheduler+0x138>)
 800ae32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae34:	78fb      	ldrb	r3, [r7, #3]
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	005b      	lsls	r3, r3, #1
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae3e:	78fb      	ldrb	r3, [r7, #3]
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae46:	2b80      	cmp	r3, #128	@ 0x80
 800ae48:	d0ef      	beq.n	800ae2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae4a:	4b27      	ldr	r3, [pc, #156]	@ (800aee8 <xPortStartScheduler+0x138>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f1c3 0307 	rsb	r3, r3, #7
 800ae52:	2b04      	cmp	r3, #4
 800ae54:	d00b      	beq.n	800ae6e <xPortStartScheduler+0xbe>
	__asm volatile
 800ae56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae5a:	f383 8811 	msr	BASEPRI, r3
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	60bb      	str	r3, [r7, #8]
}
 800ae68:	bf00      	nop
 800ae6a:	bf00      	nop
 800ae6c:	e7fd      	b.n	800ae6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae6e:	4b1e      	ldr	r3, [pc, #120]	@ (800aee8 <xPortStartScheduler+0x138>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	021b      	lsls	r3, r3, #8
 800ae74:	4a1c      	ldr	r2, [pc, #112]	@ (800aee8 <xPortStartScheduler+0x138>)
 800ae76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae78:	4b1b      	ldr	r3, [pc, #108]	@ (800aee8 <xPortStartScheduler+0x138>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ae80:	4a19      	ldr	r2, [pc, #100]	@ (800aee8 <xPortStartScheduler+0x138>)
 800ae82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	b2da      	uxtb	r2, r3
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae8c:	4b17      	ldr	r3, [pc, #92]	@ (800aeec <xPortStartScheduler+0x13c>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a16      	ldr	r2, [pc, #88]	@ (800aeec <xPortStartScheduler+0x13c>)
 800ae92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ae96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae98:	4b14      	ldr	r3, [pc, #80]	@ (800aeec <xPortStartScheduler+0x13c>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a13      	ldr	r2, [pc, #76]	@ (800aeec <xPortStartScheduler+0x13c>)
 800ae9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aea2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aea4:	f000 f8da 	bl	800b05c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aea8:	4b11      	ldr	r3, [pc, #68]	@ (800aef0 <xPortStartScheduler+0x140>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aeae:	f000 f8f9 	bl	800b0a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aeb2:	4b10      	ldr	r3, [pc, #64]	@ (800aef4 <xPortStartScheduler+0x144>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a0f      	ldr	r2, [pc, #60]	@ (800aef4 <xPortStartScheduler+0x144>)
 800aeb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aebc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aebe:	f7ff ff63 	bl	800ad88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aec2:	f7fe ff0f 	bl	8009ce4 <vTaskSwitchContext>
	prvTaskExitError();
 800aec6:	f7ff ff19 	bl	800acfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3718      	adds	r7, #24
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	e000ed00 	.word	0xe000ed00
 800aed8:	410fc271 	.word	0x410fc271
 800aedc:	410fc270 	.word	0x410fc270
 800aee0:	e000e400 	.word	0xe000e400
 800aee4:	20001334 	.word	0x20001334
 800aee8:	20001338 	.word	0x20001338
 800aeec:	e000ed20 	.word	0xe000ed20
 800aef0:	20000228 	.word	0x20000228
 800aef4:	e000ef34 	.word	0xe000ef34

0800aef8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
	__asm volatile
 800aefe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af02:	f383 8811 	msr	BASEPRI, r3
 800af06:	f3bf 8f6f 	isb	sy
 800af0a:	f3bf 8f4f 	dsb	sy
 800af0e:	607b      	str	r3, [r7, #4]
}
 800af10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800af12:	4b10      	ldr	r3, [pc, #64]	@ (800af54 <vPortEnterCritical+0x5c>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	3301      	adds	r3, #1
 800af18:	4a0e      	ldr	r2, [pc, #56]	@ (800af54 <vPortEnterCritical+0x5c>)
 800af1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800af1c:	4b0d      	ldr	r3, [pc, #52]	@ (800af54 <vPortEnterCritical+0x5c>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b01      	cmp	r3, #1
 800af22:	d110      	bne.n	800af46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af24:	4b0c      	ldr	r3, [pc, #48]	@ (800af58 <vPortEnterCritical+0x60>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00b      	beq.n	800af46 <vPortEnterCritical+0x4e>
	__asm volatile
 800af2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af32:	f383 8811 	msr	BASEPRI, r3
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	603b      	str	r3, [r7, #0]
}
 800af40:	bf00      	nop
 800af42:	bf00      	nop
 800af44:	e7fd      	b.n	800af42 <vPortEnterCritical+0x4a>
	}
}
 800af46:	bf00      	nop
 800af48:	370c      	adds	r7, #12
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	20000228 	.word	0x20000228
 800af58:	e000ed04 	.word	0xe000ed04

0800af5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af62:	4b12      	ldr	r3, [pc, #72]	@ (800afac <vPortExitCritical+0x50>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10b      	bne.n	800af82 <vPortExitCritical+0x26>
	__asm volatile
 800af6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	607b      	str	r3, [r7, #4]
}
 800af7c:	bf00      	nop
 800af7e:	bf00      	nop
 800af80:	e7fd      	b.n	800af7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af82:	4b0a      	ldr	r3, [pc, #40]	@ (800afac <vPortExitCritical+0x50>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	3b01      	subs	r3, #1
 800af88:	4a08      	ldr	r2, [pc, #32]	@ (800afac <vPortExitCritical+0x50>)
 800af8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af8c:	4b07      	ldr	r3, [pc, #28]	@ (800afac <vPortExitCritical+0x50>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d105      	bne.n	800afa0 <vPortExitCritical+0x44>
 800af94:	2300      	movs	r3, #0
 800af96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	f383 8811 	msr	BASEPRI, r3
}
 800af9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr
 800afac:	20000228 	.word	0x20000228

0800afb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800afb0:	f3ef 8009 	mrs	r0, PSP
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	4b15      	ldr	r3, [pc, #84]	@ (800b010 <pxCurrentTCBConst>)
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	f01e 0f10 	tst.w	lr, #16
 800afc0:	bf08      	it	eq
 800afc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800afc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afca:	6010      	str	r0, [r2, #0]
 800afcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800afd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800afd4:	f380 8811 	msr	BASEPRI, r0
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f7fe fe80 	bl	8009ce4 <vTaskSwitchContext>
 800afe4:	f04f 0000 	mov.w	r0, #0
 800afe8:	f380 8811 	msr	BASEPRI, r0
 800afec:	bc09      	pop	{r0, r3}
 800afee:	6819      	ldr	r1, [r3, #0]
 800aff0:	6808      	ldr	r0, [r1, #0]
 800aff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff6:	f01e 0f10 	tst.w	lr, #16
 800affa:	bf08      	it	eq
 800affc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b000:	f380 8809 	msr	PSP, r0
 800b004:	f3bf 8f6f 	isb	sy
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	f3af 8000 	nop.w

0800b010 <pxCurrentTCBConst>:
 800b010:	20000d00 	.word	0x20000d00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b014:	bf00      	nop
 800b016:	bf00      	nop

0800b018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
	__asm volatile
 800b01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	607b      	str	r3, [r7, #4]
}
 800b030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b032:	f7fe fd9d 	bl	8009b70 <xTaskIncrementTick>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d003      	beq.n	800b044 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b03c:	4b06      	ldr	r3, [pc, #24]	@ (800b058 <xPortSysTickHandler+0x40>)
 800b03e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b042:	601a      	str	r2, [r3, #0]
 800b044:	2300      	movs	r3, #0
 800b046:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	f383 8811 	msr	BASEPRI, r3
}
 800b04e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b050:	bf00      	nop
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	e000ed04 	.word	0xe000ed04

0800b05c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b05c:	b480      	push	{r7}
 800b05e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b060:	4b0b      	ldr	r3, [pc, #44]	@ (800b090 <vPortSetupTimerInterrupt+0x34>)
 800b062:	2200      	movs	r2, #0
 800b064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b066:	4b0b      	ldr	r3, [pc, #44]	@ (800b094 <vPortSetupTimerInterrupt+0x38>)
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b06c:	4b0a      	ldr	r3, [pc, #40]	@ (800b098 <vPortSetupTimerInterrupt+0x3c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a0a      	ldr	r2, [pc, #40]	@ (800b09c <vPortSetupTimerInterrupt+0x40>)
 800b072:	fba2 2303 	umull	r2, r3, r2, r3
 800b076:	099b      	lsrs	r3, r3, #6
 800b078:	4a09      	ldr	r2, [pc, #36]	@ (800b0a0 <vPortSetupTimerInterrupt+0x44>)
 800b07a:	3b01      	subs	r3, #1
 800b07c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b07e:	4b04      	ldr	r3, [pc, #16]	@ (800b090 <vPortSetupTimerInterrupt+0x34>)
 800b080:	2207      	movs	r2, #7
 800b082:	601a      	str	r2, [r3, #0]
}
 800b084:	bf00      	nop
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	e000e010 	.word	0xe000e010
 800b094:	e000e018 	.word	0xe000e018
 800b098:	20000094 	.word	0x20000094
 800b09c:	10624dd3 	.word	0x10624dd3
 800b0a0:	e000e014 	.word	0xe000e014

0800b0a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b0a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b0b4 <vPortEnableVFP+0x10>
 800b0a8:	6801      	ldr	r1, [r0, #0]
 800b0aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b0ae:	6001      	str	r1, [r0, #0]
 800b0b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b0b2:	bf00      	nop
 800b0b4:	e000ed88 	.word	0xe000ed88

0800b0b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b0be:	f3ef 8305 	mrs	r3, IPSR
 800b0c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2b0f      	cmp	r3, #15
 800b0c8:	d915      	bls.n	800b0f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b0ca:	4a18      	ldr	r2, [pc, #96]	@ (800b12c <vPortValidateInterruptPriority+0x74>)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b0d4:	4b16      	ldr	r3, [pc, #88]	@ (800b130 <vPortValidateInterruptPriority+0x78>)
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	7afa      	ldrb	r2, [r7, #11]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d20b      	bcs.n	800b0f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	607b      	str	r3, [r7, #4]
}
 800b0f0:	bf00      	nop
 800b0f2:	bf00      	nop
 800b0f4:	e7fd      	b.n	800b0f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b0f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b134 <vPortValidateInterruptPriority+0x7c>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b0fe:	4b0e      	ldr	r3, [pc, #56]	@ (800b138 <vPortValidateInterruptPriority+0x80>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	429a      	cmp	r2, r3
 800b104:	d90b      	bls.n	800b11e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b10a:	f383 8811 	msr	BASEPRI, r3
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	f3bf 8f4f 	dsb	sy
 800b116:	603b      	str	r3, [r7, #0]
}
 800b118:	bf00      	nop
 800b11a:	bf00      	nop
 800b11c:	e7fd      	b.n	800b11a <vPortValidateInterruptPriority+0x62>
	}
 800b11e:	bf00      	nop
 800b120:	3714      	adds	r7, #20
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	e000e3f0 	.word	0xe000e3f0
 800b130:	20001334 	.word	0x20001334
 800b134:	e000ed0c 	.word	0xe000ed0c
 800b138:	20001338 	.word	0x20001338

0800b13c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b08a      	sub	sp, #40	@ 0x28
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b144:	2300      	movs	r3, #0
 800b146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b148:	f7fe fc56 	bl	80099f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b14c:	4b5c      	ldr	r3, [pc, #368]	@ (800b2c0 <pvPortMalloc+0x184>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d101      	bne.n	800b158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b154:	f000 f924 	bl	800b3a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b158:	4b5a      	ldr	r3, [pc, #360]	@ (800b2c4 <pvPortMalloc+0x188>)
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	4013      	ands	r3, r2
 800b160:	2b00      	cmp	r3, #0
 800b162:	f040 8095 	bne.w	800b290 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d01e      	beq.n	800b1aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b16c:	2208      	movs	r2, #8
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4413      	add	r3, r2
 800b172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f003 0307 	and.w	r3, r3, #7
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d015      	beq.n	800b1aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f023 0307 	bic.w	r3, r3, #7
 800b184:	3308      	adds	r3, #8
 800b186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f003 0307 	and.w	r3, r3, #7
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00b      	beq.n	800b1aa <pvPortMalloc+0x6e>
	__asm volatile
 800b192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b196:	f383 8811 	msr	BASEPRI, r3
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	617b      	str	r3, [r7, #20]
}
 800b1a4:	bf00      	nop
 800b1a6:	bf00      	nop
 800b1a8:	e7fd      	b.n	800b1a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d06f      	beq.n	800b290 <pvPortMalloc+0x154>
 800b1b0:	4b45      	ldr	r3, [pc, #276]	@ (800b2c8 <pvPortMalloc+0x18c>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d86a      	bhi.n	800b290 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b1ba:	4b44      	ldr	r3, [pc, #272]	@ (800b2cc <pvPortMalloc+0x190>)
 800b1bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b1be:	4b43      	ldr	r3, [pc, #268]	@ (800b2cc <pvPortMalloc+0x190>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1c4:	e004      	b.n	800b1d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d903      	bls.n	800b1e2 <pvPortMalloc+0xa6>
 800b1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1f1      	bne.n	800b1c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b1e2:	4b37      	ldr	r3, [pc, #220]	@ (800b2c0 <pvPortMalloc+0x184>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d051      	beq.n	800b290 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b1ec:	6a3b      	ldr	r3, [r7, #32]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2208      	movs	r2, #8
 800b1f2:	4413      	add	r3, r2
 800b1f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	1ad2      	subs	r2, r2, r3
 800b206:	2308      	movs	r3, #8
 800b208:	005b      	lsls	r3, r3, #1
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d920      	bls.n	800b250 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b20e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4413      	add	r3, r2
 800b214:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	f003 0307 	and.w	r3, r3, #7
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00b      	beq.n	800b238 <pvPortMalloc+0xfc>
	__asm volatile
 800b220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	613b      	str	r3, [r7, #16]
}
 800b232:	bf00      	nop
 800b234:	bf00      	nop
 800b236:	e7fd      	b.n	800b234 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b23a:	685a      	ldr	r2, [r3, #4]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	1ad2      	subs	r2, r2, r3
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b24a:	69b8      	ldr	r0, [r7, #24]
 800b24c:	f000 f90a 	bl	800b464 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b250:	4b1d      	ldr	r3, [pc, #116]	@ (800b2c8 <pvPortMalloc+0x18c>)
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	1ad3      	subs	r3, r2, r3
 800b25a:	4a1b      	ldr	r2, [pc, #108]	@ (800b2c8 <pvPortMalloc+0x18c>)
 800b25c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b25e:	4b1a      	ldr	r3, [pc, #104]	@ (800b2c8 <pvPortMalloc+0x18c>)
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	4b1b      	ldr	r3, [pc, #108]	@ (800b2d0 <pvPortMalloc+0x194>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	429a      	cmp	r2, r3
 800b268:	d203      	bcs.n	800b272 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b26a:	4b17      	ldr	r3, [pc, #92]	@ (800b2c8 <pvPortMalloc+0x18c>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a18      	ldr	r2, [pc, #96]	@ (800b2d0 <pvPortMalloc+0x194>)
 800b270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b274:	685a      	ldr	r2, [r3, #4]
 800b276:	4b13      	ldr	r3, [pc, #76]	@ (800b2c4 <pvPortMalloc+0x188>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	431a      	orrs	r2, r3
 800b27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b27e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b282:	2200      	movs	r2, #0
 800b284:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b286:	4b13      	ldr	r3, [pc, #76]	@ (800b2d4 <pvPortMalloc+0x198>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	3301      	adds	r3, #1
 800b28c:	4a11      	ldr	r2, [pc, #68]	@ (800b2d4 <pvPortMalloc+0x198>)
 800b28e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b290:	f7fe fbc0 	bl	8009a14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	f003 0307 	and.w	r3, r3, #7
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d00b      	beq.n	800b2b6 <pvPortMalloc+0x17a>
	__asm volatile
 800b29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a2:	f383 8811 	msr	BASEPRI, r3
 800b2a6:	f3bf 8f6f 	isb	sy
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	60fb      	str	r3, [r7, #12]
}
 800b2b0:	bf00      	nop
 800b2b2:	bf00      	nop
 800b2b4:	e7fd      	b.n	800b2b2 <pvPortMalloc+0x176>
	return pvReturn;
 800b2b6:	69fb      	ldr	r3, [r7, #28]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3728      	adds	r7, #40	@ 0x28
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	2000db44 	.word	0x2000db44
 800b2c4:	2000db58 	.word	0x2000db58
 800b2c8:	2000db48 	.word	0x2000db48
 800b2cc:	2000db3c 	.word	0x2000db3c
 800b2d0:	2000db4c 	.word	0x2000db4c
 800b2d4:	2000db50 	.word	0x2000db50

0800b2d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d04f      	beq.n	800b38a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b2ea:	2308      	movs	r3, #8
 800b2ec:	425b      	negs	r3, r3
 800b2ee:	697a      	ldr	r2, [r7, #20]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	685a      	ldr	r2, [r3, #4]
 800b2fc:	4b25      	ldr	r3, [pc, #148]	@ (800b394 <vPortFree+0xbc>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4013      	ands	r3, r2
 800b302:	2b00      	cmp	r3, #0
 800b304:	d10b      	bne.n	800b31e <vPortFree+0x46>
	__asm volatile
 800b306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b30a:	f383 8811 	msr	BASEPRI, r3
 800b30e:	f3bf 8f6f 	isb	sy
 800b312:	f3bf 8f4f 	dsb	sy
 800b316:	60fb      	str	r3, [r7, #12]
}
 800b318:	bf00      	nop
 800b31a:	bf00      	nop
 800b31c:	e7fd      	b.n	800b31a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00b      	beq.n	800b33e <vPortFree+0x66>
	__asm volatile
 800b326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b32a:	f383 8811 	msr	BASEPRI, r3
 800b32e:	f3bf 8f6f 	isb	sy
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	60bb      	str	r3, [r7, #8]
}
 800b338:	bf00      	nop
 800b33a:	bf00      	nop
 800b33c:	e7fd      	b.n	800b33a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	685a      	ldr	r2, [r3, #4]
 800b342:	4b14      	ldr	r3, [pc, #80]	@ (800b394 <vPortFree+0xbc>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4013      	ands	r3, r2
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d01e      	beq.n	800b38a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d11a      	bne.n	800b38a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	685a      	ldr	r2, [r3, #4]
 800b358:	4b0e      	ldr	r3, [pc, #56]	@ (800b394 <vPortFree+0xbc>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	43db      	mvns	r3, r3
 800b35e:	401a      	ands	r2, r3
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b364:	f7fe fb48 	bl	80099f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	685a      	ldr	r2, [r3, #4]
 800b36c:	4b0a      	ldr	r3, [pc, #40]	@ (800b398 <vPortFree+0xc0>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4413      	add	r3, r2
 800b372:	4a09      	ldr	r2, [pc, #36]	@ (800b398 <vPortFree+0xc0>)
 800b374:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b376:	6938      	ldr	r0, [r7, #16]
 800b378:	f000 f874 	bl	800b464 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b37c:	4b07      	ldr	r3, [pc, #28]	@ (800b39c <vPortFree+0xc4>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	3301      	adds	r3, #1
 800b382:	4a06      	ldr	r2, [pc, #24]	@ (800b39c <vPortFree+0xc4>)
 800b384:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b386:	f7fe fb45 	bl	8009a14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b38a:	bf00      	nop
 800b38c:	3718      	adds	r7, #24
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	2000db58 	.word	0x2000db58
 800b398:	2000db48 	.word	0x2000db48
 800b39c:	2000db54 	.word	0x2000db54

0800b3a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b3a6:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 800b3aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b3ac:	4b27      	ldr	r3, [pc, #156]	@ (800b44c <prvHeapInit+0xac>)
 800b3ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f003 0307 	and.w	r3, r3, #7
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00c      	beq.n	800b3d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	3307      	adds	r3, #7
 800b3be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f023 0307 	bic.w	r3, r3, #7
 800b3c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	4a1f      	ldr	r2, [pc, #124]	@ (800b44c <prvHeapInit+0xac>)
 800b3d0:	4413      	add	r3, r2
 800b3d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b3d8:	4a1d      	ldr	r2, [pc, #116]	@ (800b450 <prvHeapInit+0xb0>)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b3de:	4b1c      	ldr	r3, [pc, #112]	@ (800b450 <prvHeapInit+0xb0>)
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	4413      	add	r3, r2
 800b3ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b3ec:	2208      	movs	r2, #8
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	1a9b      	subs	r3, r3, r2
 800b3f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f023 0307 	bic.w	r3, r3, #7
 800b3fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	4a15      	ldr	r2, [pc, #84]	@ (800b454 <prvHeapInit+0xb4>)
 800b400:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b402:	4b14      	ldr	r3, [pc, #80]	@ (800b454 <prvHeapInit+0xb4>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2200      	movs	r2, #0
 800b408:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b40a:	4b12      	ldr	r3, [pc, #72]	@ (800b454 <prvHeapInit+0xb4>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2200      	movs	r2, #0
 800b410:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	1ad2      	subs	r2, r2, r3
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b420:	4b0c      	ldr	r3, [pc, #48]	@ (800b454 <prvHeapInit+0xb4>)
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	4a0a      	ldr	r2, [pc, #40]	@ (800b458 <prvHeapInit+0xb8>)
 800b42e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	4a09      	ldr	r2, [pc, #36]	@ (800b45c <prvHeapInit+0xbc>)
 800b436:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b438:	4b09      	ldr	r3, [pc, #36]	@ (800b460 <prvHeapInit+0xc0>)
 800b43a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b43e:	601a      	str	r2, [r3, #0]
}
 800b440:	bf00      	nop
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	2000133c 	.word	0x2000133c
 800b450:	2000db3c 	.word	0x2000db3c
 800b454:	2000db44 	.word	0x2000db44
 800b458:	2000db4c 	.word	0x2000db4c
 800b45c:	2000db48 	.word	0x2000db48
 800b460:	2000db58 	.word	0x2000db58

0800b464 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b464:	b480      	push	{r7}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b46c:	4b28      	ldr	r3, [pc, #160]	@ (800b510 <prvInsertBlockIntoFreeList+0xac>)
 800b46e:	60fb      	str	r3, [r7, #12]
 800b470:	e002      	b.n	800b478 <prvInsertBlockIntoFreeList+0x14>
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	60fb      	str	r3, [r7, #12]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d8f7      	bhi.n	800b472 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	68ba      	ldr	r2, [r7, #8]
 800b48c:	4413      	add	r3, r2
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	429a      	cmp	r2, r3
 800b492:	d108      	bne.n	800b4a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	685a      	ldr	r2, [r3, #4]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	441a      	add	r2, r3
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	441a      	add	r2, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d118      	bne.n	800b4ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	4b15      	ldr	r3, [pc, #84]	@ (800b514 <prvInsertBlockIntoFreeList+0xb0>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d00d      	beq.n	800b4e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	685a      	ldr	r2, [r3, #4]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	441a      	add	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	601a      	str	r2, [r3, #0]
 800b4e0:	e008      	b.n	800b4f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b4e2:	4b0c      	ldr	r3, [pc, #48]	@ (800b514 <prvInsertBlockIntoFreeList+0xb0>)
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	601a      	str	r2, [r3, #0]
 800b4ea:	e003      	b.n	800b4f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d002      	beq.n	800b502 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b502:	bf00      	nop
 800b504:	3714      	adds	r7, #20
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	2000db3c 	.word	0x2000db3c
 800b514:	2000db44 	.word	0x2000db44

0800b518 <PID_Init>:
#include "../inc/PID.h"

void PID_Init(PID_Controller *pid, float Kp, float Ki, float Kd, float N, float dt, float outputMin, float outputMax) {
 800b518:	b480      	push	{r7}
 800b51a:	b089      	sub	sp, #36	@ 0x24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	61f8      	str	r0, [r7, #28]
 800b520:	ed87 0a06 	vstr	s0, [r7, #24]
 800b524:	edc7 0a05 	vstr	s1, [r7, #20]
 800b528:	ed87 1a04 	vstr	s2, [r7, #16]
 800b52c:	edc7 1a03 	vstr	s3, [r7, #12]
 800b530:	ed87 2a02 	vstr	s4, [r7, #8]
 800b534:	edc7 2a01 	vstr	s5, [r7, #4]
 800b538:	ed87 3a00 	vstr	s6, [r7]
    pid->Kp = Kp;
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	69ba      	ldr	r2, [r7, #24]
 800b540:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	697a      	ldr	r2, [r7, #20]
 800b546:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	693a      	ldr	r2, [r7, #16]
 800b54c:	609a      	str	r2, [r3, #8]
    pid->N = N;
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	60da      	str	r2, [r3, #12]
    pid->prevError = 0.0f;
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	f04f 0200 	mov.w	r2, #0
 800b55a:	611a      	str	r2, [r3, #16]
    pid->integral = 0.0f;
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	f04f 0200 	mov.w	r2, #0
 800b562:	615a      	str	r2, [r3, #20]
    pid->prevD = 0.0f;
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	f04f 0200 	mov.w	r2, #0
 800b56a:	619a      	str	r2, [r3, #24]
    pid->dt = dt;
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	61da      	str	r2, [r3, #28]
	pid->outputMin = outputMin;
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	621a      	str	r2, [r3, #32]
    pid->outputMax = outputMax;
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	683a      	ldr	r2, [r7, #0]
 800b57c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b57e:	bf00      	nop
 800b580:	3724      	adds	r7, #36	@ 0x24
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr

0800b58a <PID_Compute>:

float PID_Compute(PID_Controller *pid, float setpoint, float measuredValue) {
 800b58a:	b480      	push	{r7}
 800b58c:	b08b      	sub	sp, #44	@ 0x2c
 800b58e:	af00      	add	r7, sp, #0
 800b590:	60f8      	str	r0, [r7, #12]
 800b592:	ed87 0a02 	vstr	s0, [r7, #8]
 800b596:	edc7 0a01 	vstr	s1, [r7, #4]
    // Calculate error
    float error = setpoint - measuredValue;
 800b59a:	ed97 7a02 	vldr	s14, [r7, #8]
 800b59e:	edd7 7a01 	vldr	s15, [r7, #4]
 800b5a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5a6:	edc7 7a08 	vstr	s15, [r7, #32]

    // Proportional term
    float Pout = pid->Kp * error;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	edd3 7a00 	vldr	s15, [r3]
 800b5b0:	ed97 7a08 	vldr	s14, [r7, #32]
 800b5b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5b8:	edc7 7a07 	vstr	s15, [r7, #28]

    // Integral term
    pid->integral += error * pid->dt;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	ed93 7a05 	vldr	s14, [r3, #20]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	edd3 6a07 	vldr	s13, [r3, #28]
 800b5c8:	edd7 7a08 	vldr	s15, [r7, #32]
 800b5cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b5d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	edc3 7a05 	vstr	s15, [r3, #20]
    float Iout = pid->Ki * pid->integral;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	ed93 7a01 	vldr	s14, [r3, #4]
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	edd3 7a05 	vldr	s15, [r3, #20]
 800b5e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ea:	edc7 7a06 	vstr	s15, [r7, #24]

    // Derivative term with filtering
    float derivative = (error - pid->prevError) / pid->dt;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	edd3 7a04 	vldr	s15, [r3, #16]
 800b5f4:	ed97 7a08 	vldr	s14, [r7, #32]
 800b5f8:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	ed93 7a07 	vldr	s14, [r3, #28]
 800b602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b606:	edc7 7a05 	vstr	s15, [r7, #20]
    float Dout = pid->Kd * ((pid->N * derivative - pid->prevD) / (1.0f + pid->N * pid->dt));
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	ed93 7a02 	vldr	s14, [r3, #8]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	edd3 6a03 	vldr	s13, [r3, #12]
 800b616:	edd7 7a05 	vldr	s15, [r7, #20]
 800b61a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	edd3 7a06 	vldr	s15, [r3, #24]
 800b624:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	edd3 6a03 	vldr	s13, [r3, #12]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	edd3 7a07 	vldr	s15, [r3, #28]
 800b634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b638:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b63c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800b640:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b644:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b648:	edc7 7a04 	vstr	s15, [r7, #16]

    // Update previous values
    pid->prevError = error;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6a3a      	ldr	r2, [r7, #32]
 800b650:	611a      	str	r2, [r3, #16]
    pid->prevD = Dout;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	693a      	ldr	r2, [r7, #16]
 800b656:	619a      	str	r2, [r3, #24]

    // Total output
    float output = Pout + Iout + Dout;
 800b658:	ed97 7a07 	vldr	s14, [r7, #28]
 800b65c:	edd7 7a06 	vldr	s15, [r7, #24]
 800b660:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b664:	ed97 7a04 	vldr	s14, [r7, #16]
 800b668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b66c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Apply output limits
    if (output > pid->outputMax) {
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800b676:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b67a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b682:	dd03      	ble.n	800b68c <PID_Compute+0x102>
        output = pid->outputMax;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b688:	627b      	str	r3, [r7, #36]	@ 0x24
 800b68a:	e00c      	b.n	800b6a6 <PID_Compute+0x11c>
    } else if (output < pid->outputMin) {
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	edd3 7a08 	vldr	s15, [r3, #32]
 800b692:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b696:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b69e:	d502      	bpl.n	800b6a6 <PID_Compute+0x11c>
        output = pid->outputMin;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6a1b      	ldr	r3, [r3, #32]
 800b6a4:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Anti-windup: Adjust integral term if output is saturated
    if (output == pid->outputMax && error > 0) {
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800b6ac:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b6b0:	eeb4 7a67 	vcmp.f32	s14, s15
 800b6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b8:	d116      	bne.n	800b6e8 <PID_Compute+0x15e>
 800b6ba:	edd7 7a08 	vldr	s15, [r7, #32]
 800b6be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6c6:	dd0f      	ble.n	800b6e8 <PID_Compute+0x15e>
        pid->integral -= error * pid->dt;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	ed93 7a05 	vldr	s14, [r3, #20]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	edd3 6a07 	vldr	s13, [r3, #28]
 800b6d4:	edd7 7a08 	vldr	s15, [r7, #32]
 800b6d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b6dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	edc3 7a05 	vstr	s15, [r3, #20]
 800b6e6:	e01f      	b.n	800b728 <PID_Compute+0x19e>
    } else if (output == pid->outputMin && error < 0) {
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	edd3 7a08 	vldr	s15, [r3, #32]
 800b6ee:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b6f2:	eeb4 7a67 	vcmp.f32	s14, s15
 800b6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6fa:	d115      	bne.n	800b728 <PID_Compute+0x19e>
 800b6fc:	edd7 7a08 	vldr	s15, [r7, #32]
 800b700:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b708:	d50e      	bpl.n	800b728 <PID_Compute+0x19e>
        pid->integral -= error * pid->dt;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	ed93 7a05 	vldr	s14, [r3, #20]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	edd3 6a07 	vldr	s13, [r3, #28]
 800b716:	edd7 7a08 	vldr	s15, [r7, #32]
 800b71a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b71e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	edc3 7a05 	vstr	s15, [r3, #20]
    }

    return output;
 800b728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b72a:	ee07 3a90 	vmov	s15, r3
 800b72e:	eeb0 0a67 	vmov.f32	s0, s15
 800b732:	372c      	adds	r7, #44	@ 0x2c
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <list_create>:
#include <stdlib.h>
#include "../inc/my_list.h"

// Create a new list
List *list_create() {
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
    List *list = (List *)malloc(sizeof(List));
 800b742:	200c      	movs	r0, #12
 800b744:	f000 f878 	bl	800b838 <malloc>
 800b748:	4603      	mov	r3, r0
 800b74a:	607b      	str	r3, [r7, #4]
    if (!list) return NULL;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d101      	bne.n	800b756 <list_create+0x1a>
 800b752:	2300      	movs	r3, #0
 800b754:	e00a      	b.n	800b76c <list_create+0x30>
    list->head = list->tail = NULL;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	605a      	str	r2, [r3, #4]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	685a      	ldr	r2, [r3, #4]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	601a      	str	r2, [r3, #0]
    list->size = 0;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	609a      	str	r2, [r3, #8]
    return list;
 800b76a:	687b      	ldr	r3, [r7, #4]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <list_append>:
    }
    free(list);
}

// Append an element to the end of the list
void list_append(List *list, void *data) {
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
    if (!list) return;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d029      	beq.n	800b7d8 <list_append+0x64>

    Node *new_node = (Node *)malloc(sizeof(Node));
 800b784:	200c      	movs	r0, #12
 800b786:	f000 f857 	bl	800b838 <malloc>
 800b78a:	4603      	mov	r3, r0
 800b78c:	60fb      	str	r3, [r7, #12]
    if (!new_node) return;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d023      	beq.n	800b7dc <list_append+0x68>

    new_node->data = data;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	683a      	ldr	r2, [r7, #0]
 800b798:	601a      	str	r2, [r3, #0]
    new_node->next = NULL;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2200      	movs	r2, #0
 800b79e:	609a      	str	r2, [r3, #8]
    new_node->prev = list->tail;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685a      	ldr	r2, [r3, #4]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	605a      	str	r2, [r3, #4]

    if (list->tail) list->tail->next = new_node;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d003      	beq.n	800b7b8 <list_append+0x44>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	609a      	str	r2, [r3, #8]
    list->tail = new_node;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	68fa      	ldr	r2, [r7, #12]
 800b7bc:	605a      	str	r2, [r3, #4]

    if (!list->head) list->head = new_node;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d102      	bne.n	800b7cc <list_append+0x58>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	601a      	str	r2, [r3, #0]
    list->size++;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	1c5a      	adds	r2, r3, #1
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	609a      	str	r2, [r3, #8]
 800b7d6:	e002      	b.n	800b7de <list_append+0x6a>
    if (!list) return;
 800b7d8:	bf00      	nop
 800b7da:	e000      	b.n	800b7de <list_append+0x6a>
    if (!new_node) return;
 800b7dc:	bf00      	nop
}
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <list_find>:
size_t list_size(const List *list) {
    return list ? list->size : 0;
}

// Find data based on a callback function
void *list_find(List *list, const void *data, int (*callback)(void *, const void *)) {
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
    if (!list || !callback) return NULL;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d002      	beq.n	800b7fc <list_find+0x18>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d101      	bne.n	800b800 <list_find+0x1c>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	e016      	b.n	800b82e <list_find+0x4a>

    Node *current = list->head;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	617b      	str	r3, [r7, #20]
    while (current) {
 800b806:	e00e      	b.n	800b826 <list_find+0x42>
        if (callback(current->data, data)) {
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	68b9      	ldr	r1, [r7, #8]
 800b810:	4610      	mov	r0, r2
 800b812:	4798      	blx	r3
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d002      	beq.n	800b820 <list_find+0x3c>
            return current->data;
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	e006      	b.n	800b82e <list_find+0x4a>
        }
        current = current->next;
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	617b      	str	r3, [r7, #20]
    while (current) {
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1ed      	bne.n	800b808 <list_find+0x24>
    }
    return NULL;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3718      	adds	r7, #24
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
	...

0800b838 <malloc>:
 800b838:	4b02      	ldr	r3, [pc, #8]	@ (800b844 <malloc+0xc>)
 800b83a:	4601      	mov	r1, r0
 800b83c:	6818      	ldr	r0, [r3, #0]
 800b83e:	f000 b825 	b.w	800b88c <_malloc_r>
 800b842:	bf00      	nop
 800b844:	2000022c 	.word	0x2000022c

0800b848 <sbrk_aligned>:
 800b848:	b570      	push	{r4, r5, r6, lr}
 800b84a:	4e0f      	ldr	r6, [pc, #60]	@ (800b888 <sbrk_aligned+0x40>)
 800b84c:	460c      	mov	r4, r1
 800b84e:	6831      	ldr	r1, [r6, #0]
 800b850:	4605      	mov	r5, r0
 800b852:	b911      	cbnz	r1, 800b85a <sbrk_aligned+0x12>
 800b854:	f000 f8ae 	bl	800b9b4 <_sbrk_r>
 800b858:	6030      	str	r0, [r6, #0]
 800b85a:	4621      	mov	r1, r4
 800b85c:	4628      	mov	r0, r5
 800b85e:	f000 f8a9 	bl	800b9b4 <_sbrk_r>
 800b862:	1c43      	adds	r3, r0, #1
 800b864:	d103      	bne.n	800b86e <sbrk_aligned+0x26>
 800b866:	f04f 34ff 	mov.w	r4, #4294967295
 800b86a:	4620      	mov	r0, r4
 800b86c:	bd70      	pop	{r4, r5, r6, pc}
 800b86e:	1cc4      	adds	r4, r0, #3
 800b870:	f024 0403 	bic.w	r4, r4, #3
 800b874:	42a0      	cmp	r0, r4
 800b876:	d0f8      	beq.n	800b86a <sbrk_aligned+0x22>
 800b878:	1a21      	subs	r1, r4, r0
 800b87a:	4628      	mov	r0, r5
 800b87c:	f000 f89a 	bl	800b9b4 <_sbrk_r>
 800b880:	3001      	adds	r0, #1
 800b882:	d1f2      	bne.n	800b86a <sbrk_aligned+0x22>
 800b884:	e7ef      	b.n	800b866 <sbrk_aligned+0x1e>
 800b886:	bf00      	nop
 800b888:	2000db5c 	.word	0x2000db5c

0800b88c <_malloc_r>:
 800b88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b890:	1ccd      	adds	r5, r1, #3
 800b892:	f025 0503 	bic.w	r5, r5, #3
 800b896:	3508      	adds	r5, #8
 800b898:	2d0c      	cmp	r5, #12
 800b89a:	bf38      	it	cc
 800b89c:	250c      	movcc	r5, #12
 800b89e:	2d00      	cmp	r5, #0
 800b8a0:	4606      	mov	r6, r0
 800b8a2:	db01      	blt.n	800b8a8 <_malloc_r+0x1c>
 800b8a4:	42a9      	cmp	r1, r5
 800b8a6:	d904      	bls.n	800b8b2 <_malloc_r+0x26>
 800b8a8:	230c      	movs	r3, #12
 800b8aa:	6033      	str	r3, [r6, #0]
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b988 <_malloc_r+0xfc>
 800b8b6:	f000 f869 	bl	800b98c <__malloc_lock>
 800b8ba:	f8d8 3000 	ldr.w	r3, [r8]
 800b8be:	461c      	mov	r4, r3
 800b8c0:	bb44      	cbnz	r4, 800b914 <_malloc_r+0x88>
 800b8c2:	4629      	mov	r1, r5
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	f7ff ffbf 	bl	800b848 <sbrk_aligned>
 800b8ca:	1c43      	adds	r3, r0, #1
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	d158      	bne.n	800b982 <_malloc_r+0xf6>
 800b8d0:	f8d8 4000 	ldr.w	r4, [r8]
 800b8d4:	4627      	mov	r7, r4
 800b8d6:	2f00      	cmp	r7, #0
 800b8d8:	d143      	bne.n	800b962 <_malloc_r+0xd6>
 800b8da:	2c00      	cmp	r4, #0
 800b8dc:	d04b      	beq.n	800b976 <_malloc_r+0xea>
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	4639      	mov	r1, r7
 800b8e2:	4630      	mov	r0, r6
 800b8e4:	eb04 0903 	add.w	r9, r4, r3
 800b8e8:	f000 f864 	bl	800b9b4 <_sbrk_r>
 800b8ec:	4581      	cmp	r9, r0
 800b8ee:	d142      	bne.n	800b976 <_malloc_r+0xea>
 800b8f0:	6821      	ldr	r1, [r4, #0]
 800b8f2:	1a6d      	subs	r5, r5, r1
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	f7ff ffa6 	bl	800b848 <sbrk_aligned>
 800b8fc:	3001      	adds	r0, #1
 800b8fe:	d03a      	beq.n	800b976 <_malloc_r+0xea>
 800b900:	6823      	ldr	r3, [r4, #0]
 800b902:	442b      	add	r3, r5
 800b904:	6023      	str	r3, [r4, #0]
 800b906:	f8d8 3000 	ldr.w	r3, [r8]
 800b90a:	685a      	ldr	r2, [r3, #4]
 800b90c:	bb62      	cbnz	r2, 800b968 <_malloc_r+0xdc>
 800b90e:	f8c8 7000 	str.w	r7, [r8]
 800b912:	e00f      	b.n	800b934 <_malloc_r+0xa8>
 800b914:	6822      	ldr	r2, [r4, #0]
 800b916:	1b52      	subs	r2, r2, r5
 800b918:	d420      	bmi.n	800b95c <_malloc_r+0xd0>
 800b91a:	2a0b      	cmp	r2, #11
 800b91c:	d917      	bls.n	800b94e <_malloc_r+0xc2>
 800b91e:	1961      	adds	r1, r4, r5
 800b920:	42a3      	cmp	r3, r4
 800b922:	6025      	str	r5, [r4, #0]
 800b924:	bf18      	it	ne
 800b926:	6059      	strne	r1, [r3, #4]
 800b928:	6863      	ldr	r3, [r4, #4]
 800b92a:	bf08      	it	eq
 800b92c:	f8c8 1000 	streq.w	r1, [r8]
 800b930:	5162      	str	r2, [r4, r5]
 800b932:	604b      	str	r3, [r1, #4]
 800b934:	4630      	mov	r0, r6
 800b936:	f000 f82f 	bl	800b998 <__malloc_unlock>
 800b93a:	f104 000b 	add.w	r0, r4, #11
 800b93e:	1d23      	adds	r3, r4, #4
 800b940:	f020 0007 	bic.w	r0, r0, #7
 800b944:	1ac2      	subs	r2, r0, r3
 800b946:	bf1c      	itt	ne
 800b948:	1a1b      	subne	r3, r3, r0
 800b94a:	50a3      	strne	r3, [r4, r2]
 800b94c:	e7af      	b.n	800b8ae <_malloc_r+0x22>
 800b94e:	6862      	ldr	r2, [r4, #4]
 800b950:	42a3      	cmp	r3, r4
 800b952:	bf0c      	ite	eq
 800b954:	f8c8 2000 	streq.w	r2, [r8]
 800b958:	605a      	strne	r2, [r3, #4]
 800b95a:	e7eb      	b.n	800b934 <_malloc_r+0xa8>
 800b95c:	4623      	mov	r3, r4
 800b95e:	6864      	ldr	r4, [r4, #4]
 800b960:	e7ae      	b.n	800b8c0 <_malloc_r+0x34>
 800b962:	463c      	mov	r4, r7
 800b964:	687f      	ldr	r7, [r7, #4]
 800b966:	e7b6      	b.n	800b8d6 <_malloc_r+0x4a>
 800b968:	461a      	mov	r2, r3
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	42a3      	cmp	r3, r4
 800b96e:	d1fb      	bne.n	800b968 <_malloc_r+0xdc>
 800b970:	2300      	movs	r3, #0
 800b972:	6053      	str	r3, [r2, #4]
 800b974:	e7de      	b.n	800b934 <_malloc_r+0xa8>
 800b976:	230c      	movs	r3, #12
 800b978:	6033      	str	r3, [r6, #0]
 800b97a:	4630      	mov	r0, r6
 800b97c:	f000 f80c 	bl	800b998 <__malloc_unlock>
 800b980:	e794      	b.n	800b8ac <_malloc_r+0x20>
 800b982:	6005      	str	r5, [r0, #0]
 800b984:	e7d6      	b.n	800b934 <_malloc_r+0xa8>
 800b986:	bf00      	nop
 800b988:	2000db60 	.word	0x2000db60

0800b98c <__malloc_lock>:
 800b98c:	4801      	ldr	r0, [pc, #4]	@ (800b994 <__malloc_lock+0x8>)
 800b98e:	f000 b84b 	b.w	800ba28 <__retarget_lock_acquire_recursive>
 800b992:	bf00      	nop
 800b994:	2000dca0 	.word	0x2000dca0

0800b998 <__malloc_unlock>:
 800b998:	4801      	ldr	r0, [pc, #4]	@ (800b9a0 <__malloc_unlock+0x8>)
 800b99a:	f000 b846 	b.w	800ba2a <__retarget_lock_release_recursive>
 800b99e:	bf00      	nop
 800b9a0:	2000dca0 	.word	0x2000dca0

0800b9a4 <memset>:
 800b9a4:	4402      	add	r2, r0
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d100      	bne.n	800b9ae <memset+0xa>
 800b9ac:	4770      	bx	lr
 800b9ae:	f803 1b01 	strb.w	r1, [r3], #1
 800b9b2:	e7f9      	b.n	800b9a8 <memset+0x4>

0800b9b4 <_sbrk_r>:
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	4d06      	ldr	r5, [pc, #24]	@ (800b9d0 <_sbrk_r+0x1c>)
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	4608      	mov	r0, r1
 800b9be:	602b      	str	r3, [r5, #0]
 800b9c0:	f7f5 ffd6 	bl	8001970 <_sbrk>
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	d102      	bne.n	800b9ce <_sbrk_r+0x1a>
 800b9c8:	682b      	ldr	r3, [r5, #0]
 800b9ca:	b103      	cbz	r3, 800b9ce <_sbrk_r+0x1a>
 800b9cc:	6023      	str	r3, [r4, #0]
 800b9ce:	bd38      	pop	{r3, r4, r5, pc}
 800b9d0:	2000dc9c 	.word	0x2000dc9c

0800b9d4 <__errno>:
 800b9d4:	4b01      	ldr	r3, [pc, #4]	@ (800b9dc <__errno+0x8>)
 800b9d6:	6818      	ldr	r0, [r3, #0]
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	2000022c 	.word	0x2000022c

0800b9e0 <__libc_init_array>:
 800b9e0:	b570      	push	{r4, r5, r6, lr}
 800b9e2:	4d0d      	ldr	r5, [pc, #52]	@ (800ba18 <__libc_init_array+0x38>)
 800b9e4:	4c0d      	ldr	r4, [pc, #52]	@ (800ba1c <__libc_init_array+0x3c>)
 800b9e6:	1b64      	subs	r4, r4, r5
 800b9e8:	10a4      	asrs	r4, r4, #2
 800b9ea:	2600      	movs	r6, #0
 800b9ec:	42a6      	cmp	r6, r4
 800b9ee:	d109      	bne.n	800ba04 <__libc_init_array+0x24>
 800b9f0:	4d0b      	ldr	r5, [pc, #44]	@ (800ba20 <__libc_init_array+0x40>)
 800b9f2:	4c0c      	ldr	r4, [pc, #48]	@ (800ba24 <__libc_init_array+0x44>)
 800b9f4:	f001 f8d0 	bl	800cb98 <_init>
 800b9f8:	1b64      	subs	r4, r4, r5
 800b9fa:	10a4      	asrs	r4, r4, #2
 800b9fc:	2600      	movs	r6, #0
 800b9fe:	42a6      	cmp	r6, r4
 800ba00:	d105      	bne.n	800ba0e <__libc_init_array+0x2e>
 800ba02:	bd70      	pop	{r4, r5, r6, pc}
 800ba04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba08:	4798      	blx	r3
 800ba0a:	3601      	adds	r6, #1
 800ba0c:	e7ee      	b.n	800b9ec <__libc_init_array+0xc>
 800ba0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba12:	4798      	blx	r3
 800ba14:	3601      	adds	r6, #1
 800ba16:	e7f2      	b.n	800b9fe <__libc_init_array+0x1e>
 800ba18:	0800ced8 	.word	0x0800ced8
 800ba1c:	0800ced8 	.word	0x0800ced8
 800ba20:	0800ced8 	.word	0x0800ced8
 800ba24:	0800cedc 	.word	0x0800cedc

0800ba28 <__retarget_lock_acquire_recursive>:
 800ba28:	4770      	bx	lr

0800ba2a <__retarget_lock_release_recursive>:
 800ba2a:	4770      	bx	lr

0800ba2c <memcpy>:
 800ba2c:	440a      	add	r2, r1
 800ba2e:	4291      	cmp	r1, r2
 800ba30:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba34:	d100      	bne.n	800ba38 <memcpy+0xc>
 800ba36:	4770      	bx	lr
 800ba38:	b510      	push	{r4, lr}
 800ba3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba42:	4291      	cmp	r1, r2
 800ba44:	d1f9      	bne.n	800ba3a <memcpy+0xe>
 800ba46:	bd10      	pop	{r4, pc}

0800ba48 <cos>:
 800ba48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba4a:	ec53 2b10 	vmov	r2, r3, d0
 800ba4e:	4826      	ldr	r0, [pc, #152]	@ (800bae8 <cos+0xa0>)
 800ba50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ba54:	4281      	cmp	r1, r0
 800ba56:	d806      	bhi.n	800ba66 <cos+0x1e>
 800ba58:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800bae0 <cos+0x98>
 800ba5c:	b005      	add	sp, #20
 800ba5e:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba62:	f000 b8bd 	b.w	800bbe0 <__kernel_cos>
 800ba66:	4821      	ldr	r0, [pc, #132]	@ (800baec <cos+0xa4>)
 800ba68:	4281      	cmp	r1, r0
 800ba6a:	d908      	bls.n	800ba7e <cos+0x36>
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	4619      	mov	r1, r3
 800ba70:	f7f4 fbba 	bl	80001e8 <__aeabi_dsub>
 800ba74:	ec41 0b10 	vmov	d0, r0, r1
 800ba78:	b005      	add	sp, #20
 800ba7a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba7e:	4668      	mov	r0, sp
 800ba80:	f000 fa32 	bl	800bee8 <__ieee754_rem_pio2>
 800ba84:	f000 0003 	and.w	r0, r0, #3
 800ba88:	2801      	cmp	r0, #1
 800ba8a:	d00b      	beq.n	800baa4 <cos+0x5c>
 800ba8c:	2802      	cmp	r0, #2
 800ba8e:	d015      	beq.n	800babc <cos+0x74>
 800ba90:	b9d8      	cbnz	r0, 800baca <cos+0x82>
 800ba92:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ba96:	ed9d 0b00 	vldr	d0, [sp]
 800ba9a:	f000 f8a1 	bl	800bbe0 <__kernel_cos>
 800ba9e:	ec51 0b10 	vmov	r0, r1, d0
 800baa2:	e7e7      	b.n	800ba74 <cos+0x2c>
 800baa4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800baa8:	ed9d 0b00 	vldr	d0, [sp]
 800baac:	f000 f960 	bl	800bd70 <__kernel_sin>
 800bab0:	ec53 2b10 	vmov	r2, r3, d0
 800bab4:	4610      	mov	r0, r2
 800bab6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800baba:	e7db      	b.n	800ba74 <cos+0x2c>
 800babc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bac0:	ed9d 0b00 	vldr	d0, [sp]
 800bac4:	f000 f88c 	bl	800bbe0 <__kernel_cos>
 800bac8:	e7f2      	b.n	800bab0 <cos+0x68>
 800baca:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bace:	ed9d 0b00 	vldr	d0, [sp]
 800bad2:	2001      	movs	r0, #1
 800bad4:	f000 f94c 	bl	800bd70 <__kernel_sin>
 800bad8:	e7e1      	b.n	800ba9e <cos+0x56>
 800bada:	bf00      	nop
 800badc:	f3af 8000 	nop.w
	...
 800bae8:	3fe921fb 	.word	0x3fe921fb
 800baec:	7fefffff 	.word	0x7fefffff

0800baf0 <sin>:
 800baf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800baf2:	ec53 2b10 	vmov	r2, r3, d0
 800baf6:	4826      	ldr	r0, [pc, #152]	@ (800bb90 <sin+0xa0>)
 800baf8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bafc:	4281      	cmp	r1, r0
 800bafe:	d807      	bhi.n	800bb10 <sin+0x20>
 800bb00:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800bb88 <sin+0x98>
 800bb04:	2000      	movs	r0, #0
 800bb06:	b005      	add	sp, #20
 800bb08:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb0c:	f000 b930 	b.w	800bd70 <__kernel_sin>
 800bb10:	4820      	ldr	r0, [pc, #128]	@ (800bb94 <sin+0xa4>)
 800bb12:	4281      	cmp	r1, r0
 800bb14:	d908      	bls.n	800bb28 <sin+0x38>
 800bb16:	4610      	mov	r0, r2
 800bb18:	4619      	mov	r1, r3
 800bb1a:	f7f4 fb65 	bl	80001e8 <__aeabi_dsub>
 800bb1e:	ec41 0b10 	vmov	d0, r0, r1
 800bb22:	b005      	add	sp, #20
 800bb24:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb28:	4668      	mov	r0, sp
 800bb2a:	f000 f9dd 	bl	800bee8 <__ieee754_rem_pio2>
 800bb2e:	f000 0003 	and.w	r0, r0, #3
 800bb32:	2801      	cmp	r0, #1
 800bb34:	d00c      	beq.n	800bb50 <sin+0x60>
 800bb36:	2802      	cmp	r0, #2
 800bb38:	d011      	beq.n	800bb5e <sin+0x6e>
 800bb3a:	b9e8      	cbnz	r0, 800bb78 <sin+0x88>
 800bb3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb40:	ed9d 0b00 	vldr	d0, [sp]
 800bb44:	2001      	movs	r0, #1
 800bb46:	f000 f913 	bl	800bd70 <__kernel_sin>
 800bb4a:	ec51 0b10 	vmov	r0, r1, d0
 800bb4e:	e7e6      	b.n	800bb1e <sin+0x2e>
 800bb50:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb54:	ed9d 0b00 	vldr	d0, [sp]
 800bb58:	f000 f842 	bl	800bbe0 <__kernel_cos>
 800bb5c:	e7f5      	b.n	800bb4a <sin+0x5a>
 800bb5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb62:	ed9d 0b00 	vldr	d0, [sp]
 800bb66:	2001      	movs	r0, #1
 800bb68:	f000 f902 	bl	800bd70 <__kernel_sin>
 800bb6c:	ec53 2b10 	vmov	r2, r3, d0
 800bb70:	4610      	mov	r0, r2
 800bb72:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bb76:	e7d2      	b.n	800bb1e <sin+0x2e>
 800bb78:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb7c:	ed9d 0b00 	vldr	d0, [sp]
 800bb80:	f000 f82e 	bl	800bbe0 <__kernel_cos>
 800bb84:	e7f2      	b.n	800bb6c <sin+0x7c>
 800bb86:	bf00      	nop
	...
 800bb90:	3fe921fb 	.word	0x3fe921fb
 800bb94:	7fefffff 	.word	0x7fefffff

0800bb98 <roundf>:
 800bb98:	ee10 0a10 	vmov	r0, s0
 800bb9c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800bba0:	3a7f      	subs	r2, #127	@ 0x7f
 800bba2:	2a16      	cmp	r2, #22
 800bba4:	dc15      	bgt.n	800bbd2 <roundf+0x3a>
 800bba6:	2a00      	cmp	r2, #0
 800bba8:	da08      	bge.n	800bbbc <roundf+0x24>
 800bbaa:	3201      	adds	r2, #1
 800bbac:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800bbb0:	d101      	bne.n	800bbb6 <roundf+0x1e>
 800bbb2:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800bbb6:	ee00 3a10 	vmov	s0, r3
 800bbba:	4770      	bx	lr
 800bbbc:	4907      	ldr	r1, [pc, #28]	@ (800bbdc <roundf+0x44>)
 800bbbe:	4111      	asrs	r1, r2
 800bbc0:	4201      	tst	r1, r0
 800bbc2:	d0fa      	beq.n	800bbba <roundf+0x22>
 800bbc4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800bbc8:	4113      	asrs	r3, r2
 800bbca:	4403      	add	r3, r0
 800bbcc:	ea23 0301 	bic.w	r3, r3, r1
 800bbd0:	e7f1      	b.n	800bbb6 <roundf+0x1e>
 800bbd2:	2a80      	cmp	r2, #128	@ 0x80
 800bbd4:	d1f1      	bne.n	800bbba <roundf+0x22>
 800bbd6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bbda:	4770      	bx	lr
 800bbdc:	007fffff 	.word	0x007fffff

0800bbe0 <__kernel_cos>:
 800bbe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe4:	ec57 6b10 	vmov	r6, r7, d0
 800bbe8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bbec:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800bbf0:	ed8d 1b00 	vstr	d1, [sp]
 800bbf4:	d206      	bcs.n	800bc04 <__kernel_cos+0x24>
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	4639      	mov	r1, r7
 800bbfa:	f7f4 ff47 	bl	8000a8c <__aeabi_d2iz>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	f000 8088 	beq.w	800bd14 <__kernel_cos+0x134>
 800bc04:	4632      	mov	r2, r6
 800bc06:	463b      	mov	r3, r7
 800bc08:	4630      	mov	r0, r6
 800bc0a:	4639      	mov	r1, r7
 800bc0c:	f7f4 fca4 	bl	8000558 <__aeabi_dmul>
 800bc10:	4b51      	ldr	r3, [pc, #324]	@ (800bd58 <__kernel_cos+0x178>)
 800bc12:	2200      	movs	r2, #0
 800bc14:	4604      	mov	r4, r0
 800bc16:	460d      	mov	r5, r1
 800bc18:	f7f4 fc9e 	bl	8000558 <__aeabi_dmul>
 800bc1c:	a340      	add	r3, pc, #256	@ (adr r3, 800bd20 <__kernel_cos+0x140>)
 800bc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc22:	4682      	mov	sl, r0
 800bc24:	468b      	mov	fp, r1
 800bc26:	4620      	mov	r0, r4
 800bc28:	4629      	mov	r1, r5
 800bc2a:	f7f4 fc95 	bl	8000558 <__aeabi_dmul>
 800bc2e:	a33e      	add	r3, pc, #248	@ (adr r3, 800bd28 <__kernel_cos+0x148>)
 800bc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc34:	f7f4 fada 	bl	80001ec <__adddf3>
 800bc38:	4622      	mov	r2, r4
 800bc3a:	462b      	mov	r3, r5
 800bc3c:	f7f4 fc8c 	bl	8000558 <__aeabi_dmul>
 800bc40:	a33b      	add	r3, pc, #236	@ (adr r3, 800bd30 <__kernel_cos+0x150>)
 800bc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc46:	f7f4 facf 	bl	80001e8 <__aeabi_dsub>
 800bc4a:	4622      	mov	r2, r4
 800bc4c:	462b      	mov	r3, r5
 800bc4e:	f7f4 fc83 	bl	8000558 <__aeabi_dmul>
 800bc52:	a339      	add	r3, pc, #228	@ (adr r3, 800bd38 <__kernel_cos+0x158>)
 800bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc58:	f7f4 fac8 	bl	80001ec <__adddf3>
 800bc5c:	4622      	mov	r2, r4
 800bc5e:	462b      	mov	r3, r5
 800bc60:	f7f4 fc7a 	bl	8000558 <__aeabi_dmul>
 800bc64:	a336      	add	r3, pc, #216	@ (adr r3, 800bd40 <__kernel_cos+0x160>)
 800bc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6a:	f7f4 fabd 	bl	80001e8 <__aeabi_dsub>
 800bc6e:	4622      	mov	r2, r4
 800bc70:	462b      	mov	r3, r5
 800bc72:	f7f4 fc71 	bl	8000558 <__aeabi_dmul>
 800bc76:	a334      	add	r3, pc, #208	@ (adr r3, 800bd48 <__kernel_cos+0x168>)
 800bc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7c:	f7f4 fab6 	bl	80001ec <__adddf3>
 800bc80:	4622      	mov	r2, r4
 800bc82:	462b      	mov	r3, r5
 800bc84:	f7f4 fc68 	bl	8000558 <__aeabi_dmul>
 800bc88:	4622      	mov	r2, r4
 800bc8a:	462b      	mov	r3, r5
 800bc8c:	f7f4 fc64 	bl	8000558 <__aeabi_dmul>
 800bc90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc94:	4604      	mov	r4, r0
 800bc96:	460d      	mov	r5, r1
 800bc98:	4630      	mov	r0, r6
 800bc9a:	4639      	mov	r1, r7
 800bc9c:	f7f4 fc5c 	bl	8000558 <__aeabi_dmul>
 800bca0:	460b      	mov	r3, r1
 800bca2:	4602      	mov	r2, r0
 800bca4:	4629      	mov	r1, r5
 800bca6:	4620      	mov	r0, r4
 800bca8:	f7f4 fa9e 	bl	80001e8 <__aeabi_dsub>
 800bcac:	4b2b      	ldr	r3, [pc, #172]	@ (800bd5c <__kernel_cos+0x17c>)
 800bcae:	4598      	cmp	r8, r3
 800bcb0:	4606      	mov	r6, r0
 800bcb2:	460f      	mov	r7, r1
 800bcb4:	d810      	bhi.n	800bcd8 <__kernel_cos+0xf8>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	460b      	mov	r3, r1
 800bcba:	4650      	mov	r0, sl
 800bcbc:	4659      	mov	r1, fp
 800bcbe:	f7f4 fa93 	bl	80001e8 <__aeabi_dsub>
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	4926      	ldr	r1, [pc, #152]	@ (800bd60 <__kernel_cos+0x180>)
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	2000      	movs	r0, #0
 800bcca:	f7f4 fa8d 	bl	80001e8 <__aeabi_dsub>
 800bcce:	ec41 0b10 	vmov	d0, r0, r1
 800bcd2:	b003      	add	sp, #12
 800bcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd8:	4b22      	ldr	r3, [pc, #136]	@ (800bd64 <__kernel_cos+0x184>)
 800bcda:	4921      	ldr	r1, [pc, #132]	@ (800bd60 <__kernel_cos+0x180>)
 800bcdc:	4598      	cmp	r8, r3
 800bcde:	bf8c      	ite	hi
 800bce0:	4d21      	ldrhi	r5, [pc, #132]	@ (800bd68 <__kernel_cos+0x188>)
 800bce2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800bce6:	2400      	movs	r4, #0
 800bce8:	4622      	mov	r2, r4
 800bcea:	462b      	mov	r3, r5
 800bcec:	2000      	movs	r0, #0
 800bcee:	f7f4 fa7b 	bl	80001e8 <__aeabi_dsub>
 800bcf2:	4622      	mov	r2, r4
 800bcf4:	4680      	mov	r8, r0
 800bcf6:	4689      	mov	r9, r1
 800bcf8:	462b      	mov	r3, r5
 800bcfa:	4650      	mov	r0, sl
 800bcfc:	4659      	mov	r1, fp
 800bcfe:	f7f4 fa73 	bl	80001e8 <__aeabi_dsub>
 800bd02:	4632      	mov	r2, r6
 800bd04:	463b      	mov	r3, r7
 800bd06:	f7f4 fa6f 	bl	80001e8 <__aeabi_dsub>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	4640      	mov	r0, r8
 800bd10:	4649      	mov	r1, r9
 800bd12:	e7da      	b.n	800bcca <__kernel_cos+0xea>
 800bd14:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800bd50 <__kernel_cos+0x170>
 800bd18:	e7db      	b.n	800bcd2 <__kernel_cos+0xf2>
 800bd1a:	bf00      	nop
 800bd1c:	f3af 8000 	nop.w
 800bd20:	be8838d4 	.word	0xbe8838d4
 800bd24:	bda8fae9 	.word	0xbda8fae9
 800bd28:	bdb4b1c4 	.word	0xbdb4b1c4
 800bd2c:	3e21ee9e 	.word	0x3e21ee9e
 800bd30:	809c52ad 	.word	0x809c52ad
 800bd34:	3e927e4f 	.word	0x3e927e4f
 800bd38:	19cb1590 	.word	0x19cb1590
 800bd3c:	3efa01a0 	.word	0x3efa01a0
 800bd40:	16c15177 	.word	0x16c15177
 800bd44:	3f56c16c 	.word	0x3f56c16c
 800bd48:	5555554c 	.word	0x5555554c
 800bd4c:	3fa55555 	.word	0x3fa55555
 800bd50:	00000000 	.word	0x00000000
 800bd54:	3ff00000 	.word	0x3ff00000
 800bd58:	3fe00000 	.word	0x3fe00000
 800bd5c:	3fd33332 	.word	0x3fd33332
 800bd60:	3ff00000 	.word	0x3ff00000
 800bd64:	3fe90000 	.word	0x3fe90000
 800bd68:	3fd20000 	.word	0x3fd20000
 800bd6c:	00000000 	.word	0x00000000

0800bd70 <__kernel_sin>:
 800bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd74:	ec55 4b10 	vmov	r4, r5, d0
 800bd78:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bd7c:	b085      	sub	sp, #20
 800bd7e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800bd82:	ed8d 1b02 	vstr	d1, [sp, #8]
 800bd86:	4680      	mov	r8, r0
 800bd88:	d205      	bcs.n	800bd96 <__kernel_sin+0x26>
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	4629      	mov	r1, r5
 800bd8e:	f7f4 fe7d 	bl	8000a8c <__aeabi_d2iz>
 800bd92:	2800      	cmp	r0, #0
 800bd94:	d052      	beq.n	800be3c <__kernel_sin+0xcc>
 800bd96:	4622      	mov	r2, r4
 800bd98:	462b      	mov	r3, r5
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	4629      	mov	r1, r5
 800bd9e:	f7f4 fbdb 	bl	8000558 <__aeabi_dmul>
 800bda2:	4682      	mov	sl, r0
 800bda4:	468b      	mov	fp, r1
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4620      	mov	r0, r4
 800bdac:	4629      	mov	r1, r5
 800bdae:	f7f4 fbd3 	bl	8000558 <__aeabi_dmul>
 800bdb2:	a342      	add	r3, pc, #264	@ (adr r3, 800bebc <__kernel_sin+0x14c>)
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	e9cd 0100 	strd	r0, r1, [sp]
 800bdbc:	4650      	mov	r0, sl
 800bdbe:	4659      	mov	r1, fp
 800bdc0:	f7f4 fbca 	bl	8000558 <__aeabi_dmul>
 800bdc4:	a33f      	add	r3, pc, #252	@ (adr r3, 800bec4 <__kernel_sin+0x154>)
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	f7f4 fa0d 	bl	80001e8 <__aeabi_dsub>
 800bdce:	4652      	mov	r2, sl
 800bdd0:	465b      	mov	r3, fp
 800bdd2:	f7f4 fbc1 	bl	8000558 <__aeabi_dmul>
 800bdd6:	a33d      	add	r3, pc, #244	@ (adr r3, 800becc <__kernel_sin+0x15c>)
 800bdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bddc:	f7f4 fa06 	bl	80001ec <__adddf3>
 800bde0:	4652      	mov	r2, sl
 800bde2:	465b      	mov	r3, fp
 800bde4:	f7f4 fbb8 	bl	8000558 <__aeabi_dmul>
 800bde8:	a33a      	add	r3, pc, #232	@ (adr r3, 800bed4 <__kernel_sin+0x164>)
 800bdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdee:	f7f4 f9fb 	bl	80001e8 <__aeabi_dsub>
 800bdf2:	4652      	mov	r2, sl
 800bdf4:	465b      	mov	r3, fp
 800bdf6:	f7f4 fbaf 	bl	8000558 <__aeabi_dmul>
 800bdfa:	a338      	add	r3, pc, #224	@ (adr r3, 800bedc <__kernel_sin+0x16c>)
 800bdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be00:	f7f4 f9f4 	bl	80001ec <__adddf3>
 800be04:	4606      	mov	r6, r0
 800be06:	460f      	mov	r7, r1
 800be08:	f1b8 0f00 	cmp.w	r8, #0
 800be0c:	d11b      	bne.n	800be46 <__kernel_sin+0xd6>
 800be0e:	4602      	mov	r2, r0
 800be10:	460b      	mov	r3, r1
 800be12:	4650      	mov	r0, sl
 800be14:	4659      	mov	r1, fp
 800be16:	f7f4 fb9f 	bl	8000558 <__aeabi_dmul>
 800be1a:	a325      	add	r3, pc, #148	@ (adr r3, 800beb0 <__kernel_sin+0x140>)
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	f7f4 f9e2 	bl	80001e8 <__aeabi_dsub>
 800be24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be28:	f7f4 fb96 	bl	8000558 <__aeabi_dmul>
 800be2c:	4602      	mov	r2, r0
 800be2e:	460b      	mov	r3, r1
 800be30:	4620      	mov	r0, r4
 800be32:	4629      	mov	r1, r5
 800be34:	f7f4 f9da 	bl	80001ec <__adddf3>
 800be38:	4604      	mov	r4, r0
 800be3a:	460d      	mov	r5, r1
 800be3c:	ec45 4b10 	vmov	d0, r4, r5
 800be40:	b005      	add	sp, #20
 800be42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be4a:	4b1b      	ldr	r3, [pc, #108]	@ (800beb8 <__kernel_sin+0x148>)
 800be4c:	2200      	movs	r2, #0
 800be4e:	f7f4 fb83 	bl	8000558 <__aeabi_dmul>
 800be52:	4632      	mov	r2, r6
 800be54:	4680      	mov	r8, r0
 800be56:	4689      	mov	r9, r1
 800be58:	463b      	mov	r3, r7
 800be5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be5e:	f7f4 fb7b 	bl	8000558 <__aeabi_dmul>
 800be62:	4602      	mov	r2, r0
 800be64:	460b      	mov	r3, r1
 800be66:	4640      	mov	r0, r8
 800be68:	4649      	mov	r1, r9
 800be6a:	f7f4 f9bd 	bl	80001e8 <__aeabi_dsub>
 800be6e:	4652      	mov	r2, sl
 800be70:	465b      	mov	r3, fp
 800be72:	f7f4 fb71 	bl	8000558 <__aeabi_dmul>
 800be76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be7a:	f7f4 f9b5 	bl	80001e8 <__aeabi_dsub>
 800be7e:	a30c      	add	r3, pc, #48	@ (adr r3, 800beb0 <__kernel_sin+0x140>)
 800be80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be84:	4606      	mov	r6, r0
 800be86:	460f      	mov	r7, r1
 800be88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be8c:	f7f4 fb64 	bl	8000558 <__aeabi_dmul>
 800be90:	4602      	mov	r2, r0
 800be92:	460b      	mov	r3, r1
 800be94:	4630      	mov	r0, r6
 800be96:	4639      	mov	r1, r7
 800be98:	f7f4 f9a8 	bl	80001ec <__adddf3>
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	4620      	mov	r0, r4
 800bea2:	4629      	mov	r1, r5
 800bea4:	f7f4 f9a0 	bl	80001e8 <__aeabi_dsub>
 800bea8:	e7c6      	b.n	800be38 <__kernel_sin+0xc8>
 800beaa:	bf00      	nop
 800beac:	f3af 8000 	nop.w
 800beb0:	55555549 	.word	0x55555549
 800beb4:	3fc55555 	.word	0x3fc55555
 800beb8:	3fe00000 	.word	0x3fe00000
 800bebc:	5acfd57c 	.word	0x5acfd57c
 800bec0:	3de5d93a 	.word	0x3de5d93a
 800bec4:	8a2b9ceb 	.word	0x8a2b9ceb
 800bec8:	3e5ae5e6 	.word	0x3e5ae5e6
 800becc:	57b1fe7d 	.word	0x57b1fe7d
 800bed0:	3ec71de3 	.word	0x3ec71de3
 800bed4:	19c161d5 	.word	0x19c161d5
 800bed8:	3f2a01a0 	.word	0x3f2a01a0
 800bedc:	1110f8a6 	.word	0x1110f8a6
 800bee0:	3f811111 	.word	0x3f811111
 800bee4:	00000000 	.word	0x00000000

0800bee8 <__ieee754_rem_pio2>:
 800bee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beec:	ec57 6b10 	vmov	r6, r7, d0
 800bef0:	4bc5      	ldr	r3, [pc, #788]	@ (800c208 <__ieee754_rem_pio2+0x320>)
 800bef2:	b08d      	sub	sp, #52	@ 0x34
 800bef4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bef8:	4598      	cmp	r8, r3
 800befa:	4604      	mov	r4, r0
 800befc:	9704      	str	r7, [sp, #16]
 800befe:	d807      	bhi.n	800bf10 <__ieee754_rem_pio2+0x28>
 800bf00:	2200      	movs	r2, #0
 800bf02:	2300      	movs	r3, #0
 800bf04:	ed80 0b00 	vstr	d0, [r0]
 800bf08:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bf0c:	2500      	movs	r5, #0
 800bf0e:	e028      	b.n	800bf62 <__ieee754_rem_pio2+0x7a>
 800bf10:	4bbe      	ldr	r3, [pc, #760]	@ (800c20c <__ieee754_rem_pio2+0x324>)
 800bf12:	4598      	cmp	r8, r3
 800bf14:	d878      	bhi.n	800c008 <__ieee754_rem_pio2+0x120>
 800bf16:	9b04      	ldr	r3, [sp, #16]
 800bf18:	4dbd      	ldr	r5, [pc, #756]	@ (800c210 <__ieee754_rem_pio2+0x328>)
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800c1d0 <__ieee754_rem_pio2+0x2e8>)
 800bf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf24:	4639      	mov	r1, r7
 800bf26:	dd38      	ble.n	800bf9a <__ieee754_rem_pio2+0xb2>
 800bf28:	f7f4 f95e 	bl	80001e8 <__aeabi_dsub>
 800bf2c:	45a8      	cmp	r8, r5
 800bf2e:	4606      	mov	r6, r0
 800bf30:	460f      	mov	r7, r1
 800bf32:	d01a      	beq.n	800bf6a <__ieee754_rem_pio2+0x82>
 800bf34:	a3a8      	add	r3, pc, #672	@ (adr r3, 800c1d8 <__ieee754_rem_pio2+0x2f0>)
 800bf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3a:	f7f4 f955 	bl	80001e8 <__aeabi_dsub>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	460b      	mov	r3, r1
 800bf42:	4680      	mov	r8, r0
 800bf44:	4689      	mov	r9, r1
 800bf46:	4630      	mov	r0, r6
 800bf48:	4639      	mov	r1, r7
 800bf4a:	f7f4 f94d 	bl	80001e8 <__aeabi_dsub>
 800bf4e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800c1d8 <__ieee754_rem_pio2+0x2f0>)
 800bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf54:	f7f4 f948 	bl	80001e8 <__aeabi_dsub>
 800bf58:	e9c4 8900 	strd	r8, r9, [r4]
 800bf5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf60:	2501      	movs	r5, #1
 800bf62:	4628      	mov	r0, r5
 800bf64:	b00d      	add	sp, #52	@ 0x34
 800bf66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf6a:	a39d      	add	r3, pc, #628	@ (adr r3, 800c1e0 <__ieee754_rem_pio2+0x2f8>)
 800bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf70:	f7f4 f93a 	bl	80001e8 <__aeabi_dsub>
 800bf74:	a39c      	add	r3, pc, #624	@ (adr r3, 800c1e8 <__ieee754_rem_pio2+0x300>)
 800bf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	460f      	mov	r7, r1
 800bf7e:	f7f4 f933 	bl	80001e8 <__aeabi_dsub>
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	4680      	mov	r8, r0
 800bf88:	4689      	mov	r9, r1
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	4639      	mov	r1, r7
 800bf8e:	f7f4 f92b 	bl	80001e8 <__aeabi_dsub>
 800bf92:	a395      	add	r3, pc, #596	@ (adr r3, 800c1e8 <__ieee754_rem_pio2+0x300>)
 800bf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf98:	e7dc      	b.n	800bf54 <__ieee754_rem_pio2+0x6c>
 800bf9a:	f7f4 f927 	bl	80001ec <__adddf3>
 800bf9e:	45a8      	cmp	r8, r5
 800bfa0:	4606      	mov	r6, r0
 800bfa2:	460f      	mov	r7, r1
 800bfa4:	d018      	beq.n	800bfd8 <__ieee754_rem_pio2+0xf0>
 800bfa6:	a38c      	add	r3, pc, #560	@ (adr r3, 800c1d8 <__ieee754_rem_pio2+0x2f0>)
 800bfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfac:	f7f4 f91e 	bl	80001ec <__adddf3>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	4680      	mov	r8, r0
 800bfb6:	4689      	mov	r9, r1
 800bfb8:	4630      	mov	r0, r6
 800bfba:	4639      	mov	r1, r7
 800bfbc:	f7f4 f914 	bl	80001e8 <__aeabi_dsub>
 800bfc0:	a385      	add	r3, pc, #532	@ (adr r3, 800c1d8 <__ieee754_rem_pio2+0x2f0>)
 800bfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc6:	f7f4 f911 	bl	80001ec <__adddf3>
 800bfca:	f04f 35ff 	mov.w	r5, #4294967295
 800bfce:	e9c4 8900 	strd	r8, r9, [r4]
 800bfd2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bfd6:	e7c4      	b.n	800bf62 <__ieee754_rem_pio2+0x7a>
 800bfd8:	a381      	add	r3, pc, #516	@ (adr r3, 800c1e0 <__ieee754_rem_pio2+0x2f8>)
 800bfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfde:	f7f4 f905 	bl	80001ec <__adddf3>
 800bfe2:	a381      	add	r3, pc, #516	@ (adr r3, 800c1e8 <__ieee754_rem_pio2+0x300>)
 800bfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe8:	4606      	mov	r6, r0
 800bfea:	460f      	mov	r7, r1
 800bfec:	f7f4 f8fe 	bl	80001ec <__adddf3>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4680      	mov	r8, r0
 800bff6:	4689      	mov	r9, r1
 800bff8:	4630      	mov	r0, r6
 800bffa:	4639      	mov	r1, r7
 800bffc:	f7f4 f8f4 	bl	80001e8 <__aeabi_dsub>
 800c000:	a379      	add	r3, pc, #484	@ (adr r3, 800c1e8 <__ieee754_rem_pio2+0x300>)
 800c002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c006:	e7de      	b.n	800bfc6 <__ieee754_rem_pio2+0xde>
 800c008:	4b82      	ldr	r3, [pc, #520]	@ (800c214 <__ieee754_rem_pio2+0x32c>)
 800c00a:	4598      	cmp	r8, r3
 800c00c:	f200 80d1 	bhi.w	800c1b2 <__ieee754_rem_pio2+0x2ca>
 800c010:	f000 f966 	bl	800c2e0 <fabs>
 800c014:	ec57 6b10 	vmov	r6, r7, d0
 800c018:	a375      	add	r3, pc, #468	@ (adr r3, 800c1f0 <__ieee754_rem_pio2+0x308>)
 800c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01e:	4630      	mov	r0, r6
 800c020:	4639      	mov	r1, r7
 800c022:	f7f4 fa99 	bl	8000558 <__aeabi_dmul>
 800c026:	4b7c      	ldr	r3, [pc, #496]	@ (800c218 <__ieee754_rem_pio2+0x330>)
 800c028:	2200      	movs	r2, #0
 800c02a:	f7f4 f8df 	bl	80001ec <__adddf3>
 800c02e:	f7f4 fd2d 	bl	8000a8c <__aeabi_d2iz>
 800c032:	4605      	mov	r5, r0
 800c034:	f7f4 fa26 	bl	8000484 <__aeabi_i2d>
 800c038:	4602      	mov	r2, r0
 800c03a:	460b      	mov	r3, r1
 800c03c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c040:	a363      	add	r3, pc, #396	@ (adr r3, 800c1d0 <__ieee754_rem_pio2+0x2e8>)
 800c042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c046:	f7f4 fa87 	bl	8000558 <__aeabi_dmul>
 800c04a:	4602      	mov	r2, r0
 800c04c:	460b      	mov	r3, r1
 800c04e:	4630      	mov	r0, r6
 800c050:	4639      	mov	r1, r7
 800c052:	f7f4 f8c9 	bl	80001e8 <__aeabi_dsub>
 800c056:	a360      	add	r3, pc, #384	@ (adr r3, 800c1d8 <__ieee754_rem_pio2+0x2f0>)
 800c058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05c:	4682      	mov	sl, r0
 800c05e:	468b      	mov	fp, r1
 800c060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c064:	f7f4 fa78 	bl	8000558 <__aeabi_dmul>
 800c068:	2d1f      	cmp	r5, #31
 800c06a:	4606      	mov	r6, r0
 800c06c:	460f      	mov	r7, r1
 800c06e:	dc0c      	bgt.n	800c08a <__ieee754_rem_pio2+0x1a2>
 800c070:	4b6a      	ldr	r3, [pc, #424]	@ (800c21c <__ieee754_rem_pio2+0x334>)
 800c072:	1e6a      	subs	r2, r5, #1
 800c074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c078:	4543      	cmp	r3, r8
 800c07a:	d006      	beq.n	800c08a <__ieee754_rem_pio2+0x1a2>
 800c07c:	4632      	mov	r2, r6
 800c07e:	463b      	mov	r3, r7
 800c080:	4650      	mov	r0, sl
 800c082:	4659      	mov	r1, fp
 800c084:	f7f4 f8b0 	bl	80001e8 <__aeabi_dsub>
 800c088:	e00e      	b.n	800c0a8 <__ieee754_rem_pio2+0x1c0>
 800c08a:	463b      	mov	r3, r7
 800c08c:	4632      	mov	r2, r6
 800c08e:	4650      	mov	r0, sl
 800c090:	4659      	mov	r1, fp
 800c092:	f7f4 f8a9 	bl	80001e8 <__aeabi_dsub>
 800c096:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c09a:	9305      	str	r3, [sp, #20]
 800c09c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c0a0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c0a4:	2b10      	cmp	r3, #16
 800c0a6:	dc02      	bgt.n	800c0ae <__ieee754_rem_pio2+0x1c6>
 800c0a8:	e9c4 0100 	strd	r0, r1, [r4]
 800c0ac:	e039      	b.n	800c122 <__ieee754_rem_pio2+0x23a>
 800c0ae:	a34c      	add	r3, pc, #304	@ (adr r3, 800c1e0 <__ieee754_rem_pio2+0x2f8>)
 800c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0b8:	f7f4 fa4e 	bl	8000558 <__aeabi_dmul>
 800c0bc:	4606      	mov	r6, r0
 800c0be:	460f      	mov	r7, r1
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	4650      	mov	r0, sl
 800c0c6:	4659      	mov	r1, fp
 800c0c8:	f7f4 f88e 	bl	80001e8 <__aeabi_dsub>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4680      	mov	r8, r0
 800c0d2:	4689      	mov	r9, r1
 800c0d4:	4650      	mov	r0, sl
 800c0d6:	4659      	mov	r1, fp
 800c0d8:	f7f4 f886 	bl	80001e8 <__aeabi_dsub>
 800c0dc:	4632      	mov	r2, r6
 800c0de:	463b      	mov	r3, r7
 800c0e0:	f7f4 f882 	bl	80001e8 <__aeabi_dsub>
 800c0e4:	a340      	add	r3, pc, #256	@ (adr r3, 800c1e8 <__ieee754_rem_pio2+0x300>)
 800c0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ea:	4606      	mov	r6, r0
 800c0ec:	460f      	mov	r7, r1
 800c0ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0f2:	f7f4 fa31 	bl	8000558 <__aeabi_dmul>
 800c0f6:	4632      	mov	r2, r6
 800c0f8:	463b      	mov	r3, r7
 800c0fa:	f7f4 f875 	bl	80001e8 <__aeabi_dsub>
 800c0fe:	4602      	mov	r2, r0
 800c100:	460b      	mov	r3, r1
 800c102:	4606      	mov	r6, r0
 800c104:	460f      	mov	r7, r1
 800c106:	4640      	mov	r0, r8
 800c108:	4649      	mov	r1, r9
 800c10a:	f7f4 f86d 	bl	80001e8 <__aeabi_dsub>
 800c10e:	9a05      	ldr	r2, [sp, #20]
 800c110:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c114:	1ad3      	subs	r3, r2, r3
 800c116:	2b31      	cmp	r3, #49	@ 0x31
 800c118:	dc20      	bgt.n	800c15c <__ieee754_rem_pio2+0x274>
 800c11a:	e9c4 0100 	strd	r0, r1, [r4]
 800c11e:	46c2      	mov	sl, r8
 800c120:	46cb      	mov	fp, r9
 800c122:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c126:	4650      	mov	r0, sl
 800c128:	4642      	mov	r2, r8
 800c12a:	464b      	mov	r3, r9
 800c12c:	4659      	mov	r1, fp
 800c12e:	f7f4 f85b 	bl	80001e8 <__aeabi_dsub>
 800c132:	463b      	mov	r3, r7
 800c134:	4632      	mov	r2, r6
 800c136:	f7f4 f857 	bl	80001e8 <__aeabi_dsub>
 800c13a:	9b04      	ldr	r3, [sp, #16]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c142:	f6bf af0e 	bge.w	800bf62 <__ieee754_rem_pio2+0x7a>
 800c146:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800c14a:	6063      	str	r3, [r4, #4]
 800c14c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c150:	f8c4 8000 	str.w	r8, [r4]
 800c154:	60a0      	str	r0, [r4, #8]
 800c156:	60e3      	str	r3, [r4, #12]
 800c158:	426d      	negs	r5, r5
 800c15a:	e702      	b.n	800bf62 <__ieee754_rem_pio2+0x7a>
 800c15c:	a326      	add	r3, pc, #152	@ (adr r3, 800c1f8 <__ieee754_rem_pio2+0x310>)
 800c15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c166:	f7f4 f9f7 	bl	8000558 <__aeabi_dmul>
 800c16a:	4606      	mov	r6, r0
 800c16c:	460f      	mov	r7, r1
 800c16e:	4602      	mov	r2, r0
 800c170:	460b      	mov	r3, r1
 800c172:	4640      	mov	r0, r8
 800c174:	4649      	mov	r1, r9
 800c176:	f7f4 f837 	bl	80001e8 <__aeabi_dsub>
 800c17a:	4602      	mov	r2, r0
 800c17c:	460b      	mov	r3, r1
 800c17e:	4682      	mov	sl, r0
 800c180:	468b      	mov	fp, r1
 800c182:	4640      	mov	r0, r8
 800c184:	4649      	mov	r1, r9
 800c186:	f7f4 f82f 	bl	80001e8 <__aeabi_dsub>
 800c18a:	4632      	mov	r2, r6
 800c18c:	463b      	mov	r3, r7
 800c18e:	f7f4 f82b 	bl	80001e8 <__aeabi_dsub>
 800c192:	a31b      	add	r3, pc, #108	@ (adr r3, 800c200 <__ieee754_rem_pio2+0x318>)
 800c194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c198:	4606      	mov	r6, r0
 800c19a:	460f      	mov	r7, r1
 800c19c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1a0:	f7f4 f9da 	bl	8000558 <__aeabi_dmul>
 800c1a4:	4632      	mov	r2, r6
 800c1a6:	463b      	mov	r3, r7
 800c1a8:	f7f4 f81e 	bl	80001e8 <__aeabi_dsub>
 800c1ac:	4606      	mov	r6, r0
 800c1ae:	460f      	mov	r7, r1
 800c1b0:	e764      	b.n	800c07c <__ieee754_rem_pio2+0x194>
 800c1b2:	4b1b      	ldr	r3, [pc, #108]	@ (800c220 <__ieee754_rem_pio2+0x338>)
 800c1b4:	4598      	cmp	r8, r3
 800c1b6:	d935      	bls.n	800c224 <__ieee754_rem_pio2+0x33c>
 800c1b8:	4632      	mov	r2, r6
 800c1ba:	463b      	mov	r3, r7
 800c1bc:	4630      	mov	r0, r6
 800c1be:	4639      	mov	r1, r7
 800c1c0:	f7f4 f812 	bl	80001e8 <__aeabi_dsub>
 800c1c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c1c8:	e9c4 0100 	strd	r0, r1, [r4]
 800c1cc:	e69e      	b.n	800bf0c <__ieee754_rem_pio2+0x24>
 800c1ce:	bf00      	nop
 800c1d0:	54400000 	.word	0x54400000
 800c1d4:	3ff921fb 	.word	0x3ff921fb
 800c1d8:	1a626331 	.word	0x1a626331
 800c1dc:	3dd0b461 	.word	0x3dd0b461
 800c1e0:	1a600000 	.word	0x1a600000
 800c1e4:	3dd0b461 	.word	0x3dd0b461
 800c1e8:	2e037073 	.word	0x2e037073
 800c1ec:	3ba3198a 	.word	0x3ba3198a
 800c1f0:	6dc9c883 	.word	0x6dc9c883
 800c1f4:	3fe45f30 	.word	0x3fe45f30
 800c1f8:	2e000000 	.word	0x2e000000
 800c1fc:	3ba3198a 	.word	0x3ba3198a
 800c200:	252049c1 	.word	0x252049c1
 800c204:	397b839a 	.word	0x397b839a
 800c208:	3fe921fb 	.word	0x3fe921fb
 800c20c:	4002d97b 	.word	0x4002d97b
 800c210:	3ff921fb 	.word	0x3ff921fb
 800c214:	413921fb 	.word	0x413921fb
 800c218:	3fe00000 	.word	0x3fe00000
 800c21c:	0800ccf8 	.word	0x0800ccf8
 800c220:	7fefffff 	.word	0x7fefffff
 800c224:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c228:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800c22c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c230:	4630      	mov	r0, r6
 800c232:	460f      	mov	r7, r1
 800c234:	f7f4 fc2a 	bl	8000a8c <__aeabi_d2iz>
 800c238:	f7f4 f924 	bl	8000484 <__aeabi_i2d>
 800c23c:	4602      	mov	r2, r0
 800c23e:	460b      	mov	r3, r1
 800c240:	4630      	mov	r0, r6
 800c242:	4639      	mov	r1, r7
 800c244:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c248:	f7f3 ffce 	bl	80001e8 <__aeabi_dsub>
 800c24c:	4b22      	ldr	r3, [pc, #136]	@ (800c2d8 <__ieee754_rem_pio2+0x3f0>)
 800c24e:	2200      	movs	r2, #0
 800c250:	f7f4 f982 	bl	8000558 <__aeabi_dmul>
 800c254:	460f      	mov	r7, r1
 800c256:	4606      	mov	r6, r0
 800c258:	f7f4 fc18 	bl	8000a8c <__aeabi_d2iz>
 800c25c:	f7f4 f912 	bl	8000484 <__aeabi_i2d>
 800c260:	4602      	mov	r2, r0
 800c262:	460b      	mov	r3, r1
 800c264:	4630      	mov	r0, r6
 800c266:	4639      	mov	r1, r7
 800c268:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c26c:	f7f3 ffbc 	bl	80001e8 <__aeabi_dsub>
 800c270:	4b19      	ldr	r3, [pc, #100]	@ (800c2d8 <__ieee754_rem_pio2+0x3f0>)
 800c272:	2200      	movs	r2, #0
 800c274:	f7f4 f970 	bl	8000558 <__aeabi_dmul>
 800c278:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800c27c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800c280:	f04f 0803 	mov.w	r8, #3
 800c284:	2600      	movs	r6, #0
 800c286:	2700      	movs	r7, #0
 800c288:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c28c:	4632      	mov	r2, r6
 800c28e:	463b      	mov	r3, r7
 800c290:	46c2      	mov	sl, r8
 800c292:	f108 38ff 	add.w	r8, r8, #4294967295
 800c296:	f7f4 fbc7 	bl	8000a28 <__aeabi_dcmpeq>
 800c29a:	2800      	cmp	r0, #0
 800c29c:	d1f4      	bne.n	800c288 <__ieee754_rem_pio2+0x3a0>
 800c29e:	4b0f      	ldr	r3, [pc, #60]	@ (800c2dc <__ieee754_rem_pio2+0x3f4>)
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	462a      	mov	r2, r5
 800c2a8:	4653      	mov	r3, sl
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	a806      	add	r0, sp, #24
 800c2ae:	f000 f81f 	bl	800c2f0 <__kernel_rem_pio2>
 800c2b2:	9b04      	ldr	r3, [sp, #16]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	4605      	mov	r5, r0
 800c2b8:	f6bf ae53 	bge.w	800bf62 <__ieee754_rem_pio2+0x7a>
 800c2bc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c2c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c2c4:	e9c4 2300 	strd	r2, r3, [r4]
 800c2c8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c2cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c2d0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c2d4:	e740      	b.n	800c158 <__ieee754_rem_pio2+0x270>
 800c2d6:	bf00      	nop
 800c2d8:	41700000 	.word	0x41700000
 800c2dc:	0800cd78 	.word	0x0800cd78

0800c2e0 <fabs>:
 800c2e0:	ec51 0b10 	vmov	r0, r1, d0
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c2ea:	ec43 2b10 	vmov	d0, r2, r3
 800c2ee:	4770      	bx	lr

0800c2f0 <__kernel_rem_pio2>:
 800c2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f4:	ed2d 8b02 	vpush	{d8}
 800c2f8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800c2fc:	f112 0f14 	cmn.w	r2, #20
 800c300:	9306      	str	r3, [sp, #24]
 800c302:	9104      	str	r1, [sp, #16]
 800c304:	4bbe      	ldr	r3, [pc, #760]	@ (800c600 <__kernel_rem_pio2+0x310>)
 800c306:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800c308:	9008      	str	r0, [sp, #32]
 800c30a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	9b06      	ldr	r3, [sp, #24]
 800c312:	f103 33ff 	add.w	r3, r3, #4294967295
 800c316:	bfa8      	it	ge
 800c318:	1ed4      	subge	r4, r2, #3
 800c31a:	9305      	str	r3, [sp, #20]
 800c31c:	bfb2      	itee	lt
 800c31e:	2400      	movlt	r4, #0
 800c320:	2318      	movge	r3, #24
 800c322:	fb94 f4f3 	sdivge	r4, r4, r3
 800c326:	f06f 0317 	mvn.w	r3, #23
 800c32a:	fb04 3303 	mla	r3, r4, r3, r3
 800c32e:	eb03 0b02 	add.w	fp, r3, r2
 800c332:	9b00      	ldr	r3, [sp, #0]
 800c334:	9a05      	ldr	r2, [sp, #20]
 800c336:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800c5f0 <__kernel_rem_pio2+0x300>
 800c33a:	eb03 0802 	add.w	r8, r3, r2
 800c33e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c340:	1aa7      	subs	r7, r4, r2
 800c342:	ae20      	add	r6, sp, #128	@ 0x80
 800c344:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c348:	2500      	movs	r5, #0
 800c34a:	4545      	cmp	r5, r8
 800c34c:	dd13      	ble.n	800c376 <__kernel_rem_pio2+0x86>
 800c34e:	9b06      	ldr	r3, [sp, #24]
 800c350:	aa20      	add	r2, sp, #128	@ 0x80
 800c352:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c356:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800c35a:	f04f 0800 	mov.w	r8, #0
 800c35e:	9b00      	ldr	r3, [sp, #0]
 800c360:	4598      	cmp	r8, r3
 800c362:	dc31      	bgt.n	800c3c8 <__kernel_rem_pio2+0xd8>
 800c364:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800c5f0 <__kernel_rem_pio2+0x300>
 800c368:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c36c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c370:	462f      	mov	r7, r5
 800c372:	2600      	movs	r6, #0
 800c374:	e01b      	b.n	800c3ae <__kernel_rem_pio2+0xbe>
 800c376:	42ef      	cmn	r7, r5
 800c378:	d407      	bmi.n	800c38a <__kernel_rem_pio2+0x9a>
 800c37a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c37e:	f7f4 f881 	bl	8000484 <__aeabi_i2d>
 800c382:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c386:	3501      	adds	r5, #1
 800c388:	e7df      	b.n	800c34a <__kernel_rem_pio2+0x5a>
 800c38a:	ec51 0b18 	vmov	r0, r1, d8
 800c38e:	e7f8      	b.n	800c382 <__kernel_rem_pio2+0x92>
 800c390:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c394:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c398:	f7f4 f8de 	bl	8000558 <__aeabi_dmul>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3a4:	f7f3 ff22 	bl	80001ec <__adddf3>
 800c3a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3ac:	3601      	adds	r6, #1
 800c3ae:	9b05      	ldr	r3, [sp, #20]
 800c3b0:	429e      	cmp	r6, r3
 800c3b2:	f1a7 0708 	sub.w	r7, r7, #8
 800c3b6:	ddeb      	ble.n	800c390 <__kernel_rem_pio2+0xa0>
 800c3b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c3bc:	f108 0801 	add.w	r8, r8, #1
 800c3c0:	ecaa 7b02 	vstmia	sl!, {d7}
 800c3c4:	3508      	adds	r5, #8
 800c3c6:	e7ca      	b.n	800c35e <__kernel_rem_pio2+0x6e>
 800c3c8:	9b00      	ldr	r3, [sp, #0]
 800c3ca:	f8dd 8000 	ldr.w	r8, [sp]
 800c3ce:	aa0c      	add	r2, sp, #48	@ 0x30
 800c3d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c3d4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3d6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c3d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c3dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3de:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800c3e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3e4:	ab98      	add	r3, sp, #608	@ 0x260
 800c3e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c3ea:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800c3ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c3f2:	ac0c      	add	r4, sp, #48	@ 0x30
 800c3f4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c3f6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800c3fa:	46a1      	mov	r9, r4
 800c3fc:	46c2      	mov	sl, r8
 800c3fe:	f1ba 0f00 	cmp.w	sl, #0
 800c402:	f1a5 0508 	sub.w	r5, r5, #8
 800c406:	dc77      	bgt.n	800c4f8 <__kernel_rem_pio2+0x208>
 800c408:	4658      	mov	r0, fp
 800c40a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800c40e:	f000 fac7 	bl	800c9a0 <scalbn>
 800c412:	ec57 6b10 	vmov	r6, r7, d0
 800c416:	2200      	movs	r2, #0
 800c418:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c41c:	4630      	mov	r0, r6
 800c41e:	4639      	mov	r1, r7
 800c420:	f7f4 f89a 	bl	8000558 <__aeabi_dmul>
 800c424:	ec41 0b10 	vmov	d0, r0, r1
 800c428:	f000 fb3a 	bl	800caa0 <floor>
 800c42c:	4b75      	ldr	r3, [pc, #468]	@ (800c604 <__kernel_rem_pio2+0x314>)
 800c42e:	ec51 0b10 	vmov	r0, r1, d0
 800c432:	2200      	movs	r2, #0
 800c434:	f7f4 f890 	bl	8000558 <__aeabi_dmul>
 800c438:	4602      	mov	r2, r0
 800c43a:	460b      	mov	r3, r1
 800c43c:	4630      	mov	r0, r6
 800c43e:	4639      	mov	r1, r7
 800c440:	f7f3 fed2 	bl	80001e8 <__aeabi_dsub>
 800c444:	460f      	mov	r7, r1
 800c446:	4606      	mov	r6, r0
 800c448:	f7f4 fb20 	bl	8000a8c <__aeabi_d2iz>
 800c44c:	9002      	str	r0, [sp, #8]
 800c44e:	f7f4 f819 	bl	8000484 <__aeabi_i2d>
 800c452:	4602      	mov	r2, r0
 800c454:	460b      	mov	r3, r1
 800c456:	4630      	mov	r0, r6
 800c458:	4639      	mov	r1, r7
 800c45a:	f7f3 fec5 	bl	80001e8 <__aeabi_dsub>
 800c45e:	f1bb 0f00 	cmp.w	fp, #0
 800c462:	4606      	mov	r6, r0
 800c464:	460f      	mov	r7, r1
 800c466:	dd6c      	ble.n	800c542 <__kernel_rem_pio2+0x252>
 800c468:	f108 31ff 	add.w	r1, r8, #4294967295
 800c46c:	ab0c      	add	r3, sp, #48	@ 0x30
 800c46e:	9d02      	ldr	r5, [sp, #8]
 800c470:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c474:	f1cb 0018 	rsb	r0, fp, #24
 800c478:	fa43 f200 	asr.w	r2, r3, r0
 800c47c:	4415      	add	r5, r2
 800c47e:	4082      	lsls	r2, r0
 800c480:	1a9b      	subs	r3, r3, r2
 800c482:	aa0c      	add	r2, sp, #48	@ 0x30
 800c484:	9502      	str	r5, [sp, #8]
 800c486:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c48a:	f1cb 0217 	rsb	r2, fp, #23
 800c48e:	fa43 f902 	asr.w	r9, r3, r2
 800c492:	f1b9 0f00 	cmp.w	r9, #0
 800c496:	dd64      	ble.n	800c562 <__kernel_rem_pio2+0x272>
 800c498:	9b02      	ldr	r3, [sp, #8]
 800c49a:	2200      	movs	r2, #0
 800c49c:	3301      	adds	r3, #1
 800c49e:	9302      	str	r3, [sp, #8]
 800c4a0:	4615      	mov	r5, r2
 800c4a2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c4a6:	4590      	cmp	r8, r2
 800c4a8:	f300 80b8 	bgt.w	800c61c <__kernel_rem_pio2+0x32c>
 800c4ac:	f1bb 0f00 	cmp.w	fp, #0
 800c4b0:	dd07      	ble.n	800c4c2 <__kernel_rem_pio2+0x1d2>
 800c4b2:	f1bb 0f01 	cmp.w	fp, #1
 800c4b6:	f000 80bf 	beq.w	800c638 <__kernel_rem_pio2+0x348>
 800c4ba:	f1bb 0f02 	cmp.w	fp, #2
 800c4be:	f000 80c6 	beq.w	800c64e <__kernel_rem_pio2+0x35e>
 800c4c2:	f1b9 0f02 	cmp.w	r9, #2
 800c4c6:	d14c      	bne.n	800c562 <__kernel_rem_pio2+0x272>
 800c4c8:	4632      	mov	r2, r6
 800c4ca:	463b      	mov	r3, r7
 800c4cc:	494e      	ldr	r1, [pc, #312]	@ (800c608 <__kernel_rem_pio2+0x318>)
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	f7f3 fe8a 	bl	80001e8 <__aeabi_dsub>
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	460f      	mov	r7, r1
 800c4d8:	2d00      	cmp	r5, #0
 800c4da:	d042      	beq.n	800c562 <__kernel_rem_pio2+0x272>
 800c4dc:	4658      	mov	r0, fp
 800c4de:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800c5f8 <__kernel_rem_pio2+0x308>
 800c4e2:	f000 fa5d 	bl	800c9a0 <scalbn>
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	4639      	mov	r1, r7
 800c4ea:	ec53 2b10 	vmov	r2, r3, d0
 800c4ee:	f7f3 fe7b 	bl	80001e8 <__aeabi_dsub>
 800c4f2:	4606      	mov	r6, r0
 800c4f4:	460f      	mov	r7, r1
 800c4f6:	e034      	b.n	800c562 <__kernel_rem_pio2+0x272>
 800c4f8:	4b44      	ldr	r3, [pc, #272]	@ (800c60c <__kernel_rem_pio2+0x31c>)
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c500:	f7f4 f82a 	bl	8000558 <__aeabi_dmul>
 800c504:	f7f4 fac2 	bl	8000a8c <__aeabi_d2iz>
 800c508:	f7f3 ffbc 	bl	8000484 <__aeabi_i2d>
 800c50c:	4b40      	ldr	r3, [pc, #256]	@ (800c610 <__kernel_rem_pio2+0x320>)
 800c50e:	2200      	movs	r2, #0
 800c510:	4606      	mov	r6, r0
 800c512:	460f      	mov	r7, r1
 800c514:	f7f4 f820 	bl	8000558 <__aeabi_dmul>
 800c518:	4602      	mov	r2, r0
 800c51a:	460b      	mov	r3, r1
 800c51c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c520:	f7f3 fe62 	bl	80001e8 <__aeabi_dsub>
 800c524:	f7f4 fab2 	bl	8000a8c <__aeabi_d2iz>
 800c528:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c52c:	f849 0b04 	str.w	r0, [r9], #4
 800c530:	4639      	mov	r1, r7
 800c532:	4630      	mov	r0, r6
 800c534:	f7f3 fe5a 	bl	80001ec <__adddf3>
 800c538:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c53c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c540:	e75d      	b.n	800c3fe <__kernel_rem_pio2+0x10e>
 800c542:	d107      	bne.n	800c554 <__kernel_rem_pio2+0x264>
 800c544:	f108 33ff 	add.w	r3, r8, #4294967295
 800c548:	aa0c      	add	r2, sp, #48	@ 0x30
 800c54a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c54e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800c552:	e79e      	b.n	800c492 <__kernel_rem_pio2+0x1a2>
 800c554:	4b2f      	ldr	r3, [pc, #188]	@ (800c614 <__kernel_rem_pio2+0x324>)
 800c556:	2200      	movs	r2, #0
 800c558:	f7f4 fa84 	bl	8000a64 <__aeabi_dcmpge>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	d143      	bne.n	800c5e8 <__kernel_rem_pio2+0x2f8>
 800c560:	4681      	mov	r9, r0
 800c562:	2200      	movs	r2, #0
 800c564:	2300      	movs	r3, #0
 800c566:	4630      	mov	r0, r6
 800c568:	4639      	mov	r1, r7
 800c56a:	f7f4 fa5d 	bl	8000a28 <__aeabi_dcmpeq>
 800c56e:	2800      	cmp	r0, #0
 800c570:	f000 80bf 	beq.w	800c6f2 <__kernel_rem_pio2+0x402>
 800c574:	f108 33ff 	add.w	r3, r8, #4294967295
 800c578:	2200      	movs	r2, #0
 800c57a:	9900      	ldr	r1, [sp, #0]
 800c57c:	428b      	cmp	r3, r1
 800c57e:	da6e      	bge.n	800c65e <__kernel_rem_pio2+0x36e>
 800c580:	2a00      	cmp	r2, #0
 800c582:	f000 8089 	beq.w	800c698 <__kernel_rem_pio2+0x3a8>
 800c586:	f108 38ff 	add.w	r8, r8, #4294967295
 800c58a:	ab0c      	add	r3, sp, #48	@ 0x30
 800c58c:	f1ab 0b18 	sub.w	fp, fp, #24
 800c590:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d0f6      	beq.n	800c586 <__kernel_rem_pio2+0x296>
 800c598:	4658      	mov	r0, fp
 800c59a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800c5f8 <__kernel_rem_pio2+0x308>
 800c59e:	f000 f9ff 	bl	800c9a0 <scalbn>
 800c5a2:	f108 0301 	add.w	r3, r8, #1
 800c5a6:	00da      	lsls	r2, r3, #3
 800c5a8:	9205      	str	r2, [sp, #20]
 800c5aa:	ec55 4b10 	vmov	r4, r5, d0
 800c5ae:	aa70      	add	r2, sp, #448	@ 0x1c0
 800c5b0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800c60c <__kernel_rem_pio2+0x31c>
 800c5b4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800c5b8:	4646      	mov	r6, r8
 800c5ba:	f04f 0a00 	mov.w	sl, #0
 800c5be:	2e00      	cmp	r6, #0
 800c5c0:	f280 80cf 	bge.w	800c762 <__kernel_rem_pio2+0x472>
 800c5c4:	4644      	mov	r4, r8
 800c5c6:	2c00      	cmp	r4, #0
 800c5c8:	f2c0 80fd 	blt.w	800c7c6 <__kernel_rem_pio2+0x4d6>
 800c5cc:	4b12      	ldr	r3, [pc, #72]	@ (800c618 <__kernel_rem_pio2+0x328>)
 800c5ce:	461f      	mov	r7, r3
 800c5d0:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c5d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5d6:	9306      	str	r3, [sp, #24]
 800c5d8:	f04f 0a00 	mov.w	sl, #0
 800c5dc:	f04f 0b00 	mov.w	fp, #0
 800c5e0:	2600      	movs	r6, #0
 800c5e2:	eba8 0504 	sub.w	r5, r8, r4
 800c5e6:	e0e2      	b.n	800c7ae <__kernel_rem_pio2+0x4be>
 800c5e8:	f04f 0902 	mov.w	r9, #2
 800c5ec:	e754      	b.n	800c498 <__kernel_rem_pio2+0x1a8>
 800c5ee:	bf00      	nop
	...
 800c5fc:	3ff00000 	.word	0x3ff00000
 800c600:	0800cec0 	.word	0x0800cec0
 800c604:	40200000 	.word	0x40200000
 800c608:	3ff00000 	.word	0x3ff00000
 800c60c:	3e700000 	.word	0x3e700000
 800c610:	41700000 	.word	0x41700000
 800c614:	3fe00000 	.word	0x3fe00000
 800c618:	0800ce80 	.word	0x0800ce80
 800c61c:	f854 3b04 	ldr.w	r3, [r4], #4
 800c620:	b945      	cbnz	r5, 800c634 <__kernel_rem_pio2+0x344>
 800c622:	b123      	cbz	r3, 800c62e <__kernel_rem_pio2+0x33e>
 800c624:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c628:	f844 3c04 	str.w	r3, [r4, #-4]
 800c62c:	2301      	movs	r3, #1
 800c62e:	3201      	adds	r2, #1
 800c630:	461d      	mov	r5, r3
 800c632:	e738      	b.n	800c4a6 <__kernel_rem_pio2+0x1b6>
 800c634:	1acb      	subs	r3, r1, r3
 800c636:	e7f7      	b.n	800c628 <__kernel_rem_pio2+0x338>
 800c638:	f108 32ff 	add.w	r2, r8, #4294967295
 800c63c:	ab0c      	add	r3, sp, #48	@ 0x30
 800c63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c642:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c646:	a90c      	add	r1, sp, #48	@ 0x30
 800c648:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c64c:	e739      	b.n	800c4c2 <__kernel_rem_pio2+0x1d2>
 800c64e:	f108 32ff 	add.w	r2, r8, #4294967295
 800c652:	ab0c      	add	r3, sp, #48	@ 0x30
 800c654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c658:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c65c:	e7f3      	b.n	800c646 <__kernel_rem_pio2+0x356>
 800c65e:	a90c      	add	r1, sp, #48	@ 0x30
 800c660:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c664:	3b01      	subs	r3, #1
 800c666:	430a      	orrs	r2, r1
 800c668:	e787      	b.n	800c57a <__kernel_rem_pio2+0x28a>
 800c66a:	3401      	adds	r4, #1
 800c66c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c670:	2a00      	cmp	r2, #0
 800c672:	d0fa      	beq.n	800c66a <__kernel_rem_pio2+0x37a>
 800c674:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c676:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c67a:	eb0d 0503 	add.w	r5, sp, r3
 800c67e:	9b06      	ldr	r3, [sp, #24]
 800c680:	aa20      	add	r2, sp, #128	@ 0x80
 800c682:	4443      	add	r3, r8
 800c684:	f108 0701 	add.w	r7, r8, #1
 800c688:	3d98      	subs	r5, #152	@ 0x98
 800c68a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800c68e:	4444      	add	r4, r8
 800c690:	42bc      	cmp	r4, r7
 800c692:	da04      	bge.n	800c69e <__kernel_rem_pio2+0x3ae>
 800c694:	46a0      	mov	r8, r4
 800c696:	e6a2      	b.n	800c3de <__kernel_rem_pio2+0xee>
 800c698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c69a:	2401      	movs	r4, #1
 800c69c:	e7e6      	b.n	800c66c <__kernel_rem_pio2+0x37c>
 800c69e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6a0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c6a4:	f7f3 feee 	bl	8000484 <__aeabi_i2d>
 800c6a8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800c970 <__kernel_rem_pio2+0x680>
 800c6ac:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c6b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c6b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c6b8:	46b2      	mov	sl, r6
 800c6ba:	f04f 0800 	mov.w	r8, #0
 800c6be:	9b05      	ldr	r3, [sp, #20]
 800c6c0:	4598      	cmp	r8, r3
 800c6c2:	dd05      	ble.n	800c6d0 <__kernel_rem_pio2+0x3e0>
 800c6c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c6c8:	3701      	adds	r7, #1
 800c6ca:	eca5 7b02 	vstmia	r5!, {d7}
 800c6ce:	e7df      	b.n	800c690 <__kernel_rem_pio2+0x3a0>
 800c6d0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800c6d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c6d8:	f7f3 ff3e 	bl	8000558 <__aeabi_dmul>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	460b      	mov	r3, r1
 800c6e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6e4:	f7f3 fd82 	bl	80001ec <__adddf3>
 800c6e8:	f108 0801 	add.w	r8, r8, #1
 800c6ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6f0:	e7e5      	b.n	800c6be <__kernel_rem_pio2+0x3ce>
 800c6f2:	f1cb 0000 	rsb	r0, fp, #0
 800c6f6:	ec47 6b10 	vmov	d0, r6, r7
 800c6fa:	f000 f951 	bl	800c9a0 <scalbn>
 800c6fe:	ec55 4b10 	vmov	r4, r5, d0
 800c702:	4b9d      	ldr	r3, [pc, #628]	@ (800c978 <__kernel_rem_pio2+0x688>)
 800c704:	2200      	movs	r2, #0
 800c706:	4620      	mov	r0, r4
 800c708:	4629      	mov	r1, r5
 800c70a:	f7f4 f9ab 	bl	8000a64 <__aeabi_dcmpge>
 800c70e:	b300      	cbz	r0, 800c752 <__kernel_rem_pio2+0x462>
 800c710:	4b9a      	ldr	r3, [pc, #616]	@ (800c97c <__kernel_rem_pio2+0x68c>)
 800c712:	2200      	movs	r2, #0
 800c714:	4620      	mov	r0, r4
 800c716:	4629      	mov	r1, r5
 800c718:	f7f3 ff1e 	bl	8000558 <__aeabi_dmul>
 800c71c:	f7f4 f9b6 	bl	8000a8c <__aeabi_d2iz>
 800c720:	4606      	mov	r6, r0
 800c722:	f7f3 feaf 	bl	8000484 <__aeabi_i2d>
 800c726:	4b94      	ldr	r3, [pc, #592]	@ (800c978 <__kernel_rem_pio2+0x688>)
 800c728:	2200      	movs	r2, #0
 800c72a:	f7f3 ff15 	bl	8000558 <__aeabi_dmul>
 800c72e:	460b      	mov	r3, r1
 800c730:	4602      	mov	r2, r0
 800c732:	4629      	mov	r1, r5
 800c734:	4620      	mov	r0, r4
 800c736:	f7f3 fd57 	bl	80001e8 <__aeabi_dsub>
 800c73a:	f7f4 f9a7 	bl	8000a8c <__aeabi_d2iz>
 800c73e:	ab0c      	add	r3, sp, #48	@ 0x30
 800c740:	f10b 0b18 	add.w	fp, fp, #24
 800c744:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c748:	f108 0801 	add.w	r8, r8, #1
 800c74c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c750:	e722      	b.n	800c598 <__kernel_rem_pio2+0x2a8>
 800c752:	4620      	mov	r0, r4
 800c754:	4629      	mov	r1, r5
 800c756:	f7f4 f999 	bl	8000a8c <__aeabi_d2iz>
 800c75a:	ab0c      	add	r3, sp, #48	@ 0x30
 800c75c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c760:	e71a      	b.n	800c598 <__kernel_rem_pio2+0x2a8>
 800c762:	ab0c      	add	r3, sp, #48	@ 0x30
 800c764:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c768:	f7f3 fe8c 	bl	8000484 <__aeabi_i2d>
 800c76c:	4622      	mov	r2, r4
 800c76e:	462b      	mov	r3, r5
 800c770:	f7f3 fef2 	bl	8000558 <__aeabi_dmul>
 800c774:	4652      	mov	r2, sl
 800c776:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c77a:	465b      	mov	r3, fp
 800c77c:	4620      	mov	r0, r4
 800c77e:	4629      	mov	r1, r5
 800c780:	f7f3 feea 	bl	8000558 <__aeabi_dmul>
 800c784:	3e01      	subs	r6, #1
 800c786:	4604      	mov	r4, r0
 800c788:	460d      	mov	r5, r1
 800c78a:	e718      	b.n	800c5be <__kernel_rem_pio2+0x2ce>
 800c78c:	9906      	ldr	r1, [sp, #24]
 800c78e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c792:	9106      	str	r1, [sp, #24]
 800c794:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c798:	f7f3 fede 	bl	8000558 <__aeabi_dmul>
 800c79c:	4602      	mov	r2, r0
 800c79e:	460b      	mov	r3, r1
 800c7a0:	4650      	mov	r0, sl
 800c7a2:	4659      	mov	r1, fp
 800c7a4:	f7f3 fd22 	bl	80001ec <__adddf3>
 800c7a8:	3601      	adds	r6, #1
 800c7aa:	4682      	mov	sl, r0
 800c7ac:	468b      	mov	fp, r1
 800c7ae:	9b00      	ldr	r3, [sp, #0]
 800c7b0:	429e      	cmp	r6, r3
 800c7b2:	dc01      	bgt.n	800c7b8 <__kernel_rem_pio2+0x4c8>
 800c7b4:	42b5      	cmp	r5, r6
 800c7b6:	dae9      	bge.n	800c78c <__kernel_rem_pio2+0x49c>
 800c7b8:	ab48      	add	r3, sp, #288	@ 0x120
 800c7ba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c7be:	e9c5 ab00 	strd	sl, fp, [r5]
 800c7c2:	3c01      	subs	r4, #1
 800c7c4:	e6ff      	b.n	800c5c6 <__kernel_rem_pio2+0x2d6>
 800c7c6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	dc0b      	bgt.n	800c7e4 <__kernel_rem_pio2+0x4f4>
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	dc39      	bgt.n	800c844 <__kernel_rem_pio2+0x554>
 800c7d0:	d05d      	beq.n	800c88e <__kernel_rem_pio2+0x59e>
 800c7d2:	9b02      	ldr	r3, [sp, #8]
 800c7d4:	f003 0007 	and.w	r0, r3, #7
 800c7d8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c7dc:	ecbd 8b02 	vpop	{d8}
 800c7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	d1f3      	bne.n	800c7d2 <__kernel_rem_pio2+0x4e2>
 800c7ea:	9b05      	ldr	r3, [sp, #20]
 800c7ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c7f0:	eb0d 0403 	add.w	r4, sp, r3
 800c7f4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c7f8:	4625      	mov	r5, r4
 800c7fa:	46c2      	mov	sl, r8
 800c7fc:	f1ba 0f00 	cmp.w	sl, #0
 800c800:	f1a5 0508 	sub.w	r5, r5, #8
 800c804:	dc6b      	bgt.n	800c8de <__kernel_rem_pio2+0x5ee>
 800c806:	4645      	mov	r5, r8
 800c808:	2d01      	cmp	r5, #1
 800c80a:	f1a4 0408 	sub.w	r4, r4, #8
 800c80e:	f300 8087 	bgt.w	800c920 <__kernel_rem_pio2+0x630>
 800c812:	9c05      	ldr	r4, [sp, #20]
 800c814:	ab48      	add	r3, sp, #288	@ 0x120
 800c816:	441c      	add	r4, r3
 800c818:	2000      	movs	r0, #0
 800c81a:	2100      	movs	r1, #0
 800c81c:	f1b8 0f01 	cmp.w	r8, #1
 800c820:	f300 809c 	bgt.w	800c95c <__kernel_rem_pio2+0x66c>
 800c824:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800c828:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800c82c:	f1b9 0f00 	cmp.w	r9, #0
 800c830:	f040 80a6 	bne.w	800c980 <__kernel_rem_pio2+0x690>
 800c834:	9b04      	ldr	r3, [sp, #16]
 800c836:	e9c3 7800 	strd	r7, r8, [r3]
 800c83a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c83e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c842:	e7c6      	b.n	800c7d2 <__kernel_rem_pio2+0x4e2>
 800c844:	9d05      	ldr	r5, [sp, #20]
 800c846:	ab48      	add	r3, sp, #288	@ 0x120
 800c848:	441d      	add	r5, r3
 800c84a:	4644      	mov	r4, r8
 800c84c:	2000      	movs	r0, #0
 800c84e:	2100      	movs	r1, #0
 800c850:	2c00      	cmp	r4, #0
 800c852:	da35      	bge.n	800c8c0 <__kernel_rem_pio2+0x5d0>
 800c854:	f1b9 0f00 	cmp.w	r9, #0
 800c858:	d038      	beq.n	800c8cc <__kernel_rem_pio2+0x5dc>
 800c85a:	4602      	mov	r2, r0
 800c85c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c860:	9c04      	ldr	r4, [sp, #16]
 800c862:	e9c4 2300 	strd	r2, r3, [r4]
 800c866:	4602      	mov	r2, r0
 800c868:	460b      	mov	r3, r1
 800c86a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c86e:	f7f3 fcbb 	bl	80001e8 <__aeabi_dsub>
 800c872:	ad4a      	add	r5, sp, #296	@ 0x128
 800c874:	2401      	movs	r4, #1
 800c876:	45a0      	cmp	r8, r4
 800c878:	da2b      	bge.n	800c8d2 <__kernel_rem_pio2+0x5e2>
 800c87a:	f1b9 0f00 	cmp.w	r9, #0
 800c87e:	d002      	beq.n	800c886 <__kernel_rem_pio2+0x596>
 800c880:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c884:	4619      	mov	r1, r3
 800c886:	9b04      	ldr	r3, [sp, #16]
 800c888:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c88c:	e7a1      	b.n	800c7d2 <__kernel_rem_pio2+0x4e2>
 800c88e:	9c05      	ldr	r4, [sp, #20]
 800c890:	ab48      	add	r3, sp, #288	@ 0x120
 800c892:	441c      	add	r4, r3
 800c894:	2000      	movs	r0, #0
 800c896:	2100      	movs	r1, #0
 800c898:	f1b8 0f00 	cmp.w	r8, #0
 800c89c:	da09      	bge.n	800c8b2 <__kernel_rem_pio2+0x5c2>
 800c89e:	f1b9 0f00 	cmp.w	r9, #0
 800c8a2:	d002      	beq.n	800c8aa <__kernel_rem_pio2+0x5ba>
 800c8a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	9b04      	ldr	r3, [sp, #16]
 800c8ac:	e9c3 0100 	strd	r0, r1, [r3]
 800c8b0:	e78f      	b.n	800c7d2 <__kernel_rem_pio2+0x4e2>
 800c8b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c8b6:	f7f3 fc99 	bl	80001ec <__adddf3>
 800c8ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800c8be:	e7eb      	b.n	800c898 <__kernel_rem_pio2+0x5a8>
 800c8c0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c8c4:	f7f3 fc92 	bl	80001ec <__adddf3>
 800c8c8:	3c01      	subs	r4, #1
 800c8ca:	e7c1      	b.n	800c850 <__kernel_rem_pio2+0x560>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	e7c6      	b.n	800c860 <__kernel_rem_pio2+0x570>
 800c8d2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c8d6:	f7f3 fc89 	bl	80001ec <__adddf3>
 800c8da:	3401      	adds	r4, #1
 800c8dc:	e7cb      	b.n	800c876 <__kernel_rem_pio2+0x586>
 800c8de:	ed95 7b00 	vldr	d7, [r5]
 800c8e2:	ed8d 7b00 	vstr	d7, [sp]
 800c8e6:	ed95 7b02 	vldr	d7, [r5, #8]
 800c8ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8ee:	ec53 2b17 	vmov	r2, r3, d7
 800c8f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c8f6:	f7f3 fc79 	bl	80001ec <__adddf3>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	4606      	mov	r6, r0
 800c900:	460f      	mov	r7, r1
 800c902:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c906:	f7f3 fc6f 	bl	80001e8 <__aeabi_dsub>
 800c90a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c90e:	f7f3 fc6d 	bl	80001ec <__adddf3>
 800c912:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c916:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c91a:	e9c5 6700 	strd	r6, r7, [r5]
 800c91e:	e76d      	b.n	800c7fc <__kernel_rem_pio2+0x50c>
 800c920:	ed94 7b00 	vldr	d7, [r4]
 800c924:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c928:	ec51 0b17 	vmov	r0, r1, d7
 800c92c:	4652      	mov	r2, sl
 800c92e:	465b      	mov	r3, fp
 800c930:	ed8d 7b00 	vstr	d7, [sp]
 800c934:	f7f3 fc5a 	bl	80001ec <__adddf3>
 800c938:	4602      	mov	r2, r0
 800c93a:	460b      	mov	r3, r1
 800c93c:	4606      	mov	r6, r0
 800c93e:	460f      	mov	r7, r1
 800c940:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c944:	f7f3 fc50 	bl	80001e8 <__aeabi_dsub>
 800c948:	4652      	mov	r2, sl
 800c94a:	465b      	mov	r3, fp
 800c94c:	f7f3 fc4e 	bl	80001ec <__adddf3>
 800c950:	3d01      	subs	r5, #1
 800c952:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c956:	e9c4 6700 	strd	r6, r7, [r4]
 800c95a:	e755      	b.n	800c808 <__kernel_rem_pio2+0x518>
 800c95c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c960:	f7f3 fc44 	bl	80001ec <__adddf3>
 800c964:	f108 38ff 	add.w	r8, r8, #4294967295
 800c968:	e758      	b.n	800c81c <__kernel_rem_pio2+0x52c>
 800c96a:	bf00      	nop
 800c96c:	f3af 8000 	nop.w
	...
 800c978:	41700000 	.word	0x41700000
 800c97c:	3e700000 	.word	0x3e700000
 800c980:	9b04      	ldr	r3, [sp, #16]
 800c982:	9a04      	ldr	r2, [sp, #16]
 800c984:	601f      	str	r7, [r3, #0]
 800c986:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800c98a:	605c      	str	r4, [r3, #4]
 800c98c:	609d      	str	r5, [r3, #8]
 800c98e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c992:	60d3      	str	r3, [r2, #12]
 800c994:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c998:	6110      	str	r0, [r2, #16]
 800c99a:	6153      	str	r3, [r2, #20]
 800c99c:	e719      	b.n	800c7d2 <__kernel_rem_pio2+0x4e2>
 800c99e:	bf00      	nop

0800c9a0 <scalbn>:
 800c9a0:	b570      	push	{r4, r5, r6, lr}
 800c9a2:	ec55 4b10 	vmov	r4, r5, d0
 800c9a6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c9aa:	4606      	mov	r6, r0
 800c9ac:	462b      	mov	r3, r5
 800c9ae:	b991      	cbnz	r1, 800c9d6 <scalbn+0x36>
 800c9b0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c9b4:	4323      	orrs	r3, r4
 800c9b6:	d03d      	beq.n	800ca34 <scalbn+0x94>
 800c9b8:	4b35      	ldr	r3, [pc, #212]	@ (800ca90 <scalbn+0xf0>)
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	4629      	mov	r1, r5
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f7f3 fdca 	bl	8000558 <__aeabi_dmul>
 800c9c4:	4b33      	ldr	r3, [pc, #204]	@ (800ca94 <scalbn+0xf4>)
 800c9c6:	429e      	cmp	r6, r3
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	460d      	mov	r5, r1
 800c9cc:	da0f      	bge.n	800c9ee <scalbn+0x4e>
 800c9ce:	a328      	add	r3, pc, #160	@ (adr r3, 800ca70 <scalbn+0xd0>)
 800c9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d4:	e01e      	b.n	800ca14 <scalbn+0x74>
 800c9d6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c9da:	4291      	cmp	r1, r2
 800c9dc:	d10b      	bne.n	800c9f6 <scalbn+0x56>
 800c9de:	4622      	mov	r2, r4
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	4629      	mov	r1, r5
 800c9e4:	f7f3 fc02 	bl	80001ec <__adddf3>
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	460d      	mov	r5, r1
 800c9ec:	e022      	b.n	800ca34 <scalbn+0x94>
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c9f4:	3936      	subs	r1, #54	@ 0x36
 800c9f6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c9fa:	4296      	cmp	r6, r2
 800c9fc:	dd0d      	ble.n	800ca1a <scalbn+0x7a>
 800c9fe:	2d00      	cmp	r5, #0
 800ca00:	a11d      	add	r1, pc, #116	@ (adr r1, 800ca78 <scalbn+0xd8>)
 800ca02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca06:	da02      	bge.n	800ca0e <scalbn+0x6e>
 800ca08:	a11d      	add	r1, pc, #116	@ (adr r1, 800ca80 <scalbn+0xe0>)
 800ca0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca0e:	a31a      	add	r3, pc, #104	@ (adr r3, 800ca78 <scalbn+0xd8>)
 800ca10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca14:	f7f3 fda0 	bl	8000558 <__aeabi_dmul>
 800ca18:	e7e6      	b.n	800c9e8 <scalbn+0x48>
 800ca1a:	1872      	adds	r2, r6, r1
 800ca1c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ca20:	428a      	cmp	r2, r1
 800ca22:	dcec      	bgt.n	800c9fe <scalbn+0x5e>
 800ca24:	2a00      	cmp	r2, #0
 800ca26:	dd08      	ble.n	800ca3a <scalbn+0x9a>
 800ca28:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ca2c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ca30:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ca34:	ec45 4b10 	vmov	d0, r4, r5
 800ca38:	bd70      	pop	{r4, r5, r6, pc}
 800ca3a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ca3e:	da08      	bge.n	800ca52 <scalbn+0xb2>
 800ca40:	2d00      	cmp	r5, #0
 800ca42:	a10b      	add	r1, pc, #44	@ (adr r1, 800ca70 <scalbn+0xd0>)
 800ca44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca48:	dac1      	bge.n	800c9ce <scalbn+0x2e>
 800ca4a:	a10f      	add	r1, pc, #60	@ (adr r1, 800ca88 <scalbn+0xe8>)
 800ca4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca50:	e7bd      	b.n	800c9ce <scalbn+0x2e>
 800ca52:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ca56:	3236      	adds	r2, #54	@ 0x36
 800ca58:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ca5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ca60:	4620      	mov	r0, r4
 800ca62:	4b0d      	ldr	r3, [pc, #52]	@ (800ca98 <scalbn+0xf8>)
 800ca64:	4629      	mov	r1, r5
 800ca66:	2200      	movs	r2, #0
 800ca68:	e7d4      	b.n	800ca14 <scalbn+0x74>
 800ca6a:	bf00      	nop
 800ca6c:	f3af 8000 	nop.w
 800ca70:	c2f8f359 	.word	0xc2f8f359
 800ca74:	01a56e1f 	.word	0x01a56e1f
 800ca78:	8800759c 	.word	0x8800759c
 800ca7c:	7e37e43c 	.word	0x7e37e43c
 800ca80:	8800759c 	.word	0x8800759c
 800ca84:	fe37e43c 	.word	0xfe37e43c
 800ca88:	c2f8f359 	.word	0xc2f8f359
 800ca8c:	81a56e1f 	.word	0x81a56e1f
 800ca90:	43500000 	.word	0x43500000
 800ca94:	ffff3cb0 	.word	0xffff3cb0
 800ca98:	3c900000 	.word	0x3c900000
 800ca9c:	00000000 	.word	0x00000000

0800caa0 <floor>:
 800caa0:	ec51 0b10 	vmov	r0, r1, d0
 800caa4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800caa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caac:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800cab0:	2e13      	cmp	r6, #19
 800cab2:	460c      	mov	r4, r1
 800cab4:	4605      	mov	r5, r0
 800cab6:	4680      	mov	r8, r0
 800cab8:	dc34      	bgt.n	800cb24 <floor+0x84>
 800caba:	2e00      	cmp	r6, #0
 800cabc:	da17      	bge.n	800caee <floor+0x4e>
 800cabe:	a332      	add	r3, pc, #200	@ (adr r3, 800cb88 <floor+0xe8>)
 800cac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac4:	f7f3 fb92 	bl	80001ec <__adddf3>
 800cac8:	2200      	movs	r2, #0
 800caca:	2300      	movs	r3, #0
 800cacc:	f7f3 ffd4 	bl	8000a78 <__aeabi_dcmpgt>
 800cad0:	b150      	cbz	r0, 800cae8 <floor+0x48>
 800cad2:	2c00      	cmp	r4, #0
 800cad4:	da55      	bge.n	800cb82 <floor+0xe2>
 800cad6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800cada:	432c      	orrs	r4, r5
 800cadc:	2500      	movs	r5, #0
 800cade:	42ac      	cmp	r4, r5
 800cae0:	4c2b      	ldr	r4, [pc, #172]	@ (800cb90 <floor+0xf0>)
 800cae2:	bf08      	it	eq
 800cae4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800cae8:	4621      	mov	r1, r4
 800caea:	4628      	mov	r0, r5
 800caec:	e023      	b.n	800cb36 <floor+0x96>
 800caee:	4f29      	ldr	r7, [pc, #164]	@ (800cb94 <floor+0xf4>)
 800caf0:	4137      	asrs	r7, r6
 800caf2:	ea01 0307 	and.w	r3, r1, r7
 800caf6:	4303      	orrs	r3, r0
 800caf8:	d01d      	beq.n	800cb36 <floor+0x96>
 800cafa:	a323      	add	r3, pc, #140	@ (adr r3, 800cb88 <floor+0xe8>)
 800cafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb00:	f7f3 fb74 	bl	80001ec <__adddf3>
 800cb04:	2200      	movs	r2, #0
 800cb06:	2300      	movs	r3, #0
 800cb08:	f7f3 ffb6 	bl	8000a78 <__aeabi_dcmpgt>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d0eb      	beq.n	800cae8 <floor+0x48>
 800cb10:	2c00      	cmp	r4, #0
 800cb12:	bfbe      	ittt	lt
 800cb14:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800cb18:	4133      	asrlt	r3, r6
 800cb1a:	18e4      	addlt	r4, r4, r3
 800cb1c:	ea24 0407 	bic.w	r4, r4, r7
 800cb20:	2500      	movs	r5, #0
 800cb22:	e7e1      	b.n	800cae8 <floor+0x48>
 800cb24:	2e33      	cmp	r6, #51	@ 0x33
 800cb26:	dd0a      	ble.n	800cb3e <floor+0x9e>
 800cb28:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800cb2c:	d103      	bne.n	800cb36 <floor+0x96>
 800cb2e:	4602      	mov	r2, r0
 800cb30:	460b      	mov	r3, r1
 800cb32:	f7f3 fb5b 	bl	80001ec <__adddf3>
 800cb36:	ec41 0b10 	vmov	d0, r0, r1
 800cb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb3e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800cb42:	f04f 37ff 	mov.w	r7, #4294967295
 800cb46:	40df      	lsrs	r7, r3
 800cb48:	4207      	tst	r7, r0
 800cb4a:	d0f4      	beq.n	800cb36 <floor+0x96>
 800cb4c:	a30e      	add	r3, pc, #56	@ (adr r3, 800cb88 <floor+0xe8>)
 800cb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb52:	f7f3 fb4b 	bl	80001ec <__adddf3>
 800cb56:	2200      	movs	r2, #0
 800cb58:	2300      	movs	r3, #0
 800cb5a:	f7f3 ff8d 	bl	8000a78 <__aeabi_dcmpgt>
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	d0c2      	beq.n	800cae8 <floor+0x48>
 800cb62:	2c00      	cmp	r4, #0
 800cb64:	da0a      	bge.n	800cb7c <floor+0xdc>
 800cb66:	2e14      	cmp	r6, #20
 800cb68:	d101      	bne.n	800cb6e <floor+0xce>
 800cb6a:	3401      	adds	r4, #1
 800cb6c:	e006      	b.n	800cb7c <floor+0xdc>
 800cb6e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800cb72:	2301      	movs	r3, #1
 800cb74:	40b3      	lsls	r3, r6
 800cb76:	441d      	add	r5, r3
 800cb78:	4545      	cmp	r5, r8
 800cb7a:	d3f6      	bcc.n	800cb6a <floor+0xca>
 800cb7c:	ea25 0507 	bic.w	r5, r5, r7
 800cb80:	e7b2      	b.n	800cae8 <floor+0x48>
 800cb82:	2500      	movs	r5, #0
 800cb84:	462c      	mov	r4, r5
 800cb86:	e7af      	b.n	800cae8 <floor+0x48>
 800cb88:	8800759c 	.word	0x8800759c
 800cb8c:	7e37e43c 	.word	0x7e37e43c
 800cb90:	bff00000 	.word	0xbff00000
 800cb94:	000fffff 	.word	0x000fffff

0800cb98 <_init>:
 800cb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb9a:	bf00      	nop
 800cb9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb9e:	bc08      	pop	{r3}
 800cba0:	469e      	mov	lr, r3
 800cba2:	4770      	bx	lr

0800cba4 <_fini>:
 800cba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba6:	bf00      	nop
 800cba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbaa:	bc08      	pop	{r3}
 800cbac:	469e      	mov	lr, r3
 800cbae:	4770      	bx	lr
